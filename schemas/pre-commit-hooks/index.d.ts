/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * @minItems 1
 */
export type HttpsJsonSchemastoreOrgPreCommitHooksJson = [
  {
    /**
     * id of the hook - used in pre-commit-config.yaml.
     */
    id: string;
    /**
     * name of the hook - shown during hook execution.
     */
    name: string;
    /**
     * entry point - the executable to run. Can also contain arguments that will not be overridden such as `entry: autopep8 -i`.
     */
    entry: string;
    /**
     * language of the hook - tells pre-commit how to install the hook.
     */
    language:
      | "conda"
      | "coursier"
      | "dart"
      | "docker"
      | "docker_image"
      | "dotnet"
      | "fail"
      | "golang"
      | "lua"
      | "node"
      | "perl"
      | "python"
      | "python_venv"
      | "r"
      | "ruby"
      | "rust"
      | "swift"
      | "pygrep"
      | "script"
      | "system";
    /**
     * (optional) allows the hook to be referenced using an additional id.
     */
    alias?: string;
    /**
     * (optional) the pattern of files to run on.
     */
    files?: string;
    /**
     * (optional) exclude files that were matched by files.
     */
    exclude?: string;
    types?: FileTypes;
    types_or?: FileTypes1;
    exclude_types?: FileTypes2;
    /**
     * (optional) a list of dependencies that will be installed in the environment where this hook gets run. One useful application is to install plugins for hooks such as eslint.
     */
    additional_dependencies?: string[];
    /**
     * (optional) if true this hook will run even if there are no matching files.
     */
    always_run?: boolean;
    /**
     * (optional) if true this hook will run even if there are no matching files.
     */
    fail_fast?: boolean;
    /**
     * (optional) if true, forces the output of the hook to be printed even when the hook passes.
     */
    verbose?: boolean;
    /**
     * (optional) if false no filenames will be passed to the hook.
     */
    pass_filenames?: boolean;
    /**
     * (optional) if true this hook will execute using a single process instead of in parallel.
     */
    require_serial?: boolean;
    /**
     * (optional) description of the hook. Used for metadata purposes only.
     */
    description?: string;
    /**
     * (optional) see Overriding language version at https://pre-commit.com/#overriding-language-version
     */
    language_version?: string;
    /**
     * (optional) if present, the hook output will additionally be written to a file.
     */
    log_file?: string;
    /**
     * (optional) allows one to indicate a minimum compatible pre-commit version.
     */
    minimum_pre_commit_version?: string;
    /**
     * (optional) list of additional parameters to pass to the hook.
     */
    args?: string[];
    stages?: Stages;
  },
  ...{
    /**
     * id of the hook - used in pre-commit-config.yaml.
     */
    id: string;
    /**
     * name of the hook - shown during hook execution.
     */
    name: string;
    /**
     * entry point - the executable to run. Can also contain arguments that will not be overridden such as `entry: autopep8 -i`.
     */
    entry: string;
    /**
     * language of the hook - tells pre-commit how to install the hook.
     */
    language:
      | "conda"
      | "coursier"
      | "dart"
      | "docker"
      | "docker_image"
      | "dotnet"
      | "fail"
      | "golang"
      | "lua"
      | "node"
      | "perl"
      | "python"
      | "python_venv"
      | "r"
      | "ruby"
      | "rust"
      | "swift"
      | "pygrep"
      | "script"
      | "system";
    /**
     * (optional) allows the hook to be referenced using an additional id.
     */
    alias?: string;
    /**
     * (optional) the pattern of files to run on.
     */
    files?: string;
    /**
     * (optional) exclude files that were matched by files.
     */
    exclude?: string;
    types?: FileTypes;
    types_or?: FileTypes1;
    exclude_types?: FileTypes2;
    /**
     * (optional) a list of dependencies that will be installed in the environment where this hook gets run. One useful application is to install plugins for hooks such as eslint.
     */
    additional_dependencies?: string[];
    /**
     * (optional) if true this hook will run even if there are no matching files.
     */
    always_run?: boolean;
    /**
     * (optional) if true this hook will run even if there are no matching files.
     */
    fail_fast?: boolean;
    /**
     * (optional) if true, forces the output of the hook to be printed even when the hook passes.
     */
    verbose?: boolean;
    /**
     * (optional) if false no filenames will be passed to the hook.
     */
    pass_filenames?: boolean;
    /**
     * (optional) if true this hook will execute using a single process instead of in parallel.
     */
    require_serial?: boolean;
    /**
     * (optional) description of the hook. Used for metadata purposes only.
     */
    description?: string;
    /**
     * (optional) see Overriding language version at https://pre-commit.com/#overriding-language-version
     */
    language_version?: string;
    /**
     * (optional) if present, the hook output will additionally be written to a file.
     */
    log_file?: string;
    /**
     * (optional) allows one to indicate a minimum compatible pre-commit version.
     */
    minimum_pre_commit_version?: string;
    /**
     * (optional) list of additional parameters to pass to the hook.
     */
    args?: string[];
    stages?: Stages;
  }[]
];
export type FileType =
  | "adobe-illustrator"
  | "alpm"
  | "apinotes"
  | "asar"
  | "asciidoc"
  | "ash"
  | "asm"
  | "aspectj"
  | "audio"
  | "avif"
  | "awk"
  | "babelrc"
  | "bash"
  | "batch"
  | "bats"
  | "bazel"
  | "bazelrc"
  | "bib"
  | "binary"
  | "bitmap"
  | "bowerrc"
  | "browserslistrc"
  | "bzip2"
  | "c"
  | "c#"
  | "c++"
  | "c2hs"
  | "cbsd"
  | "clojure"
  | "clojurescript"
  | "cmake"
  | "codespellrc"
  | "coffee"
  | "coveragerc"
  | "crystal"
  | "csh"
  | "cson"
  | "csproj"
  | "css"
  | "csslintrc"
  | "csv"
  | "cuda"
  | "cython"
  | "dart"
  | "dash"
  | "def"
  | "diff"
  | "directory"
  | "dockerfile"
  | "dockerignore"
  | "dotenv"
  | "dtd"
  | "editorconfig"
  | "edn"
  | "ejs"
  | "eot"
  | "eps"
  | "erb"
  | "executable"
  | "expect"
  | "file"
  | "fish"
  | "flake8"
  | "gdscript"
  | "geojson"
  | "gherkin"
  | "gif"
  | "gitattributes"
  | "gitconfig"
  | "gitignore"
  | "gitlint"
  | "gitmodules"
  | "go"
  | "go-mod"
  | "go-sum"
  | "gotmpl"
  | "gpx"
  | "graphql"
  | "groovy"
  | "gyb"
  | "gyp"
  | "gzip"
  | "handlebars"
  | "haskell"
  | "hcl"
  | "header"
  | "hgrc"
  | "html"
  | "icalendar"
  | "icns"
  | "icon"
  | "idl"
  | "idris"
  | "image"
  | "inc"
  | "ini"
  | "inl"
  | "ino"
  | "inx"
  | "jade"
  | "jar"
  | "java"
  | "java-properties"
  | "javascript"
  | "jenkins"
  | "jinja"
  | "jpeg"
  | "jshintrc"
  | "json"
  | "json5"
  | "jsonnet"
  | "jsx"
  | "jupyter"
  | "kml"
  | "kotlin"
  | "ksh"
  | "lean"
  | "lektor"
  | "lektorproject"
  | "less"
  | "liquid"
  | "literate-haskell"
  | "lua"
  | "mailmap"
  | "makefile"
  | "manifest"
  | "map"
  | "markdown"
  | "mdx"
  | "mention-bot"
  | "mib"
  | "modulemap"
  | "musescore"
  | "myst"
  | "ngdoc"
  | "nim"
  | "nimble"
  | "nix"
  | "non-executable"
  | "npmignore"
  | "nunjucks"
  | "objective-c"
  | "objective-c++"
  | "ocaml"
  | "otf"
  | "p12"
  | "pdbrc"
  | "pdf"
  | "pem"
  | "perl"
  | "php"
  | "pkgbuild"
  | "plain-text"
  | "plantuml"
  | "plist"
  | "png"
  | "pofile"
  | "powershell"
  | "prettierignore"
  | "prisma"
  | "proto"
  | "puppet"
  | "purescript"
  | "pyi"
  | "pylintrc"
  | "pypirc"
  | "pyproj"
  | "python"
  | "python2"
  | "python3"
  | "pyz"
  | "qml"
  | "r"
  | "relax-ng"
  | "rst"
  | "ruby"
  | "rust"
  | "salt"
  | "sass"
  | "sbt"
  | "scala"
  | "scheme"
  | "scss"
  | "sh"
  | "shell"
  | "sln"
  | "socket"
  | "solidity"
  | "spec"
  | "sql"
  | "stylus"
  | "svelte"
  | "svg"
  | "swf"
  | "swift"
  | "swiftdeps"
  | "symlink"
  | "system-verilog"
  | "tar"
  | "tcsh"
  | "terraform"
  | "tex"
  | "text"
  | "thrift"
  | "tiff"
  | "toml"
  | "ts"
  | "tsv"
  | "tsx"
  | "ttf"
  | "twig"
  | "twisted"
  | "txsprofile"
  | "urdf"
  | "vb"
  | "vbproj"
  | "vcxproj"
  | "vdx"
  | "verilog"
  | "vhdl"
  | "vim"
  | "vtl"
  | "vue"
  | "wav"
  | "webp"
  | "wheel"
  | "wkt"
  | "woff"
  | "woff2"
  | "wsgi"
  | "xhtml"
  | "xml"
  | "xquery"
  | "xsd"
  | "xsl"
  | "yaml"
  | "yamllint"
  | "yang"
  | "yin"
  | "zcml"
  | "zig"
  | "zip"
  | "zpt"
  | "zsh";
/**
 * (optional) list of file types to run on (AND).
 */
export type FileTypes = FileType[];
/**
 * (optional) list of file types to run on (OR).
 */
export type FileTypes1 = FileType[];
/**
 * (optional) pattern of files to exclude.
 */
export type FileTypes2 = FileType[];
export type Stage =
  | "commit"
  | "merge-commit"
  | "push"
  | "prepare-commit-msg"
  | "commit-msg"
  | "post-checkout"
  | "post-commit"
  | "post-merge"
  | "post-rewrite"
  | "manual";
/**
 * (optional) confines the hook to the commit, merge-commit, push, prepare-commit-msg, commit-msg, post-checkout, post-commit, post-merge, post-rewrite, or manual stage. See Confining hooks to run at certain stages in https://pre-commit.com/#confining-hooks-to-run-at-certain-stages
 */
export type Stages = Stage[];

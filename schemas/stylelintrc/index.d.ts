/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` ".*".
 */
export type SimpleArrayStringRule = string[];

export interface JSONSchemaForTheStylelintConfigurationFiles {
  /**
   * Your configuration can extend an existing configuration(s) (whether your own or a third-party config)
   */
  extends?: string | SimpleArrayStringRule;
  /**
   * Plugins are rules or sets of rules built by the community that support methodologies, toolsets, non-standard CSS features, or very specific use cases
   */
  plugins?: string[];
  /**
   * Processors are functions that hook into stylelint's pipeline, modifying code on its way into stylelint and modifying results on their way out
   */
  processors?: (string | [string])[];
  /**
   * Provide a glob or array of globs to ignore specific files
   */
  ignoreFiles?: string | SimpleArrayStringRule;
  /**
   * The default severity level for all rules that do not have a severity specified in their secondary options
   */
  defaultSeverity?: "warning" | "error";
  rules?: AtRule &
    Block &
    Color &
    Comment &
    CustomMedia &
    CustomProperty &
    Declaration &
    DeclarationBlock &
    Font &
    Function &
    GeneralSheet &
    KeyframeDeclaration &
    Length &
    MediaFeature &
    MediaQueryList &
    Number &
    Property &
    RootRule &
    Rule &
    Selector &
    SelectorList &
    ShorthandProperty &
    String &
    StylelintDisableComment &
    Time &
    Unit &
    Value &
    ValueList;
  [k: string]: any;
}
export interface AtRule {
  /**
   * Specify a blacklist of disallowed at-rules
   */
  "at-rule-blacklist"?: (null | string) | (([] | {}) | SimpleArrayStringRule | CoreRule)[];
  /**
   * Require or disallow an empty line before at-rules
   */
  "at-rule-empty-line-before"?: null | ("always" | "never" | []) | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Specify lowercase or uppercase for at-rules names
   */
  "at-rule-name-case"?: null | ("lower" | "upper" | []) | (("lower" | "upper" | {}) | CoreRule)[];
  /**
   * Require a newline after at-rule names
   */
  "at-rule-name-newline-after"?:
    | null
    | ("always" | "always-multi-line" | [])
    | (("always" | "always-multi-line" | {}) | CoreRule)[];
  /**
   * Require a single space after at-rule names
   */
  "at-rule-name-space-after"?:
    | null
    | ("always" | "always-single-line" | [])
    | (("always" | "always-single-line" | {}) | CoreRule)[];
  /**
   * Disallow unknown at-rules
   */
  "at-rule-no-unknown"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow vendor prefixes for at-rules
   */
  "at-rule-no-vendor-prefix"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Require a newline after the semicolon of at-rules
   */
  "at-rule-semicolon-newline-after"?: null | ("always" | []) | (("always" | {}) | CoreRule)[];
  /**
   * Specify a whitelist of allowed at-rules
   */
  "at-rule-whitelist"?: (null | string) | (([] | {}) | SimpleArrayStringRule | CoreRule)[];
  [k: string]: any;
}
export interface CoreRule {
  /**
   * Custom message that will be used in errors and warnings
   */
  message?: string;
  /**
   * Message status
   */
  severity?: "warning" | "error";
  [k: string]: any;
}
export interface Block {
  /**
   * Require or disallow an empty line before the closing brace of blocks
   */
  "block-closing-brace-empty-line-before"?:
    | null
    | ("always-multi-line" | "never" | [])
    | (("always-multi-line" | "never" | {}) | CoreRule)[];
  /**
   * Require a newline or disallow whitespace after the closing brace of blocks
   */
  "block-closing-brace-newline-after"?:
    | null
    | ("always" | "never" | "always-single-line" | "never-single-line" | "always-multi-line" | "never-multi-line" | [])
    | (
        | ("always" | "always-single-line" | "never-single-line" | "always-multi-line" | "never-multi-line" | {})
        | CoreRule)[];
  /**
   * Require a newline or disallow whitespace before the closing brace of blocks
   */
  "block-closing-brace-newline-before"?:
    | null
    | ("always" | "always-multi-line" | "never-multi-line" | [])
    | (("always" | "always-multi-line" | "never-multi-line" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace after the closing brace of blocks
   */
  "block-closing-brace-space-afte"?:
    | null
    | ("always" | "never" | "always-single-line" | "never-single-line" | "always-multi-line" | "never-multi-line" | [])
    | (
        | (
            | "always"
            | "never"
            | "always-single-line"
            | "never-single-line"
            | "always-multi-line"
            | "never-multi-line"
            | {})
        | CoreRule)[];
  /**
   * Require a single space or disallow whitespace before the closing brace of blocks
   */
  "block-closing-brace-space-before"?:
    | null
    | ("always" | "never" | "always-single-line" | "never-single-line" | "always-multi-line" | "never-multi-line" | [])
    | (
        | (
            | "always"
            | "never"
            | "always-single-line"
            | "never-single-line"
            | "always-multi-line"
            | "never-multi-line"
            | {})
        | CoreRule)[];
  /**
   * Disallow empty blocks
   */
  "block-no-empty"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow single-line blocks
   */
  "block-no-single-line"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Require a newline after the opening brace of blocks
   */
  "block-opening-brace-newline-after"?:
    | null
    | ("always" | "always-multi-line" | "never-multi-line" | [])
    | (("always" | "always-multi-line" | "never-multi-line" | {}) | CoreRule)[];
  /**
   * Require a newline or disallow whitespace before the opening brace of blocks
   */
  "block-opening-brace-newline-before"?:
    | null
    | ("always" | "always-single-line" | "never-single-line" | "always-multi-line" | "never-multi-line" | [])
    | (
        | ("always" | "always-single-line" | "never-single-line" | "always-multi-line" | "never-multi-line" | {})
        | CoreRule)[];
  /**
   * Require a single space or disallow whitespace after the opening brace of blocks
   */
  "block-opening-brace-space-after"?:
    | null
    | ("always" | "never" | "always-single-line" | "never-single-line" | "always-multi-line" | "never-multi-line" | [])
    | (
        | (
            | "always"
            | "never"
            | "always-single-line"
            | "never-single-line"
            | "always-multi-line"
            | "never-multi-line"
            | {})
        | CoreRule)[];
  /**
   * Require a single space or disallow whitespace before the opening brace of blocks
   */
  "block-opening-brace-space-before"?:
    | null
    | ("always" | "never" | "always-single-line" | "never-single-line" | "always-multi-line" | "never-multi-line" | [])
    | (
        | ("always" | "always-single-line" | "never-single-line" | "always-multi-line" | "never-multi-line" | {})
        | CoreRule)[];
  [k: string]: any;
}
export interface Color {
  /**
   * Specify lowercase or uppercase for hex colors
   */
  "color-hex-case"?: null | ("lower" | "upper" | []) | (("lower" | "upper" | {}) | CoreRule)[];
  /**
   * Specify short or long notation for hex colors
   */
  "color-hex-length"?: null | ("short" | "long" | []) | (("short" | "long" | {}) | CoreRule)[];
  /**
   * Require (where possible) or disallow named colors
   */
  "color-named"?:
    | null
    | ("always-where-possible" | "never" | [])
    | (("always-where-possible" | "never" | {}) | CoreRule)[];
  /**
   * Disallow hex colors
   */
  "color-no-hex"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow invalid hex colors
   */
  "color-no-invalid-hex"?: null | (true | []) | ((true | {}) | CoreRule)[];
  [k: string]: any;
}
export interface Comment {
  /**
   * Require or disallow an empty line before comments
   */
  "comment-empty-line-before"?: null | ("always" | "never" | []) | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Disallow empty comments
   */
  "comment-no-empty"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Require or disallow whitespace on the inside of comment markers
   */
  "comment-whitespace-inside"?: null | ("always" | "never" | []) | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Specify a blacklist of disallowed words within comments
   */
  "comment-word-blacklist"?: (null | string) | (([] | {}) | SimpleArrayStringRule | CoreRule)[];
  [k: string]: any;
}
export interface CustomMedia {
  /**
   * Specify a pattern for custom media query names
   */
  "custom-media-pattern"?: (null | string) | ({} | CoreRule)[];
  [k: string]: any;
}
export interface CustomProperty {
  /**
   * Require or disallow an empty line before custom properties
   */
  "custom-property-empty-line-before"?: null | ("always" | "never" | []) | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Disallow custom properties outside of `:root` rules
   */
  "custom-property-no-outside-root"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Specify a pattern for custom properties
   */
  "custom-property-pattern"?: (null | string) | ({} | CoreRule)[];
  [k: string]: any;
}
export interface Declaration {
  /**
   * Require a single space or disallow whitespace after the bang of declarations
   */
  "declaration-bang-space-after"?: null | ("always" | "never" | []) | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace before the bang of declarations
   */
  "declaration-bang-space-before"?: null | ("always" | "never" | []) | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Require a newline or disallow whitespace after the colon of declarations
   */
  "declaration-colon-newline-after"?:
    | null
    | ("always" | "always-multi-line" | [])
    | (("always" | "always-multi-line" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace after the colon of declarations
   */
  "declaration-colon-space-after"?:
    | null
    | ("always" | "never" | "always-single-line" | [])
    | (("always" | "never" | "always-single-line" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace before the colon of declarations
   */
  "declaration-colon-space-before"?: null | ("always" | "never" | []) | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Require or disallow an empty line before declarations
   */
  "declaration-empty-line-before"?: null | ("always" | "never" | []) | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Disallow `!important` within declarations
   */
  "declaration-no-important"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Specify a blacklist of disallowed property and unit pairs within declarations
   */
  "declaration-property-unit-blacklist"?:
    | null
    | {
        [k: string]: SimpleArrayStringRule;
      }
    | CoreRule[];
  /**
   * Specify a whitelist of allowed property and unit pairs within declarations
   */
  "declaration-property-unit-whitelist"?:
    | null
    | {
        [k: string]: SimpleArrayStringRule;
      }
    | CoreRule[];
  /**
   * Specify a blacklist of disallowed property and value pairs within declarations
   */
  "declaration-property-value-blacklist"?:
    | null
    | {
        [k: string]: SimpleArrayStringRule;
      }
    | CoreRule[];
  /**
   * Specify a whitelist of allowed property and value pairs within declarations
   */
  "declaration-property-value-whitelist"?:
    | null
    | {
        [k: string]: SimpleArrayStringRule;
      }
    | CoreRule[];
  [k: string]: any;
}
export interface DeclarationBlock {
  /**
   * Disallow duplicate properties within declaration blocks
   */
  "declaration-block-no-duplicate-properties"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow property values that are ignored due to another property value in the same rule
   */
  "declaration-block-no-ignored-properties"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow longhand properties that can be combined into one shorthand property
   */
  "declaration-block-no-redundant-longhand-properties"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow shorthand properties that override related longhand properties
   */
  "declaration-block-no-shorthand-property-overrides"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Specify the order of properties within declaration blocks
   */
  "declaration-block-properties-order"?:
    | null
    | ("alphabetical" | [])
    | (("alphabetical" | [] | {}) | string | SimpleArrayStringRule | CoreRule)[];
  /**
   * Require a newline or disallow whitespace after the semicolons of declaration blocks
   */
  "declaration-block-semicolon-newline-after"?:
    | null
    | ("always" | "always-multi-line" | "never-multi-line" | [])
    | (("always" | "always-multi-line" | "never-multi-line" | {}) | CoreRule)[];
  /**
   * Require a newline or disallow whitespace before the semicolons of declaration blocks
   */
  "declaration-block-semicolon-newline-before"?:
    | null
    | ("always" | "always-multi-line" | "never-multi-line" | [])
    | (("always" | "always-multi-line" | "never-multi-line" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace after the semicolons of declaration blocks
   */
  "declaration-block-semicolon-space-after"?:
    | null
    | ("always" | "never" | "always-single-line" | "never-single-line" | [])
    | (("always" | "never" | "always-single-line" | "never-single-line" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace before the semicolons of declaration blocks
   */
  "declaration-block-semicolon-space-before"?:
    | null
    | ("always" | "never" | "always-single-line" | "never-single-line" | [])
    | (("always" | "never" | "always-single-line" | "never-single-line" | {}) | CoreRule)[];
  /**
   * Limit the number of declaration within a single line declaration block
   */
  "declaration-block-single-line-max-declarations"?: (null | number) | ({} | CoreRule)[];
  /**
   * Require or disallow a trailing semicolon within declaration blocks
   */
  "declaration-block-trailing-semicolon"?: null | ("always" | "never" | []) | (("always" | "never" | {}) | CoreRule)[];
  [k: string]: any;
}
export interface Font {
  /**
   * Specify whether or not quotation marks should be used around font family names
   */
  "font-family-name-quotes"?:
    | null
    | ("always-where-required" | "always-where-recommended" | "always-unless-keyword" | [])
    | (("always-where-required" | "always-where-recommended" | "always-unless-keyword" | {}) | CoreRule)[];
  /**
   * Require numeric or named (where possible) `font-weight` values. Also, when named values are expected, require only valid names
   */
  "font-weight-notation"?:
    | null
    | ("numeric" | "named-where-possible" | [])
    | (("numeric" | "named-where-possible" | {}) | CoreRule)[];
  [k: string]: any;
}
export interface Function {
  /**
   * Specify a blacklist of disallowed functions
   */
  "function-blacklist"?: (null | string) | (([] | {}) | SimpleArrayStringRule | CoreRule)[];
  /**
   * Disallow an unspaced operator within `calc` functions
   */
  "function-calc-no-unspaced-operator"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Require a newline or disallow whitespace after the commas of functions
   */
  "function-comma-newline-after"?:
    | null
    | ("always" | "always-multi-line" | "never-multi-line" | [])
    | (("always" | "always-multi-line" | "never-multi-line" | {}) | CoreRule)[];
  /**
   * Require a newline or disallow whitespace before the commas of functions
   */
  "function-comma-newline-before"?:
    | null
    | ("always" | "always-multi-line" | "never-multi-line" | [])
    | (("always" | "always-multi-line" | "never-multi-line" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace after the commas of functions
   */
  "function-comma-space-after"?:
    | null
    | ("always" | "never" | "always-single-line" | "never-single-line" | [])
    | (("always" | "never" | "always-single-line" | "never-single-line" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace before the commas of functions
   */
  "function-comma-space-before"?:
    | null
    | ("always" | "never" | "always-single-line" | "never-single-line" | [])
    | (("always" | "never" | "always-single-line" | "never-single-line" | {}) | CoreRule)[];
  /**
   * Disallow direction values in `linear-gradient()` calls that are not valid according to the standard syntax
   */
  "function-linear-gradient-no-nonstandard-direction"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Limit the number of adjacent empty lines within functions
   */
  "function-max-empty-lines"?: (null | number) | ({} | CoreRule)[];
  /**
   * Specify lowercase or uppercase for function names
   */
  "function-name-case"?: null | ("lower" | "upper" | []) | (("lower" | "upper" | {}) | CoreRule)[];
  /**
   * Require a newline or disallow whitespace on the inside of the parentheses of functions
   */
  "function-parentheses-newline-inside"?:
    | null
    | ("always" | "always-multi-line" | "never-multi-line" | [])
    | (("always" | "always-multi-line" | "never-multi-line" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace on the inside of the parentheses of functions
   */
  "function-parentheses-space-inside"?:
    | null
    | ("always" | "never" | "always-single-line" | "never-single-line" | [])
    | (("always" | "never" | "always-single-line" | "never-single-line" | {}) | CoreRule)[];
  /**
   * Require or disallow data URIs for urls
   */
  "function-url-data-uris"?: null | ("always" | "never" | []) | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Disallow scheme-relative urls
   */
  "function-url-no-scheme-relative"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Require or disallow quotes for urls
   */
  "function-url-quotes"?: null | ("always" | "never" | []) | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Specify a whitelist of allowed url schemes
   */
  "function-url-scheme-whitelist"?: (null | string) | (([] | {}) | SimpleArrayStringRule | CoreRule)[];
  /**
   * Specify a whitelist of allowed functions
   */
  "function-whitelist"?: (null | string) | (([] | {}) | SimpleArrayStringRule | CoreRule)[];
  /**
   * Require or disallow whitespace after functions
   */
  "function-whitespace-after"?: null | ("always" | "never" | []) | (("always" | "never" | {}) | CoreRule)[];
  [k: string]: any;
}
export interface GeneralSheet {
  /**
   * Specify indentation
   */
  indentation?: (null | number) | ("tab" | []) | number[] | (number | ("tab" | {}) | CoreRule)[];
  /**
   * Limit the number of adjacent empty lines
   */
  "max-empty-lines"?: (null | number) | ({} | CoreRule)[];
  /**
   * Limit the length of a line
   */
  "max-line-length"?: (null | number) | (number | CoreRule)[];
  /**
   * Limit the allowed nesting depth
   */
  "max-nesting-depth"?: (null | number) | (number | CoreRule)[];
  /**
   * Disallow browser hacks that are irrelevant to the browsers you are targeting
   */
  "no-browser-hacks"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow selectors of lower specificity from coming after overriding selectors of higher specificity
   */
  "no-descending-specificity"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow duplicate selectors within a stylesheet
   */
  "no-duplicate-selectors"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow empty sources
   */
  "no-empty-source"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow end-of-line whitespace
   */
  "no-eol-whitespace"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Dissalow extra semicolons
   */
  "no-extra-semicolons"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow colors that are suspiciously close to being identical
   */
  "no-indistinguishable-colors"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow double-slash comments `(//...)` which are not supported by CSS and could lead to unexpected results
   */
  "no-invalid-double-slash-comments"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow missing end-of-source newlines
   */
  "no-missing-end-of-source-newline"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow animation names that do not correspond to a `@keyframes` declaration
   */
  "no-unknown-animations"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow features that are unsupported by the browsers that you are targeting
   */
  "no-unsupported-browser-features"?: null | (true | []) | ((true | {}) | CoreRule)[];
  [k: string]: any;
}
export interface KeyframeDeclaration {
  /**
   * Disallow !important within keyframe declarations
   */
  "keyframe-declaration-no-important"?: null | (true | []) | ((true | {}) | CoreRule)[];
  [k: string]: any;
}
export interface Length {
  /**
   * Disallow units for zero lengths
   */
  "length-zero-no-unit"?: null | (true | []) | ((true | {}) | CoreRule)[];
  [k: string]: any;
}
export interface MediaFeature {
  /**
   * Require a single space or disallow whitespace after the colon in media features
   */
  "media-feature-colon-space-after"?: null | ("always" | "never" | []) | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace before the colon in media features
   */
  "media-feature-colon-space-before"?: null | ("always" | "never" | []) | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Specify lowercase or uppercase for media feature names
   */
  "media-feature-name-case"?: null | ("lower" | "upper" | []) | (("lower" | "upper" | {}) | CoreRule)[];
  /**
   * Disallow unknown media feature names
   */
  "media-feature-name-no-unknown"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow vendor prefixes for media feature names
   */
  "media-feature-name-no-vendor-prefix"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow missing punctuation for non-boolean media features
   */
  "media-feature-no-missing-punctuation"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace on the inside of the parentheses within media features
   */
  "media-feature-parentheses-space-inside"?:
    | null
    | ("always" | "never" | [])
    | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace after the range operator in media features
   */
  "media-feature-range-operator-space-after"?:
    | null
    | ("always" | "never" | [])
    | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace before the range operator in media features
   */
  "media-feature-range-operator-space-before"?:
    | null
    | ("always" | "never" | [])
    | (("always" | "never" | {}) | CoreRule)[];
  [k: string]: any;
}
export interface MediaQueryList {
  /**
   * Require a newline or disallow whitespace after the commas of media query lists
   */
  "media-query-list-comma-newline-after"?:
    | null
    | ("always" | "always-multi-line" | "never-multi-line" | [])
    | (("always" | "always-multi-line" | "never-multi-line" | {}) | CoreRule)[];
  /**
   * Require a newline or disallow whitespace before the commas of media query lists
   */
  "media-query-list-comma-newline-before"?:
    | null
    | ("always" | "always-multi-line" | "never-multi-line" | [])
    | (("always" | "always-multi-line" | "never-multi-line" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace after the commas of media query lists
   */
  "media-query-list-comma-space-after"?:
    | null
    | ("always" | "never" | "always-single-line" | "never-single-line" | [])
    | (("always" | "never" | "always-single-line" | "never-single-line" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace before the commas of media query lists
   */
  "media-query-list-comma-space-before"?:
    | null
    | ("always" | "never" | "always-single-line" | "never-single-line" | [])
    | (("always" | "never" | "always-single-line" | "never-single-line" | {}) | CoreRule)[];
  [k: string]: any;
}
export interface Number {
  /**
   * Require or disallow a leading zero for fractional numbers less than 1
   */
  "number-leading-zero"?: null | ("always" | "never" | []) | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Limit the number of decimal places allowed in numbers
   */
  "number-max-precision"?: (null | number) | ({} | CoreRule)[];
  /**
   * Disallow trailing zeros in numbers
   */
  "number-no-trailing-zeros"?: null | (true | []) | ((true | {}) | CoreRule)[];
  [k: string]: any;
}
export interface Property {
  /**
   * Specify a blacklist of disallowed properties
   */
  "property-blacklist"?: (null | string) | (([] | {}) | SimpleArrayStringRule | CoreRule)[];
  /**
   * Specify lowercase or uppercase for properties
   */
  "property-case"?: null | ("lower" | "upper" | []) | (("lower" | "upper" | {}) | CoreRule)[];
  /**
   * Disallow unknown properties
   */
  "property-no-unknown"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow vendor prefixes for properties
   */
  "property-no-vendor-prefix"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Specify a whitelist of allowed properties
   */
  "property-whitelist"?: (null | string) | (([] | {}) | SimpleArrayStringRule | CoreRule)[];
  [k: string]: any;
}
export interface RootRule {
  /**
   * Disallow standard properties inside `:root` rules
   */
  "root-no-standard-properties"?: null | (true | []) | ((true | {}) | CoreRule)[];
  [k: string]: any;
}
export interface Rule {
  /**
   * Require or disallow an empty line before nested rules
   */
  "rule-nested-empty-line-before"?:
    | null
    | ("always" | "never" | "always-multi-line" | "never-multi-line" | [])
    | (("always" | "never" | "always-multi-line" | "never-multi-line" | {}) | CoreRule)[];
  /**
   * Require or disallow an empty line before non-nested rules
   */
  "rule-non-nested-empty-line-before"?:
    | null
    | ("always" | "never" | "always-multi-line" | "never-multi-line" | [])
    | (("always" | "never" | "always-multi-line" | "never-multi-line" | {}) | CoreRule)[];
  [k: string]: any;
}
export interface Selector {
  /**
   * Require a single space or disallow whitespace on the inside of the brackets within attribute selector
   */
  "selector-attribute-brackets-space-inside"?:
    | null
    | ("always" | "never" | [])
    | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Specify a blacklist of disallowed attribute operators
   */
  "selector-attribute-operator-blacklist"?: (null | string) | (([] | {}) | SimpleArrayStringRule | CoreRule)[];
  /**
   * Require a single space or disallow whitespace after operators within attribute selectors
   */
  "selector-attribute-operator-space-after"?:
    | null
    | ("always" | "never" | [])
    | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace before operators within attribute selectors
   */
  "selector-attribute-operator-space-before"?:
    | null
    | ("always" | "never" | [])
    | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Specify a whitelist of allowed attribute operators
   */
  "selector-attribute-operator-whitelist"?: (null | string) | (([] | {}) | SimpleArrayStringRule | CoreRule)[];
  /**
   * Require or disallow quotes for attribute values
   */
  "selector-attribute-quotes"?: null | ("always" | "never" | []) | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Specify a pattern for class selectors
   */
  "selector-class-pattern"?: (null | string) | (string | CoreRule)[];
  /**
   * Require a single space or disallow whitespace after the combinators of selectors
   */
  "selector-combinator-space-after"?: null | ("always" | "never" | []) | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace before the combinators of selectors
   */
  "selector-combinator-space-before"?: null | ("always" | "never" | []) | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Disallow non-space characters for descendant combinators of selectors
   */
  "selector-descendant-combinator-no-non-space"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Specify a pattern for id selectors
   */
  "selector-id-pattern"?: (null | string) | ({} | CoreRule)[];
  /**
   * Limit the number of compound selectors in a selector
   */
  "selector-max-compound-selectors"?: (null | number) | ({} | CoreRule)[];
  /**
   * Limit the specificity of selectors
   */
  "selector-max-specificity"?: (null | string) | ({} | CoreRule)[];
  /**
   * Specify a pattern for the selectors of rules nested within rules
   */
  "selector-nested-pattern"?: (null | string) | ({} | CoreRule)[];
  /**
   * Disallow attribute selectors
   */
  "selector-no-attribute"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow combinators in selectors
   */
  "selector-no-combinator"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow id selectors
   */
  "selector-no-id"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow qualifying a selector by type
   */
  "selector-no-qualifying-type"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow type selectors
   */
  "selector-no-type"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow the universal selector
   */
  "selector-no-universal"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow vendor prefixes for selectors
   */
  "selector-no-vendor-prefix"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Specify lowercase or uppercase for pseudo-class selectors
   */
  "selector-pseudo-class-case"?: null | ("lower" | "upper" | []) | (("lower" | "upper" | {}) | CoreRule)[];
  /**
   * Disallow unknown pseudo-class selectors
   */
  "selector-pseudo-class-no-unknown"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace on the inside of the parentheses within pseudo-class selectors
   */
  "selector-pseudo-class-parentheses-space-inside"?:
    | null
    | ("always" | "never" | [])
    | (("always" | "never" | {}) | CoreRule)[];
  /**
   * Specify a whitelist of allowed pseudo-class selectors
   */
  "selector-pseudo-class-whitelist"?: (null | string) | (([] | {}) | SimpleArrayStringRule | CoreRule)[];
  /**
   * Specify lowercase or uppercase for pseudo-element selectors
   */
  "selector-pseudo-element-case"?: null | ("lower" | "upper" | []) | (("lower" | "upper" | {}) | CoreRule)[];
  /**
   * Specify single or double colon notation for applicable pseudo-elements
   */
  "selector-pseudo-element-colon-notation"?:
    | null
    | ("single" | "double" | [])
    | (("single" | "double" | {}) | CoreRule)[];
  /**
   * Disallow unknown pseudo-element selectors
   */
  "selector-pseudo-element-no-unknown"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Disallow the composition of :root in selectors
   */
  "selector-root-no-composition"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Specify lowercase or uppercase for type selectors
   */
  "selector-type-case"?: null | ("lower" | "upper" | []) | (("lower" | "upper" | {}) | CoreRule)[];
  /**
   * Disallow unknown type selectors
   */
  "selector-type-no-unknown"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Limit the number of adjacent empty lines within selectors
   */
  "selector-max-empty-lines"?: (null | number) | ({} | CoreRule)[];
  [k: string]: any;
}
export interface SelectorList {
  /**
   * Require a newline or disallow whitespace after the commas of selector lists
   */
  "selector-list-comma-newline-after"?:
    | null
    | ("always" | "always-multi-line" | "never-multi-line" | [])
    | (("always" | "always-multi-line" | "never-multi-line" | {}) | CoreRule)[];
  /**
   * Require a newline or disallow whitespace before the commas of selector lists
   */
  "selector-list-comma-newline-before"?:
    | null
    | ("always" | "always-multi-line" | "never-multi-line" | [])
    | (("always" | "always-multi-line" | "never-multi-line" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace after the commas of selector lists
   */
  "selector-list-comma-space-after"?:
    | null
    | ("always" | "never" | "always-single-line" | "never-single-line" | [])
    | (("always" | "never" | "always-single-line" | "never-single-line" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace before the commas of selector lists
   */
  "selector-list-comma-space-before"?:
    | null
    | ("always" | "never" | "always-single-line" | "never-single-line" | [])
    | (("always" | "never" | "always-single-line" | "never-single-line" | {}) | CoreRule)[];
  [k: string]: any;
}
export interface ShorthandProperty {
  /**
   * Disallow redundant values in shorthand properties
   */
  "shorthand-property-no-redundant-values"?: null | (true | []) | ((true | {}) | CoreRule)[];
  [k: string]: any;
}
export interface String {
  /**
   * Disallow (unescaped) newlines in strings
   */
  "string-no-newline"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Specify single or double quotes around strings
   */
  "string-quotes"?: null | ("single" | "double" | []) | (("single" | "double" | {}) | CoreRule)[];
  [k: string]: any;
}
export interface StylelintDisableComment {
  /**
   * Require a reason comment before or after `stylelint-disable` comments
   */
  "stylelint-disable-reason"?:
    | null
    | ("always-before" | "always-after" | [])
    | (("always-before" | "always-after" | {}) | CoreRule)[];
  [k: string]: any;
}
export interface Time {
  /**
   * Disallow `animation` and `transition` less than or equal to 100ms
   */
  "time-no-imperceptible"?: null | (true | []) | ((true | {}) | CoreRule)[];
  [k: string]: any;
}
export interface Unit {
  /**
   * Specify a blacklist of disallowed units
   */
  "unit-blacklist"?:
    | null
    | (
        | "em"
        | "ex"
        | "px"
        | "%"
        | "rem"
        | "vw"
        | "vh"
        | "vm"
        | "vmin"
        | "vmax"
        | "ch"
        | "in"
        | "cm"
        | "mm"
        | "q"
        | "pt"
        | "pc"
        | "deg"
        | "grad"
        | "rad"
        | "turn"
        | "ms"
        | "s"
        | "Hz"
        | "kHz"
        | "dpi"
        | "dpcm"
        | "dppx"
        | "fr"
        | [])
    | (
        | (
            | "em"
            | "ex"
            | "px"
            | "%"
            | "rem"
            | "vw"
            | "vh"
            | "vm"
            | "vmin"
            | "vmax"
            | "ch"
            | "in"
            | "cm"
            | "mm"
            | "q"
            | "pt"
            | "pc"
            | "deg"
            | "grad"
            | "rad"
            | "turn"
            | "ms"
            | "s"
            | "Hz"
            | "kHz"
            | "dpi"
            | "dpcm"
            | "dppx"
            | "fr"
            | []
            | {})
        | (
            | "em"
            | "ex"
            | "px"
            | "%"
            | "rem"
            | "vw"
            | "vh"
            | "vm"
            | "vmin"
            | "vmax"
            | "ch"
            | "in"
            | "cm"
            | "mm"
            | "q"
            | "pt"
            | "pc"
            | "deg"
            | "grad"
            | "rad"
            | "turn"
            | "ms"
            | "s"
            | "Hz"
            | "kHz"
            | "dpi"
            | "dpcm"
            | "dppx"
            | "fr")[]
        | CoreRule)[];
  /**
   * Specify lowercase or uppercase for units
   */
  "unit-case"?: null | ("lower" | "upper" | []) | (("lower" | "upper" | {}) | CoreRule)[];
  /**
   * Disallow unknown units
   */
  "unit-no-unknown"?: null | (true | []) | ((true | {}) | CoreRule)[];
  /**
   * Specify a whitelist of allowed units
   */
  "unit-whitelist"?:
    | null
    | (
        | "em"
        | "ex"
        | "px"
        | "%"
        | "rem"
        | "vw"
        | "vh"
        | "vm"
        | "vmin"
        | "vmax"
        | "ch"
        | "in"
        | "cm"
        | "mm"
        | "q"
        | "pt"
        | "pc"
        | "deg"
        | "grad"
        | "rad"
        | "turn"
        | "ms"
        | "s"
        | "Hz"
        | "kHz"
        | "dpi"
        | "dpcm"
        | "dppx"
        | "fr"
        | [])
    | (
        | (
            | "em"
            | "ex"
            | "px"
            | "%"
            | "rem"
            | "vw"
            | "vh"
            | "vm"
            | "vmin"
            | "vmax"
            | "ch"
            | "in"
            | "cm"
            | "mm"
            | "q"
            | "pt"
            | "pc"
            | "deg"
            | "grad"
            | "rad"
            | "turn"
            | "ms"
            | "s"
            | "Hz"
            | "kHz"
            | "dpi"
            | "dpcm"
            | "dppx"
            | "fr"
            | []
            | {})
        | (
            | "em"
            | "ex"
            | "px"
            | "%"
            | "rem"
            | "vw"
            | "vh"
            | "vm"
            | "vmin"
            | "vmax"
            | "ch"
            | "in"
            | "cm"
            | "mm"
            | "q"
            | "pt"
            | "pc"
            | "deg"
            | "grad"
            | "rad"
            | "turn"
            | "ms"
            | "s"
            | "Hz"
            | "kHz"
            | "dpi"
            | "dpcm"
            | "dppx"
            | "fr")[]
        | CoreRule)[];
  [k: string]: any;
}
export interface Value {
  /**
   * Specify lowercase or uppercase for keywords values
   */
  "value-keyword-case"?: null | ("lower" | "upper" | []) | (("lower" | "upper" | {}) | CoreRule)[];
  /**
   * Disallow vendor prefixes for values
   */
  "value-no-vendor-prefix"?: null | (true | []) | ((true | {}) | CoreRule)[];
  [k: string]: any;
}
export interface ValueList {
  /**
   * Require a newline or disallow whitespace after the commas of value lists
   */
  "value-list-comma-newline-after"?:
    | null
    | ("always" | "always-multi-line" | "never-multi-line" | [])
    | (("always" | "always-multi-line" | "never-multi-line" | {}) | CoreRule)[];
  /**
   * Require a newline or disallow whitespace before the commas of value lists
   */
  "value-list-comma-newline-before"?:
    | null
    | ("always" | "always-multi-line" | "never-multi-line" | [])
    | (("always" | "always-multi-line" | "never-multi-line" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace after the commas of value lists
   */
  "value-list-comma-space-after"?:
    | null
    | ("always" | "never" | "always-single-line" | "never-single-line" | [])
    | (("always" | "never" | "always-single-line" | "never-single-line" | {}) | CoreRule)[];
  /**
   * Require a single space or disallow whitespace before the commas of value lists
   */
  "value-list-comma-space-before"?:
    | null
    | ("always" | "never" | "always-single-line" | "never-single-line" | [])
    | (("always" | "never" | "always-single-line" | "never-single-line" | {}) | CoreRule)[];
  /**
   * Limit the number of adjacent empty lines within value lists
   */
  "value-list-max-empty-lines"?: (null | number) | ({} | CoreRule)[];
  [k: string]: any;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A machine-friendly project name.
 */
export type NameOfTheProject = string;
/**
 * An optional project description.
 */
export type DescriptionOfTheProject = string;
/**
 * The type of project.
 */
export type TypeOfProject = "static" | "server";
/**
 * AWS credentials profile name, these are stored in ~/.aws/credentials.
 */
export type AWSProfile = string;
/**
 * AWS region.
 */
export type AWSRegion =
  | "us-east-2"
  | "us-east-1"
  | "us-west-1"
  | "us-west-2"
  | "ap-south-1"
  | "ap-northeast-2"
  | "ap-southeast-1"
  | "ap-southeast-2"
  | "ap-northeast-1"
  | "ca-central-1"
  | "eu-central-1"
  | "eu-west-1"
  | "eu-west-2"
  | "eu-west-3"
  | "sa-east-1";
/**
 * Enable S3 acceleration for faster uploads via the CloudFront CDN.
 */
export type EnablesS3Acceleration = boolean;
/**
 * Active warming mitigates cold starts when enabled.
 */
export type EnablesActiveWarming = boolean;
/**
 * Active warming sends requests to your application at this interval.
 */
export type ActiveWarmingRate = string;
/**
 * Number of concurrent containers to warm.
 */
export type ActiveWarmingContainerCount = number;
/**
 * Lambda memory size.
 */
export type Memory =
  | 128
  | 192
  | 256
  | 320
  | 384
  | 448
  | 512
  | 576
  | 640
  | 704
  | 768
  | 832
  | 896
  | 960
  | 1024
  | 1088
  | 1152
  | 1216
  | 1280
  | 1344
  | 1408
  | 1472
  | 1536
  | 1600
  | 1664
  | 1728
  | 1792
  | 1856
  | 1920
  | 1984
  | 2048
  | 2112
  | 2176
  | 2240
  | 2304
  | 2368
  | 2432
  | 2496
  | 2560
  | 2624
  | 2688
  | 2752
  | 2816
  | 2880
  | 2944
  | 3008;
/**
 * Domain hostname for the stage.
 */
export type DomainName = string;
/**
 * Domain hostname for the stage.
 */
export type DomainName1 = string;
/**
 * Domain hostname for the stage.
 */
export type DomainName2 = string;
/**
 * Hook command(s) to run.
 */
export type BuildHook = string;
/**
 * Hook command(s) to run.
 */
export type CleanHook = string;
/**
 * Hook command(s) to run.
 */
export type PrebuildHook = string;
/**
 * Hook command(s) to run.
 */
export type PostbuildHook = string;
/**
 * Hook command(s) to run.
 */
export type PredeployHook = string;
/**
 * Hook command(s) to run.
 */
export type PostdeployHook = string;
/**
 * Path to directory from which assets are served.
 */
export type DirectoryPath = string;
/**
 * Optional URL path prefix.
 */
export type URLPrefix = string;
/**
 * Command run to start your application.
 */
export type Command = string;
/**
 * Timeout in seconds per request.
 */
export type RequestTimeout = number;
/**
 * Timeout in seconds Up will wait for your app to boot and listen on `PORT`.
 */
export type ListenTimeout = number;
/**
 * Timeout in seconds Up will wait after sending a SIGINT to your server, before sending a SIGKILL.
 */
export type ShutdownTimeout = number;
/**
 * Minimum time in milliseconds before retrying.
 */
export type MinimumDelay = number;
/**
 * Maximum time in milliseconds before retrying.
 */
export type MaxDelay = number;
/**
 * Factor applied to each attempt.
 */
export type Factor = number;
/**
 * Attempts made before failing.
 */
export type RetryAttempts = number;
/**
 * Apply jitter.
 */
export type Jitter = boolean;
/**
 * Disable default error pages.
 */
export type DisableErrorPages = boolean;
/**
 * Path to directory from which error pages are served.
 */
export type DirectoryPath1 = string;
/**
 * Support email for contact link.
 */
export type SupportEmail = string;
/**
 * Theme color.
 */
export type Color = string;
/**
 * Enable Cross-Origin Resource Sharing.
 */
export type EnableCORS = boolean;
/**
 * A list of origins a cross-domain request can be executed from. Use `*` to allow any origin, or a wildcard such as `http://*.domain.com`.
 */
export type AllowedOrigins = string;
/**
 * A list of methods the client is allowed to use with cross-domain requests.
 */
export type AllowedMethods = string;
/**
 * A list of headers the client is allowed to use with cross-domain requests. If the special `*` value is present in the list, all headers will be allowed.
 */
export type AllowedHeaders = string;
/**
 * A list of headers which are safe to expose to the API of a CORS response.
 */
export type ExposedHeaders = string;
/**
 * A number indicating how long (in seconds) the results of a preflight request can be cached.
 */
export type MaxAge = number;
/**
 * A boolean indicating whether the request can include user credentials such as cookies, HTTP authentication or client side SSL certificates. Defaults to true.
 */
export type AllowCredentials = boolean;
/**
 * Name of the action for reference from alert definitions.
 */
export type ActionName = string;
/**
 * Type of action to perform.
 */
export type ActionType = string;
/**
 * Email addresses when using the email action.
 */
export type EmailAddresses = string;
/**
 * Phone numbers when using the sms action.
 */
export type PhoneNumbers = string;
/**
 * Name of the metric.
 */
export type MetricName = string;
/**
 * Name of statistic to perform.
 */
export type StatisticsName = "min" | "max" | "avg" | "sum" | "count";
/**
 * Threshold which is compared to the operator.
 */
export type ValueThreshold = number;
/**
 * Name of the action to perform.
 */
export type ActionName1 = string;
/**
 * Period is the alert query time-span.
 */
export type Period = number | string;
/**
 * Number of periods to evaluate over.
 */
export type EvaluationPeriods = number;
/**
 * Operator is the comparison operator.
 */
export type Operator = ">" | "<" | ">=" | "<=";
/**
 * Metric namespace.
 */
export type Namespace = string;
/**
 * Informative alert description, displayed in the email, sms, or slack.
 */
export type Description = string;
/**
 * Disable the alert.
 */
export type Disable = boolean;

export interface JSONSchemaForApexUpConfigurationFiles {
  name: NameOfTheProject;
  description?: DescriptionOfTheProject;
  type?: TypeOfProject;
  profile?: AWSProfile;
  /**
   * List of target AWS regions for deployment.
   */
  regions?: AWSRegion[];
  lambda?: {
    accelerate?: EnablesS3Acceleration;
    warm?: EnablesActiveWarming;
    warm_rate?: ActiveWarmingRate;
    warm_count?: ActiveWarmingContainerCount;
    memory?: Memory;
    [k: string]: any;
  };
  stages?: {
    production?: {
      domain?: DomainName;
      [k: string]: any;
    };
    staging?: {
      domain?: DomainName1;
      [k: string]: any;
    };
    development?: {
      domain?: DomainName2;
      [k: string]: any;
    };
    [k: string]: any;
  };
  hooks?: {
    build?: BuildHook;
    clean?: CleanHook;
    prebuild?: PrebuildHook;
    postbuild?: PostbuildHook;
    predeploy?: PredeployHook;
    postdeploy?: PostdeployHook;
    [k: string]: any;
  };
  static?: {
    dir?: DirectoryPath;
    prefix?: URLPrefix;
    [k: string]: any;
  };
  proxy?: {
    command?: Command;
    timeout?: RequestTimeout;
    listen_timeout?: ListenTimeout;
    shutdown_timeout?: ShutdownTimeout;
    backoff?: {
      min?: MinimumDelay;
      max?: MaxDelay;
      factor?: Factor;
      attempts?: RetryAttempts;
      jitter?: Jitter;
      [k: string]: any;
    };
    [k: string]: any;
  };
  dns?: {
    [k: string]: any;
  };
  environment?: {
    [k: string]: any;
  };
  headers?: {
    [k: string]: any;
  };
  error_pages?: {
    disable?: DisableErrorPages;
    dir?: DirectoryPath1;
    variables?: {
      support_email?: SupportEmail;
      color?: Color;
      [k: string]: any;
    };
    [k: string]: any;
  };
  cors?: {
    enable?: EnableCORS;
    allowed_origins?: AllowedOrigins[];
    allowed_methods?: AllowedMethods[];
    allowed_headers?: AllowedHeaders[];
    exposed_headers?: ExposedHeaders[];
    max_age?: MaxAge;
    allowed_credentials?: AllowCredentials;
    [k: string]: any;
  };
  inject?: {
    [k: string]: any;
  };
  redirects?: {
    [k: string]: any;
  };
  actions?: {
    name: ActionName;
    type: ActionType;
    emails?: EmailAddresses[];
    numbers?: PhoneNumbers[];
    [k: string]: any;
  }[];
  alerts?: {
    metric: MetricName;
    statistic: StatisticsName;
    threshold: ValueThreshold;
    action: ActionName1;
    period?: Period;
    evaluation_periods?: EvaluationPeriods;
    operator?: Operator;
    namespace?: Namespace;
    description?: Description;
    disable?: Disable;
    [k: string]: any;
  }[];
  [k: string]: any;
}

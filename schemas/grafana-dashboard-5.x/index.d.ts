/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * JSON Schema for Grafana 5.x Dashboards (https://grafana.com/docs/grafana/latest/reference/dashboard/#dashboard-json)
 */
export interface GrafanaDashboard5X {
  meta?: {
    isStarred?: boolean;
    [k: string]: unknown;
  };
  dashboard?: {
    /**
     * unique numeric identifier for the dashboard. (generated by the db)
     */
    id?: number | null;
    /**
     * unique dashboard identifier that can be generated by anyone. string (8-40)
     */
    uid?: string;
    /**
     * current title of dashboard
     */
    title?: string;
    /**
     * tags associated with dashboard, an array of strings
     */
    tags?: string[];
    /**
     * theme of dashboard, i.e. dark or light
     */
    style?: string;
    /**
     * timezone of dashboard, i.e. utc or browser
     */
    timezone?: string;
    /**
     * whether a dashboard is editable or not
     */
    editable?: boolean;
    hideControls?: boolean;
    /**
     * 0 for no shared crosshair or tooltip (default), 1 for shared crosshair, 2 for shared crosshair AND shared tooltip
     */
    graphTooltip?: number;
    /**
     * Panels are the building blocks of a dashboard. It consists of data source queries, type of graphs, aliases, etc. Panel JSON consists of an array of JSON objects, each representing a different panel. Most of the fields are common for all panels but some fields depend on the panel type.
     */
    panels?: {
      type?: string;
      title?: string;
      /**
       * The gridPos property describes the panel size and position in grid coordinates.
       */
      gridPos?: {
        /**
         * The x position, in same unit as w.
         */
        x?: number;
        /**
         * The y position, in same unit as h.
         */
        y?: number;
        /**
         * 1-24 (the width of the dashboard is divided into 24 columns)
         */
        w?: number;
        /**
         * In grid height units, each represents 30 pixels.
         */
        h?: number;
        [k: string]: unknown;
      };
      id?: number;
      mode?: string;
      content?: string;
      [k: string]: unknown;
    }[];
    /**
     * time range for dashboard, i.e. last 6 hours, last 7 days, etc
     */
    time?: {
      [k: string]: unknown;
    };
    /**
     * timepicker metadata
     */
    timepicker?: {
      /**
       * whether timepicker is collapsed or not
       */
      collapse?: boolean;
      /**
       * whether timepicker is enabled or not
       */
      enable?: boolean;
      notice?: boolean;
      now?: boolean;
      refresh_intervals?: string[];
      status?: string;
      type?: string;
      [k: string]: unknown;
    };
    /**
     * templating metadata
     */
    templating?: {
      /**
       * whether templating is enabled or not
       */
      enable?: boolean;
      /**
       * an array of objects each representing one template variable
       */
      list?: {
        /**
         * format to use while fetching all values from data source, eg: wildcard, glob, regex, pipe, etc.
         */
        allFormat?: string;
        /**
         * shows current selected variable text/value on the dashboard
         */
        current?: {
          tags?: string[];
          text?: string;
          value?: string;
          [k: string]: unknown;
        };
        /**
         * shows data source for the variables
         */
        datasource?: string | null;
        /**
         * whether all value option is available or not
         */
        includeAll?: boolean;
        /**
         * whether multiple values can be selected or not from variable value list
         */
        multi?: boolean;
        /**
         * format to use while fetching timeseries from data source
         */
        multiFormat?: string;
        /**
         * name of variable
         */
        name?: string;
        /**
         * array of variable text/value pairs available for selection on dashboard
         */
        options?: {
          selected?: boolean;
          text?: string;
          value?: string;
          [k: string]: unknown;
        }[];
        /**
         * data source query used to fetch values for a variable
         */
        query?: string;
        refresh?: boolean;
        regex?: string;
        /**
         * type of variable, i.e. custom, query or interval
         */
        type?: string;
        [k: string]: unknown;
      }[];
      [k: string]: unknown;
    };
    /**
     * annotations metadata
     */
    annotations?: {
      [k: string]: unknown;
    };
    /**
     * auto-refresh interval
     */
    refresh?: {
      [k: string]: unknown;
    };
    /**
     * version of the JSON schema (integer), incremented each time a Grafana update brings changes to said schema
     */
    schemaVersion?: number;
    /**
     * version of the dashboard (integer), incremented each time the dashboard is updated
     */
    version?: number;
    links?: unknown;
    [k: string]: unknown;
  };
  overwrite?: boolean;
  [k: string]: unknown;
}

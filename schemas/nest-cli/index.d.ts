/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type PluginItems = {
  /**
   * The npm package name of the cli plugin, eg @nestjs/swagger.
   */
  name?: string;
  options?: PluginOptions | GraphQLPluginOptions | SwaggerPluginOptions;
  [k: string]: unknown | undefined;
} & PluginItems1;
export type PluginItems1 =
  | string
  | {
      /**
       * The npm package name of the cli plugin, eg @nestjs/swagger.
       */
      name?: string;
      options?: PluginOptions | GraphQLPluginOptions | SwaggerPluginOptions;
      [k: string]: unknown | undefined;
    };
/**
 * For finer control, the element can be object.
 */
export type AssetsOptions = {
  /**
   * Glob-like file specifications for the assets to be distributed.
   */
  include?: string;
  /**
   * Glob-like file specifications for the assets to be excluded from the include list.
   */
  exclude?: string;
  /**
   * A string specifying the path (relative to the root folder) where the assets should be distributed. Defaults to the same output directory configured for compiler output.
   */
  outDir?: string;
  /**
   * If true, run in watch mode watching specified assets. Setting watchAssets in a top-level compilerOptions property overrides any watchAssets settings within the assets property.
   */
  watchAssets?: boolean;
} & AssetsOptions1;
export type AssetsOptions1 =
  | string
  | {
      /**
       * Glob-like file specifications for the assets to be distributed.
       */
      include?: string;
      /**
       * Glob-like file specifications for the assets to be excluded from the include list.
       */
      exclude?: string;
      /**
       * A string specifying the path (relative to the root folder) where the assets should be distributed. Defaults to the same output directory configured for compiler output.
       */
      outDir?: string;
      /**
       * If true, run in watch mode watching specified assets. Setting watchAssets in a top-level compilerOptions property overrides any watchAssets settings within the assets property.
       */
      watchAssets?: boolean;
    };
/**
 * If the value is boolean, a value of true enables spec generation by default and a value of false disables it. A flag passed on the CLI command line overrides this setting, as does a project-specific generateOptions setting (more below). If the value is an object, each key represents a schematic name, and the boolean value determines whether the default spec generation is enabled / disabled for that specific schematic. See https://docs.nestjs.com/cli/monorepo#global-generate-options for details.
 */
export type GenerateSpecOptions = {
  /**
   * Generate spec file for application schematics or not.
   */
  application?: boolean;
  /**
   * Disable spec file generation for class schematics.
   */
  class?: boolean;
  /**
   * Alias for class
   */
  cl?: boolean;
  /**
   * Generate spec file for configuration schematics or not.
   */
  configuration?: boolean;
  /**
   * Alias for configuration
   */
  config?: boolean;
  /**
   * Generate spec file for controller schematics or not.
   */
  controller?: boolean;
  /**
   * Alias for controller
   */
  co?: boolean;
  /**
   * Generate spec file for decorator schematics or not.
   */
  decorator?: boolean;
  /**
   * Alias fro decorator
   */
  d?: boolean;
  /**
   * Generate spec file for filter schematics or not.
   */
  filter?: boolean;
  /**
   * Alias for filter
   */
  f?: boolean;
  /**
   * Generate spec file for gateway schematics or not.
   */
  gateway?: boolean;
  /**
   * Alias for gateway
   */
  ga?: boolean;
  /**
   * Generate spec file for guard schematics or not.
   */
  guard?: boolean;
  /**
   * Alias for guard
   */
  gu?: boolean;
  /**
   * Generate spec file for interceptor schematics or not.
   */
  interceptor?: boolean;
  /**
   * Alias for interceptor
   */
  in?: boolean;
  /**
   * Generate spec file for interface schematics or not.
   */
  interface?: boolean;
  /**
   * Generate spec file for middleware schematics or not.
   */
  middleware?: boolean;
  /**
   * Alias for middleware
   */
  mi?: boolean;
  /**
   * Generate spec file for module schematics or not.
   */
  module?: boolean;
  /**
   * Alias for module
   */
  mo?: boolean;
  /**
   * Generate spec file for pipe schematics or not.
   */
  pipe?: boolean;
  /**
   * Alias for pipe
   */
  pi?: boolean;
  /**
   * Generate spec file for provider schematics or not.
   */
  provider?: boolean;
  /**
   * Alias for provider
   */
  pr?: boolean;
  /**
   * Generate spec file for resolver schematics or not.
   */
  resolver?: boolean;
  /**
   * Alias for resolver
   */
  r?: boolean;
  /**
   * Generate spec file for service schematics or not.
   */
  service?: boolean;
  /**
   * Alias for resolver
   */
  s?: boolean;
  /**
   * Generate spec file for library schematics or not.
   */
  library?: boolean;
  /**
   * Alias for library
   */
  lib?: boolean;
  /**
   * Generate spec file for sub-app schematics or not.
   */
  "sub-app"?: boolean;
  /**
   * Alias for sub-app
   */
  app?: boolean;
  /**
   * Generate spec file for resource schematics or not.
   */
  resource?: boolean;
  /**
   * Alias for resource
   */
  res?: boolean;
} & GenerateSpecOptions1;
export type GenerateSpecOptions1 =
  | boolean
  | {
      /**
       * Generate spec file for application schematics or not.
       */
      application?: boolean;
      /**
       * Disable spec file generation for class schematics.
       */
      class?: boolean;
      /**
       * Alias for class
       */
      cl?: boolean;
      /**
       * Generate spec file for configuration schematics or not.
       */
      configuration?: boolean;
      /**
       * Alias for configuration
       */
      config?: boolean;
      /**
       * Generate spec file for controller schematics or not.
       */
      controller?: boolean;
      /**
       * Alias for controller
       */
      co?: boolean;
      /**
       * Generate spec file for decorator schematics or not.
       */
      decorator?: boolean;
      /**
       * Alias fro decorator
       */
      d?: boolean;
      /**
       * Generate spec file for filter schematics or not.
       */
      filter?: boolean;
      /**
       * Alias for filter
       */
      f?: boolean;
      /**
       * Generate spec file for gateway schematics or not.
       */
      gateway?: boolean;
      /**
       * Alias for gateway
       */
      ga?: boolean;
      /**
       * Generate spec file for guard schematics or not.
       */
      guard?: boolean;
      /**
       * Alias for guard
       */
      gu?: boolean;
      /**
       * Generate spec file for interceptor schematics or not.
       */
      interceptor?: boolean;
      /**
       * Alias for interceptor
       */
      in?: boolean;
      /**
       * Generate spec file for interface schematics or not.
       */
      interface?: boolean;
      /**
       * Generate spec file for middleware schematics or not.
       */
      middleware?: boolean;
      /**
       * Alias for middleware
       */
      mi?: boolean;
      /**
       * Generate spec file for module schematics or not.
       */
      module?: boolean;
      /**
       * Alias for module
       */
      mo?: boolean;
      /**
       * Generate spec file for pipe schematics or not.
       */
      pipe?: boolean;
      /**
       * Alias for pipe
       */
      pi?: boolean;
      /**
       * Generate spec file for provider schematics or not.
       */
      provider?: boolean;
      /**
       * Alias for provider
       */
      pr?: boolean;
      /**
       * Generate spec file for resolver schematics or not.
       */
      resolver?: boolean;
      /**
       * Alias for resolver
       */
      r?: boolean;
      /**
       * Generate spec file for service schematics or not.
       */
      service?: boolean;
      /**
       * Alias for resolver
       */
      s?: boolean;
      /**
       * Generate spec file for library schematics or not.
       */
      library?: boolean;
      /**
       * Alias for library
       */
      lib?: boolean;
      /**
       * Generate spec file for sub-app schematics or not.
       */
      "sub-app"?: boolean;
      /**
       * Alias for sub-app
       */
      app?: boolean;
      /**
       * Generate spec file for resource schematics or not.
       */
      resource?: boolean;
      /**
       * Alias for resource
       */
      res?: boolean;
    };

export interface NestCLIConfiguration {
  language?: string;
  /**
   * Points at the collection of schematics used to generate components. you generally should not change this value.
   */
  collection?: string;
  /**
   * Points at the root of the source code for the single project in standard mode structures, or the default project in monorepo mode structures.
   */
  sourceRoot?: string;
  /**
   * The entry file where 'nest start' work with. Default to 'main'.
   */
  entryFile?: string;
  /**
   * (monorepo only) For a monorepo mode structure, this value is always true.
   */
  monorepo?: boolean;
  /**
   * (monorepo only) Points at the project root of the default project.
   */
  root?: string;
  compilerOptions?: CompilerOptions;
  generateOptions?: GenerateOptions;
  projects?: {
    [k: string]: ProjectConfiguration | undefined;
  };
  [k: string]: unknown | undefined;
}
/**
 * A map with keys specifying compiler options and values specifying the option setting. See https://docs.nestjs.com/cli/monorepo#global-compiler-options for details
 */
export interface CompilerOptions {
  /**
   * (monorepo only) Points at the file containing the tsconfig.json settings that will be used when nest build or nest start is called without a project option (e.g., when the default project is built or started). 'nest build' will not work as expected without this file.
   */
  tsConfigPath?: string;
  /**
   * If true, use webpack compiler. If false or not present, use tsc. In monorepo mode, the default is true (use webpack), in standard mode, the default is false (use tsc). See https://docs.nestjs.com/cli/monorepo#cli-properties for details.
   */
  webpack?: boolean;
  /**
   * Points at a webpack options file. If not specified, Nest looks for the file webpack.config.js.
   */
  webpackConfigPath?: string;
  plugins?: PluginItems[];
  /**
   * Enables automatically distributing non-TypeScript assets whenever a compilation step begins (asset distribution does not happen on incremental compiles in --watch mode). Accept glob-like string and object. See https://docs.nestjs.com/cli/monorepo#assets for details.
   */
  assets?: AssetsOptions[];
  /**
   * If true, run in watch-mode, watching all non-TypeScript assets. Setting watchAssets in a top-level compilerOptions property overrides any watchAssets settings within the assets property.
   */
  watchAssets?: boolean;
  /**
   * If true, whenever the compiler is invoked, it will first remove the compilation output directory (as configured in tsconfig.json, where the default is ./dist).
   */
  deleteOutDir?: boolean;
}
export interface PluginOptions {
  /**
   * If set to true, plugin will generate descriptions and example values for properties based on comments.
   */
  introspectComments?: boolean;
  [k: string]: unknown | undefined;
}
export interface GraphQLPluginOptions {
  /**
   * (GraphQL Only) GraphQL types files suffix. Default value: ['.input.ts', '.args.ts', '.entity.ts', '.model.ts']. See https://docs.nestjs.com/graphql/cli-plugin#using-the-cli-plugin for details.
   */
  typeFileNameSuffix?: unknown[];
  [k: string]: unknown | undefined;
}
export interface SwaggerPluginOptions {
  /**
   * (Swagger Only) DTO (Data Transfer Object) files suffix. Default value: ['.dto.ts', '.entity.ts']. See https://docs.nestjs.com/openapi/cli-plugin#using-the-cli-plugin for details
   */
  dtoFileNameSuffix?: string[];
  /**
   * (Swagger Only) Controller files suffix. See https://docs.nestjs.com/openapi/cli-plugin#using-the-cli-plugin for details
   */
  controllerFileNameSuffix?: string;
  /**
   * (Swagger Only) If set to true, the module will reuse class-validator validation decorators (e.g. @Max(10) will add max: 10 to schema definition). See https://docs.nestjs.com/openapi/cli-plugin#using-the-cli-plugin for details
   */
  classValidatorShim?: boolean;
  /**
   * (Swagger Only) The property key to set the comment text to on ApiProperty. See https://docs.nestjs.com/openapi/cli-plugin#using-the-cli-plugin for details
   */
  dtoKeyOfComment?: string;
  /**
   * (Swagger Only) The property key to set the comment text to on ApiOperation. See https://docs.nestjs.com/openapi/cli-plugin#using-the-cli-plugin for details
   */
  controllerKeyOfComment?: string;
  [k: string]: unknown | undefined;
}
/**
 * A map with keys specifying global generate options and values specifying the option setting. See https://docs.nestjs.com/cli/monorepo#global-generate-options for details
 */
export interface GenerateOptions {
  spec?: GenerateSpecOptions;
}
export interface ProjectConfiguration {
  type?: string;
  root?: string;
  entryFile?: string;
  sourceRoot?: string;
  compilerOptions?: CompilerOptions;
  generateOptions?: GenerateOptions;
}

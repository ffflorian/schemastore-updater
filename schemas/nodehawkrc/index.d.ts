/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A string or an array of paths to watch. Supports globbing.
 */
export type PropertiesPaths = string | string[];
/**
 * The root path from which all other paths will be resolved.
 */
export type PropertiesRoot = string;
/**
 * Paths, globs or regular expressions to ignore.
 */
export type PropertiesIgnored = string;
/**
 * The command to execute on file change.
 */
export type PropertiesExec = string;
/**
 * The port on which the server should run. This is passed to your application as `process.env.PORT` which should be used by you.
 */
export type PropertiesPort = number;
/**
 * The level of logging. 0 - fatal, 1 - error, 2 - warning, 3 - info, 4 - debug
 */
export type PropertiesLogLevel = number;
/**
 * The buffer duration to wait before triggering a restart.
 */
export type PropertiesBuffer = number;
/**
 * The buffer polling interval to check for the file stability.
 */
export type PropertiesBufferPoll = number;
/**
 * The message to display before the watcher starts.
 */
export type PropertiesDisplayPropertiesOnBeforeStart = string;
/**
 * The message to display after the watcher starts.
 */
export type PropertiesDisplayPropertiesOnStart = string;
/**
 * The message to display before the watcher restarts.
 */
export type PropertiesDisplayPropertiesOnBeforeRestart = string;
/**
 * The message to display after the watcher restarts.
 */
export type PropertiesDisplayPropertiesOnRestart = string;
/**
 * The message to display before the watcher stops.
 */
export type PropertiesDisplayPropertiesOnBeforeStop = string;
/**
 * Clear the screen on start and on every restart.
 */
export type PropertiesClearScreen = boolean;

export interface NodehawkConfigurationSchema {
  paths?: PropertiesPaths;
  root?: PropertiesRoot;
  ignored?: PropertiesIgnored;
  exec: PropertiesExec;
  port?: PropertiesPort;
  logLevel?: PropertiesLogLevel;
  buffer?: PropertiesBuffer;
  bufferPoll?: PropertiesBufferPoll;
  display?: PropertiesDisplay;
  clearScreen?: PropertiesClearScreen;
  env?: PropertiesEnv;
  [k: string]: unknown;
}
/**
 * The various messages to display during different events.
 */
export interface PropertiesDisplay {
  onBeforeStart?: PropertiesDisplayPropertiesOnBeforeStart;
  onStart?: PropertiesDisplayPropertiesOnStart;
  onBeforeRestart?: PropertiesDisplayPropertiesOnBeforeRestart;
  onRestart?: PropertiesDisplayPropertiesOnRestart;
  onBeforeStop?: PropertiesDisplayPropertiesOnBeforeStop;
  [k: string]: unknown;
}
/**
 * A set of key-value pairs which will be promptly passed on to your process and accessible via `process.env`.
 */
export interface PropertiesEnv {
  [k: string]: unknown;
}

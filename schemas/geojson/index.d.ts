/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This object represents a geometry, feature, or collection of features.
 */
export type GeoJSONObject = GeoJSONObject1 & GeoJSONObject2;
/**
 * The type of GeoJSON object.
 */
export type Type =
  | "Point"
  | "MultiPoint"
  | "LineString"
  | "MultiLineString"
  | "Polygon"
  | "MultiPolygon"
  | "GeometryCollection"
  | "Feature"
  | "FeatureCollection";
/**
 * The coordinate reference system (CRS) of a GeoJSON object is determined by its `crs` member (referred to as the CRS object below). If an object has no crs member, then its parent or grandparent object's crs member may be acquired. If no crs member can be so acquired, the default CRS shall apply to the GeoJSON object.
 *
 * * The default CRS is a geographic coordinate reference system, using the WGS84 datum, and with longitude and latitude units of decimal degrees.
 *
 * * The value of a member named `crs` must be a JSON object (referred to as the CRS object below) or JSON null. If the value of CRS is null, no CRS can be assumed.
 *
 * * The crs member should be on the top-level GeoJSON object in a hierarchy (in feature collection, feature, geometry order) and should not be repeated or overridden on children or grandchildren of the object.
 *
 * * A non-null CRS object has two mandatory members: `type` and `properties`.
 *
 * * The value of the type member must be a string, indicating the type of CRS object.
 *
 * * The value of the properties member must be an object.
 *
 * * CRS shall not change coordinate ordering.
 */
export type CoordinateReferenceSystemCRS = null | {
  type: CRSType;
  properties: CRSProperties;
  [k: string]: unknown;
};
/**
 * The value of the type member must be a string, indicating the type of CRS object.
 */
export type CRSType = string;
/**
 * To include information on the coordinate range for geometries, features, or feature collections, a GeoJSON object may have a member named `bbox`. The value of the bbox member must be a 2*n array where n is the number of dimensions represented in the contained geometries, with the lowest values for all axes followed by the highest values. The axes order of a bbox follows the axes order of geometries. In addition, the coordinate reference system for the bbox is assumed to match the coordinate reference system of the GeoJSON object of which it is a member.
 *
 * @minItems 4
 */
export type BoundingBox = [number, number, number, number, ...number[]];
export type GeoJSONObject2 =
  | Point
  | MultiPointGeometry
  | LineString
  | MultiLineString
  | Polygon
  | MultiPolygonGeometry
  | GeometryCollection
  | Feature
  | FeatureCollection;
/**
 * For type `Point`, the `coordinates` member must be a single position.
 */
export type Point = Geometry;
/**
 * For type `MultiPoint`, the `coordinates` member must be an array of positions.
 */
export type MultiPointGeometry = Geometry;
/**
 * For type `LineString`, the `coordinates` member must be an array of two or more positions.
 *
 * A LinearRing is closed LineString with 4 or more positions. The first and last positions are equivalent (they represent equivalent points). Though a LinearRing is not explicitly represented as a GeoJSON geometry type, it is referred to in the Polygon geometry type definition.
 */
export type LineString = Geometry;
/**
 * For type `MultiLineString`, the `coordinates` member must be an array of LineString coordinate arrays.
 */
export type MultiLineString = Geometry;
/**
 * For type `Polygon`, the `coordinates` member must be an array of LinearRing coordinate arrays. For Polygons with multiple rings, the first must be the exterior ring and any others must be interior rings or holes.
 */
export type Polygon = Geometry;
/**
 * For type `MultiPolygon`, the `coordinates` member must be an array of Polygon coordinate arrays.
 */
export type MultiPolygonGeometry = Geometry;
/**
 * A GeoJSON object with type `GeometryCollection` is a geometry object which represents a collection of geometry objects.
 *
 * A geometry collection must have a member with the name `geometries`. The value corresponding to `geometries` is an array. Each element in this array is a GeoJSON geometry object.
 */
export type GeometryCollection = Geometry;
export type Geometry1 = Geometry | null;
export type Properties = {
  [k: string]: unknown;
} | null;
export type Features = Feature[];

export interface GeoJSONObject1 {
  type: Type;
  crs?: CoordinateReferenceSystemCRS;
  bbox?: BoundingBox;
  [k: string]: unknown;
}
export interface CRSProperties {
  [k: string]: unknown;
}
/**
 * A geometry is a GeoJSON object where the type member's value is one of the following strings: `Point`, `MultiPoint`, `LineString`, `MultiLineString`, `Polygon`, `MultiPolygon`, or `GeometryCollection`.
 */
export interface Geometry {
  type?: "Point" | "MultiPoint" | "LineString" | "MultiLineString" | "Polygon" | "MultiPolygon" | "GeometryCollection";
  [k: string]: unknown;
}
/**
 * A GeoJSON object with the type `Feature` is a feature object.
 *
 * * A feature object must have a member with the name `geometry`. The value of the geometry member is a geometry object as defined above or a JSON null value.
 *
 * * A feature object must have a member with the name `properties`. The value of the properties member is an object (any JSON object or a JSON null value).
 *
 * * If a feature has a commonly used identifier, that identifier should be included as a member of the feature object with the name `id`.
 */
export interface Feature {
  type?: "Feature";
  geometry: Geometry1;
  properties: Properties;
  id?: unknown;
  [k: string]: unknown;
}
/**
 * A GeoJSON object with the type `FeatureCollection` is a feature collection object.
 *
 * An object of type `FeatureCollection` must have a member with the name `features`. The value corresponding to `features` is an array. Each element in the array is a feature object as defined above.
 */
export interface FeatureCollection {
  type?: "FeatureCollection";
  features: Features;
  [k: string]: unknown;
}

/* tslint:disable *//** * This file was automatically generated by json-schema-to-typescript. * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, * and run json-schema-to-typescript to regenerate this file. *//** * A command line script or scripts.Available variables:%project:Directory% - The project directory%project:Name% - The project name%project:Version% - The project version */export type Script = string[];export interface JSONSchemaForASPNETProjectJsonFiles {  authors?: string[];  /**   * List of files to exclude from publish output (dnu publish).   */  publishExclude?: string[];  /**   * Glob pattern to specify additional code files that needs to be compiled. (data type: string or array with glob pattern(s)). Example: [ "folder1/** /*.cs", "folder2/** /*.cs" ]   */  compile?: string[];  /**   * Glob pattern to indicate code files that needs to be excluded from compilation. (data type: string or array with glob pattern(s)). Example: [ "folder1/** /*.cs", "folder2/** /*.cs" ]   */  compileExclude?: string[];  /**   * Individual file paths relative to application root that needs to be included for compilation. (data type: string or array). Example: [ "folder1/test1.cs", "folder2/test2.cs" ]   */  compileFiles?: string[];  /**   * Glob pattern to indicate the default code files that are included for compilation. (data type: string or array with glob pattern(s)). Example: [ "** /*.cs", "../folder2/** /*.cs" ]   */  compileBuiltIn?: string[];  /**   * Glob pattern to indicate the default files to be excluded from processing. (data type: string or array with glob pattern(s)).   */  exclude?: string[];  /**   * Glob pattern to indicate all the additional files to be excluded from processing. (data type: string or array with glob pattern(s)).   */  excludeBuiltIn?: string[];  /**   * Glob pattern to indicate all the code files to be pre-processed. (data type: string or array with glob pattern(s)).   */  preprocess?: string[];  /**   * Glob pattern to indicate all the code files to be excluded from pre-processing. (data type: string or array with glob pattern(s)).   */  preprocessExclude?: string[];  /**   * Glob pattern to indicate specific code files to be included for pre-processing. (data type: string or array).   */  preprocessFiles?: string[];  /**   * Glob pattern to indicate all the files that need to be compiled as resources. (data type: string or array with glob pattern(s))   */  resource?: string[];  /**   * Glob pattern to indicate files that need to be excluded from being compiled as resources. (data type: string or array with glob pattern(s))   */  resourceExclude?: string[];  /**   * Glob pattern to indicate individual files that need to be compiled as resources. (data type: string or array).   */  resourceFiles?: string[];  /**   * Glob pattern to specify the code files to share with dependent projects. Example: [ "folder1/*.cs", "folder2/*.cs" ]   */  shared?: string[];  /**   * Glob pattern to specify the code files to be excluded from sharing with dependent projects. Example: [ "folder1/*.cs", "folder2/*.cs" ]   */  sharedExclude?: string[];  /**   * Glob pattern to specify the individual code files to be shared with dependent projects. Example: [ "folder1/shared1.cs", "folder2/shared2.cs" ]   */  sharedFiles?: string[];  /**   * Glob pattern to specify the files to be considered as content on dnu publish. Example: [ "folder1/** /*" ]   */  content?: string[];  /**   * Glob pattern to specify the files to be excluded from being content on dnu publish. Example: [ "folder1/*.cs", "folder2/*.cs" ]   */  contentExclude?: string[];  /**   * Glob pattern to specify the individual files to be content files on dnu publish. Example: [ "folder1/content.cs", "folder2/content2.img" ]   */  contentFiles?: string[];  commands?: {    [k: string]: string;  };  compilationOptions?: CompilationOptions;  /**   * Configurations are named groups of compilation settings. There are 2 defaults built into the runtime namely 'Debug' and 'Release'.   */  configurations?: {    [k: string]: {      compilationOptions?: CompilationOptions;      [k: string]: any;    };  };  /**   * Copyright details for the package   */  copyright?: string;  dependencies?: Dependencies;  /**   * The description of the application   */  description?: string;  frameworks?: {    [k: string]: ConfigType;  };  /**   * A URL for the image to use as the icon for the package. This should be a 32x32-pixel .png file that has a transparent background.   */  iconUrl?: string;  /**   * A link to the license that the package is under   */  licenseUrl?: string;  owners?: string[];  /**   * A URL for the home page of the package   */  projectUrl?: string;  /**   * Scripts to execute during the various stages.   */  scripts?: {    prepack?: Script;    postpack?: Script;    prepublish?: Script;    postpublish?: Script;    prerestore?: Script;    postrestore?: Script;    prepare?: Script;    [k: string]: any;  };  /**   * A short description of the package   */  summary?: string;  tags?: string[];  /**   * The human-friendly title of the package   */  title?: string;  /**   * The version of the application. Example: 1.2.0.0   */  version?: string;  /**   * Specifying the webroot property in the project.json file specifies the web server root (aka public folder). In visual studio, this folder will be used to root IIS. Static files should be put in here.   */  webroot?: string;  /**   * Specify a unique id to manage the development time user secrets of the application   */  userSecretsId?: string;  [k: string]: any;}export interface CompilationOptions {  define?: string[];  warningsAsErrors?: boolean;  allowUnsafe?: boolean;  optimize?: boolean;  languageVersion?: "csharp1" | "csharp2" | "csharp3" | "csharp4" | "csharp5" | "csharp6" | "experimental";  [k: string]: any;}export interface Dependencies {  [k: string]:    | string    | {        [k: string]: any;      };}export interface ConfigType {  dependencies?: Dependencies;  compilationOptions?: CompilationOptions;  frameworkAssemblies?: Dependencies;  [k: string]: any;}
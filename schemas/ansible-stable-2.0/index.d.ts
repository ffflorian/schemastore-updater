/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Auto-Generated JSON Schema for Ansible-stable 2.0 (https://github.com/shaded-enmity/ansible-schema-generator)
 */
export type Ansible20 = (
  | {
      shell: string;
      args?: {
        /**
         * Default: True
         *
         * if command warnings are on in ansible.cfg, do not warn about this particular line if set to no/false.
         */
        warn?: string;
        /**
         * a filename, when it already exists, this step will B(not) be run.
         */
        creates?: string;
        /**
         * change the shell used to execute the command. Should be an absolute path to the executable.
         */
        executable?: string;
        /**
         * cd into this directory before running the command
         */
        chdir?: string;
        /**
         * a filename, when it does not exist, this step will B(not) be run.
         */
        removes?: string;
        [k: string]: any;
      };
      name?: string;
      [k: string]: any;
    }
  | {
      raw: string;
      args?: {
        /**
         * change the shell used to execute the command. Should be an absolute path to the executable.
         */
        executable?: string;
        [k: string]: any;
      };
      name?: string;
      [k: string]: any;
    }
  | {
      args?: {
        /**
         * Default: True
         *
         * if command warnings are on in ansible.cfg, do not warn about this particular line if set to no/false.
         */
        warn?: string;
        /**
         * a filename or (since 2.0) glob pattern, when it already exists, this step will B(not) be run.
         */
        creates?: string;
        /**
         * change the shell used to execute the command. Should be an absolute path to the executable.
         */
        executable?: string;
        /**
         * cd into this directory before running the command
         */
        chdir?: string;
        /**
         * a filename or (since 2.0) glob pattern, when it does not exist, this step will B(not) be run.
         */
        removes?: string;
        [k: string]: any;
      };
      command: string;
      name?: string;
      [k: string]: any;
    }
  | {
      args?: {
        /**
         * a filename, when it already exists, this step will B(not) be run.
         */
        creates?: string;
        /**
         * a filename, when it does not exist, this step will B(not) be run.
         */
        removes?: string;
        [k: string]: any;
      };
      name?: string;
      script: string;
      [k: string]: any;
    }
  | {
      [k: string]: any;
    }
  | {
      /**
       * Creates or terminates task definitions
       */
      ecs_taskdefinition?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Configures the SELinux mode and policy. A reboot may be required after usage. Ansible will not issue this reboot but will let you know when it is required.
       */
      selinux?: {
        [k: string]: any;
      };
      /**
       * Registers services and checks for an agent with a consul cluster. A service is some process running on the agent node that should be advertised by consul's discovery mechanism. It may optionally supply a check definition, a periodic service test to notify the consul cluster of service's health.
       * Checks may also be registered per node e.g. disk usage, or cpu usage and notify the health of the entire node to the cluster. Service level checks do not require a check name or id as these are derived by Consul from the Service name and id respectively by appending 'service:' Node level checks require a check_name and optionally a check_id.
       * Currently, there is no complete way to retrieve the script, interval or ttl metadata for a registered check. Without this metadata it is  not possible to tell if the data supplied with ansible represents a change to a check. As a result this does not attempt to determine changes and will always report a changed occurred. An api method is planned to supply this metadata so at that stage change management will be added.
       * See http://consul.io for more details.
       */
      consul?: {
        /**
         * Default: None
         *
         * the interval at which the service check will be run. This is a number with a s or m suffix to signify the units of seconds or minutes e.g 15s or 1m. If no suffix is supplied, m will be used by default e.g. 1 will be 1m. Required if the script param is specified.
         */
        interval?: string;
        /**
         * Default: None
         *
         * checks can be registered with an http endpoint. This means that consul will check that the http endpoint returns a successful http status. Interval must also be provided with this option.
         */
        http?: string;
        check_node?: string;
        /**
         * Default: None
         *
         * a list of tags that will be attached to the service registration.
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * a name for the service check, defaults to the check id. required if standalone, ignored if part of service definition.
         */
        check_name?: string;
        /**
         * Unique name for the service on a node, must be unique per node, required if registering a service. May be ommitted if registering a node level check
         */
        service_name?: string;
        /**
         * Default: None
         *
         * Notes to attach to check when registering it.
         */
        notes?: string;
        /**
         * Default: None
         *
         * the script/command that will be run periodically to check the health of the service. Scripts require an interval and vise versa
         */
        script?: string;
        /**
         * Default: None
         *
         * the token key indentifying an ACL rule set. May be required to register services.
         */
        token?: string;
        /**
         * Default: None
         *
         * an ID for the service check, defaults to the check name, ignored if part of a service definition.
         */
        check_id?: string;
        /**
         * Default: localhost
         *
         * host of the consul agent defaults to localhost
         */
        host?: string;
        /**
         * register or deregister the consul service, defaults to present
         */
        state?: "present" | "absent";
        /**
         * the port on which the service is listening required for registration of a service, i.e. if service_name or service_id is set
         */
        service_port?: number | string;
        /**
         * Default: None
         *
         * A custom HTTP check timeout. The consul default is 10 seconds. Similar to the interval this is a number with a s or m suffix to signify the units of seconds or minutes, e.g. 15s or 1m.
         */
        timeout?: string;
        /**
         * Default: None
         *
         * checks can be registered with a ttl instead of a script and interval this means that the service will check in with the agent before the ttl expires. If it doesn't the check will be considered failed. Required if registering a check and the script an interval are missing Similar to the interval this is a number with a s or m suffix to signify the units of seconds or minutes e.g 15s or 1m. If no suffix is supplied, m will be used by default e.g. 1 will be 1m
         */
        ttl?: string;
        /**
         * Default: service_name if supplied
         *
         * the ID for the service, must be unique per node, defaults to the service name if the service name is supplied
         */
        service_id?: string;
        /**
         * Default: 8500
         *
         * the port on which the consul agent is running
         */
        port?: number | string;
        check_host?: string;
        [k: string]: any;
      };
      /**
       * Manages symbolic links using the 'update-alternatives' tool
       * Useful when multiple programs are installed but provide similar functionality (e.g. different editors).
       */
      alternatives?: {
        /**
         * The path to the real executable that the link should point to.
         */
        path: string;
        /**
         * The path to the symbolic link that should point to the real executable.
         * This option is required on RHEL-based distributions
         */
        link?: string;
        /**
         * The generic name of the link.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module can create and destroy Google Compute Engine C(loadbalancer) and C(httphealthcheck) resources.  The primary LB resource is the C(load_balancer) resource and the health check parameters are all prefixed with I(httphealthcheck). The full documentation for Google Compute Engine load balancing is at U(https://developers.google.com/compute/docs/load-balancing/).  However, the ansible module simplifies the configuration by following the libcloud model. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.
       */
      gce_lb?: {
        /**
         * host header to pass through on HTTP check requests
         */
        httphealthcheck_host?: string;
        /**
         * the name identifier for the HTTP health check
         */
        httphealthcheck_name?: string;
        /**
         * name of the load-balancer resource
         */
        name?: string;
        /**
         * the external static IPv4 (or auto-assigned) address for the LB
         */
        external_ip?: string;
        /**
         * service account email
         */
        service_account_email?: string;
        /**
         * the GCE region where the load-balancer is defined
         */
        region?: string;
        /**
         * Default: 2
         *
         * number of consecutive failed checks before marking a node unhealthy
         */
        httphealthcheck_unhealthy_count?: string;
        /**
         * Default: 2
         *
         * number of consecutive successful checks before marking a node healthy
         */
        httphealthcheck_healthy_count?: string;
        /**
         * path to the pem file associated with the service account email
         */
        pem_file?: string;
        /**
         * Default: /
         *
         * the url path to use for HTTP health checking
         */
        httphealthcheck_path?: string;
        /**
         * the port (range) to forward, e.g. 80 or 8000-8888 defaults to all ports
         */
        port_range?: string;
        /**
         * Default: present
         *
         * desired state of the LB
         */
        state?: string;
        /**
         * Default: 5
         *
         * the timeout in seconds before a request is considered a failed check
         */
        httphealthcheck_timeout?: string;
        /**
         * a list of zone/nodename pairs, e.g ['us-central1-a/www-a', ...]
         */
        members?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: 80
         *
         * the TCP port to use for HTTP health checking
         */
        httphealthcheck_port?: string;
        /**
         * Default: tcp
         *
         * the protocol used for the load-balancer packet forwarding, tcp or udp
         */
        protocol?: string;
        /**
         * your GCE project ID
         */
        project_id?: string;
        /**
         * Default: 5
         *
         * the duration in seconds between each health check request
         */
        httphealthcheck_interval?: string;
        [k: string]: any;
      };
      /**
       * Creates or terminates ecs clusters.
       */
      ecs_cluster?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module can add or remove tags U(https://cloud.google.com/compute/docs/instances/#tags) to/from GCE instance.
       */
      gce_tag?: {
        /**
         * Default: us-central1-a
         *
         * the zone of the disk specified by source
         */
        zone?: string;
        /**
         * comma-separated list of tags to add or remove
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * service account email
         */
        service_account_email?: string;
        /**
         * path to the pem file associated with the service account email
         */
        pem_file?: string;
        /**
         * the name of the GCE instance to add/remove tags
         */
        instance_name: string;
        /**
         * Default: present
         *
         * desired state of the tags
         */
        state?: "present" | "absent";
        /**
         * your GCE project ID
         */
        project_id?: string;
        [k: string]: any;
      };
      /**
       * This module will let you create Zabbix maintenance windows.
       */
      zabbix_maintenance?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        };
      /**
       * Add or remove kernel modules from blacklist.
       */
      kernel_blacklist?: {
        /**
         * If specified, use this blacklist file instead of C(/etc/modprobe.d/blacklist-ansible.conf).
         */
        blacklist_file?: string;
        /**
         * Default: present
         *
         * Whether the module should be present in the blacklist or absent.
         */
        state?: "present" | "absent";
        /**
         * Name of kernel module to black- or whitelist.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Manage I(libvirt) storage pools.
       */
      virt_pool?: {
        [k: string]: any;
      };
      /**
       * Manage dynamic, cluster-wide parameters for RabbitMQ
       */
      rabbitmq_parameter?: {
        /**
         * Default: rabbit
         *
         * erlang node name of the rabbit we wish to configure
         */
        node?: string;
        /**
         * Name of the parameter being set
         */
        name: string;
        /**
         * Name of the component of which the parameter is being set
         */
        component: string;
        /**
         * Value of the parameter, as a JSON term
         */
        value?: string;
        /**
         * Default: /
         *
         * vhost to apply access privileges.
         */
        vhost?: string;
        /**
         * Default: present
         *
         * Specify if user is to be added or removed
         */
        state?: "present" | "absent";
        [k: string]: any;
      };
      /**
       * Sends logs to LogEntries in realtime
       */
      logentries?: {
        [k: string]: any;
      };
      /**
       * Manages F5 BIG-IP LTM pool members via iControl SOAP API
       */
      bigip_pool_member?: {
        /**
         * Set new session availability status for pool member
         */
        session_state?: string;
        /**
         * Pool member ratio weight. Valid values range from 1 through 100. New pool members -- unless overriden with this value -- default to 1.
         */
        ratio?: string;
        /**
         * Pool member description
         */
        description?: string;
        /**
         * Set monitor availability status for pool member
         */
        monitor_state?: string;
        /**
         * Default: Common
         *
         * Partition
         */
        partition?: string;
        /**
         * Pool member connection limit. Setting this to 0 disables the limit.
         */
        connection_limit?: string;
        /**
         * Pool member IP
         */
        host?: string;
        /**
         * BIG-IP host
         */
        server?: string;
        /**
         * Default: present
         *
         * Pool member state
         */
        state?: string;
        /**
         * BIG-IP username
         */
        user?: string;
        /**
         * Pool member rate limit (connections-per-second). Setting this to 0 disables the limit.
         */
        rate_limit?: string;
        /**
         * BIG-IP password
         */
        password?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites.  Prior to 2.0, this module would always validate on python >= 2.7.9 and never validate on python <= 2.7.8
         */
        validate_certs?: string;
        /**
         * Pool member port
         */
        port?: string;
        /**
         * Pool name. This pool must exist.
         */
        pool?: string;
        [k: string]: any;
      };
      /**
       * Add or Remove a floating IP to an instance
       */
      os_floating_ip?: {
        /**
         * To which fixed IP of server the floating IP address should be attached to.
         */
        fixed_address?: string;
        /**
         * The name or ID of a neutron external network or a nova pool name.
         */
        network?: string;
        /**
         * When state is present, and floating_ip_address is not present, this parameter can be used to specify whether we should try to reuse a floating IP address already allocated to the project.
         */
        reuse?: string;
        /**
         * The name or ID of the instance to which the IP address should be assigned.
         */
        server?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * A floating IP address to attach or to detach. Required only if state is absent. When state is present can be used to specify a IP address to attach.
         */
        floating_ip_address?: string;
        /**
         * Default: 60
         *
         * Time to wait for an IP address to appear as attached. See wait.
         */
        timeout?: string;
        /**
         * When attaching a floating IP address, specify whether we should wait for it to appear as attached.
         */
        wait?: string;
        [k: string]: any;
      };
      /**
       * Installs or uninstalls Windows Roles or Features
       */
      win_feature?: {
        /**
         * Adds the corresponding management tools to the specified feature
         */
        include_management_tools?: string;
        /**
         * Adds all subfeatures of the specified feature
         */
        include_sub_features?: string;
        /**
         * Default: present
         *
         * State of the features or roles on the system
         */
        state?: string;
        /**
         * Restarts the computer automatically when installation is complete, if restarting is required by the roles or features installed.
         */
        restart?: string;
        /**
         * Names of roles or features to install as a single feature or a comma-separated list of features
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Manages Windows services
       */
      win_service?: {
        /**
         * Set the startup type for the service
         */
        start_mode?: string;
        /**
         * C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.  C(restarted) will always bounce the service.
         */
        state?: string;
        /**
         * Name of the service
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * This module de-registers or registers an AWS EC2 instance from the ELBs that it belongs to.
       * Returns fact "ec2_elbs" which is a list of elbs attached to the instance if state=absent is passed as an argument.
       * Will be marked changed when called only if there are ELBs found to operate on.
       */
      ec2_elb?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Verifies Rackspace Cloud credentials and returns identity information
       */
      rax_identity?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create, update and remove port forwarding rules.
       */
      cs_portforward?: {
        /**
         * Whether the firewall rule for public port should be created, while creating the new rule.
         * Use M(cs_firewall) for managing firewall rules.
         */
        open_firewall?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * VM guest NIC secondary IP address for the port forwarding rule.
         */
        vm_guest_ip?: string;
        /**
         * Domain the C(vm) is related to.
         */
        domain?: string;
        api_key?: string;
        /**
         * Default: tcp
         *
         * Protocol of the port forwarding rule.
         */
        protocol?: "tcp" | "udp";
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        /**
         * Start public port for this rule.
         */
        public_port: number | string;
        /**
         * Name of virtual machine which we make the port forwarding rule for.
         * Required if C(state=present).
         */
        vm?: string;
        /**
         * End public port for this rule.
         * If not specified equal C(public_port).
         */
        public_end_port?: number | string;
        api_region?: string;
        /**
         * Name of the project the C(vm) is located in.
         */
        project?: string;
        /**
         * Start private port for this rule.
         */
        private_port: number | string;
        /**
         * Default: present
         *
         * State of the port forwarding rule.
         */
        state?: "present" | "absent";
        /**
         * End private port for this rule.
         * If not specified equal C(private_port).
         */
        private_end_port?: number | string;
        /**
         * Account the C(vm) is related to.
         */
        account?: string;
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the zone in which the virtual machine is in.
         * If not set, default zone is used.
         */
        zone?: string;
        /**
         * Public IP address the rule is assigned to.
         */
        ip_address: string;
        [k: string]: any;
      };
      /**
       * Allows uploading or removing IAM policies for IAM users, groups or roles.
       */
      iam_policy?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Upload, download, and delete objects in Rackspace Cloud Files
       */
      rax_files_objects?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Attach/Dettach a subnet interface to a router, to provide a gateway for the subnet.
       */
      quantum_router_interface?: {
        /**
         * Default: None
         *
         * Name of the region
         */
        region_name?: string;
        availability_zone?: string;
        /**
         * Default: None
         *
         * Name of the tenant whose subnet has to be attached.
         */
        tenant_name?: string;
        /**
         * Default: yes
         *
         * The tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone URL for authentication
         */
        auth_url?: string;
        /**
         * Default: yes
         *
         * Password of login user
         */
        login_password: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Default: None
         *
         * Name of the subnet to whose interface should be attached to the router.
         */
        subnet_name: string;
        /**
         * Default: None
         *
         * Name of the router to which the subnet's interface should be attached.
         */
        router_name: string;
        [k: string]: any;
      };
      /**
       * Add or remove rights/permissions for a given user or group for the specified src file or folder.
       */
      win_acl?: {
        /**
         * Default: none
         *
         * The rights/permissions that are to be allowed/denyed for the specified user or group for the given src file or directory.  Can be entered as a comma separated list (Ex. "Modify, Delete, ExecuteFile").  For more information on the choices see MSDN FileSystemRights Enumeration.
         */
        rights?: string;
        /**
         * Default: For Leaf File, None; For Directory, ContainerInherit, ObjectInherit;
         *
         * Inherit flags on the ACL rules.  Can be specified as a comma separated list (Ex. "ContainerInherit, ObjectInherit").  For more information on the choices see MSDN InheritanceFlags Enumeration.
         */
        inherit?: string;
        /**
         * Default: None
         *
         * Propagation flag on the ACL rules.  For more information on the choices see MSDN PropagationFlags Enumeration.
         */
        propagation?: string;
        /**
         * Default: present
         *
         * Specify whether to add (present) or remove (absent) the specified access rule
         */
        state?: string;
        /**
         * Default: none
         *
         * User or Group to add specified rights to act on src file/folder
         */
        user?: string;
        /**
         * File or Directory
         */
        path?: string;
        /**
         * Default: none
         *
         * Specify whether to allow or deny the rights specified
         */
        type?: string;
        [k: string]: any;
      };
      /**
       * Manage the state of a program or group of programs running via supervisord
       */
      supervisorctl?: {
        /**
         * username to use for authentication
         */
        username?: string;
        /**
         * path to supervisorctl executable
         */
        supervisorctl_path?: string;
        /**
         * The name of the supervisord program or group to manage.
         * The name will be taken as group name when it ends with a colon I(:)
         * Group support is only available in Ansible version 1.6 or later.
         */
        name: string;
        /**
         * URL on which supervisord server is listening
         */
        server_url?: string;
        /**
         * The desired state of program/group.
         */
        state: "present" | "started" | "stopped" | "restarted" | "absent";
        /**
         * password to use for authentication
         */
        password?: string;
        /**
         * The supervisor configuration file path
         */
        config?: string;
        [k: string]: any;
      };
      /**
       * Manipulate Rackspace Cloud Block Storage Volume Attachments
       */
      rax_cbs_attachments?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Adds or removes a user from a MySQL database.
       */
      mysql_user?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * maintains ec2 security groups. This module has a dependency on python-boto >= 2.5
       */
      ec2_group?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add or Remove images from the glance repository.
       */
      glance_image?: {
        /**
         * Default: yes
         *
         * The tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: None
         *
         * Name of the region
         */
        region_name?: string;
        availability_zone?: string;
        /**
         * Default: bare
         *
         * The format of the container
         */
        container_format?: "aki" | "ari" | "bare" | "ovf";
        /**
         * Default: None
         *
         * The minimum ram required to deploy this image
         */
        min_ram?: string;
        /**
         * Default: qcow2
         *
         * The format of the disk that is getting uploaded
         */
        disk_format?: "aki" | "vhd" | "vmdk" | "raw" | "qcow2" | "vdi" | "iso";
        /**
         * Default: 180
         *
         * The time to wait for the image process to complete in seconds
         */
        timeout?: string;
        /**
         * Default: None
         *
         * A url from where the image can be downloaded, mutually exclusive with file parameter
         */
        copy_from?: string;
        /**
         * Default: None
         *
         * The owner of the image
         */
        owner?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: publicURL
         *
         * The name of the glance service's endpoint URL type
         */
        endpoint_type?: "publicURL" | "internalURL";
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone url for authentication
         */
        auth_url?: string;
        /**
         * Default: None
         *
         * The path to the file which has to be uploaded, mutually exclusive with copy_from
         */
        file?: string;
        /**
         * Default: yes
         *
         * Password of login user
         */
        login_password: string;
        /**
         * Default: None
         *
         * The minimum disk space required to deploy this image
         */
        min_disk?: string;
        /**
         * Default: yes
         *
         * Whether the image can be accessed publicly
         */
        is_public?: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Default: None
         *
         * Name that has to be given to the image
         */
        name: string;
        [k: string]: any;
      };
      /**
       * allows the addition, modification and deletion of sessions in a consul cluster. These sessions can then be used in conjunction with key value pairs to implement distributed locks. In depth documentation for working with sessions can be found here http://www.consul.io/docs/internals/sessions.html
       */
      consul_session?: {
        /**
         * Default: None
         *
         * the name of the node that with which the session will be associated. by default this is the name of the agent.
         */
        node?: string;
        /**
         * Default: None
         *
         * name of the datacenter in which the session exists or should be created.
         */
        datacenter?: string;
        /**
         * Default: None
         *
         * the name that should be associated with the session. This is opaque to Consul and not required.
         */
        name?: string;
        /**
         * Default: localhost
         *
         * host of the consul agent defaults to localhost
         */
        host?: string;
        /**
         * Default: 8500
         *
         * the port on which the consul agent is running
         */
        port?: string;
        /**
         * Default: 15s
         *
         * the optional lock delay that can be attached to the session when it is created. Locks for invalidated sessions ar blocked from being acquired until this delay has expired. Valid units for delays include 'ns', 'us', 'ms', 's', 'm', 'h'
         */
        delay?: string;
        /**
         * Default: present
         *
         * whether the session should be present i.e. created if it doesn't exist, or absent, removed if present. If created, the ID for the session is returned in the output. If absent, the name or ID is required to remove the session. Info for a single session, all the sessions for a node or all available sessions can be retrieved by specifying info, node or list for the state; for node or info, the node name or session id is required as parameter.
         */
        state?: string;
        /**
         * Default: None
         *
         * a list of checks that will be used to verify the session health. If all the checks fail, the session will be invalidated and any locks associated with the session will be release and can be acquired once the associated lock delay has expired.
         */
        checks?: string;
        [k: string]: any;
      };
      /**
       * Gets the default administrator password from any EC2 Windows instance.  The instance is referenced by its id (e.g. i-XXXXXXX). This module has a dependency on python-boto.
       */
      ec2_win_password?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * creates an EC2 snapshot from an existing EBS volume
       */
      ec2_snapshot?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Use this module to manage crontab entries. This module allows you to create named crontab entries, update, or delete them.
       * The module includes one line with the description of the crontab entry C("#Ansible: <name>") corresponding to the "name" passed to the module, which is used by future ansible/module calls to find/check the state.  The "name" parameter should be unique, and changing the "name" value will result in a new cron task being created (or a different one being removed)
       */
      cron?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * creates / deletes or resize a Rackspace Cloud Databases instance and optionally waits for it to be 'running'. The name option needs to be unique since it's used to identify the instance.
       */
      rax_cdb?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Gather facts about ec2 VPC subnets in AWS
       */
      ec2_vpc_subnet_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Notify airbrake about app deployments (see http://help.airbrake.io/kb/api-2/deploy-tracking)
       */
      airbrake_deployment?: {
        /**
         * URL of the project repository
         */
        repo?: string;
        /**
         * Default: https://airbrake.io/deploys
         *
         * Optional URL to submit the notification to. Use to send notifications to Airbrake-compliant tools like Errbit.
         */
        url?: string;
        /**
         * The airbrake environment name, typically 'production', 'staging', etc.
         */
        environment: string;
        /**
         * API token.
         */
        token: string;
        /**
         * The username of the person doing the deployment
         */
        user?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A hash, number, tag, or other identifier showing what revision was deployed
         */
        revision?: string;
        [k: string]: any;
      };
      /**
       * Return a list files based on specific criteria. Multiple criteria are AND'd together.
       */
      find?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Deploy applications to JBoss standalone using the filesystem
       */
      jboss?: {
        /**
         * The remote path of the application ear or war to deploy
         */
        src?: string;
        /**
         * Default: present
         *
         * Whether the application should be deployed or undeployed
         */
        state?: "present" | "absent";
        /**
         * Default: /var/lib/jbossas/standalone/deployments
         *
         * The location in the filesystem where the deployment scanner listens
         */
        deploy_path?: string;
        /**
         * The name of the deployment
         */
        deployment: string;
        [k: string]: any;
      };
      /**
       * Templates are processed by the Jinja2 templating language (U(http://jinja.pocoo.org/docs/)) - documentation on the template formatting can be found in the Template Designer Documentation (U(http://jinja.pocoo.org/docs/templates/)).
       * Six additional variables can be used in templates: C(ansible_managed) (configurable via the C(defaults) section of C(ansible.cfg)) contains a string which can be used to describe the template name, host, modification time of the template file and the owner uid, C(template_host) contains the node name of the template's machine, C(template_uid) the owner, C(template_path) the absolute path of the template, C(template_fullpath) is the absolute path of the template, and C(template_run_date) is the date that the template was rendered. Note that including a string that uses a date in the template will result in the template being marked 'changed' each time.
       */
      template?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Returns list of matching AMIs with AMI ID, along with other useful information
       * Can search AMIs with different owners
       * Can search by matching tag(s), by AMI name and/or other criteria
       * Results can be sorted and sliced
       */
      ec2_ami_find?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Look up the most recent AMI on AWS for a given operating system.
       * Returns C(ami), C(aki), C(ari), C(serial), C(tag)
       * If there is no AKI or ARI associated with an image, these will be C(null).
       * Only supports images from cloud-images.ubuntu.com
       * Example output: C({"ami": "ami-69f5a900", "changed": false, "aki": "aki-88aa75e1", "tag": "release", "ari": null, "serial": "20131024"})
       */
      ec2_ami_search?: {
        /**
         * Default: server
         *
         * Type of release.
         */
        stream?: "server" | "desktop";
        /**
         * Default: paravirtual
         *
         * virutalization type
         */
        virt?: "paravirtual" | "hvm";
        /**
         * Default: us-east-1
         *
         * EC2 region
         */
        region?:
          | "ap-northeast-1"
          | "ap-southeast-1"
          | "ap-southeast-2"
          | "eu-central-1"
          | "eu-west-1"
          | "sa-east-1"
          | "us-east-1"
          | "us-west-1"
          | "us-west-2"
          | "us-gov-west-1";
        /**
         * short name of the release (e.g., C(precise))
         */
        release: string;
        /**
         * Default: amd64
         *
         * CPU architecture
         */
        arch?: "i386" | "amd64";
        /**
         * Default: ebs
         *
         * Back-end store for instance
         */
        store?: "ebs" | "ebs-io1" | "ebs-ssd" | "instance-store";
        /**
         * Linux distribution (e.g., C(ubuntu))
         */
        distro: "ubuntu";
        [k: string]: any;
      };
      /**
       * Creates, modifies, and deletes RDS parameter groups. This module has a dependency on python-boto >= 2.5.
       */
      rds_param_group?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Reads data out of XenAPI, can be used instead of multiple xe commands.
       */
      xenserver_facts?: {
        [k: string]: any;
      };
      /**
       * Creates, modifies, and deletes Elasticache subnet groups. This module has a dependency on python-boto >= 2.5.
       */
      elasticache_subnet_group?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Updates Vertica configuration parameters.
       */
      vertica_configuration?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * This module can be used to add/remove an ESXi host to/from vCenter
       */
      vmware_host?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Add or remove domains or subdomains on a Webfaction host. Further documentation at http://github.com/quentinsf/ansible-webfaction.
       */
      webfaction_domain?: {
        /**
         * Default: present
         *
         * Whether the domain should exist
         */
        state?: "present" | "absent";
        /**
         * Any subdomains to create.
         */
        subdomains?: string;
        /**
         * The webfaction account to use
         */
        login_name: string;
        /**
         * The name of the domain
         */
        name: string;
        /**
         * The webfaction password to use
         */
        login_password: string;
        [k: string]: any;
      };
      /**
       * Creates, deletes, or modifies rds instances.  When creating an instance it can be either a new instance or a read-only replica of an existing instance. This module has a dependency on python-boto >= 2.5. The 'promote' command requires boto >= 2.18.0. Certain features such as tags rely on boto.rds2 (boto >= 2.26.0)
       */
      rds?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Allows the addition, modification and deletion of key/value entries in a consul cluster via the agent. The entire contents of the record, including the indices, flags and session are returned as 'value'.
       * If the key represents a prefix then Note that when a value is removed, the existing value if any is returned as part of the results.
       * See http://www.consul.io/docs/agent/http.html#kv for more details.
       */
      consul_kv?: {
        /**
         * Default: None
         *
         * used when acquiring a lock with a session. If the cas is 0, then Consul will only put the key if it does not already exist. If the cas value is non-zero, then the key is only set if the index matches the ModifyIndex of that key.
         */
        cas?: string;
        /**
         * if the key represents a prefix, each entry with the prefix can be retrieved by setting this to true.
         */
        recurse?: string;
        /**
         * Default: present
         *
         * the action to take with the supplied key and value. If the state is 'present', the key contents will be set to the value supplied, 'changed' will be set to true only if the value was different to the current contents. The state 'absent' will remove the key/value pair, again 'changed' will be set to true only if the key actually existed prior to the removal. An attempt can be made to obtain or free the lock associated with a key/value pair with the states 'acquire' or 'release' respectively. a valid session must be supplied to make the attempt changed will be true if the attempt is successful, false otherwise.
         */
        state?: string;
        /**
         * the value should be associated with the given key, required if state is present
         */
        value?: string;
        /**
         * Default: None
         *
         * the token key indentifying an ACL rule set that controls access to the key value pair
         */
        token?: string;
        /**
         * Default: None
         *
         * the session that should be used to acquire or release a lock associated with a key/value pair
         */
        session?: string;
        /**
         * Default: None
         *
         * opaque integer value that can be passed when setting a value.
         */
        flags?: string;
        /**
         * the key at which the value should be stored.
         */
        key?: string;
        /**
         * Default: localhost
         *
         * host of the consul agent defaults to localhost
         */
        host?: string;
        /**
         * Default: 8500
         *
         * the port on which the consul agent is running
         */
        port?: string;
        [k: string]: any;
      };
      /**
       * This module provides user management for ejabberd servers
       */
      ejabberd_user?: {
        /**
         * the name of the user to manage
         */
        username?: string;
        /**
         * Default: present
         *
         * describe the desired state of the user to be managed
         */
        state?: "present" | "absent";
        /**
         * the password to assign to the username
         */
        password?: string;
        /**
         * enables or disables the local syslog facility for this module
         */
        logging?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * the ejabberd host associated with this username
         */
        host?: string;
        [k: string]: any;
      };
      /**
       * Add or remove mailboxes on a Webfaction account. Further documentation at http://github.com/quentinsf/ansible-webfaction.
       */
      webfaction_mailbox?: {
        /**
         * The password for the mailbox
         */
        mailbox_password: string;
        /**
         * Default: present
         *
         * Whether the mailbox should exist
         */
        state?: "present" | "absent";
        /**
         * The webfaction account to use
         */
        login_name: string;
        /**
         * The name of the mailbox
         */
        mailbox_name: string;
        /**
         * The webfaction password to use
         */
        login_password: string;
        [k: string]: any;
      };
      /**
       * The M(sns_topic) module allows you to create, delete, and manage subscriptions for AWS SNS topics.
       */
      sns_topic?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Creates, Removes and configures a IIS Web site
       */
      win_iis_website?: {
        /**
         * The host header to bind to / use for the new site.
         */
        hostname?: string;
        /**
         * Names of web site
         */
        name?: string;
        /**
         * Custom site Parameters from string where properties are seperated by a pipe and property name/values by colon Ex. "foo:1|bar:2"
         */
        parameters?: string;
        /**
         * The IP address to bind to / use for the new site.
         */
        ip?: string;
        /**
         * The physical path on the remote host to use for the new site. The specified folder must already exist.
         */
        physical_path?: string;
        /**
         * The application pool in which the new site executes.
         */
        application_pool?: string;
        /**
         * Enables HTTPS binding on the site..
         */
        ssl?: string;
        /**
         * State of the web site
         */
        state?: string;
        /**
         * The port to bind to / use for the new site.
         */
        port?: string;
        [k: string]: any;
      };
      /**
       * After .NET framework is installed/updated, Windows will probably want to recompile things to optimise for the host.
       * This happens via scheduled task, usually at some inopportune time.
       * This module allows you to run this task on your own schedule, so you incur the CPU hit at some more convenient and controlled time.
       * http://blogs.msdn.com/b/dotnet/archive/2013/08/06/wondering-why-mscorsvw-exe-has-high-cpu-usage-you-can-speed-it-up.aspx
       */
      win_dotnet_ngen?: {
        [k: string]: any;
      };
      /**
       * Launches an AWS CloudFormation stack and waits for it complete.
       */
      cloudformation?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module will replace all instances of a pattern within a file.
       * It is up to the user to maintain idempotence by ensuring that the same pattern would never match any replacements made.
       */
      replace?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manages I(apk) packages for Alpine Linux.
       */
      apk?: {
        /**
         * Default: present
         *
         * Indicates the desired package(s) state.
         * C(present) ensures the package(s) is/are present.
         * C(absent) ensures the package(s) is/are absent.
         * C(latest) ensures the package(s) is/are present and the latest version(s).
         */
        state?: "present" | "installed" | "absent" | "removed" | "latest";
        /**
         * Upgrade all installed packages to their latest version.
         */
        upgrade?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Update repository indexes. Can be run with other steps or on it's own.
         */
        update_cache?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A package name, like C(foo), or mutliple packages, like C(foo, bar).
         */
        name?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        [k: string]: any;
      };
      /**
       * Notify BigPanda when deployments start and end (successfully or not). Returns a deployment object containing all the parameters for future module calls.
       */
      bigpanda?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Creates, Removes and configures a IIS Web applications
       */
      win_iis_webapplication?: {
        /**
         * State of the web application
         */
        state?: string;
        /**
         * The application pool in which the new site executes.
         */
        application_pool?: string;
        /**
         * Name of the Web applicatio
         */
        name?: string;
        /**
         * The physical path on the remote host to use for the new applicatiojn. The specified folder must already exist.
         */
        physical_path?: string;
        /**
         * Name of the site on which the application is created.
         */
        site?: string;
        [k: string]: any;
      };
      /**
       * Fetches a file from a URL and saves to locally
       */
      win_get_url?: {
        /**
         * Basic authentication username
         */
        username?: string;
        /**
         * Default: True
         *
         * If C(yes), will always download the file.  If C(no), will only download the file if it does not exist or the remote file has been modified more recently than the local file.
         */
        force?: string;
        /**
         * The full URL of a file to download
         */
        url?: string;
        /**
         * Skip SSL certificate validation if true
         */
        skip_certificate_validation?: string;
        /**
         * The full URL of the proxy server to download through.
         */
        proxy_url?: string;
        /**
         * Proxy authentication password
         */
        proxy_password?: string;
        /**
         * The absolute path of the location to save the file at the URL. Be sure to include a filename and extension as appropriate.
         */
        dest?: string;
        /**
         * Proxy authentication username
         */
        proxy_username?: string;
        /**
         * Basic authentication password
         */
        password?: string;
        [k: string]: any;
      };
      /**
       * Adds or removes (rpm --import) a gpg key to your rpm database.
       */
      rpm_key?: {
        /**
         * Default: present
         *
         * Wheather the key will be imported or removed from the rpm db.
         */
        state?: "present" | "absent";
        /**
         * Default: yes
         *
         * If C(no) and the C(key) is a url starting with https, SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Key that will be modified. Can be a url, a file, or a keyid if the key already exists in the database.
         */
        key: string;
        [k: string]: any;
      };
      /**
       * Send a message to hipchat
       */
      hipchat?: {
        [k: string]: any;
      };
      /**
       * Manipulate Rackspace Cloud Autoscale Scaling Policy
       */
      rax_scaling_policy?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Installs, upgrade, removes, and lists packages and groups with the I(dnf) package manager.
       */
      dnf?: {
        [k: string]: any;
      };
      /**
       * nssm is a service helper which doesn't suck. See https://nssm.cc/ for more information.
       */
      win_nssm?: {
        /**
         * Name of the service to operate on
         */
        name?: string;
        /**
         * Default: auto
         *
         * If C(auto) is selected, the service will start at bootup. C(manual) means that the service will start only when another service needs it. C(disabled) means that the service will stay off, regardless if it is needed or not.
         */
        start_mode?: string;
        /**
         * Path to receive error output
         */
        stderr_file?: string;
        /**
         * The application binary to run as a service
         * Specify this whenever the service may need to be installed (state: present, started, stopped, restarted)
         * Note that the application name must look like the following, if the directory includes spaces:
         * nssm install service "c:\Program Files\app.exe\" "C:\Path with spaces\"
         * See commit 0b386fc1984ab74ee59b7bed14b7e8f57212c22b in the nssm.git project for more info (https://git.nssm.cc/?p=nssm.git;a=commit;h=0b386fc1984ab74ee59b7bed14b7e8f57212c22b)
         */
        application?: string;
        /**
         * Default: started
         *
         * State of the service on the system
         * Note that NSSM actions like "pause", "continue", "rotate" do not fit the declarative style of ansible, so these should be implemented via the ansible command module
         */
        state?: string;
        /**
         * Service dependencies that has to be started to trigger startup, separated by comma.
         */
        dependencies?: string;
        /**
         * User to be used for service startup
         */
        user?: string;
        /**
         * Password to be used for service startup
         */
        password?: string;
        /**
         * Path to receive output
         */
        stdout_file?: string;
        /**
         * Parameters to be passed to the application when it starts
         */
        app_parameters?: string;
        [k: string]: any;
      };
      /**
       * Manage installation and Gem version dependencies for Ruby using the Bundler gem
       */
      bundler?: {
        /**
         * The path to the bundler executable
         */
        executable?: string;
        /**
         * Default: temporary working directory
         *
         * The directory to execute the bundler commands from. This directoy needs to contain a valid Gemfile or .bundle/ directory
         */
        chdir?: string;
        /**
         * Default: Gemfile in current directory
         *
         * Only applies if state is C(present). The path to the gemfile to use to install gems.
         */
        gemfile?: string;
        /**
         * Default: no
         *
         * Only applies if state is C(present). If set removes any gems on the target host that are not in the gemfile
         */
        clean?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: yes
         *
         * Only applies if state is C(present). Installs gems in the local user's cache or for all users
         */
        user_install?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A space separated string of additional commands that can be applied to the Bundler command. Refer to the Bundler documentation for more information
         */
        extra_args?: string;
        /**
         * Default: present
         *
         * The desired state of the Gem bundle. C(latest) updates gems to the most recent, acceptable version
         */
        state?: "present" | "latest";
        /**
         * Default: no
         *
         * Only applies if state is C(present). If set it will only install gems that are in the default or production groups. Requires a Gemfile.lock file to have been created prior
         */
        deployment_mode?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Only applies if state is C(present). Specifies the directory to install any gem bins files to. When executed the bin files will run within the context of the Gemfile and fail if any required gem dependencies are not installed. If C(chdir) is set then this path is relative to C(chdir)
         */
        binstub_directory?: string;
        /**
         * A list of Gemfile groups to exclude during operations. This only applies when state is C(present). Bundler considers this a 'remembered' property for the Gemfile and will automatically exclude groups in future operations even if C(exclude_groups) is not set
         */
        exclude_groups?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: no
         *
         * If set only installs gems from the cache on the target host
         */
        local?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: RubyGems gem paths
         *
         * Only applies if state is C(present). Specifies the directory to install the gems into. If C(chdir) is set then this path is relative to C(chdir)
         */
        gem_path?: string;
        [k: string]: any;
      };
      /**
       * Manages packages with I(urpmi) (such as for Mageia or Mandriva)
       */
      urpmi?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Ansible version of the "docker login" CLI command.
       * This module allows you to login to a Docker registry without directly pulling an image or performing any other actions.
       * It will write your login credentials to your local .dockercfg file that is compatible to the Docker CLI client as well as docker-py and all other Docker related modules that are based on docker-py.
       */
      docker_login?: {
        /**
         * The username for the registry account
         */
        username: string;
        /**
         * Default: ~/.docker/config.json
         *
         * Use a custom path for the .dockercfg file
         */
        dockercfg_path?: string;
        /**
         * Whether refresh existing authentication on the Docker server (boolean)
         */
        reauth?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: unix://var/run/docker.sock
         *
         *
         */
        docker_url?: string;
        /**
         * Default: https://index.docker.io/v1/
         *
         * URL of the registry, defaults to: https://index.docker.io/v1/
         */
        registry?: string;
        /**
         * Default: 600
         *
         * The HTTP request timeout in seconds
         */
        timeout?: number | string;
        /**
         * The plaintext password for the registry account
         */
        password: string;
        /**
         * Default: None
         *
         * The email address for the registry account. Note that private registries usually don't need this, but if you want to log into your Docker Hub account (default behaviour) you need to specify this in order to be able to log in.
         */
        email?: string;
        [k: string]: any;
      };
      /**
       * Return basic facts pertaining to a vSphere virtual machine guest
       */
      vmware_vm_facts?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Create VMware vSphere Cluster
       */
      vmware_cluster?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * The M(grove) module sends a message for a service to a Grove.io channel.
       */
      grove?: {
        /**
         * Default: ansible
         *
         * Name of the service (displayed as the "user" in the message)
         */
        service?: string;
        /**
         * Service URL for the web client
         */
        url?: string;
        /**
         * Icon for the service
         */
        icon_url?: string;
        /**
         * Token of the channel to post to.
         */
        channel_token: string;
        /**
         * Message content
         */
        message: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Gather facts about ec2 instances in AWS
       */
      ec2_remote_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add or Remove key pair from OpenStack
       */
      os_keypair?: {
        /**
         * Default: None
         *
         * The public key that would be uploaded to nova and injected into VMs upon creation.
         */
        public_key?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: None
         *
         * Path to local file containing ssh public key. Mutually exclusive with public_key.
         */
        public_key_file?: string;
        /**
         * Default: None
         *
         * Name that has to be given to the key pair
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Add/remove subnet from a network
       */
      quantum_subnet?: {
        /**
         * Default: None
         *
         * Name of the region
         */
        region_name?: string;
        /**
         * Default: True
         *
         * Whether DHCP should be enabled for this subnet.
         */
        enable_dhcp?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        availability_zone?: string;
        /**
         * Default: None
         *
         * The name of the tenant for whom the subnet should be created
         */
        tenant_name?: string;
        /**
         * Default: None
         *
         * DNS nameservers for this subnet, comma-separated
         */
        dns_nameservers?: string;
        /**
         * Default: True
         *
         * The tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: None
         *
         * From the subnet pool the starting address from which the IP should be allocated
         */
        allocation_pool_start?: string;
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone URL for authentication
         */
        auth_url?: string;
        /**
         * Default: True
         *
         * Password of login user
         */
        login_password: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Default: None
         *
         * The ip that would be assigned to the gateway for this subnet
         */
        gateway_ip?: string;
        /**
         * Default: None
         *
         * The CIDR representation of the subnet that should be assigned to the subnet
         */
        cidr: string;
        /**
         * Default: None
         *
         * Name of the network to which the subnet should be attached
         */
        network_name: string;
        /**
         * Default: 4
         *
         * The IP version of the subnet 4 or 6
         */
        ip_version?: "4" | "6";
        /**
         * Default: None
         *
         * From the subnet pool the last IP that should be assigned to the virtual machines
         */
        allocation_pool_end?: string;
        /**
         * Default: None
         *
         * The name of the subnet that should be created
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Gather facts about ec2 VPC route tables in AWS
       */
      ec2_vpc_route_table_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * The M(known_hosts) module lets you add or remove a host from the C(known_hosts) file. This is useful if you're going to want to use the M(git) module over ssh, for example. If you have a very large number of host keys to manage, you will find the M(template) module more useful.
       */
      known_hosts?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Retrieve facts for a device using SNMP, the facts will be inserted to the ansible_facts key.
       */
      snmp_facts?: {
        /**
         * Username for SNMPv3, required if version is v3
         */
        username?: string;
        /**
         * Encryption algoritm, required if level is authPriv
         */
        privacy?: "des" | "aes";
        /**
         * Authentication level, required if version is v3
         */
        level?: "authPriv" | "authNoPriv";
        /**
         * The SNMP community string, required if version is v2/v2c
         */
        community?: string;
        /**
         * Authentication key, required if version is v3
         */
        authkey?: string;
        /**
         * Set to target snmp server (normally {{inventory_hostname}})
         */
        host: string;
        /**
         * SNMP Version to use, v2/v2c or v3
         */
        version: "v2" | "v2c" | "v3";
        /**
         * Hashing algoritm, required if version is v3
         */
        integrity?: "md5" | "sha";
        removeplaceholder?: string;
        /**
         * Encryption key, required if version is authPriv
         */
        privkey?: string;
        [k: string]: any;
      };
      /**
       * This module is automatically called by playbooks to gather useful variables about remote hosts that can be used in playbooks. It can also be executed directly by C(/usr/bin/ansible) to check what variables are available to a host. Ansible provides many I(facts) about the system, automatically.
       */
      setup?: {
        /**
         * Default: *
         *
         * if supplied, only return facts that match this shell-style (fnmatch) wildcard.
         */
        filter?: string;
        /**
         * Default: /etc/ansible/facts.d
         *
         * path used for local ansible facts (*.fact) - files in this dir will be run (if executable) and their results be added to ansible_local facts if a file is not executable it is read. File/results format can be json or ini-format
         */
        fact_path?: string;
        [k: string]: any;
      };
      /**
       * Deploy, start, update, scale, restart, restore, stop and destroy instances.
       */
      cs_instance?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Creates, removes and lists tags from any EC2 resource.  The resource is referenced by its resource id (e.g. an instance being i-XXXXXXX). It is designed to be used with complex args (tags), see the examples.  This module has a dependency on python-boto.
       */
      ec2_tag?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Creates, modifies, and deletes RDS database subnet groups. This module has a dependency on python-boto >= 2.5.
       */
      rds_subnet_group?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module works like M(copy), but in reverse. It is used for fetching files from remote machines and storing them locally in a file tree, organized by hostname. Note that this module is written to transfer log files that might not be present, so a missing remote file won't be an error unless fail_on_missing is set to 'yes'.
       */
      fetch?: {
        /**
         * A directory to save the file into. For example, if the I(dest) directory is C(/backup) a I(src) file named C(/etc/profile) on host C(host.example.com), would be saved into C(/backup/host.example.com/etc/profile)
         */
        dest?: string;
        /**
         * The file on the remote system to fetch. This I(must) be a file, not a directory. Recursive fetching may be supported in a later release.
         */
        src?: string;
        /**
         * Allows you to override the default behavior of appending hostname/path/to/file to the destination.  If dest ends with '/', it will use the basename of the source file, similar to the copy module. Obviously this is only handy if the filenames are unique.
         */
        flat?: string;
        /**
         * Default: no
         *
         * Makes it fails when the source file is missing.
         */
        fail_on_missing?: string;
        /**
         * Default: yes
         *
         * Verify that the source and destination checksums match after the files are fetched.
         */
        validate_checksum?: string;
        [k: string]: any;
      };
      /**
       * This module sends push notifications via Pushbullet to channels or devices.
       */
      pushbullet?: {
        /**
         * Body of the notification, e.g. Details of the fault you're alerting.
         */
        body?: string;
        /**
         * Title of the notification.
         */
        title: string;
        url?: string;
        /**
         * Default: note
         *
         * Thing you wish to push.
         */
        push_type?: "note" | "link";
        /**
         * The device NAME you wish to send a push notification, as seen on the Pushbullet main page.
         */
        device?: string;
        /**
         * Push bullet API token
         */
        api_key: string;
        /**
         * The channel TAG you wish to broadcast a push notification, as seen on the "My Channels" > "Edit your channel" at Pushbullet page.
         */
        channel?: string;
        [k: string]: any;
      };
      /**
       * Creates or deletes ec2 images.
       */
      ec2_ami?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Creates or deletes CloudTrail configuration. Ensures logging is also enabled.
       */
      cloudtrail?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create or Remove Ironic nodes from OpenStack.
       */
      os_ironic?: {
        /**
         * Default: None
         *
         * globally unique identifier (UUID) to be given to the resource. Will be auto-generated if not specified, and name is specified.
         * Definition of a UUID will always take precedence to a name value.
         */
        uuid?: string;
        /**
         * Information for this server's driver. Will vary based on which driver is in use. Any sub-field which is populated will be validated during creation.
         */
        driver_info?: string;
        /**
         * A list of network interface cards, eg, " - mac: aa:bb:cc:aa:bb:cc"
         */
        nics?: string;
        /**
         * Default: None
         *
         * The name of the Ironic Driver to use with this node.
         */
        driver?: string;
        /**
         * Default: None
         *
         * If noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API.  Use with "auth" and "auth_type" settings set to None.
         */
        ironic_url?: string;
        /**
         * Default: present
         *
         * Indicates desired state of the resource
         */
        state?: string;
        /**
         * Default: None
         *
         * Associate the node with a pre-defined chassis.
         */
        chassis_uuid?: string;
        /**
         * Allows the code that would assert changes to nodes to skip the update if the change is a single line consisting of the password field.  As of Kilo, by default, passwords are always masked to API requests, which means the logic as a result always attempts to re-assert the password field.
         */
        skip_update_of_driver_password?: string;
        /**
         * Definition of the physical characteristics of this server, used for scheduling purposes
         */
        properties?: string;
        /**
         * Default: None
         *
         * unique name identifier to be given to the resource.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * This module will search a file for a line, and ensure that it is present or absent.
       * This is primarily useful when you want to change a single line in a file only. See the M(replace) module if you want to change multiple, similar lines; for other cases, see the M(copy) or M(template) modules.
       */
      lineinfile?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * This module can create and destroy Google Compute Engine networks and firewall rules U(https://developers.google.com/compute/docs/networking). The I(name) parameter is reserved for referencing a network while the I(fwname) parameter is used to reference firewall rules. IPv4 Address ranges must be specified using the CIDR U(http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) format. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.
       */
      gce_net?: {
        /**
         * the source instance tags for creating a firewall rule
         */
        src_tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * name of the network
         */
        name?: string;
        /**
         * the source IPv4 address range in CIDR notation
         */
        src_range?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * the protocol:ports to allow ('tcp:80' or 'tcp:80,443' or 'tcp:80-800;udp:1-25')
         */
        allowed?: string;
        /**
         * name of the firewall rule
         */
        fwname?: string;
        /**
         * path to the pem file associated with the service account email
         */
        pem_file?: string;
        /**
         * Default: present
         *
         * desired state of the network or firewall
         */
        state?: string;
        /**
         * service account email
         */
        service_account_email?: string;
        /**
         * the IPv4 address range in CIDR notation for the network
         */
        ipv4_range?: string;
        /**
         * your GCE project ID
         */
        project_id?: string;
        /**
         * the target instance tags for creating a firewall rule
         */
        target_tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        [k: string]: any;
      };
      /**
       * Manages packages with I(apt-rpm). Both low-level (I(rpm)) and high-level (I(apt-get)) package manager binaries required.
       */
      apt_rpm?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Manage logging facility of an s3 bucket in AWS
       */
      s3_logging?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Creates or terminates Google Compute Engine (GCE) instances.  See U(https://cloud.google.com/products/compute-engine) for an overview. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.
       */
      gce?: {
        /**
         * a list of persistent disks to attach to the instance; a string value gives the name of the disk; alternatively, a dictionary value can define 'name' and 'mode' ('READ_ONLY' or 'READ_WRITE'). The first entry will be the boot disk (which must be READ_WRITE).
         */
        disks?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * identifier when working with a single instance
         */
        name?: string;
        /**
         * Default: us-central1-a
         *
         * the GCE zone to use
         */
        zone?: string;
        /**
         * a comma-separated list of tags to associate with the instance
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: ephemeral
         *
         * type of external ip, ephemeral by default
         */
        external_ip?: "ephemeral" | "none";
        /**
         * service account email
         */
        service_account_email?: string;
        /**
         * a comma-separated list of instance names to create or destroy
         */
        instance_names?: string;
        /**
         * service account permissions (see U(https://cloud.google.com/sdk/gcloud/reference/compute/instances/create), --scopes section for detailed information)
         */
        service_account_permissions?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: false
         *
         * set to true if the instance can forward ip packets (useful for gateways)
         */
        ip_forward?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * a hash/dictionary of custom data for the instance; '{"key":"value",...}'
         */
        metadata?: string;
        /**
         * Default: false
         *
         * if set, create the instance with a persistent boot disk
         */
        persistent_boot_disk?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * path to the pem file associated with the service account email
         */
        pem_file?: string;
        /**
         * your GCE project ID
         */
        project_id?: string;
        /**
         * Default: present
         *
         * desired state of the resource
         */
        state?: "active" | "present" | "absent" | "deleted";
        /**
         * Default: n1-standard-1
         *
         * machine type to use for the instance, use 'n1-standard-1' by default
         */
        machine_type?: string;
        /**
         * Default: true
         *
         * if set boot disk will be removed after instance destruction
         */
        disk_auto_delete?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: debian-7
         *
         * image string to use for the instance
         */
        image?: string;
        /**
         * Default: default
         *
         * name of the network, 'default' will be used if not specified
         */
        network?: string;
        [k: string]: any;
      };
      /**
       * This module allows the user to manage S3 buckets and the objects within them. Includes support for creating and deleting both objects and buckets, retrieving objects as files or strings and generating download links. This module has a dependency on python-boto.
       */
      s3?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages Gentoo packages
       */
      portage?: {
        [k: string]: any;
      };
      /**
       * The standard package manager for SmartOS, but also usable on NetBSD or any OS that uses C(pkgsrc).  (Home: U(http://pkgin.net/))
       */
      pkgin?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * A trivial test module, this module always returns C(pong) on successful contact. It does not make sense in playbooks, but it is useful from C(/usr/bin/ansible) to verify the ability to login and that a usable python is configured.
       * This is NOT ICMP ping, this is just a trivial test module.
       */
      ping?: {
        data?: string;
        [k: string]: any;
      };
      /**
       * Creates and deletes Route53 private and public zones
       */
      route53_zone?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create and remove security groups.
       */
      cs_securitygroup?: {
        /**
         * Domain the security group is related to.
         */
        domain?: string;
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        /**
         * Description of the security group.
         */
        description?: string;
        api_timeout?: number | string;
        api_region?: string;
        /**
         * Name of the project the security group to be created in.
         */
        project?: string;
        /**
         * Default: present
         *
         * State of the security group.
         */
        state?: "present" | "absent";
        /**
         * Account the security group is related to.
         */
        account?: string;
        api_key?: string;
        /**
         * Name of the security group.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Collect facts from F5 BIG-IP devices via iControl SOAP API
       */
      bigip_facts?: {
        /**
         * Fact category or list of categories to collect
         */
        include?: string;
        /**
         * BIG-IP host
         */
        server?: string;
        /**
         * Shell-style glob matching string used to filter fact keys. Not applicable for software and system_info fact categories.
         */
        filter?: string;
        /**
         * Default: True
         *
         * BIG-IP session support; may be useful to avoid concurrency issues in certain circumstances.
         */
        session?: string;
        /**
         * BIG-IP username
         */
        user?: string;
        /**
         * BIG-IP password
         */
        password?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites.  Prior to 2.0, this module would always validate on python >= 2.7.9 and never validate on python <= 2.7.8
         */
        validate_certs?: string;
        [k: string]: any;
      };
      /**
       * Create or Remove cinder block storage volumes
       */
      os_volume?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module gets the status of an asynchronous task.
       */
      async_status?: {
        /**
         * Job or task identifier
         */
        jid: string;
        /**
         * Default: status
         *
         * if C(status), obtain the status; if C(cleanup), clean up the async job cache located in C(~/.ansible_async/) for the specified job I(jid).
         */
        mode?: "status" | "cleanup";
        [k: string]: any;
      };
      /**
       * Manage node.js packages with Node Package Manager (npm)
       */
      npm?: {
        /**
         * The executable location for npm.
         * This is useful if you are using a version manager, such as nvm
         */
        executable?: string;
        /**
         * The name of a node.js library to install
         */
        name?: string;
        /**
         * Install the node.js library globally
         */
        global?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Use the --ignore-scripts flag when installing.
         */
        ignore_scripts?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * The state of the node.js library
         */
        state?: "present" | "absent" | "latest";
        /**
         * Install dependencies in production mode, excluding devDependencies
         */
        production?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The registry to install modules from.
         */
        registry?: string;
        /**
         * The version to be installed
         */
        version?: string;
        /**
         * The base path where to install the node.js libraries
         */
        path?: string;
        [k: string]: any;
      };
      /**
       * This module allows setting new variables.  Variables are set on a host-by-host basis just like facts discovered by the setup module.
       * These variables will survive between plays during an Ansible run, but will not be saved across executions even if you use a fact cache.
       */
      set_fact?: {
        /**
         * The C(set_fact) module takes key=value pairs as variables to set in the playbook scope. Or alternatively, accepts complex arguments using the C(args:) statement.
         */
        key_value?: string;
        [k: string]: any;
      };
      /**
       * Configure the VMkernel IP Address
       */
      vmware_vmkernel_ip_config?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Notify newrelic about app deployments (see https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/deployment-notifications#api)
       */
      newrelic_deployment?: {
        /**
         * (one of app_name or application_id are required) The application id, found in the URL when viewing the application in RPM
         */
        application_id?: string;
        /**
         * Text annotation for the deployment - notes for you
         */
        description?: string;
        /**
         * A list of changes for this deployment
         */
        changelog?: string;
        /**
         * Name of the application
         */
        appname?: string;
        /**
         * The environment for this deployment
         */
        environment?: string;
        /**
         * API token, to place in the x-api-key header.
         */
        token: string;
        /**
         * The name of the user/process that triggered this deployment
         */
        user?: string;
        /**
         * (one of app_name or application_id are required) The value of app_name in the newrelic.yml file used by the application
         */
        app_name?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A revision number (e.g., git commit SHA)
         */
        revision?: string;
        [k: string]: any;
      };
      /**
       * Checks management connectivity of a windows host
       */
      win_ping?: {
        /**
         * Default: pong
         *
         * Alternate data to return instead of 'pong'
         */
        data?: string;
        [k: string]: any;
      };
      /**
       * Attach or Detach volumes from OpenStack VM's
       */
      os_server_volume?: {
        /**
         * Name or id of volume you want to attach to a server
         */
        volume?: string;
        /**
         * Default: None
         *
         * Device you want to attach. Defaults to auto finding a device name.
         */
        device?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Name or ID of server you want to attach a volume to
         */
        server?: string;
        [k: string]: any;
      };
      /**
       * Create or Delete objects and containers from OpenStack
       */
      os_object?: {
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * The name of the container in which to create the object
         */
        container?: string;
        /**
         * Name to be give to the object. If omitted, operations will be on the entire container
         */
        name?: string;
        /**
         * Default: private
         *
         * desired container access level.
         */
        container_access?: string;
        /**
         * Path to local file to be uploaded.
         */
        filename?: string;
        [k: string]: any;
      };
      /**
       * Manage cache clusters in Amazon Elasticache.
       * Returns information about the specified cache cluster.
       */
      elasticache?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * An Ansible module to deploy blue print package on a set of servers in CenturyLink Cloud.
       */
      clc_blueprint_package?: {
        /**
         * A list of server Ids to deploy the blue print package.
         */
        server_ids:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * Whether to install or un-install the package. Currently it supports only "present" for install action.
         */
        state?: "present";
        /**
         * The dictionary of arguments required to deploy the blue print.
         */
        package_params?: {
          [k: string]: any;
        };
        /**
         * The package id of the blue print.
         */
        package_id: string;
        /**
         * Default: True
         *
         * Whether to wait for the tasks to finish before returning.
         */
        wait?: string;
        [k: string]: any;
      };
      /**
       * Adds or removes nat rules from a gateway in a vca environment
       */
      vca_nat?: {
        /**
         * Default: None
         *
         * The vca username or email address, if not set the environment variable VCA_USER is checked for the username.
         */
        username?: string;
        /**
         * Default: gateway
         *
         * The name of the gateway of the vdc where the rule should be added
         */
        gateway_name?: string;
        /**
         * If set to true, it will delete all rules in the gateway that are not given as paramter to this module.
         */
        purge_rules?: string;
        /**
         * A list of rules to be added to the gateway, Please see examples on valid entries
         */
        nat_rules?: string;
        /**
         * Default: present
         *
         * if the object should be added or removed
         */
        state?: string;
        /**
         * Default: None
         *
         * The instance id in a vchs environment to be used for creating the vapp
         */
        instance_id?: string;
        /**
         * Default: None
         *
         * The authentication host to be used when service type  is vcd.
         */
        host?: string;
        /**
         * Default: vca
         *
         * The type of service we are authenticating against
         */
        service_type?: string;
        /**
         * Default: None
         *
         * The org to login to for creating vapp, mostly set when the service_type is vdc.
         */
        org?: string;
        /**
         * Default: None
         *
         * The vca password, if not set the environment variable VCA_PASS is checked for the password
         */
        password?: string;
        /**
         * Default: None
         *
         * The name of the vdc where the gateway is located.
         */
        vdc_name?: string;
        /**
         * Default: 5.7
         *
         * The api version to be used with the vca
         */
        api_version?: string;
        /**
         * Default: True
         *
         * If the certificates of the authentication is to be verified
         */
        verify_certs?: string;
        [k: string]: any;
      };
      /**
       * Modern SSH clients support ControlPersist which is just as fast as fireball was.  Please enable that in ansible.cfg as a replacement for fireball.
       * Removed in ansible 2.0.
       */
      fireball?: {
        [k: string]: any;
      };
      /**
       * Create and modify issues in a JIRA instance.
       */
      jira?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * This is a simple module that supports creating or removing vDCs. A vDC is required before you can create servers. This module has a dependency on profitbricks >= 1.0.0
       */
      profitbricks_datacenter?: {
        /**
         * The description of the virtual datacenter.
         */
        description?: string;
        /**
         * The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environement variable.
         */
        subscription_user?: string;
        /**
         * The name of the virtual datacenter.
         */
        name?: string;
        /**
         * THe ProfitBricks password. Overrides the PB_PASSWORD environement variable.
         */
        subscription_password?: string;
        /**
         * Default: present
         *
         * create or terminate datacenters
         */
        state?: string;
        /**
         * Default: 600
         *
         * how long before wait gives up, in seconds
         */
        wait_timeout?: string;
        /**
         * Default: us/las
         *
         * The datacenter location.
         */
        location?: "us/las" | "us/lasdev" | "de/fra" | "de/fkb";
        /**
         * Default: yes
         *
         * wait for the datacenter to be created before returning
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module manipulates sysctl entries and optionally performs a C(/sbin/sysctl -p) after changing them.
       */
      sysctl?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Create or Remove virtual machines from Openstack.
       */
      nova_compute?: {
        /**
         * Default: None
         *
         * Name of the availability zone
         */
        availability_zone?: string;
        /**
         * Text to use to filter image names, for the case, such as HP, where there are multiple image names matching the common identifying portions. image_exclude is a negative match filter - it is text that may not exist in the image name. Defaults to "(deprecated)"
         */
        image_exclude?: string;
        /**
         * Text to use to filter flavor names, for the case, such as Rackspace, where there are multiple flavors that have the same ram count. flavor_include is a positive match filter - it must exist in the flavor name.
         */
        flavor_include?: string;
        /**
         * Default: None
         *
         * A list of key value pairs that should be provided as a metadata to the new VM
         */
        meta?: string;
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone url for authentication
         */
        auth_url?: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Default: 180
         *
         * The amount of time the module should wait for the VM to get into active state
         */
        wait_for?: string;
        /**
         * Default: no
         *
         * Should a floating ip be auto created and assigned
         */
        auto_floating_ip?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * Arbitrary key/value pairs to the scheduler for custom use
         */
        scheduler_hints?: string;
        /**
         * Default: None
         *
         * A list of network id's to which the VM's interface should be attached
         */
        nics?: string;
        /**
         * Default: None
         *
         * list of valid floating IPs that pre-exist to assign to this node
         */
        floating_ips?: string;
        /**
         * Default: 1
         *
         * The minimum amount of ram in MB that the flavor in which the new VM has to be created must have. Mutually exclusive with flavor_id
         */
        flavor_ram?: number | string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: None
         *
         * The name of the security group to which the VM should be added
         */
        security_groups?: string;
        /**
         * Default: no
         *
         * Whether to boot the server with config drive enabled
         */
        config_drive?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * Name of the region
         */
        region_name?: string;
        /**
         * Default: None
         *
         * The key pair name to be used when creating a VM
         */
        key_name?: string;
        /**
         * Default: None
         *
         * The name of the base image to boot. Mutually exclusive with image_id
         */
        image_name?: string;
        /**
         * Default: None
         *
         * Opaque blob of data which is made available to the instance
         */
        user_data?: string;
        /**
         * Default: None
         *
         * The id of the base image to boot. Mutually exclusive with image_name
         */
        image_id?: string;
        /**
         * Default: yes
         *
         * Password of login user
         */
        login_password: string;
        /**
         * Default: yes
         *
         * If the module should wait for the VM to be created.
         */
        wait?: "yes" | "no";
        /**
         * Default: None
         *
         * Name that has to be given to the instance
         */
        name: string;
        /**
         * Default: yes
         *
         * The tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: 1
         *
         * The id of the flavor in which the new VM has to be created. Mutually exclusive with flavor_ram
         */
        flavor_id?: string;
        /**
         * Default: None
         *
         * list of floating IP pools from which to choose a floating IP
         */
        floating_ip_pools?: string;
        [k: string]: any;
      };
      /**
       * Installs packages using Web Platform Installer command-line (http://www.iis.net/learn/install/web-platform-installer/web-platform-installer-v4-command-line-webpicmdexe-rtw-release).
       * Must be installed and present in PATH (see win_chocolatey module; 'webpicmd' is the package name, and you must install 'lessmsi' first too)
       * Install IIS first (see win_feature module)
       */
      win_webpicmd?: {
        /**
         * Name of the package to be installed
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Grant or revoke privileges on PostgreSQL database objects.
       * This module is basically a wrapper around most of the functionality of PostgreSQL's GRANT and REVOKE statements with detection of changes (GRANT/REVOKE I(privs) ON I(type) I(objs) TO/FROM I(roles))
       */
      postgresql_privs?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Manages SVR4 packages on Solaris 10 and 11.
       * These were the native packages on Solaris <= 10 and are available as a legacy feature in Solaris 11.
       * Note that this is a very basic packaging system. It will not enforce dependencies on install or remove.
       */
      svr4pkg?: {
        /**
         * Install/Remove category instead of a single package.
         */
        category?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specifies the location to install the package from. Required when C(state=present).
         * Can be any path acceptable to the C(pkgadd) command's C(-d) option. e.g.: C(somefile.pkg), C(/dir/with/pkgs), C(http:/server/mypkgs.pkg).
         * If using a file or directory, they must already be accessible by the host. See the M(copy) module for a way to get them there.
         */
        src?: string;
        /**
         * Package name, e.g. C(SUNWcsr)
         */
        name: string;
        /**
         * Default: all
         *
         * Whether to install the package only in the current zone, or install it into all zones.
         * The installation into all zones works only if you are working with the global zone.
         */
        zone?: "current" | "all";
        /**
         * Whether to install (C(present)), or remove (C(absent)) a package.
         * If the package is to be installed, then I(src) is required.
         * The SVR4 package system doesn't provide an upgrade operation. You need to uninstall the old, then install the new package.
         */
        state: "present" | "absent";
        /**
         * HTTP[s] proxy to be used if C(src) is a URL.
         */
        proxy?: string;
        /**
         * Specifies the location of a response file to be used if package expects input on install. (added in Ansible 1.4)
         */
        response_file?: string;
        [k: string]: any;
      };
      /**
       * Create, remove, start, stop and tune GlusterFS volumes
       */
      gluster_volume?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Create, register and remove SSH keys.
       * If no key was found and no public key was provided and a new SSH private/public key pair will be created and the private key will be returned.
       */
      cs_sshkeypair?: {
        /**
         * String of the public key.
         */
        public_key?: string;
        /**
         * Account the public key is related to.
         */
        account?: string;
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        api_region?: string;
        /**
         * Name of the project the public key to be registered in.
         */
        project?: string;
        /**
         * Default: present
         *
         * State of the public key.
         */
        state?: "present" | "absent";
        /**
         * Domain the public key is related to.
         */
        domain?: string;
        api_key?: string;
        /**
         * Name of public key.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Manage presence of groups on a host.
       */
      group?: {
        /**
         * Default: present
         *
         * Whether the group should be present or not on the remote host.
         */
        state?: "present" | "absent";
        /**
         * Optional I(GID) to set for the group.
         */
        gid?: string;
        /**
         * Default: no
         *
         * If I(yes), indicates that the group created is a system group.
         */
        system?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the group to manage.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Manage slb server objects on A10 Networks devices via aXAPI
       */
      a10_server?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Add or remove applications on a Webfaction host.  Further documentation at http://github.com/quentinsf/ansible-webfaction.
       */
      webfaction_app?: {
        /**
         * The name of the application
         */
        name: string;
        port_open?: 0 | "on" | "f" | "false" | 1 | "no" | "n" | "1" | "0" | "t" | "y" | "off" | "yes" | "true";
        /**
         * The machine name to use (optional for accounts with only one machine)
         */
        machine?: string;
        /**
         * Default: present
         *
         * Whether the application should exist
         */
        state?: "present" | "absent";
        /**
         * Default: no
         *
         * Whether the app should restart with an autostart.cgi script
         */
        autostart?: 0 | "on" | "f" | "false" | 1 | "no" | "n" | "1" | "0" | "t" | "y" | "off" | "yes" | "true";
        /**
         * The webfaction password to use
         */
        login_password: string;
        /**
         * The type of application to create. See the Webfaction docs at http://docs.webfaction.com/xmlrpc-api/apps.html for a list.
         */
        type: string;
        /**
         * The webfaction account to use
         */
        login_name: string;
        /**
         * Any extra parameters required by the app
         */
        extra_info?: string;
        [k: string]: any;
      };
      /**
       * Publish a message on an MQTT topic.
       */
      mqtt?: {
        /**
         * Username to authenticate against the broker.
         */
        username?: string;
        /**
         * QoS (Quality of Service)
         */
        qos?: "0" | "1" | "2";
        /**
         * Default: 1883
         *
         * MQTT broker port number
         */
        port?: string;
        /**
         * Default: localhost
         *
         * MQTT broker address/name
         */
        server?: string;
        /**
         * MQTT topic name
         */
        topic: string;
        /**
         * Default: hostname + pid
         *
         * MQTT client identifier
         */
        client_id?: string;
        /**
         * Setting this flag causes the broker to retain (i.e. keep) the message so that applications that subsequently subscribe to the topic can received the last retained message immediately.
         */
        retain?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Password for C(username) to authenticate against the broker.
         */
        password?: string;
        /**
         * Payload. The special string C("None") may be used to send a NULL (i.e. empty) payload which is useful to simply notify with the I(topic) or to clear previously retained messages.
         */
        payload: string;
        [k: string]: any;
      };
      /**
       * This module is useful for sending emails from playbooks.
       * One may wonder why automate sending emails?  In complex environments there are from time to time processes that cannot be automated, either because you lack the authority to make it so, or because not everyone agrees to a common approach.
       * If you cannot automate a specific step, but the step is non-blocking, sending out an email to the responsible party to make him perform his part of the bargain is an elegant way to put the responsibility in someone else's lap.
       * Of course sending out a mail can be equally useful as a way to notify one or more people in a team that a specific action has been (successfully) taken.
       */
      mail?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        };
      /**
       * Creates, Removes and configures a binding to an existing IIS Web site
       */
      win_iis_webbinding?: {
        /**
         * The protocol to be used for the Web binding (usually HTTP, HTTPS, or FTP).
         */
        protocol?: string;
        /**
         * Names of web site
         */
        name?: string;
        /**
         * Certificate hash for the SSL binding. The certificate hash is the unique identifier for the certificate.
         */
        certificate_hash?: string;
        /**
         * The IP address to bind to / use for the new site.
         */
        ip?: string;
        /**
         * The host header to bind to / use for the new site.
         */
        host_header?: string;
        /**
         * State of the binding
         */
        state?: string;
        /**
         * The port to bind to / use for the new site.
         */
        port?: string;
        /**
         * Default: My
         *
         * Name of the certificate store where the certificate for the binding is located.
         */
        certificate_store_name?: string;
        [k: string]: any;
      };
      /**
       * Adds or removes Red Hat software channels
       */
      rhn_channel?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Add or remove an APT repositories in Ubuntu and Debian.
       */
      apt_repository?: {
        [k: string]: any;
      };
      /**
       * Send notifications via pushover, to subscriber list of devices, and email addresses. Requires pushover app on devices.
       */
      pushover?: {
        /**
         * What message you wish to send.
         */
        msg: string;
        /**
         * Pushover issued authentication key for your user.
         */
        user_key: string;
        /**
         * Pushover issued token identifying your pushover app.
         */
        app_token: string;
        /**
         * Message priority (see u(https://pushover.net) for details.)
         */
        pri?: string;
        [k: string]: any;
      };
      /**
       * Assume a role using AWS Security Token Service and obtain temporary credentials
       */
      sts_assume_role?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * create / delete a database in the Cloud Databases.
       */
      rax_cdb_user?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * allows you to create/delete/stop instances in Proxmox VE cluster
       */
      proxmox?: {
        /**
         * forcing operations
         * can be used only with states C(present), C(stopped), C(restarted)
         * with C(state=present) force option allow to overwrite existing container
         * with states C(stopped) , C(restarted) allow to force stop instance
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 1
         *
         * numbers of allocated cpus for instance
         */
        cpus?: number | string;
        /**
         * the template for VM creating
         * required only for C(state=present)
         */
        ostemplate?: string;
        /**
         * Default: 3
         *
         * hard disk size in GB for instance
         */
        disk?: number | string;
        /**
         * sets DNS search domain for a container
         */
        searchdomain?: string;
        /**
         * the user to authenticate with
         */
        api_user: string;
        /**
         * the instance hostname
         * required only for C(state=present)
         */
        hostname?: string;
        /**
         * Default: local
         *
         * target storage
         */
        storage?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the instance
         */
        state?: "present" | "started" | "absent" | "stopped" | "restarted";
        /**
         * swap memory size in MB for instance
         */
        swap?: number | string;
        /**
         * Default: 512
         *
         * memory size in MB for instance
         */
        memory?: number | string;
        /**
         * Proxmox VE node, when new VM will be created
         * required only for C(state=present)
         * for another states will be autodiscovered
         */
        node?: string;
        /**
         * Default: 1000
         *
         * CPU weight for a VM
         */
        cpuunits?: number | string;
        /**
         * the password to authenticate with
         * you can use PROXMOX_PASSWORD environment variable
         */
        api_password?: string;
        /**
         * the instance root password
         * required only for C(state=present)
         */
        password?: string;
        /**
         * specifies the address the container will be assigned
         */
        ip_address?: string;
        /**
         * the host of the Proxmox VE cluster
         */
        api_host: string;
        /**
         * specifies network interfaces for the container
         */
        netif?: string;
        /**
         * the instance id
         */
        vmid: string;
        /**
         * Default: 30
         *
         * timeout for operations
         */
        timeout?: number | string;
        /**
         * sets DNS server IP address for a container
         */
        nameserver?: string;
        /**
         * enable / disable https certificate verification
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * specifies whether a VM will be started during system bootup
         */
        onboot?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage packages on OpenBSD using the pkg tools.
       */
      openbsd_pkg?: {
        /**
         * C(present) will make sure the package is installed. C(latest) will make sure the latest version of the package is installed. C(absent) will make sure the specified package is not installed.
         */
        state: "absent" | "installed" | "latest" | "present" | "removed";
        /**
         * Name of the package.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * The M(hall) module connects to the U(https://hall.com) messaging API and allows you to deliver notication messages to rooms.
       */
      hall?: {
        /**
         * The message you wish to deliver as a notifcation
         */
        msg: string;
        /**
         * The full URL to the image you wish to use for the Icon of the message. Defaults to U(http://cdn2.hubspot.net/hub/330046/file-769078210-png/Official_Logos/ansible_logo_black_square_small.png?t=1421076128627)
         */
        picture?: string;
        /**
         * Room token provided to you by setting up the Ansible room integation on U(https://hall.com)
         */
        room_token: string;
        /**
         * The title of the message
         */
        title: string;
        [k: string]: any;
      };
      /**
       * Migrate a VMK interface from VSS to VDS
       */
      vmware_migrate_vmk?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manage scheduled tasks
       */
      win_scheduled_task?: {
        /**
         * Command the scheduled task should execute
         */
        execute?: string;
        /**
         * Name of the scheduled task
         */
        name?: string;
        /**
         * Days of the week to run a weekly task, not idempotent
         */
        days_of_week?: string;
        /**
         * Default: True
         *
         * Enable/disable the task
         */
        enabled?: string;
        /**
         * Arguments to provide scheduled task action
         */
        argument?: string;
        /**
         * State that the task should become
         */
        state?: string;
        /**
         * The frequency of the command, not idempotent
         */
        frequency?: string;
        /**
         * User to run scheduled task as
         */
        user?: string;
        /**
         * Time to execute scheduled task, not idempotent
         */
        time?: string;
        /**
         * Folder path of scheduled task
         */
        path?: string;
        /**
         * The description for the scheduled task
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * Create or delete a Rackspace Cloud Monitoring alarm that associates an existing rax_mon_entity, rax_mon_check, and rax_mon_notification_plan with criteria that specify what conditions will trigger which levels of notifications. Rackspace monitoring module flow | rax_mon_entity -> rax_mon_check -> rax_mon_notification -> rax_mon_notification_plan -> *rax_mon_alarm*
       */
      rax_mon_alarm?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      name: string;
      /**
       * An Ansible module to Create, Delete, Start and Stop servers in CenturyLink Cloud.
       */
      clc_server?: {
        /**
         * Default: None
         *
         * The anti-affinity policy to assign to the server. This is mutually exclusive with 'anti_affinity_policy_id'.
         */
        anti_affinity_policy_name?: string;
        /**
         * Default: standard
         *
         * The type of storage to attach to the server.
         */
        storage_type?: "standard" | "hyperscale";
        /**
         * Default: None
         *
         * The anti-affinity policy to assign to the server. This is mutually exclusive with 'anti_affinity_policy_name'.
         */
        anti_affinity_policy_id?: string;
        /**
         * Default: None
         *
         * The time to live for the server in seconds.  The server will be deleted when this time expires.
         */
        ttl?: string;
        /**
         * Default: None
         *
         * Required when exact_count is specified.  The Server Group use to determine how many severs to deploy.
         */
        count_group?: string;
        /**
         * Default: None
         *
         * Secondary DNS used by the server.
         */
        secondary_dns?: string;
        /**
         * The list of custom fields to set on the server.
         */
        custom_fields?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * Password for the administrator / root user
         */
        password?: string;
        /**
         * The list of blue print packages to run on the server after its created.
         */
        packages?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: Default Group
         *
         * The Server Group to create servers under.
         */
        group?: string;
        /**
         * Default: None
         *
         * Run in idempotent mode.  Will insure that this exact number of servers are running in the provided group, creating and deleting them to reach that count.  Requires count_group to be set.
         */
        exact_count?: number | string;
        /**
         * Default: present
         *
         * The state to insure that the provided resources are in.
         */
        state?: "present" | "absent" | "started" | "stopped";
        /**
         * Default: None
         *
         * The autoscale policy to assign to the server.
         */
        cpu_autoscale_policy_id?: string;
        /**
         * Default: None
         *
         * The template to use for server creation.  Will search for a template if a partial string is provided. This is required when state is 'present'
         */
        template?: string;
        /**
         * Default: 1
         *
         * Memory in GB.
         */
        memory?: string;
        /**
         * Required for started, stopped, and absent states. A list of server Ids to insure are started, stopped, or absent.
         */
        server_ids?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: standard
         *
         * The type of server to create.
         */
        type?: "standard" | "hyperscale" | "bareMetal";
        /**
         * Whether to create the server as 'Managed' or not.
         */
        managed_os?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * The Datacenter to create servers in.
         */
        location?: string;
        /**
         * The list of additional disks for the server
         */
        additional_disks?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * The description to set for the server.
         */
        description?: string;
        /**
         * Whether to add a public ip to the server
         */
        add_public_ip?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * Only required for bare metal servers. Specifies the identifier for the specific configuration type of bare metal server to deploy.
         */
        configuration_id?: string;
        /**
         * Default: None
         *
         * The alert policy to assign to the server. This is mutually exclusive with 'alert_policy_id'.
         */
        alert_policy_name?: string;
        /**
         * Default: None
         *
         * The alert policy to assign to the server. This is mutually exclusive with 'alert_policy_name'.
         */
        alert_policy_id?: string;
        /**
         * A list of ports to allow on the firewall to the servers public ip, if add_public_ip is set to True.
         */
        public_ip_ports?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * The IP Address for the server. One is assigned if not provided.
         */
        ip_address?: string;
        /**
         * Default: TCP
         *
         * The protocol to use for the public ip if add_public_ip is set to True.
         */
        public_ip_protocol?: "TCP" | "UDP" | "ICMP";
        /**
         * Default: True
         *
         * Whether to wait for the provisioning tasks to finish before returning.
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 1
         *
         * The number of servers to build (mutually exclusive with exact_count)
         */
        count?: number | string;
        /**
         * Default: None
         *
         * A 1 to 6 character identifier to use for the server. This is required when state is 'present'
         */
        name?: string;
        /**
         * Default: None
         *
         * The network UUID on which to create servers.
         */
        network_id?: string;
        /**
         * Default: None
         *
         * Primary DNS used by the server.
         */
        primary_dns?: string;
        /**
         * Default: None
         *
         * The account alias to provision the servers under.
         */
        alias?: string;
        /**
         * Default: None
         *
         * The password for the source server if a clone is specified.
         */
        source_server_password?: string;
        /**
         * Default: None
         *
         * Only required for bare metal servers. Specifies the OS to provision with the bare metal server.
         */
        os_type?: "redHat6_64Bit" | "centOS6_64Bit" | "windows2012R2Standard_64Bit" | "ubuntu14_64Bit";
        /**
         * Default: 1
         *
         * How many CPUs to provision on the server
         */
        cpu?: string;
        [k: string]: any;
      };
      /**
       * Installs packages using Chocolatey (http://chocolatey.org/). If Chocolatey is missing from the system, the module will install it. List of packages can be found at http://chocolatey.org/packages
       */
      win_chocolatey?: {
        /**
         * If package is already installed it, try to upgrade to the latest version or to the specified version
         */
        upgrade?: string;
        /**
         * Forces install of the package (even if it already exists). Using Force will cause ansible to always report that a change was made
         */
        force?: string;
        /**
         * Name of the package to be installed
         */
        name?: string;
        /**
         * Specify source rather than using default chocolatey repository
         */
        source?: string;
        /**
         * Default: present
         *
         * State of the package on the system
         */
        state?: string;
        /**
         * Specific version of the package to be installed
         * Ignored when state == 'absent'
         */
        version?: string;
        [k: string]: any;
      };
      /**
       * C(synchronize) is a wrapper around the rsync command, meant to make common tasks with rsync easier. It is run and originates on the local host where Ansible is being run. Of course, you could just use the command action to call rsync yourself, but you also have to add a fair number of boilerplate options and host facts. You `still` may need to call rsync directly via C(command) or C(shell) depending on your use case. C(synchronize) does not provide access to the full power of rsync, but does make most invocations easier to follow.
       */
      synchronize?: {
        /**
         * Tells rsync to keep the partial file which should make a subsequent transfer of the rest of the file much faster.
         */
        partial?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: the value of the archive option
         *
         * Copy symlinks as symlinks.
         */
        links?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: no
         *
         * Copy symlinks as the item that they point to (the referent) is copied, rather than the symlink.
         */
        copy_links?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: the value of the archive option
         *
         * Preserve permissions.
         */
        perms?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: the value of the archive option
         *
         * Preserve owner (super user only)
         */
        owner?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: yes
         *
         * Mirrors the rsync archive flag, enables recursive, links, perms, times, owner, group flags and -D.
         */
        archive?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: Value of ansible_ssh_port for this host, remote_port config setting, or 22 if none of those are set
         *
         * Port number for ssh on the destination host. Prior to ansible 2.0, the ansible_ssh_port inventory var took precedence over this value.
         */
        dest_port?: string;
        _local_rsync_path?: string;
        /**
         * Default: the value of the archive option
         *
         * Preserve group
         */
        group?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: no
         *
         * Skip creating new files on receiver.
         */
        existing_only?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify the rsync command to run on the remote host. See C(--rsync-path) on the rsync man page.
         */
        rsync_path?: string;
        /**
         * Path on the destination host that will be synchronized from the source; The path can be absolute or relative.
         */
        dest: string;
        /**
         * Verify destination host key.
         */
        verify_host?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: no
         *
         * Transfer directories without recursing
         */
        dirs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        private_key?: string;
        _substitute_controller?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: yes
         *
         * Compress file data during the transfer. In most cases, leave this enabled unless it causes problems.
         */
        compress?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify a --timeout for the rsync command in seconds.
         */
        rsync_timeout?: number | string;
        /**
         * Specify additional rsync options by passing in an array.
         */
        rsync_opts?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: True
         *
         * put user@ for the remote paths. If you have a custom ssh config to define the remote user for a host that does not match the inventory user, you should set this parameter to "no".
         */
        set_remote_user?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: the value of the archive option
         *
         * Recurse into directories.
         */
        recursive?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Path on the source host that will be synchronized to the destination; The path can be absolute or relative.
         */
        src: string;
        /**
         * Default: no
         *
         * Skip based on checksum, rather than mod-time & size; Note that that "archive" option is still enabled by default - the "checksum" option will not disable it.
         */
        checksum?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: the value of the archive option
         *
         * Preserve modification times
         */
        times?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: push
         *
         * Specify the direction of the synchronization. In push mode the localhost or delegate is the source; In pull mode the remote host in context is the source.
         */
        mode?: "push" | "pull";
        ssh_args?: string;
        /**
         * Default: no
         *
         * Delete files that don't exist (after transfer, not before) in the C(src) path. This option requires C(recursive=yes).
         */
        delete?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manages OpenWrt packages
       */
      opkg?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * This module prints statements during execution and can be useful for debugging variables or expressions without necessarily halting the playbook. Useful for debugging together with the 'when:' directive.
       */
      debug?: {
        /**
         * Default: Hello world!
         *
         * The customized message that is printed. If omitted, prints a generic message.
         */
        msg?: string;
        /**
         * A variable name to debug.  Mutually exclusive with the 'msg' option.
         */
        var?: string;
        [k: string]: any;
      };
      /**
       * Manage route tables for AWS virtual private clouds
       */
      ec2_vpc_route_table?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages Homebrew casks.
       */
      homebrew_cask?: {
        [k: string]: any;
      };
      /**
       * Adds or removes Vertica database role and, optionally, assign other roles.
       */
      vertica_role?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Create and remove instance groups.
       */
      cs_instancegroup?: {
        /**
         * Account the instance group is related to.
         */
        account?: string;
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        api_region?: string;
        /**
         * Project the instance group is related to.
         */
        project?: string;
        /**
         * Default: present
         *
         * State of the instance group.
         */
        state?: "present" | "absent";
        /**
         * Domain the instance group is related to.
         */
        domain?: string;
        api_key?: string;
        /**
         * Name of the instance group.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Create, remove and revert VM from snapshots.
       */
      cs_vmsnapshot?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * The M(expect) module executes a command and responds to prompts
       * The given command will be executed on all selected nodes. It will not be processed through the shell, so variables like C($HOME) and operations like C("<"), C(">"), C("|"), and C("&") will not work
       */
      expect?: {
        /**
         * cd into this directory before running the command
         */
        chdir?: string;
        /**
         * Mapping of expected string and string to respond with
         */
        responses: {
          [k: string]: any;
        };
        /**
         * a filename, when it does not exist, this step will B(not) be run.
         */
        removes?: string;
        /**
         * Whether or not to echo out your response strings
         */
        echo?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * a filename, when it already exists, this step will B(not) be run.
         */
        creates?: string;
        /**
         * the command module takes command to run.
         */
        command: string;
        /**
         * Default: 30
         *
         * Amount of time in seconds to wait for the expected strings
         */
        timeout?: number | string;
        [k: string]: any;
      };
      /**
       * Adds or removes firewall rules from a gateway in a vca environment
       */
      vca_fw?: {
        /**
         * Default: None
         *
         * The vca username or email address, if not set the environment variable VCA_USER is checked for the username.
         */
        username?: string;
        /**
         * Default: gateway
         *
         * The name of the gateway of the vdc where the rule should be added
         */
        gateway_name?: string;
        /**
         * Default: present
         *
         * if the object should be added or removed
         */
        state?: string;
        /**
         * Default: None
         *
         * The instance id in a vchs environment to be used for creating the vapp
         */
        instance_id?: string;
        /**
         * Default: None
         *
         * The authentication host to be used when service type  is vcd.
         */
        host?: string;
        /**
         * A list of firewall rules to be added to the gateway, Please see examples on valid entries
         */
        fw_rules?: string;
        /**
         * Default: vca
         *
         * The type of service we are authenticating against
         */
        service_type?: string;
        /**
         * Default: None
         *
         * The org to login to for creating vapp, mostly set when the service_type is vdc.
         */
        org?: string;
        /**
         * Default: None
         *
         * The vca password, if not set the environment variable VCA_PASS is checked for the password
         */
        password?: string;
        /**
         * Default: None
         *
         * The name of the vdc where the gateway is located.
         */
        vdc_name?: string;
        /**
         * Default: 5.7
         *
         * The api version to be used with the vca
         */
        api_version?: string;
        /**
         * Default: True
         *
         * If the certificates of the authentication is to be verified
         */
        verify_certs?: string;
        [k: string]: any;
      };
      /**
       * Add or Remove a subnet to an OpenStack network
       */
      os_subnet?: {
        /**
         * The name of the subnet that should be created. Although Neutron allows for non-unique subnet names, this module enforces subnet name uniqueness.
         */
        name?: string;
        /**
         * Default: True
         *
         * Whether DHCP should be enabled for this subnet.
         */
        enable_dhcp?: string;
        /**
         * Default: None
         *
         * List of DNS nameservers for this subnet.
         */
        dns_nameservers?: string;
        /**
         * Default: None
         *
         * IPv6 router advertisement mode
         */
        ipv6_ra_mode?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: string;
        /**
         * Default: None
         *
         * From the subnet pool the starting address from which the IP should be allocated.
         */
        allocation_pool_start?: string;
        /**
         * Default: None
         *
         * A list of host route dictionaries for the subnet.
         */
        host_routes?: string;
        /**
         * Default: None
         *
         * IPv6 address mode
         */
        ipv6_address_mode?: string;
        /**
         * Default: 4
         *
         * The IP version of the subnet 4 or 6
         */
        ip_version?: string;
        /**
         * Default: None
         *
         * The ip that would be assigned to the gateway for this subnet
         */
        gateway_ip?: string;
        /**
         * Default: None
         *
         * The CIDR representation of the subnet that should be assigned to the subnet.
         */
        cidr?: string;
        /**
         * Name of the network to which the subnet should be attached
         */
        network_name?: string;
        /**
         * Default: None
         *
         * From the subnet pool the last IP that should be assigned to the virtual machines.
         */
        allocation_pool_end?: string;
        [k: string]: any;
      };
      /**
       * Add and remove load balancer rule members.
       */
      cs_loadbalancer_rule_member?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * creates / deletes a Rackspace Public Cloud queue.
       */
      rax_queue?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage the network devices. Create, modify, and manage, ethernet, teams, bonds, vlans etc.
       */
      nmcli?: {
        /**
         * Where conn_name will be the name used to call the connection. when not provided a default name is generated: <type>[-<ifname>][-<num>]
         */
        conn_name: string;
        /**
         * Default: None
         *
         * This is only used with VLAN - VLAN ingress priority mapping
         */
        ingress?: string;
        /**
         * Default: 32
         *
         * This is only used with 'bridge-slave' - [<0-63>] - STP priority of this slave
         */
        slavepriority?: string;
        /**
         * Default: None
         *
         * This is only used with VLAN - parent device this VLAN is on, can use ifname
         */
        vlandev?: string;
        /**
         * Default: 15
         *
         * This is only used with bridge - [forward-delay <2-30>] STP forwarding delay, in seconds
         */
        forwarddelay?: string;
        /**
         * Default: None
         *
         * This is only used with VLAN - VLAN egress priority mapping
         */
        egress?: string;
        /**
         * Default: None
         *
         * This is only used with VLAN - VLAN ID in range <0-4095>
         */
        vlanid?: string;
        /**
         * Default: None
         *
         * A list of upto 3 dns servers, ipv4 format e.g. To add two IPv4 DNS server addresses: ["8.8.8.8 8.8.4.4"]
         */
        dns4?: string;
        /**
         * Default: 2
         *
         * This is only used with bridge - [hello-time <1-10>] STP hello time, in seconds
         */
        hellotime?: string;
        /**
         * Default: 20
         *
         * This is only used with bridge - [max-age <6-42>] STP maximum message age, in seconds
         */
        maxage?: string;
        /**
         * Default: 300
         *
         * This is only used with bridge - [ageing-time <0-1000000>] the Ethernet MAC address aging time, in seconds
         */
        ageingtime?: string;
        /**
         * Default: 128
         *
         * This is only used with 'bridge' - sets STP priority
         */
        priority?: string;
        /**
         * The IPv4 gateway for this interface using this format ie: "192.168.100.1"
         */
        gw4?: string;
        /**
         * Whether the device should exist or not, taking action if the state is different from what is stated.
         */
        state: "present" | "absent";
        /**
         * Default: None
         *
         * The IPv6 gateway for this interface using this format ie: "2001:db8::1"
         */
        gw6?: string;
        /**
         * Default: None
         *
         * master <master (ifname, or connection UUID or conn_name) of bridge, team, bond master connection profile.
         */
        master?: string;
        /**
         * Default: None
         *
         * This is only used with bridge and controls whether Spanning Tree Protocol (STP) is enabled for this bridge
         */
        stp?: "yes" | "no";
        /**
         * Default: conn_name
         *
         * Where IFNAME will be the what we call the interface name.
         * interface to bind the connection to. The connection will only be applicable to this interface name.
         * A special value of "*" can be used for interface-independent connections.
         * The ifname argument is mandatory for all connection types except bond, team, bridge and vlan.
         */
        ifname?: string;
        /**
         * This is the type of device or network connection that you wish to create.
         */
        type?: "ethernet" | "team" | "team-slave" | "bond" | "bond-slave" | "bridge" | "vlan";
        /**
         * Default: 100
         *
         * This is only used with bond - miimon
         */
        miimon?: string;
        /**
         * Default: None
         *
         * This is only used with bond - ARP IP target
         */
        arp_ip_target?: string;
        /**
         * Default: None
         *
         * This is only used with bond - downdelay
         */
        downdelay?: string;
        /**
         * Default: None
         *
         * This is only used with bridge - MAC address of the bridge (note: this requires a recent kernel feature, originally introduced in 3.15 upstream kernel)
         */
        mac?: string;
        /**
         * Default: None
         *
         * The IPv6 address to this interface using this format ie: "abbe::cafe"
         */
        ip6?: string;
        /**
         * Default: None
         *
         * The IPv4 address to this interface using this format ie: "192.168.1.24/24"
         */
        ip4?: string;
        /**
         * Default: yes
         *
         * Whether the connection should start on boot.
         * Whether the connection profile can be automatically activated
         */
        autoconnect?: "yes" | "no";
        /**
         * A list of upto 3 dns servers, ipv6 format e.g. To add two IPv6 DNS server addresses: ["2001:4860:4860::8888 2001:4860:4860::8844"]
         */
        dns6?: string;
        /**
         * Default: 1500
         *
         * The connection MTU, e.g. 9000. This can't be applied when creating the interface and is done once the interface has been created.
         * Can be used when modifying Team, VLAN, Ethernet (Future plans to implement wifi, pppoe, infiniband)
         */
        mtu?: string;
        /**
         * Default: None
         *
         * This is only used with bond - ARP interval
         */
        arp_interval?: string;
        /**
         * Default: None
         *
         * This is only used with VLAN - flags
         */
        flags?: string;
        /**
         * Default: balence-rr
         *
         * This is the type of device or network connection that you wish to create for a bond, team or bridge.
         */
        mode?: "balance-rr" | "active-backup" | "balance-xor" | "broadcast" | "802.3ad" | "balance-tlb" | "balance-alb";
        /**
         * Default: None
         *
         * This is only used with bond - updelay
         */
        updelay?: string;
        [k: string]: any;
      };
      /**
       * Manage an AWS VPC Internet gateway
       */
      ec2_vpc_igw?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * allows you to upload/delete templates in Proxmox VE cluster
       */
      proxmox_template?: {
        /**
         * Proxmox VE node, when you will operate with template
         */
        node?: string;
        /**
         * path to uploaded file
         * required only for C(state=present)
         */
        src?: string;
        /**
         * can be used only with C(state=present), exists template will be overwritten
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * the host of the Proxmox VE cluster
         */
        api_host: string;
        /**
         * the user to authenticate with
         */
        api_user: string;
        /**
         * the password to authenticate with
         * you can use PROXMOX_PASSWORD environment variable
         */
        api_password?: string;
        /**
         * Default: local
         *
         * target storage
         */
        storage?: string;
        /**
         * Default: 30
         *
         * timeout for operations
         */
        timeout?: number | string;
        /**
         * Default: present
         *
         * Indicate desired state of the template
         */
        state?: "present" | "absent";
        /**
         * Default: vztmpl
         *
         * content type
         * required only for C(state=present)
         */
        content_type?: "vztmpl" | "iso";
        /**
         * enable / disable https certificate verification
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * the template name
         * required only for states C(absent), C(info)
         */
        template?: string;
        [k: string]: any;
      };
      /**
       * Interacts with HTTP and HTTPS web services and supports Digest, Basic and WSSE HTTP authentication mechanisms.
       */
      uri?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Retrieve facts about a image image from OpenStack.
       */
      os_image_facts?: {
        /**
         * Name or ID of the image
         */
        image?: string;
        [k: string]: any;
      };
      /**
       * Can create or delete AWS metric alarms
       * Metrics you wish to alarm on must already exist
       */
      ec2_metric_alarm?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module can be used to configure VSAN clustering on an ESXi host
       */
      vmware_vsan_cluster?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Add or Remove network from OpenStack.
       */
      quantum_network?: {
        /**
         * Default: None
         *
         * Name of the region
         */
        region_name?: string;
        /**
         * Default: None
         *
         * The type of the network to be created, gre, vlan, local. Available types depend on the plugin. The Quantum service decides if not specified.
         */
        provider_network_type?: "local" | "vlan" | "flat" | "gre";
        availability_zone?: string;
        /**
         * If 'yes', specifies that the virtual network is a external network (public).
         */
        router_external?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * The name of the tenant for whom the network is created
         */
        tenant_name?: string;
        /**
         * Default: True
         *
         * Whether the state should be marked as up or down
         */
        admin_state_up?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * The physical network which would realize the virtual network for flat and vlan networks.
         */
        provider_physical_network?: string;
        /**
         * Default: yes
         *
         * The tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone url for authentication
         */
        auth_url?: string;
        /**
         * Default: yes
         *
         * Password of login user
         */
        login_password: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Whether this network is shared or not
         */
        shared?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * The id that has to be assigned to the network, in case of vlan networks that would be vlan id and for gre the tunnel id
         */
        provider_segmentation_id?: string;
        /**
         * Default: None
         *
         * Name to be assigned to the nework
         */
        name: string;
        [k: string]: any;
      };
      /**
       * The Deploy Helper manages some of the steps common in deploying software. It creates a folder structure, manages a symlink for the current release and cleans up old releases.
       * Running it with the C(state=query) or C(state=present) will return the C(deploy_helper) fact. C(project_path), whatever you set in the path parameter, C(current_path), the path to the symlink that points to the active release, C(releases_path), the path to the folder to keep releases in, C(shared_path), the path to the folder to keep shared resources in, C(unfinished_filename), the file to check for to recognize unfinished builds, C(previous_release), the release the 'current' symlink is pointing to, C(previous_release_path), the full path to the 'current' symlink target, C(new_release), either the 'release' parameter or a generated timestamp, C(new_release_path), the path to the new release folder (not created by the module).
       */
      deploy_helper?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Create, update and remove static NATs.
       */
      cs_staticnat?: {
        /**
         * VM guest NIC secondary IP address for the static NAT.
         */
        vm_guest_ip?: string;
        /**
         * Account the static NAT is related to.
         */
        account?: string;
        api_key?: string;
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        api_region?: string;
        /**
         * Name of virtual machine which we make the static NAT for.
         * Required if C(state=present).
         */
        vm?: string;
        /**
         * Name of the project the static NAT is related to.
         */
        project?: string;
        /**
         * Default: present
         *
         * State of the static NAT.
         */
        state?: "present" | "absent";
        /**
         * Domain the static NAT is related to.
         */
        domain?: string;
        /**
         * Name of the zone in which the virtual machine is in.
         * If not set, default zone is used.
         */
        zone?: string;
        /**
         * Public IP address the static NAT is assigned to.
         */
        ip_address: string;
        [k: string]: any;
      };
      /**
       * Create an annotation event on the given annotation stream :name. If the annotation stream does not exist, it will be created automatically
       */
      librato_annotation?: {
        /**
         * The annotation stream name
         * If the annotation stream does not exist, it will be created automatically
         */
        name?: string;
        /**
         * See examples
         */
        links?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The title of an annotation is a string and may contain spaces
         * The title should be a short, high-level summary of the annotation e.g. v45 Deployment
         */
        title: string;
        /**
         * The unix timestamp indicating the the time at which the event referenced by this annotation started
         */
        start_time?: number | string;
        /**
         * A string which describes the originating source of an annotation when that annotation is tracked across multiple members of a population
         */
        source?: string;
        /**
         * The unix timestamp indicating the the time at which the event referenced by this annotation ended
         * For events that have a duration, this is a useful way to annotate the duration of the event
         */
        end_time?: number | string;
        /**
         * Librato account username
         */
        user: string;
        /**
         * Librato account api key
         */
        api_key: string;
        /**
         * The description contains extra meta-data about a particular annotation
         * The description should contain specifics on the individual annotation e.g. Deployed 9b562b2 shipped new feature foo!
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * This module allows users to manage their objects/buckets in Google Cloud Storage.  It allows upload and download operations and can set some canned permissions. It also allows retrieval of URLs for objects for use in playbooks, and retrieval of string contents of objects.  This module requires setting the default project in GCS prior to playbook usage.  See U(https://developers.google.com/storage/docs/reference/v1/apiversion1) for information about setting the default project.
       */
      gc_storage?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add or remove a host from distributed virtual switch
       */
      vmware_dvs_host?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Add and remove users from groups
       */
      os_user_group?: {
        /**
         * Default: present
         *
         * Should the user be present or absent in the group
         */
        state?: string;
        /**
         * Name or id for the group.
         */
        group?: string;
        /**
         * Name or id for the user
         */
        user?: string;
        [k: string]: any;
      };
      /**
       * Manage s3 buckets in AWS
       */
      s3_bucket?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage the state of a virtual host in RabbitMQ.
       */
      rabbitmq_policy?: {
        /**
         * Default: rabbit
         *
         * Erlang node name of the rabbit we wish to configure.
         */
        node?: string;
        /**
         * The name of the policy to manage.
         */
        name?: string;
        /**
         * A dict or string describing the policy.
         */
        tags?: string;
        /**
         * A regex of queues to apply the policy to.
         */
        pattern?: string;
        /**
         * The priority of the policy.
         */
        priority?: string;
        /**
         * Default: /
         *
         * The name of the vhost to apply to.
         */
        vhost?: string;
        /**
         * Default: present
         *
         * The state of the policy.
         */
        state?: string;
        [k: string]: any;
      };
      /**
       * Gets various details related to Route53 zone, record set or health check details
       */
      route53_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Tap external Homebrew repositories.
       */
      homebrew_tap?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Installs Python libraries, optionally in a I(virtualenv)
       */
      easy_install?: {
        /**
         * an optional I(virtualenv) directory path to install into. If the I(virtualenv) does not exist, it is created automatically
         */
        virtualenv?: string;
        /**
         * The explicit executable or a pathname to the executable to be used to run easy_install for a specific version of Python installed in the system. For example C(easy_install-3.3), if there are both Python 2.7 and 3.3 installations in the system and you want to run easy_install for the Python 3.3 installation.
         */
        executable?: string;
        /**
         * A Python library name
         */
        name: string;
        /**
         * Default: virtualenv
         *
         * The command to create the virtual environment with. For example C(pyvenv), C(virtualenv), C(virtualenv2).
         */
        virtualenv_command?: string;
        /**
         * Default: no
         *
         * Whether the virtual environment will inherit packages from the global site-packages directory.  Note that if this setting is changed on an already existing virtual environment it will not have any effect, the environment must be deleted and newly created.
         */
        virtualenv_site_packages?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * The desired state of the library. C(latest) ensures that the latest version is installed.
         */
        state?: "present" | "latest";
        [k: string]: any;
      };
      /**
       * Installs, upgrade, removes, and lists packages and groups with the I(yum) package manager.
       */
      yum?: {
        [k: string]: any;
      };
      /**
       * Create or delete a Rackspace Cloud Monitoring notification plan by associating existing rax_mon_notifications with severity levels. Rackspace monitoring module flow | rax_mon_entity -> rax_mon_check -> rax_mon_notification -> *rax_mon_notification_plan* -> rax_mon_alarm
       */
      rax_mon_notification_plan?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Returns information about the load balancer.
       * Will be marked changed when called only if state is changed.
       */
      ec2_elb_lb?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * The M(sns) module sends notifications to a topic on your Amazon SNS account
       */
      sns?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Creates and deletes DNS Health checks in Amazons Route53 service
       * Only the port, resource_path, string_match and request_interval are considered when updating existing health-checks.
       */
      route53_health_check?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create or delete or update firewall polices on Centurylink Cloud
       */
      clc_firewall_policy?: {
        /**
         * Default: None
         *
         * CLC alias for the destination account
         */
        destination_account_alias?: string;
        /**
         * Default: None
         *
         * The list of destination addresses for traffic on the terminating firewall. This is required when state is 'present'
         */
        destination?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: True
         *
         * Whether the firewall policy is enabled or disabled
         */
        enabled?: true | false;
        /**
         * Default: None
         *
         * The list  of source addresses for traffic on the originating firewall. This is required when state is 'present"
         */
        source?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * Whether to create or delete the firewall policy
         */
        state?: "present" | "absent";
        /**
         * Target datacenter for the firewall policy
         */
        location: string;
        /**
         * CLC alias for the source account
         */
        source_account_alias: string;
        /**
         * Default: None
         *
         * Id of the firewall policy. This is required to update or delete an existing firewall policy
         */
        firewall_policy_id?: string;
        /**
         * Default: None
         *
         * The list of ports associated with the policy. TCP and UDP can take in single ports or port ranges.
         */
        ports?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: True
         *
         * Whether to wait for the provisioning tasks to finish before returning.
         */
        wait?: string;
        [k: string]: any;
      };
      /**
       * This module associates AWS EC2 elastic IP addresses with instances
       */
      ec2_eip?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Runs I(puppet) agent or apply in a reliable manner
       */
      puppet?: {
        [k: string]: any;
      };
      /**
       * Send a message to jabber
       */
      jabber?: {
        /**
         * message encoding
         */
        encoding?: string;
        /**
         * user ID or name of the room, when using room use a slash to indicate your nick.
         */
        to: string;
        /**
         * host to connect, overrides user info
         */
        host?: string;
        /**
         * User as which to connect
         */
        user: string;
        /**
         * The message body.
         */
        msg: string;
        /**
         * password for user to connect
         */
        password: string;
        /**
         * Default: 5222
         *
         * port to connect to, overrides default
         */
        port?: string;
        [k: string]: any;
      };
      /**
       * Create host groups if they do not exist.
       * Delete existing host groups if they exist.
       */
      zabbix_group?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Allows for the management of IAM users, groups, roles and access keys.
       */
      iam?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Upload files to a vCenter datastore
       */
      vsphere_copy?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Get I(openstack) client config data from clouds.yaml or environment
       */
      os_client_config?: {
        /**
         * List of clouds to limit the return list to. No value means return information on all configured clouds
         */
        clouds?: string;
        [k: string]: any;
      };
      /**
       * Controls services on remote hosts. Supported init systems include BSD init, OpenRC, SysV, Solaris SMF, systemd, upstart.
       */
      service?: {
        [k: string]: any;
      };
      /**
       * creates / deletes a Rackspace Public Cloud isolated network.
       */
      rax_network?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Allows to post events to DataDog (www.datadoghq.com) service.
       * Uses http://docs.datadoghq.com/api/#events API.
       */
      datadog_event?: {
        /**
         * Default: now
         *
         * POSIX timestamp of the event.
         * Default value is now.
         */
        date_happened?: number | string;
        /**
         * Default: info
         *
         * Type of alert.
         */
        alert_type?: "error" | "warning" | "info" | "success";
        /**
         * The event title.
         */
        title: string;
        /**
         * The body of the event.
         */
        text: string;
        /**
         * Comma separated list of tags to apply to the event.
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: normal
         *
         * The priority of the event.
         */
        priority?: "normal" | "low";
        /**
         * An arbitrary string to use for aggregation.
         */
        aggregation_key?: string;
        /**
         *
         *
         * Possible choices:
         * nagios
         * hudson
         * jenkins
         * user
         * my apps
         * feed
         * chef
         * puppet
         * git
         * bitbucket
         * fabric
         * capistrano
         */
        source_type_name?: string;
        /**
         * Your DataDog API key.
         */
        api_key: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Creates or terminates ec2 instances.
       */
      ec2?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add or Remove key pair from nova .
       */
      nova_keypair?: {
        /**
         * Default: None
         *
         * The public key that would be uploaded to nova and injected to vm's upon creation
         */
        public_key?: string;
        /**
         * Default: None
         *
         * Name of the region
         */
        region_name?: string;
        availability_zone?: string;
        /**
         * Default: yes
         *
         * The tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone url for authentication
         */
        auth_url?: string;
        /**
         * Default: yes
         *
         * Password of login user
         */
        login_password: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Default: None
         *
         * Name that has to be given to the key pair
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Manage bower packages with bower
       */
      bower?: {
        /**
         * The name of a bower package to install
         */
        name?: string;
        /**
         * Default: present
         *
         * The state of the bower package
         */
        state?: "present" | "absent" | "latest";
        /**
         * Install with --production flag
         */
        production?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The version to be installed
         */
        version?: string;
        /**
         * The base path where to install the bower packages
         */
        path: string;
        /**
         * Install packages from local cache, if the packages were installed before
         */
        offline?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Create, start, stop and delete Solaris zones. This module doesn't currently allow changing of options for a zone that's already been created.
       */
      solaris_zone?: {
        /**
         * Default: empty string
         *
         * Extra options to the zoneadm(1M) install command. To automate Solaris 11 zone creation, use this to specify the profile XML file, e.g. install_options="-c sc_profile.xml"
         */
        install_options?: string;
        /**
         * Default: 600
         *
         * Timeout, in seconds, for zone to boot.
         */
        timeout?: number | string;
        /**
         * Default: empty string
         *
         * Extra options to the zonecfg(1M) create command.
         */
        create_options?: string;
        /**
         * Default: present
         *
         * C(present), configure and install the zone.
         * C(installed), synonym for C(present).
         * C(running), if the zone already exists, boot it, otherwise, configure and install the zone first, then boot it.
         * C(started), synonym for C(running).
         * C(stopped), shutdown a zone.
         * C(absent), destroy the zone.
         * C(configured), configure the ready so that it's to be attached.
         * C(attached), attach a zone, but do not boot it.
         * C(detached), shutdown and detach a zone
         */
        state?:
          | "present"
          | "installed"
          | "started"
          | "running"
          | "stopped"
          | "absent"
          | "configured"
          | "attached"
          | "detached";
        /**
         * The password hash for the root account. If not specified, the zone's root account will not have a password.
         */
        root_password?: string;
        /**
         * Whether to create a sparse (C(true)) or whole root (C(false)) zone.
         */
        sparse?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The path where the zone will be created. This is required when the zone is created, but not used otherwise.
         */
        path?: string;
        /**
         * Default: empty string
         *
         * The zonecfg configuration commands for this zone. See zonecfg(1M) for the valid options and syntax. Typically this is a list of options separated by semi-colons or new lines, e.g. "set auto-boot=true;add net;set physical=bge0;set address=10.1.1.1;end"
         */
        config?: string;
        /**
         * Default: empty string
         *
         * Extra options to the zoneadm attach command. For example, this can be used to specify whether a minimum or full update of packages is required and if any packages need to be deleted. For valid values, see zoneadm(1M)
         */
        attach_options?: string;
        /**
         * Zone name.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * The M(copy) module copies a file on the local box to remote locations. Use the M(fetch) module to copy files from remote locations to the local box. If you need variable interpolation in copied files, use the M(template) module.
       */
      copy?: {
        [k: string]: any;
      };
      /**
       * The M(unarchive) module unpacks an archive. By default, it will copy the source file from the local system to the target before unpacking - set copy=no to unpack an archive which already exists on the target..
       */
      unarchive?: {
        /**
         * If copy=yes (default), local path to archive file to copy to the target server; can be absolute or relative. If copy=no, path on the target server to existing archive file to unpack.
         * If copy=no and src contains ://, the remote machine will download the file from the url first. (version_added 2.0)
         */
        src: string;
        /**
         * Remote absolute path where the archive should be unpacked
         */
        dest: string;
        /**
         * Default: no
         *
         * If set to True, return the list of files that are contained in the tarball.
         */
        list_files?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * a filename, when it already exists, this step will B(not) be run.
         */
        creates?: string;
        original_basename?: string;
        /**
         * Default: yes
         *
         * If true, the file is copied from local 'master' to the target machine, otherwise, the plugin will look for src archive at the target machine.
         */
        copy?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Migrates a virtual machine from a standard vswitch to distributed
       */
      vmware_vm_vss_dvs_migrate?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * The M(pam_limits) module modify PAM limits, default in /etc/security/limits.conf. For the full documentation, see man limits.conf(5).
       */
      pam_limits?: {
        /**
         * Comment associated with the limit.
         */
        comment?: string;
        /**
         * Default: no
         *
         * If set to C(yes), the maximal value will be used or conserved. If the specified value is superior to the value in the file, file content is replaced with the new value, else content is not modified.
         */
        use_max?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A username, @groupname, wildcard, uid/gid range.
         */
        domain: string;
        /**
         * Default: /etc/security/limits.conf
         *
         * Modify the limits.conf path.
         */
        dest?: string;
        /**
         * The value of the limit.
         */
        value: string;
        /**
         * Default: no
         *
         * If set to C(yes), the minimal value will be used or conserved. If the specified value is inferior to the value in the file, file content is replaced with the new value, else content is not modified.
         */
        use_min?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The limit to be set
         */
        limit_item:
          | "core"
          | "data"
          | "fsize"
          | "memlock"
          | "nofile"
          | "rss"
          | "stack"
          | "cpu"
          | "nproc"
          | "as"
          | "maxlogins"
          | "maxsyslogins"
          | "priority"
          | "locks"
          | "sigpending"
          | "msgqueue"
          | "nice"
          | "rtprio"
          | "chroot";
        /**
         * Limit type, see C(man limits) for an explanation
         */
        limit_type: "soft" | "hard" | "-";
        /**
         * Default: no
         *
         * Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
         */
        backup?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * The M(slack) module sends notifications to U(http://slack.com) via the Incoming WebHook integration
       */
      slack?: {
        /**
         * Default: Ansible
         *
         * This is the sender of the message.
         */
        username?: string;
        /**
         * Default: None
         *
         * Slack (sub)domain for your environment without protocol. (i.e. C(future500.slack.com)) In 1.8 and beyond, this is deprecated and may be ignored.  See token documentation for information.
         */
        domain?: string;
        /**
         * Default: None
         *
         * Define a list of attachments. This list mirrors the Slack JSON API. For more information, see https://api.slack.com/docs/attachments
         */
        attachments?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: normal
         *
         * Allow text to use default colors - use the default of 'normal' to not send a custom color bar at the start of the message
         */
        color?: "normal" | "good" | "warning" | "danger";
        /**
         * Url for the message sender's icon (default C(http://www.ansible.com/favicon.ico))
         */
        icon_url?: string;
        /**
         * Default: None
         *
         * Setting for the message parser at Slack
         */
        parse?: "full" | "none";
        /**
         * Slack integration token.  This authenticates you to the slack service. Prior to 1.8, a token looked like C(3Ffe373sfhRE6y42Fg3rvf4GlK).  In 1.8 and above, ansible adapts to the new slack API where tokens look like C(G922VJP24/D921DW937/3Ffe373sfhRE6y42Fg3rvf4GlK).  If tokens are in the new format then slack will ignore any value of domain.  If the token is in the old format the domain is required.  Ansible has no control of when slack will get rid of the old API.  When slack does that the old format will stop working.
         */
        token: string;
        /**
         * Default: None
         *
         * Emoji for the message sender. See Slack documentation for options. (if I(icon_emoji) is set, I(icon_url) will not be used)
         */
        icon_emoji?: string;
        /**
         * Default: 1
         *
         * Automatically create links for channels and usernames in I(msg).
         */
        link_names?: number | string;
        /**
         * Default: None
         *
         * Message to send.
         */
        msg?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * Channel to send the message to. If absent, the message goes to the channel selected for the I(token).
         */
        channel?: string;
        [k: string]: any;
      };
      /**
       * Templates are processed by the Jinja2 templating language (U(http://jinja.pocoo.org/docs/)) - documentation on the template formatting can be found in the Template Designer Documentation (U(http://jinja.pocoo.org/docs/templates/)).
       * Six additional variables can be used in templates: C(ansible_managed) (configurable via the C(defaults) section of C(ansible.cfg)) contains a string which can be used to describe the template name, host, modification time of the template file and the owner uid, C(template_host) contains the node name of the template's machine, C(template_uid) the owner, C(template_path) the absolute path of the template, C(template_fullpath) is the absolute path of the template, and C(template_run_date) is the date that the template was rendered. Note that including a string that uses a date in the template will result in the template being marked 'changed' each time.
       */
      win_template?: {
        /**
         * Location to render the template to on the remote machine.
         */
        dest?: string;
        /**
         * Path of a Jinja2 formatted template on the local server. This can be a relative or absolute path.
         */
        src?: string;
        [k: string]: any;
      };
      /**
       * Manage (add, remove, change) individual settings in an INI-style file without having to manage the file as a whole with, say, M(template) or M(assemble). Adds missing sections if they don't exist.
       * Before version 2.0, comments are discarded when the source file is read, and therefore will not show up in the destination file.
       */
      ini_file?: {
        /**
         * if set (required for changing a I(value)), this is the name of the option.
         * May be omitted if adding/removing a whole I(section).
         */
        option?: string;
        /**
         * Path to the INI-style file; this file is created if required
         */
        dest: string;
        /**
         * Section name in INI file. This is added if C(state=present) automatically when a single value is being set.
         */
        section: string;
        /**
         * the string value to be associated with an I(option). May be omitted when removing an I(option).
         */
        value?: string;
        /**
         * Default: present
         *
         * If set to C(absent) the option or section will be removed if present instead of created.
         */
        state?: "present" | "absent";
        /**
         * Default: no
         *
         * Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
         */
        backup?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage VMware vSphere Datacenters
       */
      vmware_datacenter?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Can create or delete scaling policies for autoscaling groups
       * Referenced autoscaling groups must already exist
       */
      ec2_scaling_policy?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * creates / deletes a Rackspace Public Cloud load balancer.
       */
      rax_clb?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add or remove network from OpenStack.
       */
      os_network?: {
        /**
         * Whether this network is shared or not.
         */
        shared?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource.
         */
        state?: string;
        /**
         * Name to be assigned to the network.
         */
        name?: string;
        /**
         * Whether this network is externally accessible.
         */
        external?: string;
        /**
         * Default: True
         *
         * Whether the state should be marked as up or down.
         */
        admin_state_up?: string;
        [k: string]: any;
      };
      /**
       * Manages Citrix NetScaler server and service entities.
       */
      netscaler?: {
        /**
         * Default: hostname
         *
         * name of the entity
         */
        name?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: https
         *
         * protocol used to access netscaler
         */
        nsc_protocol?: string;
        /**
         * hostname or ip of your netscaler
         */
        nsc_host: string;
        /**
         * username
         */
        user: string;
        /**
         * Default: disable
         *
         * the action you want to perform on the entity
         */
        action?: "enable" | "disable";
        /**
         * password
         */
        password: string;
        /**
         * Default: server
         *
         * type of the entity
         */
        type?: "server" | "service";
        [k: string]: any;
      };
      /**
       * Manages F5 BIG-IP LTM tcp monitors via iControl SOAP API
       */
      bigip_monitor_tcp?: {
        /**
         * Default: Common
         *
         * Partition for the parent monitor
         */
        parent_partition?: string;
        /**
         * Default: Common
         *
         * Partition for the monitor
         */
        partition?: string;
        /**
         * Monitor name
         */
        name?: string;
        /**
         * Default: tcp
         *
         * The parent template of this monitor template
         */
        parent?: string;
        /**
         * Default: none
         *
         * The receive string for the monitor call
         */
        receive?: string;
        /**
         * Default: none
         *
         * IP address part of the ipport definition. The default API setting is "0.0.0.0".
         */
        ip?: string;
        /**
         * Default: none
         *
         * The interval specifying how frequently the monitor instance of this template will run. By default, this interval is used for up and down states. The default API setting is 5.
         */
        interval?: string;
        /**
         * Default: none
         *
         * The send string for the monitor call
         */
        send?: string;
        /**
         * BIG-IP host
         */
        server?: string;
        /**
         * Default: present
         *
         * Monitor state
         */
        state?: string;
        /**
         * Default: none
         *
         * Specifies the amount of time in seconds after the first successful response before a node will be marked up. A value of 0 will cause a node to be marked up immediately after a valid response is received from the node. The default API setting is 0.
         */
        time_until_up?: string;
        /**
         * BIG-IP username
         */
        user?: string;
        /**
         * Default: none
         *
         * The number of seconds in which the node or service must respond to the monitor request. If the target responds within the set time period, it is considered up. If the target does not respond within the set time period, it is considered down. You can change this number to any number you want, however, it should be 3 times the interval number of seconds plus 1 second. The default API setting is 16.
         */
        timeout?: string;
        /**
         * Default: tcp
         *
         * The template type of this monitor template
         */
        type?: string;
        /**
         * BIG-IP password
         */
        password?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites.  Prior to 2.0, this module would always validate on python >= 2.7.9 and never validate on python <= 2.7.8
         */
        validate_certs?: string;
        /**
         * Default: none
         *
         * port address part op the ipport definition. The default API setting is 0.
         */
        port?: string;
        [k: string]: any;
      };
      /**
       * osx_defaults allows users to read, write, and delete Mac OS X user defaults from Ansible scripts. Mac OS X applications and other programs use the defaults system to record user preferences and other information that must be maintained when the applications aren't running (such as default font for new documents, or the position of an Info panel).
       */
      osx_defaults?: {
        /**
         * Default: NSGlobalDomain
         *
         * The domain is a domain name of the form com.companyname.appname.
         */
        domain?: string;
        /**
         * The value to write. Only required when state = present.
         */
        value?: string;
        /**
         * Default: present
         *
         * The state of the user defaults
         */
        state?: "present" | "absent";
        /**
         * The key of the user preference
         */
        key?: string;
        path?: string;
        /**
         * Default: string
         *
         * The type of value to write.
         */
        type?: "array" | "bool" | "boolean" | "date" | "float" | "int" | "integer" | "string";
        /**
         * Add new elements to the array for a key which has an array as its value.
         */
        array_add?: 0 | "on" | "f" | "false" | 1 | "no" | "n" | "1" | "0" | "t" | "y" | "off" | "yes" | "true";
        [k: string]: any;
      };
      /**
       * IPS packages are the native packages in Solaris 11 and higher.
       * This modules will configure which publishers a client will download IPS packages from.
       */
      pkg5_publisher?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Enables or disables a specified module of the Apache2 webserver.
       */
      apache2_module?: {
        /**
         * Default: present
         *
         * indicate the desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * name of the module to enable/disable
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Management of LXC containers
       */
      lxc_container?: {
        /**
         * Create zfs under given zfsroot.
         */
        zfs_root?: string;
        /**
         * Name of the new cloned server. This is only used when state is clone.
         */
        clone_name?: string;
        /**
         * list of 'key=value' options to use when configuring a container.
         */
        container_config?: string;
        /**
         * Default: ext4
         *
         * Create fstype TYPE.
         */
        fs_type?: string;
        /**
         * Create an archive of a container. This will create a tarball of the running container.
         */
        archive?: 0 | "on" | "f" | "false" | 1 | "no" | "n" | "1" | "0" | "t" | "y" | "off" | "yes" | "true";
        /**
         * Enable a container log for host actions to the container.
         */
        container_log?: 0 | "on" | "f" | "false" | 1 | "no" | "n" | "1" | "0" | "t" | "y" | "off" | "yes" | "true";
        /**
         * Default: started
         *
         * Define the state of a container. If you clone a container using `clone_name` the newly cloned container created in a stopped state. The running container will be stopped while the clone operation is happening and upon completion of the clone the original container state will be restored.
         */
        state?: "absent" | "restarted" | "started" | "clone" | "frozen" | "stopped";
        /**
         * Default: ubuntu
         *
         * Name of the template to use within an LXC create.
         */
        template?: string;
        /**
         * Path to the LXC configuration file.
         */
        config?: string;
        /**
         * Path the save the archived container. If the path does not exist the archive method will attempt to create it.
         */
        archive_path?: string;
        /**
         * Default: INFO
         *
         * Set the log level for a container where *container_log* was set.
         */
        container_log_level?: "info" | "INFO" | "Info" | "debug" | "DEBUG" | "Debug" | "error" | "ERROR" | "Error";
        /**
         * Template options when building the container.
         */
        template_options?: string;
        /**
         * Run a command within a container.
         */
        container_command?: string;
        /**
         * Place container under PATH
         */
        lxc_path?: string;
        /**
         * Default: gzip
         *
         * Type of compression to use when creating an archive of a running container.
         */
        archive_compression?: "gzip" | "bzip2" | "none";
        /**
         * Use LVM thin pool called TP.
         */
        thinpool?: string;
        /**
         * Create a snapshot a container when cloning. This is not supported by all container storage backends. Enabling this may fail if the backing store does not support snapshots.
         */
        clone_snapshot?: 0 | "on" | "f" | "false" | 1 | "no" | "n" | "1" | "0" | "t" | "y" | "off" | "yes" | "true";
        /**
         * Name of a container.
         */
        name: string;
        /**
         * Default: $CONTAINER_NAME
         *
         * Name of the logical volume, defaults to the container name.
         */
        lv_name?: string;
        /**
         * Default: 5G
         *
         * File system Size.
         */
        fs_size?: string;
        /**
         * Default: dir
         *
         * Backend storage type for the container.
         */
        backing_store?: "dir" | "lvm" | "loop" | "btrfs" | "overlayfs" | "zfs";
        /**
         * Default: lxc
         *
         * If Backend store is lvm, specify the name of the volume group.
         */
        vg_name?: string;
        /**
         * Place rootfs directory under DIR.
         */
        directory?: string;
        [k: string]: any;
      };
      /**
       * Creates (empty) files, updates file modification stamps of existing files, and can create or remove directories. Unlike M(file), does not modify ownership, permissions or manipulate links.
       */
      win_file?: {
        /**
         * path to the file being managed.  Aliases: I(dest), I(name)
         */
        path?: string;
        /**
         * Default: file
         *
         * If C(directory), all immediate subdirectories will be created if they do not exist. If C(file), the file will NOT be created if it does not exist, see the M(copy) or M(template) module if you want that behavior.  If C(absent), directories will be recursively deleted, and files will be removed. If C(touch), an empty file will be created if the c(path) does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way `touch` works from the command line).
         */
        state?: string;
        [k: string]: any;
      };
      /**
       * Send code deploy and annotation events to Stackdriver
       */
      stackdriver?: {
        /**
         * The repository (or project) deployed
         */
        repository?: string;
        /**
         * Default: INFO
         *
         * one of INFO/WARN/ERROR, defaults to INFO if not supplied.  May affect display.
         */
        level?: "INFO" | "WARN" | "ERROR";
        /**
         * Default: Ansible
         *
         * The person or robot who the annotation should be attributed to.
         */
        annotated_by?: string;
        /**
         * Default: Ansible
         *
         * The person or robot responsible for deploying the code
         */
        deployed_by?: string;
        /**
         * The environment code was deployed to. (ie: development, staging, production)
         */
        deployed_to?: string;
        /**
         * id of an EC2 instance that this event should be attached to, which will limit the contexts where this event is shown
         */
        instance_id?: string;
        /**
         * API key.
         */
        key: string;
        /**
         * The contents of the annotation message, in plain text.  Limited to 256 characters. Required for annotation.
         */
        msg?: string;
        /**
         * Unix timestamp of where the event should appear in the timeline, defaults to now. Be careful with this.
         */
        event_epoch?: string;
        /**
         * The revision of the code that was deployed. Required for deploy events
         */
        revision_id?: string;
        /**
         * The type of event to send, either annotation or deploy
         */
        event: "annotation" | "deploy";
        [k: string]: any;
      };
      /**
       * Searches, downloads, and installs Windows updates synchronously by automating the Windows Update client
       */
      win_updates?: {
        /**
         * If set, win_updates will append update progress to the specified file. The directory must already exist.
         */
        log_path?: string;
        /**
         * Default: installed
         *
         * Controls whether found updates are returned as a list or actually installed.
         * This module also supports Ansible check mode, which has the same effect as setting state=searched
         */
        state?: string;
        /**
         * Default: ['CriticalUpdates', 'SecurityUpdates', 'UpdateRollups']
         *
         * A scalar or list of categories to install updates from
         */
        category_names?: string;
        [k: string]: any;
      };
      /**
       * You can wait for a set amount of time C(timeout), this is the default if nothing is specified.
       * Waiting for a port to become available is useful for when services are not immediately available after their init scripts return which is true of certain Java application servers. It is also useful when starting guests with the M(virt) module and needing to pause until they are ready.
       * This module can also be used to wait for a regex match a string to be present in a file.
       * In 1.6 and later, this module can also be used to wait for a file to be available or absent on the filesystem.
       * In 1.8 and later, this module can also be used to wait for active connections to be closed before continuing, useful if a node is being rotated out of a load balancer pool.
       */
      wait_for?: {
        /**
         * Default: 127.0.0.1
         *
         * A resolvable hostname or IP address to wait for
         */
        host?: string;
        /**
         * Default: 5
         *
         * maximum number of seconds to wait for a connection to happen before closing and retrying
         */
        connect_timeout?: string;
        /**
         * number of seconds to wait before starting to poll
         */
        delay?: string;
        /**
         * Default: started
         *
         * either C(present), C(started), or C(stopped), C(absent), or C(drained)
         * When checking a port C(started) will ensure the port is open, C(stopped) will check that it is closed, C(drained) will check for active connections
         * When checking for a file or a search string C(present) or C(started) will ensure that the file or string is present before continuing, C(absent) will check that file is absent or removed
         */
        state?: "present" | "started" | "stopped" | "absent" | "drained";
        /**
         * Default: 300
         *
         * maximum number of seconds to wait for
         */
        timeout?: string;
        /**
         * list of hosts or IPs to ignore when looking for active TCP connections for C(drained) state
         */
        exclude_hosts?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Can be used to match a string in either a file or a socket connection. Defaults to a multiline regex.
         */
        search_regex?: string;
        /**
         * path to a file on the filesytem that must exist before continuing
         */
        path?: string;
        /**
         * port number to poll
         */
        port?: string;
        [k: string]: any;
      };
      /**
       * Manages filesystem user defined extended attributes, requires that they are enabled on the target filesystem and that the setfattr/getfattr utilities are present.
       */
      xattr?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Retrieve facts about one or more subnets from OpenStack.
       */
      os_subnets_facts?: {
        /**
         * Name or ID of the subnet
         */
        subnet?: string;
        /**
         * A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.
         */
        filters?: string;
        [k: string]: any;
      };
      /**
       * creates / deletes a Rackspace Public Cloud instance and optionally waits for it to be 'running'.
       */
      rax?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Gathers Vertica database facts.
       */
      vertica_facts?: {
        /**
         * Default: dbadmin
         *
         * The username used to authenticate with.
         */
        login_user?: string;
        /**
         * Default: localhost
         *
         * Name of the cluster running the schema.
         */
        cluster?: string;
        /**
         * Name of the database running the schema.
         */
        db?: string;
        /**
         * Default: 5433
         *
         * Database port to connect to.
         */
        port?: string;
        /**
         * The password used to authenticate with.
         */
        login_password?: string;
        [k: string]: any;
      };
      /**
       * Acquires and associates a public IP to an account or project. Due to API limitations this is not an idempotent call, so be sure to only conditionally call this when C(state=present)
       */
      cs_ip_address?: {
        /**
         * Account the IP address is related to.
         */
        account?: string;
        api_key?: string;
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        api_region?: string;
        /**
         * Name of the project the IP address is related to.
         */
        project?: string;
        state?: "present" | "absent";
        /**
         * Domain the IP address is related to.
         */
        domain?: string;
        /**
         * Name of the zone in which the IP address is in.
         * If not set, default zone is used.
         */
        zone?: string;
        /**
         * Public IP address.
         * Required if C(state=absent)
         */
        ip_address?: string;
        /**
         * Network the IP address is related to.
         */
        network?: string;
        [k: string]: any;
      };
      /**
       * Manages MySQL server replication, slave, master status get and change master host.
       */
      mysql_replication?: {
        ssl_key?: string;
        /**
         * does the host uses GTID based replication or not
         */
        master_auto_position?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * same as mysql variable
         */
        master_ssl_cert?: string;
        login_user?: string;
        /**
         * same as mysql variable
         */
        master_port?: number | string;
        /**
         * same as mysql variable
         */
        master_host?: string;
        /**
         * same as mysql variable
         */
        master_ssl_ca?: string;
        /**
         * same as mysql variable
         */
        master_ssl_cipher?: string;
        /**
         * same as mysql variable
         */
        relay_log_file?: string;
        /**
         * same as mysql variable
         */
        master_log_pos?: number | string;
        /**
         * same as mysql variable
         */
        relay_log_pos?: number | string;
        /**
         * same as mysql variable
         */
        master_password?: string;
        config_file?: string;
        /**
         * same as mysql variable
         */
        master_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        login_host?: string;
        /**
         * same as mysql variable
         */
        master_ssl_capath?: string;
        login_unix_socket?: string;
        /**
         * same as mysql variable
         */
        master_connect_retry?: number | string;
        /**
         * same as mysql variable
         */
        master_user?: string;
        login_password?: string;
        /**
         * same as mysql variable
         */
        master_log_file?: string;
        login_port?: number | string;
        ssl_cert?: string;
        ssl_ca?: string;
        /**
         * same as mysql variable
         */
        master_ssl_key?: string;
        /**
         * Default: getslave
         *
         * module operating mode. Could be getslave (SHOW SLAVE STATUS), getmaster (SHOW MASTER STATUS), changemaster (CHANGE MASTER TO), startslave (START SLAVE), stopslave (STOP SLAVE), resetslave (RESET SLAVE), resetslaveall (RESET SLAVE ALL)
         */
        mode?: "getslave" | "getmaster" | "changemaster" | "stopslave" | "startslave" | "resetslave" | "resetslaveall";
        [k: string]: any;
      };
      /**
       * Create or terminate AWS virtual private clouds.  This module has a dependency on python-boto.
       */
      ec2_vpc_net?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add or remove Zypper repositories on SUSE and openSUSE
       */
      zypper_repository?: {
        /**
         * Default: none
         *
         * A description of the repository
         */
        description?: string;
        /**
         * Default: no
         *
         * Whether to disable GPG signature checking of all packages. Has an effect only if state is I(present).
         */
        disable_gpg_check?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: yes
         *
         * Enable autorefresh of the repository.
         */
        refresh?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: none
         *
         * URI of the repository or .repo file. Required when state=present.
         */
        repo?: string;
        /**
         * Default: present
         *
         * A source string state.
         */
        state?: "absent" | "present";
        /**
         * Default: none
         *
         * A name for the repository. Not required when adding repofiles.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Add or Remove images from the OpenStack Image Repository
       */
      os_image?: {
        /**
         * Default: None
         *
         * The name of an existing ramdisk image that will be associated with this image
         */
        ramdisk?: string;
        /**
         * Default: None
         *
         * The name of an existing kernel image that will be associated with this image
         */
        kernel?: string;
        /**
         * Default: None
         *
         * Name that has to be given to the image
         */
        name?: string;
        /**
         * Default: bare
         *
         * The format of the container
         */
        container_format?: string;
        /**
         * Default: None
         *
         * The minimum ram (in MB) required to boot this image
         */
        min_ram?: string;
        /**
         * Default: qcow2
         *
         * The format of the disk that is getting uploaded
         */
        disk_format?: string;
        /**
         * Default: None
         *
         * The path to the file which has to be uploaded
         */
        filename?: string;
        /**
         * Default: None
         *
         * The minimum disk space (in GB) required to boot this image
         */
        min_disk?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: None
         *
         * The owner of the image
         */
        owner?: string;
        /**
         * Default: yes
         *
         * Whether the image can be accessed publicly. Note that publicizing an image requires admin role by default.
         */
        is_public?: string;
        /**
         * Additional properties to be associated with this image
         */
        properties?: string;
        [k: string]: any;
      };
      /**
       * Create a keypair for use with Rackspace Cloud Servers
       */
      rax_keypair?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Use variables to create new hosts and groups in inventory for use in later plays of the same playbook. Takes variables so you can define the new hosts more fully.
       */
      add_host?: {
        /**
         * The hostname/ip of the host to add to the inventory, can include a colon and a port number.
         */
        name?: string;
        /**
         * The groups to add the hostname to, comma separated.
         */
        groups?: string;
        [k: string]: any;
      };
      /**
       * Manage registration to the Red Hat Network.
       */
      rhn_register?: {
        /**
         * Red Hat Network username
         */
        username?: string;
        /**
         * Default: Current value of I(serverURL) from C(/etc/sysconfig/rhn/up2date) is the default
         *
         * Specify an alternative Red Hat Network server URL
         */
        server_url?: string;
        /**
         * Optionally specify a list of comma-separated channels to subscribe to upon successful registration.
         */
        channels?: string;
        /**
         * Default: present
         *
         * whether to register (C(present)), or unregister (C(absent)) a system
         */
        state?: string;
        /**
         * supply an activation key for use with registration
         */
        activationkey?: string;
        /**
         * supply an profilename for use with registration
         */
        profilename?: string;
        /**
         * Red Hat Network password
         */
        password?: string;
        [k: string]: any;
      };
      /**
       * Manages Elasticsearch plugins.
       */
      elasticsearch_plugin?: {
        /**
         * Default: None
         *
         * Version of the plugin to be installed. If plugin exists with previous version, it will NOT be updated
         */
        version?: string;
        /**
         * Default: None
         *
         * Set exact URL to download the plugin from
         */
        url?: string;
        /**
         * Name of the plugin to install
         */
        name: string;
        /**
         * Default: present
         *
         * Desired state of a plugin.
         */
        state?: "present" | "absent";
        /**
         * Default: /usr/share/elasticsearch/plugins/
         *
         * Your configured plugin directory specified in Elasticsearch
         */
        plugin_dir?: string;
        /**
         * Default: 1m
         *
         * Timeout setting: 30s, 1m, 1h...
         */
        timeout?: string;
        /**
         * Default: /usr/share/elasticsearch/bin/plugin
         *
         * Location of the plugin binary
         */
        plugin_bin?: string;
        [k: string]: any;
      };
      /**
       * Create and optionally attach an Elastic Network Interface (ENI) to an instance. If an ENI ID is provided, an attempt is made to update the existing ENI. By passing 'None' as the instance_id, an ENI can be detached from an instance.
       */
      ec2_eni?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Can create or delete AwS Autoscaling Configurations
       * Works with the ec2_asg module to manage Autoscaling Groups
       */
      ec2_lc?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage OpenStack Projects. Projects can be created, updated or deleted using this module. A project will be updated if I(name) matches an existing project and I(state) is present. The value for I(name) cannot be updated without deleting and re-creating the project.
       */
      os_project?: {
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: True
         *
         * Is the project enabled
         */
        enabled?: string;
        /**
         * Default: None
         *
         * Description for the project
         */
        description?: string;
        /**
         * Name for the project
         */
        name?: string;
        /**
         * Default: None
         *
         * Domain id to create the project in if the cloud supports domains
         */
        domain_id?: string;
        [k: string]: any;
      };
      /**
       * Manage I(bzr) branches to deploy files or software.
       */
      bzr?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Create, update, disable, lock, enable and remove users.
       */
      cs_user?: {
        /**
         * Username of the user.
         */
        username: string;
        /**
         * Default: ROOT
         *
         * Domain the user is related to.
         */
        domain?: string;
        /**
         * Last name of the user.
         * Required on C(state=present).
         */
        last_name?: string;
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        /**
         * Account the user will be created under.
         * Required on C(state=present).
         */
        account?: string;
        api_region?: string;
        api_key?: string;
        /**
         * Default: present
         *
         * State of the user.
         * C(unlocked) is an alias for C(enabled).
         */
        state?: "present" | "absent" | "enabled" | "disabled" | "locked" | "unlocked";
        /**
         * First name of the user.
         * Required on C(state=present).
         */
        first_name?: string;
        /**
         * Timezone of the user.
         */
        timezone?: string;
        /**
         * Password of the user to be created.
         * Required on C(state=present).
         * Only considered on creation and will not be updated if user exists.
         */
        password?: string;
        /**
         * Email of the user.
         * Required on C(state=present).
         */
        email?: string;
        [k: string]: any;
      };
      /**
       * Add, update and remove load balancer rules.
       */
      cs_loadbalancer_rule?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Create or remove a distributed vSwitch
       */
      vmware_dvswitch?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Creates and removes firewall rules.
       */
      cs_firewall?: {
        [k: string]: any;
      };
      /**
       * Manage subnets in AWS virtual private clouds
       */
      ec2_vpc_subnet?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Perform server actions on an existing compute instance from OpenStack. This module does not return any data other than changed true/false.
       */
      os_server_actions?: {
        /**
         * Default: present
         *
         * Perform the given action. The lock and unlock actions always return changed as the servers API does not provide lock status.
         */
        action?: string;
        /**
         * Default: yes
         *
         * If the module should wait for the instance action to be performed.
         */
        wait?: string;
        /**
         * Default: 180
         *
         * The amount of time the module should wait for the instance to perform the requested action.
         */
        timeout?: string;
        /**
         * Name or ID of the instance
         */
        server?: string;
        [k: string]: any;
      };
      /**
       * Adds, modifies and removes nodes from a Rackspace Cloud Load Balancer
       */
      rax_clb_nodes?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add or remove MySQL databases from a remote host.
       */
      mysql_db?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Creates/deletes an issue in a Taiga Project Management Platform (U(https://taiga.io)).
       * An issue is identified by the combination of project, issue subject and issue type.
       * This module implements the creation or deletion of issues (not the update).
       */
      taiga_issue?: {
        /**
         * Default: New
         *
         * The issue status. Must exist previously.
         */
        status?: string;
        /**
         * Name of the project containing the issue. Must exist previously.
         */
        project: string;
        /**
         * The issue description.
         */
        description?: string;
        /**
         * A lists of tags to be assigned to the issue.
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: Normal
         *
         * The issue priority. Must exist previously.
         */
        priority?: string;
        /**
         * Default: https://api.taiga.io
         *
         * The hostname of the Taiga instance.
         */
        taiga_host?: string;
        /**
         * Default: present
         *
         * Whether the issue should be present or not.
         */
        state?: "present" | "absent";
        /**
         * Default: None
         *
         * Path to a file to be attached to the issue.
         */
        attachment?: string;
        /**
         * The issue type. Must exist previously.
         */
        issue_type: string;
        /**
         * The issue subject.
         */
        subject: string;
        /**
         * A string describing the file to be attached to the issue.
         */
        attachment_description?: string;
        /**
         * Default: Normal
         *
         * The issue severity. Must exist previously.
         */
        severity?: string;
        [k: string]: any;
      };
      /**
       * Manages F5 BIG-IP LTM monitors via iControl SOAP API
       */
      bigip_monitor_http?: {
        /**
         * Default: Common
         *
         * Partition for the parent monitor
         */
        parent_partition?: string;
        /**
         * Default: Common
         *
         * Partition for the monitor
         */
        partition?: string;
        /**
         * Default: none
         *
         * The receive disable string for the monitor call
         */
        receive_disable?: string;
        /**
         * Default: http
         *
         * The parent template of this monitor template
         */
        parent?: string;
        /**
         * Default: none
         *
         * The receive string for the monitor call
         */
        receive?: string;
        /**
         * Default: none
         *
         * IP address part of the ipport definition. The default API setting is "0.0.0.0".
         */
        ip?: string;
        /**
         * Default: none
         *
         * The interval specifying how frequently the monitor instance of this template will run. By default, this interval is used for up and down states. The default API setting is 5.
         */
        interval?: string;
        /**
         * Default: none
         *
         * The send string for the monitor call
         */
        send?: string;
        /**
         * BIG-IP host
         */
        server?: string;
        /**
         * Default: present
         *
         * Monitor state
         */
        state?: string;
        /**
         * Default: none
         *
         * Specifies the amount of time in seconds after the first successful response before a node will be marked up. A value of 0 will cause a node to be marked up immediately after a valid response is received from the node. The default API setting is 0.
         */
        time_until_up?: string;
        /**
         * BIG-IP username
         */
        user?: string;
        /**
         * Default: none
         *
         * The number of seconds in which the node or service must respond to the monitor request. If the target responds within the set time period, it is considered up. If the target does not respond within the set time period, it is considered down. You can change this number to any number you want, however, it should be 3 times the interval number of seconds plus 1 second. The default API setting is 16.
         */
        timeout?: string;
        /**
         * BIG-IP password
         */
        password?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites.  Prior to 2.0, this module would always validate on python >= 2.7.9 and never validate on python <= 2.7.8
         */
        validate_certs?: string;
        /**
         * Default: none
         *
         * port address part op the ipport definition. The default API setting is 0.
         */
        port?: string;
        /**
         * Monitor name
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Manipulate Rackspace Cloud Block Storage Volumes
       */
      rax_cbs?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module will insert/update/remove a block of multi-line text surrounded by customizable marker lines.
       */
      blockinfile?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Manages F5 BIG-IP GTM wide ip
       */
      bigip_gtm_wide_ip?: {
        /**
         * BIG-IP password
         */
        password: string;
        /**
         * LB method of wide ip
         */
        lb_method:
          | "return_to_dns"
          | "null"
          | "round_robin"
          | "ratio"
          | "topology"
          | "static_persist"
          | "global_availability"
          | "vs_capacity"
          | "least_conn"
          | "lowest_rtt"
          | "lowest_hops"
          | "packet_rate"
          | "cpu"
          | "hit_ratio"
          | "qos"
          | "bps"
          | "drop_packet"
          | "explicit_ip"
          | "connection_rate"
          | "vs_score";
        /**
         * Wide IP name
         */
        wide_ip: string;
        /**
         * BIG-IP username
         */
        user: string;
        /**
         * BIG-IP host
         */
        server: string;
        [k: string]: any;
      };
      /**
       * Pauses playbook execution for a set amount of time, or until a prompt is acknowledged. All parameters are optional. The default behavior is to pause with a prompt.
       * You can use C(ctrl+c) if you wish to advance a pause earlier than it is set to expire or if you need to abort a playbook run entirely. To continue early: press C(ctrl+c) and then C(c). To abort a playbook: press C(ctrl+c) and then C(a).
       * The pause module integrates into async/parallelized playbooks without any special considerations (see also: Rolling Updates). When using pauses with the C(serial) playbook parameter (as in rolling updates) you are only prompted once for the current group of hosts.
       */
      pause?: {
        host?: string;
        connect_timeout?: string;
        delay?: string;
        state?: "started" | "stopped" | "present" | "absent" | "drained";
        timeout?: string;
        exclude_hosts?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        search_regex?: string;
        path?: string;
        port?: string;
        [k: string]: any;
      };
      /**
       * Set column values in record in database table.
       */
      openvswitch_db?: {
        /**
         * Identifies the key in the record column
         */
        key: string;
        /**
         * Expected value for the table, record, column and key.
         */
        value: string;
        /**
         * Identifies the recoard in the table.
         */
        record: string;
        /**
         * Default: 5
         *
         * How long to wait for ovs-vswitchd to respond
         */
        timeout?: number | string;
        /**
         * Identifies the table in the database.
         */
        table: string;
        col: string;
        [k: string]: any;
      };
      /**
       * Uses Layman to manage an additional repositories for the Portage package manager on Gentoo Linux. Please note that Layman must be installed on a managed node prior using this module.
       */
      layman?: {
        [k: string]: any;
      };
      /**
       * Creates, Removes and configures a IIS Web Application Pool
       */
      win_iis_webapppool?: {
        /**
         * Application Pool attributes from string where attributes are seperated by a pipe and attribute name/values by colon Ex. "foo:1|bar:2"
         */
        attributes?: string;
        /**
         * State of the binding
         */
        state?: string;
        /**
         * Names of application pool
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * This module fetches data from the metadata servers in ec2 (aws) as per http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html. The module must be called from within the EC2 instance itself.
       */
      ec2_facts?: {
        [k: string]: any;
      };
      /**
       * Iptables is used to set up, maintain, and inspect the tables of IP packet filter rules in the Linux kernel. This module does not handle the saving and/or loading of rules, but rather only manipulates the current rules that are present in memory. This is the same as the behaviour of the "iptables" and "ip6tables" command which this module uses internally.
       */
      iptables?: {
        /**
         * This specifies a comment that will be added to the rule
         */
        comment?: string;
        /**
         * This enables the administrator to initialize the packet and byte counters of a rule (during INSERT, APPEND, REPLACE operations).
         */
        set_counters?: string;
        /**
         * This specifies that the processing should continue in a user specified chain. Unlike the jump argument return will not continue processing in this chain but instead in the chain that called us via jump.
         */
        goto?: string;
        /**
         * Chain to operate on. This option can either be the name of a user defined chain or any of the builtin chains: 'INPUT', 'FORWARD', 'OUTPUT', 'PREROUTING', 'POSTROUTING', 'SECMARK', 'CONNSECMARK'
         */
        chain: string;
        /**
         * Name of an interface via which a packet was received (only for packets entering the INPUT, FORWARD and PREROUTING chains). When the "!" argument is used before the interface name, the sense is inverted. If the interface name ends in a "+", then any interface which begins with this name will match. If this option is omitted, any interface name will match.
         */
        in_interface?: string;
        /**
         * This means that the rule only refers to second and further fragments of fragmented packets. Since there is no way to tell the source or destination ports of such a packet (or ICMP type), such a packet will not match any rules which specify them. When the "!" argument precedes fragment argument, the rule will only match head fragments, or unfragmented packets.
         */
        fragment?: string;
        /**
         * Name of an interface via which a packet is going to be sent (for packets entering the FORWARD, OUTPUT and POSTROUTING chains). When the "!" argument is used before the interface name, the sense is inverted. If the interface name ends in a "+", then any interface which begins with this name will match. If this option is omitted, any interface name will match.
         */
        out_interface?: string;
        /**
         * Destination specification. Address can be either a network name, a hostname, a network IP address (with /mask), or a plain IP address. Hostnames will be resolved once only, before the rule is submitted to the kernel. Please note that specifying any name to be resolved with a remote query such as DNS is a really bad idea. The mask can be either a network mask or a plain number, specifying the number of 1's at the left side of the network mask. Thus, a mask of 24 is equivalent to 255.255.255.0. A "!" argument before the address specification inverts the sense of the address.Source specification. Address can be either a network name, a hostname, a network IP address (with /mask), or a plain IP address. Hostnames will be resolved once only, before the rule is submitted to the kernel. Please note that specifying any name to be resolved with a remote query such as DNS is a really bad idea. The mask can be either a network mask or a plain number, specifying the number of 1's at the left side of the network mask. Thus, a mask of 24 is equivalent to 255.255.255.0. A "!" argument before the address specification inverts the sense of the address.
         */
        destination?: string;
        /**
         * The protocol of the rule or of the packet to check. The specified protocol can be one of tcp, udp, udplite, icmp, esp, ah, sctp or the special keyword "all", or it can be a numeric value, representing one of these protocols or a different one. A protocol name from /etc/protocols is also allowed. A "!" argument before the protocol inverts the test.  The number zero is equivalent to all. "all" will match with all protocols and is taken as default when this option is omitted.
         */
        protocol?: string;
        /**
         * ctstate is a list of the connection states to match in the conntrack module. Possible states are: 'INVALID', 'NEW', 'ESTABLISHED', 'RELATED', 'UNTRACKED', 'SNAT', 'DNAT'
         */
        ctstate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * This specifies the target of the rule; i.e., what to do if the packet matches it. The target can be a user-defined chain (other than the one this rule is in), one of the special builtin targets which decide the fate of the packet immediately, or an extension (see EXTENSIONS below).  If this option is omitted in a rule (and the goto paramater is not used), then matching the rule will have no effect on the packet's fate, but the counters on the rule will be incremented.
         */
        jump?: string;
        /**
         * Source specification. Address can be either a network name, a hostname, a network IP address (with /mask), or a plain IP address. Hostnames will be resolved once only, before the rule is submitted to the kernel. Please note that specifying any name to be resolved with a remote query such as DNS is a really bad idea. The mask can be either a network mask or a plain number, specifying the number of 1's at the left side of the network mask. Thus, a mask of 24 is equivalent to 255.255.255.0. A "!" argument before the address specification inverts the sense of the address.Source specification. Address can be either a network name, a hostname, a network IP address (with /mask), or a plain IP address.  Hostnames will be resolved once only, before the rule is submitted to the kernel. Please note that specifying any name to be resolved with a remote query such as DNS is a really bad idea. The mask can be either a network mask or a plain number, specifying the number of 1's at the left side of the network mask. Thus, a mask of 24 is equivalent to 255.255.255.0. A "!" argument before the address specification inverts the sense of the address.
         */
        source?: string;
        /**
         * Default: present
         *
         * Whether the rule should be absent or present.
         */
        state?: "present" | "absent";
        /**
         * Specifies the maximum average number of matches to allow per second. The number can specify units explicitly, using `/second', `/minute', `/hour' or `/day', or parts of them (so `5/second' is the same as `5/s').
         */
        limit?: string;
        /**
         * This specifies a destination port or range of ports to use: without this, the destination port is never altered. This is only valid if the rule also specifies one of the following protocols: tcp, udp, dccp or sctp.
         */
        to_ports?: string;
        /**
         * Source port or port range specification. This can either be a service name or a port number. An inclusive range can also be specified, using the format first:last. If the first port is omitted, '0' is assumed; if the last is omitted, '65535' is assumed. If the first port is greater than the second one they will be swapped.
         */
        source_port?: string;
        /**
         * Default: filter
         *
         * This option specifies the packet matching table which the command should operate on. If the kernel is configured with automatic module loading, an attempt will be made to load the appropriate module for that table if it is not already there.
         */
        table?: "filter" | "nat" | "mangle" | "raw" | "security";
        /**
         * Destination port or port range specification. This can either be a service name or a port number. An inclusive range can also be specified, using the format first:last. If the first port is omitted, '0' is assumed; if the last is omitted, '65535' is assumed. If the first port is greater than the second one they will be swapped.
         */
        destination_port?: string;
        /**
         * Default: ipv4
         *
         * Which version of the IP protocol this rule should apply to.
         */
        ip_version?: "ipv4" | "ipv6";
        /**
         * Specifies a match to use, that is, an extension module that tests for a specific property. The set of matches make up the condition under which a target is invoked. Matches are evaluated first to last if specified as an array and work in short-circuit fashion, i.e. if one extension yields false, evaluation will stop.
         */
        match?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        [k: string]: any;
      };
      /**
       * Manipulate Rackspace Cloud Autoscale Groups
       */
      rax_scaling_group?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create or delete a Rackspace Cloud Monitoring entity, which represents a device to monitor. Entities associate checks and alarms with a target system and provide a convenient, centralized place to store IP addresses. Rackspace monitoring module flow | *rax_mon_entity* -> rax_mon_check -> rax_mon_notification -> rax_mon_notification_plan -> rax_mon_alarm
       */
      rax_mon_entity?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Gather facts about ec2 ENI interfaces in AWS
       */
      ec2_eni_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add or remove a database on a Webfaction host. Further documentation at http://github.com/quentinsf/ansible-webfaction.
       */
      webfaction_db?: {
        /**
         * The name of the database
         */
        name: string;
        /**
         * The machine name to use (optional for accounts with only one machine)
         */
        machine?: string;
        /**
         * Default: present
         *
         * Whether the database should exist
         */
        state?: "present" | "absent";
        /**
         * The webfaction password to use
         */
        login_password: string;
        /**
         * Default: None
         *
         * The password for the new database user.
         */
        password?: string;
        /**
         * The type of database to create.
         */
        type: string;
        /**
         * The webfaction account to use
         */
        login_name: string;
        [k: string]: any;
      };
      /**
       * Sends a text message to a phone number through the Twilio messaging API.
       */
      twilio?: {
        /**
         * user's Twilio authentication token
         */
        auth_token: string;
        /**
         * one or more phone numbers to send the text message to, format +15551112222
         */
        to_number: string;
        /**
         * user's Twilio account token found on the account page
         */
        account_sid: string;
        /**
         * the Twilio number to send the text message from, format +15551112222
         */
        from_number: string;
        /**
         * the body of the text message
         */
        msg: string;
        /**
         * a URL with a picture, video or sound clip to send with an MMS (multimedia message) instead of a plain SMS
         */
        media_url?: string;
        [k: string]: any;
      };
      /**
       * Manage installation and uninstallation of Ruby gems.
       */
      gem?: {
        [k: string]: any;
      };
      /**
       * makes an OS computer speak!  Amuse your friends, annoy your coworkers!
       */
      osx_say?: {
        /**
         * What to say
         */
        msg: string;
        /**
         * What voice to use
         */
        voice?: string;
        [k: string]: any;
      };
      /**
       * Create or Delete routers from OpenStack
       */
      quantum_router?: {
        /**
         * Default: None
         *
         * Name of the region
         */
        region_name?: string;
        /**
         * Default: True
         *
         * desired admin state of the created router .
         */
        admin_state_up?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * Name of the tenant for which the router has to be created, if none router would be created for the login tenant.
         */
        tenant_name?: string;
        availability_zone?: string;
        /**
         * Default: yes
         *
         * The tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone url for authentication
         */
        auth_url?: string;
        /**
         * Default: yes
         *
         * Password of login user
         */
        login_password: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Default: None
         *
         * Name to be give to the router
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module will let you create PagerDuty maintenance windows
       */
      pagerduty?: {
        [k: string]: any;
      };
      /**
       * Manage binary packages for FreeBSD using 'pkgng' which is available in versions after 9.0.
       */
      pkgng?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Apply patch files using the GNU patch tool.
       */
      patch?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Retrieve facts about one or more networks from OpenStack.
       */
      os_networks_facts?: {
        /**
         * Name or ID of the Network
         */
        name?: string;
        /**
         * A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.
         */
        filters?: string;
        [k: string]: any;
      };
      /**
       * Send a SMS message via nexmo
       */
      nexmo?: {
        [k: string]: any;
      };
      /**
       * Discover targets on given portal, (dis)connect targets, mark targets to manually or auto start, return device nodes of connected targets.
       */
      open_iscsi?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage slb service-group objects on A10 Networks devices via aXAPI
       */
      a10_service_group?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Create or terminates AWS virtual private clouds.  This module has a dependency on python-boto.
       */
      ec2_vpc?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * An Ansible module to Create, Delete shared loadbalancers in CenturyLink Cloud.
       */
      clc_loadbalancer?: {
        /**
         * Default: enabled
         *
         * The status of the loadbalancer
         */
        status?: "enabled" | "disabled";
        /**
         * Default: None
         *
         * A description for the loadbalancer
         */
        description?: string;
        /**
         * Default: None
         *
         * -The balancing method for the load balancer pool
         */
        method?: "leastConnection" | "roundRobin";
        /**
         * The alias of your CLC Account
         */
        alias: string;
        /**
         * Default: present
         *
         * Whether to create or delete the load balancer pool
         */
        state?: "present" | "absent" | "port_absent" | "nodes_present" | "nodes_absent";
        /**
         * The location of the datacenter where the load balancer resides in
         */
        location: string;
        /**
         * A list of nodes that needs to be added to the load balancer pool
         */
        nodes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * Port to configure on the public-facing side of the load balancer pool
         */
        port?: 80 | 443;
        /**
         * Default: None
         *
         * The persistence method for the load balancer
         */
        persistence?: "standard" | "sticky";
        /**
         * The name of the loadbalancer
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module fails the progress with a custom message. It can be useful for bailing out when a certain condition is met using C(when).
       */
      fail?: {
        host?: string;
        connect_timeout?: string;
        delay?: string;
        state?: "started" | "stopped" | "present" | "absent" | "drained";
        timeout?: string;
        exclude_hosts?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        search_regex?: string;
        path?: string;
        port?: string;
        [k: string]: any;
      };
      /**
       * Set up, reconfigure, or remove SSL termination for an existing load balancer.
       */
      rax_clb_ssl?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module will let you pause/unpause Pingdom alerts
       */
      pingdom?: {
        /**
         * Pingdom user password.
         */
        passwd: string;
        /**
         * Pingdom ID of the check.
         */
        checkid: string;
        /**
         * Define whether or not the check should be running or paused.
         */
        state: "running" | "paused" | "started" | "stopped";
        /**
         * Pingdom user ID.
         */
        uid: string;
        /**
         * Pingdom API key.
         */
        key: string;
        [k: string]: any;
      };
      /**
       * Manages domains and records via the DNSimple API, see the docs: U(http://developer.dnsimple.com/)
       */
      dnsimple?: {
        /**
         * Whether the record should be the only one for that record type and record name. Only use with state=present on a record
         */
        solo?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Domain to work with. Can be the domain name (e.g. "mydomain.com") or the numeric ID of the domain in DNSimple. If omitted, a list of domains will be returned.
         * If domain is present but the domain doesn't exist, it will be created.
         */
        domain?: string;
        /**
         * Account email. If omitted, the env variables DNSIMPLE_EMAIL and DNSIMPLE_API_TOKEN will be looked for. If those aren't found, a C(.dnsimple) file will be looked for, see: U(https://github.com/mikemaccana/dnsimple-python#getting-started)
         */
        account_email?: string;
        /**
         * List of records to ensure they either exist or don't exist
         */
        record_ids?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Record value
         * Must be specified when trying to ensure a record exists
         */
        value?: string;
        /**
         * Record priority
         */
        priority?: number | string;
        /**
         * Record to add, if blank a record for the domain will be created, supports the wildcard (*)
         */
        record?: string;
        /**
         * whether the record should exist or not
         */
        state?: "present" | "absent";
        /**
         * Default: 3600 (one hour)
         *
         * The TTL to give the new record
         */
        ttl?: number | string;
        /**
         * The type of DNS record to create
         */
        type?:
          | "A"
          | "ALIAS"
          | "CNAME"
          | "MX"
          | "SPF"
          | "URL"
          | "TXT"
          | "NS"
          | "SRV"
          | "NAPTR"
          | "PTR"
          | "AAAA"
          | "SSHFP"
          | "HINFO"
          | "POOL";
        /**
         * Account API token. See I(account_email) for info.
         */
        account_api_token?: string;
        [k: string]: any;
      };
      /**
       * Manages local Windows user accounts
       */
      win_user?: {
        /**
         * Default: always
         *
         * C(always) will update passwords if they differ.  C(on_create) will only set the password for newly created users.
         */
        update_password?: string;
        /**
         * C(yes) will set the password to never expire.  C(no) will allow the password to expire.
         */
        password_never_expires?: string;
        /**
         * Name of the user to create, remove or modify.
         */
        name?: string;
        /**
         * Default: replace
         *
         * If C(replace), the user is added as a member of each group in I(groups) and removed from any other groups.  If C(add), the user is added to each group in I(groups) where not already a member.  If C(remove), the user is removed from each group in I(groups).
         */
        groups_action?: string;
        /**
         * C(yes) will require the user to change their password at next login. C(no) will clear the expired password flag.
         */
        password_expired?: string;
        /**
         * Default: present
         *
         * When C(present), creates or updates the user account.  When C(absent), removes the user account if it exists.  When C(query) (new in 1.9), retrieves the user account details without making any changes.
         */
        state?: string;
        /**
         * Adds or removes the user from this comma-separated lis of groups, depending on the value of I(groups_action). When I(groups_action) is C(replace) and I(groups) is set to the empty string ('groups='), the user is removed from all groups.
         */
        groups?: string;
        /**
         * C(yes) will disable the user account.  C(no) will clear the disabled flag.
         */
        account_disabled?: string;
        /**
         * Full name of the user
         */
        fullname?: string;
        /**
         * Optionally set the user's password to this (plain text) value.
         */
        password?: string;
        /**
         * C(no) will unlock the user account if locked.
         */
        account_locked?: string;
        /**
         * C(yes) will prevent the user from changing their password.  C(no) will allow the user to change their password.
         */
        user_cannot_change_password?: string;
        /**
         * Description of the user
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * Send a message to an IRC channel. This is a very simplistic implementation.
       */
      irc?: {
        [k: string]: any;
      };
      /**
       * Create a VMware VMkernel Interface
       */
      vmware_vmkernel?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * creates an EBS volume and optionally attaches it to an instance.  If both an instance ID and a device name is given and the instance has a device at the device name, then no volume is created and no attachment is made.  This module has a dependency on python-boto.
       */
      ec2_vol?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * An Ansible module to modify servers in CenturyLink Cloud.
       */
      clc_modify_server?: {
        /**
         * Default: None
         *
         * The alert policy name to be associated to the server. This is mutually exclusive with 'alert_policy_id'
         */
        alert_policy_name?: string;
        /**
         * Default: None
         *
         * The anti affinity policy name to be set for a hyper scale server. This is mutually exclusive with 'anti_affinity_policy_id'
         */
        anti_affinity_policy_name?: string;
        /**
         * Default: present
         *
         * The state to insure that the provided resources are in.
         */
        state?: "present" | "absent";
        /**
         * Default: None
         *
         * The anti affinity policy id to be set for a hyper scale server. This is mutually exclusive with 'anti_affinity_policy_name'
         */
        anti_affinity_policy_id?: string;
        /**
         * Default: None
         *
         * The alert policy id to be associated to the server. This is mutually exclusive with 'alert_policy_name'
         */
        alert_policy_id?: string;
        /**
         * Default: None
         *
         * Memory (in GB) to set to the server.
         */
        memory?: string;
        /**
         * A list of server Ids to modify.
         */
        server_ids:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * How many CPUs to update on the server
         */
        cpu?: string;
        /**
         * Default: True
         *
         * Whether to wait for the provisioning tasks to finish before returning.
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module uses rabbitMQ Rest API to create/delete queues
       */
      rabbitmq_queue?: {
        /**
         * Default: 15672
         *
         * rabbitMQ management api port
         */
        login_port?: string;
        /**
         * Default: None
         *
         * Optional name of an exchange to which messages will be republished if they
         * are rejected or expire
         */
        dead_letter_exchange?: string;
        /**
         * Name of the queue to create
         */
        name: string;
        /**
         * Default: guest
         *
         * rabbitMQ user for connection
         */
        login_user?: string;
        /**
         * Default: localhost
         *
         * rabbitMQ host for connection
         */
        login_host?: string;
        /**
         * rabbitMQ password for connection
         */
        login_password?: string;
        /**
         * Default: /
         *
         * rabbitMQ virtual host
         */
        vhost?: string;
        /**
         * Default: present
         *
         * Whether the queue should be present or absent
         * Only present implemented atm
         */
        state?: "present" | "absent";
        /**
         * Default: no limit
         *
         * How many messages can the queue contain before it starts rejecting
         */
        max_length?: number | string;
        /**
         * extra arguments for queue. If defined this argument is a key/value dictionary
         */
        arguments?: {
          [k: string]: any;
        };
        /**
         * if the queue should delete itself after all queues/queues unbound from it
         */
        auto_delete?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: forever
         *
         * How long a message can live in queue before it is discarded (milliseconds)
         */
        message_ttl?: number | string;
        /**
         * Default: forever
         *
         * How long a queue can be unused before it is automatically deleted (milliseconds)
         */
        auto_expires?: number | string;
        /**
         * Default: None
         *
         * Optional replacement routing key to use when a message is dead-lettered.
         * Original routing key will be used if unset
         */
        dead_letter_routing_key?: string;
        /**
         * Default: True
         *
         * whether queue is durable or not
         */
        durable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Add or remove PostgreSQL extensions from a database.
       */
      postgresql_ext?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manages Homebrew packages
       */
      homebrew?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add or remove kernel modules.
       */
      modprobe?: {
        /**
         * Default: present
         *
         * Whether the module should be present or absent.
         */
        state?: "present" | "absent";
        /**
         * Modules parameters.
         */
        params?: string;
        /**
         * Name of kernel module to manage.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Add or remove PostgreSQL users (roles) from a remote host and, optionally, grant the users access to an existing database or tables.
       * The fundamental function of the module is to create, or delete, roles from a PostgreSQL cluster. Privilege assignment, or removal, is an optional step, which works on one database at a time. This allows for the module to be called several times in the same module to modify the permissions on different databases, or to grant permissions to already existing users.
       * A user cannot be removed until all the privileges have been stripped from the user. In such situation, if the module tries to remove the user it will fail. To avoid this from happening the fail_on_user option signals the module to try to remove the user, but if not possible keep going; the module will report if changes happened and separately if the user was removed or not.
       */
      postgresql_user?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Gather facts for Rackspace Cloud Servers.
       */
      rax_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create and remove affinity groups.
       */
      cs_affinitygroup?: {
        /**
         * Account the affinity group is related to.
         */
        account?: string;
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        /**
         * Description of the affinity group.
         */
        description?: string;
        api_timeout?: number | string;
        /**
         * Type of the affinity group. If not specified, first found affinity type is used.
         */
        affinty_type?: string;
        api_region?: string;
        /**
         * Name of the project the affinity group is related to.
         */
        project?: string;
        /**
         * Default: present
         *
         * State of the affinity group.
         */
        state?: "present" | "absent";
        /**
         * Domain the affinity group is related to.
         */
        domain?: string;
        api_key?: string;
        /**
         * Name of the affinity group.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Manages F5 BIG-IP LTM pools via iControl SOAP API
       */
      bigip_pool?: {
        /**
         * Monitor template name list. Always use the full path to the monitor.
         */
        monitors?: string;
        /**
         * Default: round_robin
         *
         * Load balancing method
         */
        lb_method?: string;
        /**
         * Monitor quorum value when monitor_type is m_of_n
         */
        quorum?: string;
        /**
         * Default: Common
         *
         * Partition of pool/pool member
         */
        partition?: string;
        /**
         * Sets the ramp-up time (in seconds) to gradually ramp up the load on newly added or freshly detected up pool members
         */
        slow_ramp_time?: string;
        /**
         * Pool member IP
         */
        host?: string;
        /**
         * Sets the action to take when node goes down in pool
         */
        service_down_action?: string;
        /**
         * BIG-IP host
         */
        server?: string;
        /**
         * Monitor rule type when monitors > 1
         */
        monitor_type?: string;
        /**
         * Default: present
         *
         * Pool/pool member state
         */
        state?: string;
        /**
         * BIG-IP username
         */
        user?: string;
        /**
         * BIG-IP password
         */
        password?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites.  Prior to 2.0, this module would always validate on python >= 2.7.9 and never validate on python <= 2.7.8
         */
        validate_certs?: string;
        /**
         * Pool member port
         */
        port?: string;
        /**
         * Pool name
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Create, destroy, update, start, stop, and reboot a ProfitBricks virtual machine. When the virtual machine is created it can optionally wait for it to be 'running' before returning. This module has a dependency on profitbricks >= 1.0.0
       */
      profitbricks?: {
        /**
         * Default: 1
         *
         * The number of virtual machines to create.
         */
        count?: string;
        /**
         * The Datacenter to provision this virtual machine.
         */
        datacenter?: string;
        /**
         * Default: 1
         *
         * The ID of the LAN you wish to add the servers to.
         */
        lan?: string;
        /**
         * The name of the virtual machine.
         */
        name?: string;
        /**
         * The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environement variable.
         */
        subscription_user?: string;
        /**
         * Default: True
         *
         * Whether or not to increment a single number in the name for created virtual machines.
         */
        auto_increment?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The system image ID for creating the virtual machine, e.g. a3eae284-a2fe-11e4-b187-5f1f641608c8.
         */
        image?: string;
        /**
         * Default: 2048
         *
         * The amount of memory to allocate to the virtual machine.
         */
        ram?: string;
        /**
         * Default: yes
         *
         * remove the bootVolume of the virtual machine you're destroying.
         */
        remove_boot_volume?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * list of instance ids, currently only used when state='absent' to remove instances.
         */
        instance_ids?: string;
        /**
         * THe ProfitBricks password. Overrides the PB_PASSWORD environement variable.
         */
        subscription_password?: string;
        /**
         * Default: 10
         *
         * The size in GB of the boot volume.
         */
        volume_size?: string;
        /**
         * Default: present
         *
         * create or terminate instances
         */
        state?: string;
        /**
         * Default: 600
         *
         * how long before wait gives up, in seconds
         */
        wait_timeout?: number | string;
        /**
         * Default: us/las
         *
         * The datacenter location. Use only if you want to create the Datacenter or else this value is ignored.
         */
        location?: "us/las" | "us/lasdev" | "de/fra" | "de/fkb";
        /**
         * This will assign the machine to the public LAN. If no LAN exists with public Internet access it is created.
         */
        assign_public_ip?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 2
         *
         * The number of CPU cores to allocate to the virtual machine.
         */
        cores?: string;
        /**
         * Default: VIRTIO
         *
         * The bus type for the volume.
         */
        bus?: string;
        /**
         * Default: yes
         *
         * wait for the instance to be in state 'running' before returning
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage domains on Rackspace Cloud DNS
       */
      rax_dns?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage binary packages for Slackware using 'slackpkg' which is available in versions after 12.2.
       */
      slackpkg?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Manage the state of a virtual host in RabbitMQ
       */
      rabbitmq_vhost?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Deploy to nodes controlled by Ironic.
       */
      os_ironic_node?: {
        /**
         * Default: None
         *
         * globally unique identifier (UUID) to be given to the resource.
         */
        uuid?: string;
        /**
         * Default: present
         *
         * A setting to allow power state to be asserted allowing nodes that are not yet deployed to be powered on, and nodes that are deployed to be powered off.
         */
        power?: string;
        /**
         * Default: True
         *
         * Indicates if the resource should be deployed. Allows for deployment logic to be disengaged and control of the node power or maintenance state to be changed.
         */
        deploy?: string;
        /**
         * Default: None
         *
         * If noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API.  Use with "auth" and "auth_type" settings set to None.
         */
        ironic_url?: string;
        /**
         * Default: None
         *
         * A string expression regarding the reason a node is in a maintenance mode.
         */
        maintenance_reason?: string;
        /**
         * Default: present
         *
         * Indicates desired state of the resource
         */
        state?: string;
        /**
         * A setting to allow the direct control if a node is in maintenance mode.
         */
        maintenance?: string;
        /**
         * Definition of the instance information which is used to deploy the node.  This information is only required when an instance is set to present.
         */
        instance_info?: string;
        /**
         * Default: None
         *
         * A configdrive file or HTTP(S) URL that will be passed along to the node.
         */
        config_drive?: string;
        [k: string]: any;
      };
      /**
       * Gather facts about ec2 VPCs in AWS
       */
      ec2_vpc_net_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage I(libvirt) networks.
       */
      virt_net?: {
        [k: string]: any;
      };
      /**
       * Create/delete a droplet in DigitalOcean and optionally wait for it to be 'running', or deploy an SSH key.
       */
      digital_ocean?: {
        /**
         * Default: no
         *
         * Bool, require unique hostnames.  By default, DigitalOcean allows multiple hosts with the same name.  Setting this to "yes" allows only one host per name.  Useful for idempotence.
         */
        unique_name?: string;
        /**
         * Default: yes
         *
         * Bool, turn on virtio driver in droplet for improved network and storage I/O.
         */
        virtio?: string;
        /**
         * This is the slug of the region you would like your server to be created in.
         */
        region_id?: string;
        /**
         * This is the slug of the size you would like the droplet created with.
         */
        size_id?: string;
        /**
         * Default: no
         *
         * Optional, Boolean, enables backups for your droplet.
         */
        backups_enabled?: string;
        /**
         * Default: None
         *
         * opaque blob of data which is made available to the droplet
         */
        user_data?: string;
        /**
         * String, this is the name of the droplet - must be formatted by hostname rules, or the name of a SSH key.
         */
        name?: string;
        /**
         * This is the slug of the image you would like the droplet created with.
         */
        image_id?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the target.
         */
        state?: string;
        /**
         * Default: 300
         *
         * How long before wait gives up, in seconds.
         */
        wait_timeout?: string;
        /**
         * Default: droplet
         *
         * Which target you want to operate on.
         */
        command?: string;
        /**
         * Optional, array of of SSH key (numeric) ID that you would like to be added to the server.
         */
        ssh_key_ids?: string;
        /**
         * DigitalOcean api token.
         */
        api_token?: string;
        /**
         * Numeric, the droplet id you want to operate on.
         */
        id?: string;
        /**
         * Default: no
         *
         * Bool, add an additional, private network interface to droplet for inter-droplet communication.
         */
        private_networking?: string;
        /**
         * The public SSH key you want to add to your account.
         */
        ssh_pub_key?: string;
        /**
         * Default: yes
         *
         * Wait for the droplet to be in state 'running' before returning.  If wait is "no" an ip_address may not be returned.
         */
        wait?: string;
        [k: string]: any;
      };
      /**
       * Add and remove security group rules.
       */
      cs_securitygroup_rule?: {
        [k: string]: any;
      };
      /**
       * Add or remove users to RabbitMQ and assign permissions
       */
      rabbitmq_user?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manages CSW packages (SVR4 format) on Solaris 10 and 11.
       * These were the native packages on Solaris <= 10 and are available as a legacy feature in Solaris 11.
       * Pkgutil is an advanced packaging system, which resolves dependency on installation. It is designed for CSW packages.
       */
      pkgutil?: {
        /**
         * Whether to install (C(present)), or remove (C(absent)) a package.
         * The upgrade (C(latest)) operation will update/install the package to the latest version available.
         * Note: The module has a limitation that (C(latest)) only works for one package, not lists of them.
         */
        state: "present" | "absent" | "latest";
        /**
         * Specifies the repository path to install the package from.
         * Its global definition is done in C(/etc/opt/csw/pkgutil.conf).
         */
        site?: string;
        /**
         * Package name, e.g. (C(CSWnrpe))
         */
        name: string;
        [k: string]: any;
      };
      /**
       * The M(win_copy) module copies a file on the local box to remote windows locations.
       */
      win_copy?: {
        /**
         * Remote absolute path where the file should be copied to. If src is a directory, this must be a directory too. Use \ for path separators.
         */
        dest?: string;
        /**
         * Local path to a file to copy to the remote server; can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends with "/", only inside contents of that directory are copied to destination. Otherwise, if it does not end with "/", the directory itself with all contents is copied. This behavior is similar to Rsync.
         */
        src?: string;
        [k: string]: any;
      };
      /**
       * This module manages boundary meters
       */
      boundary_meter?: {
        /**
         * Organizations boundary API ID
         */
        apiid: string;
        /**
         * Organizations boundary API KEY
         */
        apikey: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * meter name
         */
        name?: string;
        /**
         * Default: True
         *
         * Whether to create or remove the client from boundary
         */
        state: "present" | "absent";
        [k: string]: any;
      };
      /**
       * Add or remove an I(apt) key, optionally downloading it
       */
      apt_key?: {
        key?: string;
        /**
         * Default: none
         *
         * keyserver to retrieve key from.
         */
        keyserver?: string;
        /**
         * Default: none
         *
         * url to retrieve key from.
         */
        url?: string;
        /**
         * Default: none
         *
         * keyfile contents
         */
        data?: string;
        /**
         * Default: none
         *
         * path to specific keyring file in /etc/apt/trusted.gpg.d
         */
        keyring?: string;
        /**
         * Default: present
         *
         * used to specify if key is being added or revoked
         */
        state?: "absent" | "present";
        /**
         * Default: none
         *
         * keyfile path
         */
        file?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: none
         *
         * identifier of key. Including this allows check mode to correctly report the changed state.
         */
        id?: string;
        [k: string]: any;
      };
      /**
       * Manage packages on SUSE and openSUSE using the zypper and rpm tools.
       */
      zypper?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * This module asserts that a given expression is true and can be a simpler alternative to the 'fail' module in some cases.
       */
      assert?: {
        host?: string;
        connect_timeout?: string;
        delay?: string;
        state?: "started" | "stopped" | "present" | "absent" | "drained";
        timeout?: string;
        exclude_hosts?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        search_regex?: string;
        path?: string;
        port?: string;
        [k: string]: any;
      };
      /**
       * This module controls active and configured mount points in C(/etc/fstab).
       */
      mount?: {
        /**
         * device to be mounted on I(name).
         */
        src: string;
        /**
         * path to the mount point, eg: C(/mnt/files)
         */
        name: string;
        /**
         * dump (see fstab(8)), Note that if nulled, C(state=present) will cease to work and duplicate entries will be made with subsequent runs.
         */
        dump?: string;
        /**
         * Default: /etc/fstab
         *
         * file to use instead of C(/etc/fstab). You shouldn't use that option unless you really know what you are doing. This might be useful if you need to configure mountpoints in a chroot environment.
         */
        fstab?: string;
        /**
         * passno (see fstab(8)), Note that if nulled, C(state=present) will cease to work and duplicate entries will be made with subsequent runs.
         */
        passno?: string;
        /**
         * file-system type
         */
        fstype: string;
        /**
         * If C(mounted) or C(unmounted), the device will be actively mounted or unmounted as needed and appropriately configured in I(fstab). C(absent) and C(present) only deal with I(fstab) but will not affect current mounting. If specifying C(mounted) and the mount point is not present, the mount point will be created. Similarly, specifying C(absent)        will remove the mount point directory.
         */
        state: "present" | "absent" | "mounted" | "unmounted";
        /**
         * mount options (see fstab(8))
         */
        opts?: string;
        [k: string]: any;
      };
      /**
       * Adds or removes SSH authorized keys for particular user accounts
       */
      authorized_key?: {
        /**
         * Default: no
         *
         * Whether to remove all other non-specified keys from the authorized_keys file. Multiple keys can be specified in a single C(key) string value by separating them by newlines.
         * This option is not loop aware, so if you use C(with_) , it will be exclusive per iteration of the loop, if you want multiple keys in the file you need to pass them all to C(key) in a single batch as mentioned above.
         */
        exclusive?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A string of ssh key options to be prepended to the key in the authorized_keys file
         */
        key_options?: string;
        /**
         * Default: present
         *
         * Whether the given key (with the given key_options) should or should not be in the file
         */
        state?: "present" | "absent";
        /**
         * The username on the remote host whose authorized_keys file will be modified
         */
        user: string;
        /**
         * The SSH public key(s), as a string or (since 1.9) url (https://github.com/username.keys)
         */
        key: string;
        /**
         * Default: (homedir)+/.ssh/authorized_keys
         *
         * Alternate path to the authorized_keys file
         */
        path?: string;
        unique?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: yes
         *
         * Whether this module should manage the directory of the authorized key file.  If set, the module will create the directory, as well as set the owner and permissions of an existing directory. Be sure to set C(manage_dir=no) if you are using an alternate directory for authorized_keys, as set with C(path), since you could lock yourself out of SSH access. See the example below.
         */
        manage_dir?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage VMware ESXi DNS Configuration
       */
      vmware_dns_config?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Send a message to a flowdock team inbox or chat using the push API (see https://www.flowdock.com/api/team-inbox and https://www.flowdock.com/api/chat)
       */
      flowdock?: {
        /**
         * (inbox only) Name of the message sender
         */
        from_name?: string;
        /**
         * (inbox only - required) Email address of the message sender
         */
        from_address?: string;
        /**
         * tags of the message, separated by commas
         */
        tags?: string;
        /**
         * Whether to post to 'inbox' or 'chat'
         */
        type: "inbox" | "chat";
        /**
         * (chat only - required) Name of the "user" sending the message
         */
        external_user_name?: string;
        /**
         * (inbox only) Human readable identifier for more detailed message categorization
         */
        project?: string;
        /**
         * (inbox only - required) Human readable identifier of the application that uses the Flowdock API
         */
        source?: string;
        /**
         * API token.
         */
        token: string;
        /**
         * (inbox only) Link associated with the message. This will be used to link the message subject in Team Inbox.
         */
        link?: string;
        /**
         * (inbox only) Email address for replies
         */
        reply_to?: string;
        /**
         * (inbox only - required) Subject line of the message
         */
        subject?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Content of the message
         */
        msg: string;
        [k: string]: any;
      };
      /**
       * Manages locales by editing /etc/locale.gen and invoking locale-gen.
       */
      locale_gen?: {
        /**
         * Default: present
         *
         * Whether the locale shall be present.
         */
        state?: "present" | "absent";
        /**
         * Name and encoding of the locale, such as "en_GB.UTF-8".
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Create, update and remove domains.
       */
      cs_domain?: {
        api_key?: string;
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        api_region?: string;
        /**
         * Clean up all domain resources like child domains and accounts.
         * Considered on C(state=absent).
         */
        clean_up?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * State of the domain.
         */
        state?: "present" | "absent";
        /**
         * Path of the domain.
         * Prefix C(ROOT/) or C(/ROOT/) in path is optional.
         */
        path: string;
        /**
         * Network domain for networks in the domain.
         */
        network_domain?: string;
        [k: string]: any;
      };
      /**
       * Installs or uninstalls a Windows MSI file that is already located on the target server
       */
      win_msi?: {
        /**
         * Additional arguments to pass to the msiexec.exe command
         */
        extra_args?: string;
        /**
         * File system path to the MSI file to install
         */
        path?: string;
        /**
         * Default: present
         *
         * Whether the MSI file should be installed or uninstalled
         */
        state?: string;
        /**
         * Path to a file created by installing the MSI to prevent from attempting to reinstall the package on every run
         */
        creates?: string;
        [k: string]: any;
      };
      /**
       * create / delete a database in the Cloud Databases.
       */
      rax_cdb_database?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Use this module to manage crontab variables. This module allows you to create, update, or delete cron variable definitions.
       */
      cronvar?: {
        /**
         * Name of the crontab variable.
         */
        name: string;
        /**
         * Used with C(state=present). If specified, the variable will be inserted just before the variable specified.
         */
        insertbefore?: string;
        /**
         * If specified, uses this file in cron.d instead of an individual user's crontab.
         */
        cron_file?: string;
        /**
         * The value to set this variable to.  Required if state=present.
         */
        value?: string;
        /**
         * Default: present
         *
         * Whether to ensure that the variable is present or absent.
         */
        state?: "present" | "absent";
        /**
         * Default: root
         *
         * The specific user whose crontab should be modified.
         */
        user?: string;
        /**
         * Used with C(state=present). If specified, the variable will be inserted after the variable specified.
         */
        insertafter?: string;
        /**
         * If set, create a backup of the crontab before it is modified. The location of the backup is returned in the C(backup) variable by this module.
         */
        backup?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manages virtual machines supported by I(libvirt).
       */
      virt?: {
        [k: string]: any;
      };
      /**
       * This module will let you trigger, acknowledge or resolve a PagerDuty incident by sending events
       */
      pagerduty_alert?: {
        /**
         * The URL of the monitoring client that is triggering this event.
         */
        client_url?: string;
        /**
         * PagerDuty unique subdomain.
         */
        name: string;
        /**
         * Type of event to be sent.
         */
        state: "triggered" | "acknowledged" | "resolved";
        /**
         * Identifies the incident to which this I(state) should be applied.
         * For C(triggered) I(state) - If there's no open (i.e. unresolved) incident with this key, a new one will be created. If there's already an open incident with a matching key, this event will be appended to that incident's log. The event key provides an easy way to "de-dup" problem reports.
         * For C(acknowledged) or C(resolved) I(state) - This should be the incident_key you received back when the incident was first opened by a trigger event. Acknowledge events referencing resolved or nonexistent incidents will be discarded.
         */
        incident_key?: string;
        /**
         * The name of the monitoring client that is triggering this event.
         */
        client?: string;
        /**
         * The GUID of one of your "Generic API" services.
         * This is the "service key" listed on a Generic API's service detail page.
         */
        service_key: string;
        /**
         * The pagerduty API key (readonly access), generated on the pagerduty site.
         */
        api_key: string;
        /**
         * Default: Created via Ansible
         *
         * For C(triggered) I(state) - Required. Short description of the problem that led to this trigger. This field (or a truncated version) will be used when generating phone calls, SMS messages and alert emails. It will also appear on the incidents tables in the PagerDuty UI. The maximum length is 1024 characters.
         * For C(acknowledged) or C(resolved) I(state) - Text that will appear in the incident's log associated with this event.
         */
        desc?: string;
        [k: string]: any;
      };
      /**
       * Register a template from URL, create a template from a ROOT volume of a stopped VM or its snapshot, extract and delete templates.
       */
      cs_template?: {
        domain?: string;
        api_http_method?: "get" | "post";
        /**
         * VM name the template will be created from its volume or alternatively from a snapshot.
         * VM must be in stopped state if created from its volume.
         * Mutually exclusive with C(url).
         */
        vm?: string;
        /**
         * True if the template or its derivatives are extractable.
         */
        is_extractable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: none
         *
         * Name the hypervisor to be used for creating the new template.
         * Relevant when using C(state=present).
         */
        hypervisor?: "KVM" | "VMware" | "BareMetal" | "XenServer" | "LXC" | "HyperV" | "UCS" | "OVM" | "Simulator";
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_url?: string;
        /**
         * Name of the zone you wish the template to be registered or deleted from.
         * If not specified, first found zone will be used.
         */
        zone?: string;
        /**
         * True if the template supports the sshkey upload feature.
         */
        sshkey_enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Register the template having XS/VMWare tools installed in order to support dynamic scaling of VM CPU/memory.
         * Only used if C(state) is present.
         */
        is_dynamically_scalable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * State of the template.
         */
        state?: "present" | "absent" | "extracted";
        /**
         * This flag is used for searching existing templates.
         * If set to C(true), it will only list template ready for deployment e.g. successfully downloaded and installed.
         * Recommended to set it to C(false).
         */
        is_ready?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Template details in key/value pairs.
         */
        details?: string;
        /**
         * True if the template type is routing i.e., if template is used to deploy router.
         * Only considered if C(url) is used.
         */
        is_routing?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Register the template to be featured.
         * Only used if C(state) is present.
         */
        is_featured?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_key?: string;
        /**
         * Default: 64
         *
         * 32 or 64 bits support.
         */
        bits?: number | string;
        /**
         * The format for the template.
         * Relevant when using C(state=present).
         */
        format?: "QCOW2" | "RAW" | "VHD" | "OVA";
        api_secret?: string;
        api_timeout?: number | string;
        /**
         * Register the template to be publicly available to all users.
         * Only used if C(state) is present.
         */
        is_public?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * true if this template requires HVM.
         */
        requires_hvm?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * True if the template supports the password reset feature.
         */
        password_enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Display text of the template.
         */
        display_text?: string;
        account?: string;
        /**
         * the tag for this template.
         */
        template_tag?: string;
        /**
         * Name of the template.
         */
        name: string;
        /**
         * URL of where the template is hosted on C(state=present).
         * URL to which the template would be extracted on C(state=extracted).
         * Mutually exclusive with C(vm).
         */
        url?: string;
        /**
         * Default: self
         *
         * Name of the filter used to search for the template.
         */
        template_filter?: "featured" | "self" | "selfexecutable" | "sharedexecutable" | "executable" | "community";
        api_region?: string;
        /**
         * Whether the template should be syned across zones.
         * Only used if C(state) is present.
         */
        cross_zones?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the project the template to be registered in.
         */
        project?: string;
        /**
         * Name of the snapshot, created from the VM ROOT volume, the template will be created from.
         * C(vm) is required together with this argument.
         */
        snapshot?: string;
        mode?: "http_download" | "ftp_upload";
        /**
         * The MD5 checksum value of this template.
         * If set, we search by checksum instead of name.
         */
        checksum?: string;
        /**
         * OS type that best represents the OS of this template.
         */
        os_type?: string;
        [k: string]: any;
      };
      /**
       * Allows you to attach or detach a volume from a ProfitBricks server. This module has a dependency on profitbricks >= 1.0.0
       */
      profitbricks_volume_attachments?: {
        /**
         * The datacenter in which to operate.
         */
        datacenter?: string;
        /**
         * The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environement variable.
         */
        subscription_user?: string;
        /**
         * The name of the server you wish to detach or attach the volume.
         */
        server?: string;
        /**
         * The volume name or ID.
         */
        volume?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: string;
        /**
         * Default: 600
         *
         * how long before wait gives up, in seconds
         */
        wait_timeout?: number | string;
        /**
         * THe ProfitBricks password. Overrides the PB_PASSWORD environement variable.
         */
        subscription_password?: string;
        /**
         * Default: yes
         *
         * wait for the operation to complete before returning
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Retrieve an auth token from an OpenStack Cloud
       */
      os_auth?: {
        [k: string]: any;
      };
      /**
       * Notify Rollbar about app deployments (see https://rollbar.com/docs/deploys_other/)
       */
      rollbar_deployment?: {
        /**
         * Deploy comment (e.g. what is being deployed).
         */
        comment?: string;
        /**
         * Rollbar username of the user who deployed.
         */
        rollbar_user?: string;
        /**
         * Default: https://api.rollbar.com/api/1/deploy/
         *
         * Optional URL to submit the notification to.
         */
        url?: string;
        /**
         * Name of the environment being deployed, e.g. 'production'.
         */
        environment: string;
        /**
         * Your project access token.
         */
        token: string;
        /**
         * User who deployed.
         */
        user?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Revision number/sha being deployed.
         */
        revision: string;
        [k: string]: any;
      };
      znode?: {
        /**
         * The path of the znode.
         */
        name: string;
        /**
         * Default: None
         *
         * The value assigned to the znode.
         */
        value?: string;
        /**
         * Default: None
         *
         * The state to enforce. Mutually exclusive with op.
         */
        state?: "present" | "absent";
        /**
         * A list of ZooKeeper servers (format '[server]:[port]').
         */
        hosts: string;
        /**
         * Default: 300
         *
         * The amount of time to wait for a node to appear.
         */
        timeout?: number | string;
        /**
         * Default: None
         *
         * An operation to perform. Mutually exclusive with state.
         */
        op?: "get" | "wait" | "list";
        [k: string]: any;
      };
      /**
       * Sends an email with a SendGrid account through their API, not through the SMTP service.
       */
      sendgrid?: {
        body: string;
        /**
         * username for logging into the SendGrid account
         */
        username: string;
        /**
         * the address in the "from" field for the email
         */
        from_address: string;
        /**
         * a list with one or more recipient email addresses
         */
        to_addresses:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * password that corresponds to the username
         */
        password: string;
        /**
         * the desired subject for the email
         */
        subject: string;
        [k: string]: any;
      };
      /**
       * Set system's hostname.
       * Currently implemented on Debian, Ubuntu, Fedora, RedHat, openSUSE, Linaro, ScientificLinux, Arch, CentOS, AMI.
       * Any distribution that uses systemd as their init system.
       * Note, this module does *NOT* modify /etc/hosts. You need to modify it yourself using other modules like template or replace.
       */
      hostname?: {
        /**
         * Name of the host
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Create a VMware portgroup
       */
      vmware_portgroup?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Create, check and remove docker images
       */
      docker_image?: {
        /**
         * Whether to use tls to connect to the docker server.  "no" means not to use tls (and ignore any other tls related parameters). "encrypt" means to use tls to encrypt the connection to the server.  "verify" means to also verify that the server's certificate is valid for the server (this both verifies the certificate against the CA and that the certificate was issued for that host. If this is unspecified, tls will only be used if one of the other tls options require it.
         */
        use_tls?: "no" | "encrypt" | "verify";
        /**
         * Image name to work with
         */
        name: string;
        /**
         * Do not use cache with building
         */
        nocache?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: ${DOCKER_HOST} or unix://var/run/docker.sock
         *
         * URL of docker host to issue commands to
         */
        docker_url?: string;
        /**
         * Default: present
         *
         * Set the state of the image
         */
        state?: "present" | "absent" | "build";
        /**
         * Default: ${DOCKER_CERT_PATH}/ca.pem
         *
         * Path to a PEM-encoded certificate authority to secure the Docker connection. This has no effect if use_tls is encrypt.
         */
        tls_ca_cert?: string;
        /**
         * Default: Taken from docker_url
         *
         * A hostname to check matches what's supplied in the docker server's certificate.  If unspecified, the hostname is taken from the docker_url.
         */
        tls_hostname?: string;
        /**
         * Default: docker-py default remote API version
         *
         * Remote API version to use. This defaults to the current default as specified by docker-py.
         */
        docker_api_version?: string;
        /**
         * Default: ${DOCKER_CERT_PATH}/cert.pem
         *
         * Path to the PEM-encoded certificate used to authenticate docker client. If specified tls_client_key must be valid
         */
        tls_client_cert?: string;
        /**
         * Default: ${DOCKER_CERT_PATH}/key.pem
         *
         * Path to the PEM-encoded key used to authenticate docker client. If specified tls_client_cert must be valid
         */
        tls_client_key?: string;
        /**
         * Default: 600
         *
         * Set image operation timeout
         */
        timeout?: number | string;
        /**
         * Path to directory with Dockerfile
         */
        path?: string;
        /**
         * Default: latest
         *
         * Image tag to work with
         */
        tag?: string;
        /**
         * Default: Dockerfile
         *
         * Dockerfile to use
         */
        dockerfile?: string;
        [k: string]: any;
      };
      /**
       * Create or delete Server Groups at Centurylink Centurylink Cloud
       */
      clc_group?: {
        /**
         * The name of the Server Group
         */
        name: string;
        /**
         * The parent group of the server group. If parent is not provided, it creates the group at top level.
         */
        parent?: string;
        /**
         * A description of the Server Group
         */
        description?: string;
        /**
         * Default: present
         *
         * Whether to create or delete the group
         */
        state?: "present" | "absent";
        /**
         * Datacenter to create the group in. If location is not provided, the group gets created in the default datacenter associated with the account
         */
        location?: string;
        /**
         * Default: True
         *
         * Whether to wait for the tasks to finish before returning.
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage user accounts and user attributes.
       */
      user?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Add or remove a website on a Webfaction host.  Further documentation at http://github.com/quentinsf/ansible-webfaction.
       */
      webfaction_site?: {
        /**
         * A mapping of URLs to apps
         */
        site_apps?: string;
        /**
         * Default: present
         *
         * Whether the website should exist
         */
        state?: "present" | "absent";
        /**
         * A list of subdomains associated with this site.
         */
        subdomains?: string;
        /**
         * The webfaction host on which the site should be created.
         */
        host: string;
        /**
         * Default: false
         *
         * Whether or not to use HTTPS
         */
        https?: 0 | "on" | "f" | "false" | 1 | "no" | "n" | "1" | "0" | "t" | "y" | "off" | "yes" | "true";
        /**
         * The webfaction password to use
         */
        login_password: string;
        /**
         * The webfaction account to use
         */
        login_name: string;
        /**
         * The name of the website
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module can create and delete GCE private images from gzipped compressed tarball containing raw disk data or from existing detached disks in any zone. U(https://cloud.google.com/compute/docs/images)
       */
      gce_img?: {
        /**
         * an optional description
         */
        description?: string;
        /**
         * Default: us-central1-a
         *
         * the zone of the disk specified by source
         */
        zone?: string;
        /**
         * service account email
         */
        service_account_email?: string;
        /**
         * path to the pem file associated with the service account email
         */
        pem_file?: string;
        /**
         * the source disk or the Google Cloud Storage URI to create the image from
         */
        source?: string;
        /**
         * Default: present
         *
         * desired state of the image
         */
        state?: "present" | "absent";
        /**
         * Default: 180
         *
         * timeout for the operation
         */
        timeout?: number | string;
        /**
         * your GCE project ID
         */
        project_id?: string;
        /**
         * the name of the image to create or delete
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Configure a .deb package using debconf-set-selections. Or just query existing selections.
       */
      debconf?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Manages F5 BIG-IP LTM nodes via iControl SOAP API
       */
      bigip_node?: {
        /**
         * Set new session availability status for node
         */
        session_state?: string;
        /**
         * Node name
         */
        name?: string;
        /**
         * Set monitor availability status for node
         */
        monitor_state?: string;
        /**
         * Default: Common
         *
         * Partition
         */
        partition?: string;
        /**
         * Node IP. Required when state=present and node does not exist. Error when state=absent.
         */
        host?: string;
        /**
         * BIG-IP host
         */
        server?: string;
        /**
         * Default: present
         *
         * Pool member state
         */
        state?: string;
        /**
         * BIG-IP username
         */
        user?: string;
        /**
         * BIG-IP password
         */
        password?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites.  Prior to 2.0, this module would always validate on python >= 2.7.9 and never validate on python <= 2.7.8
         */
        validate_certs?: string;
        /**
         * Node description.
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * Downloads an artifact from a maven repository given the maven coordinates provided to the module. Can retrieve
       * snapshots or release versions of the artifact and will resolve the latest available version if one is not
       * available.
       */
      maven_artifact?: {
        /**
         * The username to authenticate as to the Maven Repository
         */
        username?: string;
        /**
         * The Maven groupId coordinate
         */
        group_id?: string;
        /**
         * The maven artifactId coordinate
         */
        artifact_id?: string;
        /**
         * Default: jar
         *
         * The maven type/extension coordinate
         */
        extension?: string;
        /**
         * The path where the artifact should be written to
         */
        dest?: string;
        /**
         * Default: present
         *
         * The desired state of the artifact
         */
        state?: "present" | "absent";
        /**
         * Default: latest
         *
         * The maven version coordinate
         */
        version?: string;
        /**
         * Default: http://repo1.maven.org/maven2
         *
         * The URL of the Maven Repository to download from
         */
        repository_url?: string;
        /**
         * The password to authenticate with to the Maven Repository
         */
        password?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be set to C(no) when no other option exists.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The maven classifier coordinate
         */
        classifier?: string;
        [k: string]: any;
      };
      /**
       * IPS packages are the native packages in Solaris 11 and higher.
       */
      pkg5?: {
        [k: string]: any;
      };
      /**
       * Manipulate Rackspace Cloud Files Containers
       */
      rax_files?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module creates file system.
       */
      filesystem?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manage the life cycle of docker containers.
       */
      docker?: {
        /**
         * Publish all exposed ports to the host interfaces.
         */
        publish_all_ports?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Allocate a pseudo-tty within the container.
         */
        tty?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Add capabilities for the container. Requires docker-py >= 0.5.0.
         */
        cap_add?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Use insecure private registry by HTTP instead of HTTPS. Needed for docker-py >= 0.5.0.
         */
        insecure_registry?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * List of other containers to link within this container with an optional
         * alias. Use docker CLI-style syntax: C(redis:myredis).
         */
        links?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Container domain name.
         */
        domainname?: string;
        /**
         * Default: ${DOCKER_HOST} or unix://var/run/docker.sock
         *
         * URL of the host running the docker daemon. This will default to the env var DOCKER_HOST if unspecified.
         */
        docker_url?: string;
        /**
         * Container image used to match and launch containers.
         */
        image: string;
        /**
         * Default: None
         *
         * Set the PID namespace mode for the container (currently only supports 'host'). Requires docker-py >= 1.0.0 and docker >= 1.5.0
         */
        pid?: string;
        /**
         * Default: docker-py default remote API version
         *
         * Remote API version to use. This defaults to the current default as specified by docker-py.
         */
        docker_api_version?: string;
        /**
         * Default: 10
         *
         * How many seconds to wait for the container to stop before killing it.
         */
        stop_timeout?: number | string;
        /**
         * Default: ${DOCKER_CERT_PATH}/key.pem
         *
         * Path to the PEM-encoded key used to authenticate docker client. If specified tls_client_cert must be valid
         */
        tls_client_key?: string;
        /**
         * Mount the container's root filesystem as read only
         */
        read_only?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Whether to use tls to connect to the docker server.  "no" means not to use tls (and ignore any other tls related parameters). "encrypt" means to use tls to encrypt the connection to the server.  "verify" means to also verify that the server's certificate is valid for the server (this both verifies the certificate against the CA and that the certificate was issued for that host. If this is unspecified, tls will only be used if one of the other tls options require it.
         */
        use_tls?: "no" | "encrypt" | "verify";
        /**
         * Remote API password.
         */
        password?: string;
        /**
         * Container hostname.
         */
        hostname?: string;
        /**
         * LXC configuration parameters, such as C(lxc.aa_profile:unconfined).
         */
        lxc_conf?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: ${DOCKER_CERT_PATH}/ca.pem
         *
         * Path to a PEM-encoded certificate authority to secure the Docker connection. This has no effect if use_tls is encrypt.
         */
        tls_ca_cert?: string;
        /**
         * Default: started
         *
         * Assert the container's desired state. "present" only asserts that the matching containers exist. "started" asserts that the matching containers both exist and are running, but takes no action if any configuration has changed. "reloaded" (added in Ansible 1.9) asserts that all matching containers are running and restarts any that have any images or configuration out of date. "restarted" unconditionally restarts (or starts) the matching containers. "stopped" and '"killed" stop and kill all matching containers. "absent" stops and then' removes any matching containers.
         */
        state?: "present" | "started" | "reloaded" | "restarted" | "stopped" | "killed" | "absent" | "running";
        /**
         * Default: ${DOCKER_CERT_PATH}/cert.pem
         *
         * Path to the PEM-encoded certificate used to authenticate docker client. If specified tls_client_key must be valid
         */
        tls_client_cert?: string;
        /**
         * List of custom DNS servers for the container.
         */
        dns?: string;
        /**
         * List of names of containers to mount volumes from.
         */
        volumes_from?: string;
        /**
         * Network mode for the launched container: bridge, none, container:<name|id>
         * or host. Requires docker >= 0.11.
         */
        net?: string;
        /**
         * Whether the container should run in privileged mode or not.
         */
        privileged?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Remote API username.
         */
        username?: string;
        /**
         * Username or UID to use within the container
         */
        docker_user?: string;
        /**
         * Dict of custom host-to-IP mappings to be defined in the container
         */
        extra_hosts?: {
          [k: string]: any;
        };
        /**
         * Default: json-file
         *
         * You can specify a different logging driver for the container than for the daemon. "json-file" Default logging driver for Docker. Writes JSON messages to file. docker logs command is available only for this logging driver. "none" disables any logging for the container. "syslog" Syslog logging driver for Docker. Writes log messages to syslog. docker logs command is not available for this logging driver. "journald" Journald logging driver for Docker. Writes log messages to "journald". "gelf" Graylog Extended Log Format (GELF) logging driver for Docker. Writes log messages to a GELF endpoint likeGraylog or Logstash. "fluentd" Fluentd logging driver for Docker. Writes log messages to "fluentd" (forward input). If not defined explicitly, the Docker daemon's default ("json-file") will apply. Requires docker >= 1.6.0.
         */
        log_driver?: "json-file" | "none" | "syslog" | "journald" | "gelf" | "fluentd";
        /**
         * List of additional container ports to expose for port mappings or links. If the port is already exposed using EXPOSE in a Dockerfile, you don't need to expose it again.
         */
        expose?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Keep stdin open after a container is launched.
         */
        stdin_open?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * RAM allocated to the container as a number of bytes or as a human-readable string like "512MB". Leave as "0" to specify no limit.
         */
        memory_limit?: string;
        /**
         * Default: Taken from docker_url
         *
         * A hostname to check matches what's supplied in the docker server's certificate.  If unspecified, the hostname is taken from the docker_url.
         */
        tls_hostname?: string;
        /**
         * Default: DockerHub
         *
         * Remote registry URL to pull images from.
         */
        registry?: string;
        /**
         * Default: True
         *
         * Enable detached mode to leave the container running in background. If disabled, fail unless the process exits cleanly.
         */
        detach?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        memory_swap?: string;
        /**
         * CPUs in which to allow execution. Requires docker-py >= 0.6.0.
         */
        cpu_set?: string;
        /**
         * Default: missing
         *
         * Control when container images are updated from the C(docker_url) registry. If "missing," images will be pulled only when missing from the host; if '"always," the registry will be checked for a newer version of the image' each time the task executes.
         */
        pull?: "missing" | "always";
        /**
         * Name used to match and uniquely name launched containers. Explicit names are used to uniquely identify a single container or to link among containers. Mutually exclusive with a "count" other than "1".
         */
        name?: string;
        /**
         * Pass a dict of environment variables to the container.
         */
        env?: {
          [k: string]: any;
        };
        /**
         * Default: KILL
         *
         * With the state "killed", you can alter the signal sent to the container.
         */
        signal?: string;
        /**
         * Additional options to pass to the logging driver selected above. See Docker `log-driver <https://docs.docker.com/reference/logging/overview/>` documentation for more information. Requires docker >=1.7.0.
         */
        log_opt?: {
          [k: string]: any;
        };
        /**
         * Container restart policy.
         */
        restart_policy?: "no" | "on-failure" | "always";
        /**
         * Default: 1
         *
         * Number of matching containers that should be in the desired state.
         */
        count?: string;
        /**
         * Remote API email.
         */
        email?: string;
        /**
         * Command used to match and launch containers.
         */
        command?: string;
        /**
         * Maximum number of times to restart a container. Leave as "0" for unlimited retries.
         */
        restart_policy_retry?: number | string;
        /**
         * List of volumes to mount within the container using docker CLI-style
         * syntax: C(/host:/container[:mode]) where "mode" may be "rw" or "ro".
         */
        volumes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        debug?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Drop capabilities for the container. Requires docker-py >= 0.5.0.
         */
        cap_drop?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * List containing private to public port mapping specification. Use docker 'CLI-style syntax: C(8000), C(9000:8000), or C(0.0.0.0:9000:8000)' where 8000 is a container port, 9000 is a host port, and 0.0.0.0 is - a host interface. The container ports need to be exposed either in the Dockerfile or via the C(expose) option.
         */
        ports?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        [k: string]: any;
      };
      /**
       * Associates or disassociates a specific floating IP with a particular instance
       */
      quantum_floating_ip_associate?: {
        /**
         * Default: None
         *
         * name of the region
         */
        region_name?: string;
        availability_zone?: string;
        /**
         * Default: None
         *
         * name of the instance to which the public IP should be assigned
         */
        instance_name: string;
        /**
         * Default: True
         *
         * the tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: present
         *
         * indicates the desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * the keystone url for authentication
         */
        auth_url?: string;
        /**
         * Default: yes
         *
         * password of login user
         */
        login_password: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Default: None
         *
         * floating ip that should be assigned to the instance
         */
        ip_address: string;
        [k: string]: any;
      };
      /**
       * Manages a Django application using the I(manage.py) application frontend to I(django-admin). With the I(virtualenv) parameter, all management commands will be executed by the given I(virtualenv) installation.
       */
      django_manage?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Can create or delete AWS Autoscaling Groups
       * Works with the ec2_lc module to manage Launch Configurations
       */
      ec2_asg?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create or delete AWS Dynamo DB tables.
       * Can update the provisioned throughput on existing tables.
       * Returns the status of the specified table.
       */
      dynamodb_table?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Creates and deletes DNS records in Amazons Route53 service
       */
      route53?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * allows you to create new instances, either from scratch or an image, in addition to deleting or stopping instances on the oVirt/RHEV platform
       */
      ovirt?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        };
      /**
       * Allows you to create or remove a volume from a ProfitBricks datacenter. This module has a dependency on profitbricks >= 1.0.0
       */
      profitbricks_volume?: {
        /**
         * Default: 1
         *
         * The number of volumes you wish to create.
         */
        count?: string;
        /**
         * The datacenter in which to create the volumes.
         */
        datacenter?: string;
        /**
         * The name of the volumes. You can enumerate the names using auto_increment.
         */
        name?: string;
        /**
         * The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environement variable.
         */
        subscription_user?: string;
        /**
         * Default: UNKNOWN
         *
         * The licence type for the volume. This is used when the image is non-standard.
         */
        licence_type?: string;
        /**
         * Default: True
         *
         * Whether or not to increment a single number in the name for created virtual machines.
         */
        auto_increment?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The system image ID for the volume, e.g. a3eae284-a2fe-11e4-b187-5f1f641608c8. This can also be a snapshot image ID.
         */
        image?: string;
        /**
         * Default: 10
         *
         * The size of the volume.
         */
        size?: string;
        /**
         * list of instance ids, currently only used when state='absent' to remove instances.
         */
        instance_ids?: string;
        /**
         * THe ProfitBricks password. Overrides the PB_PASSWORD environement variable.
         */
        subscription_password?: string;
        /**
         * Default: present
         *
         * create or terminate datacenters
         */
        state?: string;
        /**
         * Default: 600
         *
         * how long before wait gives up, in seconds
         */
        wait_timeout?: number | string;
        /**
         * Default: VIRTIO
         *
         * The bus type.
         */
        bus?: string;
        /**
         * Default: HDD
         *
         * The disk type. Currently only HDD.
         */
        disk_type?: string;
        /**
         * Default: yes
         *
         * wait for the datacenter to be created before returning
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage registration and subscription to the Red Hat Network entitlement platform.
       */
      redhat_subscription?: {
        /**
         * Default: Current value from C(/etc/rhsm/rhsm.conf) is the default
         *
         * Specify an alternative Red Hat Network server
         */
        server_hostname?: string;
        /**
         * Red Hat Network username
         */
        username?: string;
        /**
         * Organisation ID to use in conjunction with activationkey
         */
        org_id?: string;
        /**
         * Default: present
         *
         * whether to register and subscribe (C(present)), or unregister (C(absent)) a system
         */
        state?: "present" | "absent";
        /**
         * Default: ^$
         *
         * Specify a subscription pool name to consume.  Regular expressions accepted.
         */
        pool?: string;
        /**
         * supply an activation key for use with registration
         */
        activationkey?: string;
        /**
         * Default: Current value from C(/etc/rhsm/rhsm.conf) is the default
         *
         * Allow traffic over insecure http
         */
        server_insecure?: string;
        /**
         * Red Hat Network password
         */
        password?: string;
        /**
         * Default: Current value from C(/etc/rhsm/rhsm.conf) is the default
         *
         * Specify CDN baseurl
         */
        rhsm_baseurl?: string;
        /**
         * Upon successful registration, auto-consume available subscriptions
         */
        autosubscribe?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module manipulates files privileges using the Linux capabilities(7) system.
       */
      capabilities?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Deploy given repository URL / revision to dest. If dest exists, update to the specified revision, otherwise perform a checkout.
       */
      subversion?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Use facts to create ad-hoc groups that can be used later in a playbook.
       */
      group_by?: {
        /**
         * The variables whose values will be used as groups
         */
        key?: string;
        [k: string]: any;
      };
      /**
       * Create or delete a Rackspace Cloud Monitoring notification that specifies a channel that can be used to communicate alarms, such as email, webhooks, or PagerDuty. Rackspace monitoring module flow | rax_mon_entity -> rax_mon_check -> *rax_mon_notification* -> rax_mon_notification_plan -> rax_mon_alarm
       */
      rax_mon_notification?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Gather facts about EC2 Elastic Load Balancers in AWS
       */
      ec2_elb_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module will let you start and pause Uptime Robot Monitoring
       */
      uptimerobot?: {
        /**
         * ID of the monitor to check.
         */
        monitorid: string;
        /**
         * Define whether or not the monitor should be running or paused.
         */
        state: "started" | "paused";
        /**
         * Uptime Robot API key.
         */
        apikey: string;
        [k: string]: any;
      };
      /**
       * Add, Update or Remove ports from an OpenStack cloud.  A state=present, will ensure the port is created or updated if required.
       */
      os_port?: {
        /**
         * Default: None
         *
         * Name that has to be given to the port.
         */
        name?: string;
        /**
         * Default: None
         *
         * Allowed address pairs list.  Allowed address pairs are supported with dictionary structure. e.g.  allowed_address_pairs: - ip_address: 10.1.0.12 mac_address: ab:cd:ef:12:34:56 - ip_address: ...
         */
        allowed_address_pairs?: string;
        /**
         * Default: None
         *
         * Sets admin state.
         */
        admin_state_up?: string;
        /**
         * Default: None
         *
         * Extra dhcp options to be assigned to this port.  Extra options are supported with dictionary structure. e.g.  extra_dhcp_opt: - opt_name: opt name1 opt_value: value1 - opt_name: ...
         */
        extra_dhcp_opt?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: None
         *
         * The ID of the entity that uses this port.
         */
        device_owner?: string;
        /**
         * Do not associate a security group with this port.
         */
        no_security_groups?: string;
        /**
         * Default: None
         *
         * MAC address of this port.
         */
        mac_address?: string;
        /**
         * Default: None
         *
         * Device ID of device using this port.
         */
        device_id?: string;
        /**
         * Default: None
         *
         * Desired IP and/or subnet for this port.  Subnet is referenced by subnet_id and IP is referenced by ip_address.
         */
        fixed_ips?: string;
        /**
         * Default: None
         *
         * Security group(s) ID(s) or name(s) associated with the port (comma separated string or YAML list)
         */
        security_groups?: string;
        /**
         * Network ID or name this port belongs to.
         */
        network?: string;
        [k: string]: any;
      };
      /**
       * Create or delete a Rackspace Cloud Monitoring check associated with an existing rax_mon_entity. A check is a specific test or measurement that is performed, possibly from different monitoring zones, on the systems you monitor. Rackspace monitoring module flow | rax_mon_entity -> *rax_mon_check* -> rax_mon_notification -> rax_mon_notification_plan -> rax_mon_alarm
       */
      rax_mon_check?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Similar to the M(facter) module, this runs the I(Ohai) discovery program (U(http://wiki.opscode.com/display/chef/Ohai)) on the remote host and returns JSON inventory data. I(Ohai) data is a bit more verbose and nested than I(facter).
       */
      ohai?: {
        [k: string]: any;
      };
      /**
       * Uses .net Environment to set or remove environment variables and can set at User, Machine or Process level.
       * User level environment variables will be set, but not available until the user has logged off and on again.
       */
      win_environment?: {
        /**
         * Default: present
         *
         * present to ensure environment variable is set, or absent to ensure it is removed
         */
        state?: string;
        /**
         * Default: no default
         *
         * The name of the environment variable
         */
        name?: string;
        /**
         * Default: no default
         *
         * The value to store in the environment variable. Can be omitted for state=absent
         */
        value?: string;
        /**
         * Default: no default
         *
         * The level at which to set the environment variable.
         * Use 'machine' to set for all users.
         * Use 'user' to set for the current user that ansible is connected as.
         * Use 'process' to set for the current process.  Probably not that useful.
         */
        level?: string;
        [k: string]: any;
      };
      /**
       * Manages I(apt) packages (such as for Debian/Ubuntu).
       */
      apt?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create or delete AWS SQS queues.
       * Update attributes on existing queues.
       */
      sqs_queue?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module uses rabbitMQ Rest API to create/delete bindings
       */
      rabbitmq_binding?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manage s3 bucket lifecycle rules in AWS
       */
      s3_lifecycle?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage packages for FreeBSD using 'portinstall'.
       */
      portinstall?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manages SELinux network port type definitions.
       */
      seport?: {
        /**
         * Default: True
         *
         * Reload SELinux policy after commit.
         */
        reload?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * SELinux type for the specified port.
         */
        setype: string;
        /**
         * Protocol for the specified port.
         */
        proto: "tcp" | "udp";
        /**
         * Default: present
         *
         * Desired boolean value.
         */
        state: "present" | "absent";
        /**
         * Ports or port ranges, separated by a comma
         */
        ports: string;
        [k: string]: any;
      };
      /**
       * Add or Remove security groups from an OpenStack cloud.
       */
      os_security_group?: {
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Name that has to be given to the security group. This module requires that security group names be unique.
         */
        name?: string;
        /**
         * Default: None
         *
         * Long description of the purpose of the security group
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * Manage the checks that should be run on a machine by I(Sensu).
       * Most options do not have a default and will not be added to the check definition unless specified.
       * All defaults except I(path), I(state), I(backup) and I(metric) are not managed by this module,
       * they are simply specified for your convenience.
       */
      sensu_check?: {
        /**
         * Default: True
         *
         * Whether the check should be handled or not
         */
        handle?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The name of the check
         * This is the key that is used to determine whether a check exists
         */
        name: string;
        /**
         * List of handlers to notify when the check fails
         */
        handlers?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Create a backup file (if yes), including the timestamp information so
         * you can get the original file back if you somehow clobbered it incorrectly.
         */
        backup?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Whether the check is a metric
         */
        metric?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Check interval in seconds
         */
        interval?: number | string;
        /**
         * List of subscribers/channels this check should run for
         * See sensu_subscribers to subscribe a machine to a channel
         */
        subscribers?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: 10
         *
         * Timeout for the check
         */
        timeout?: number | string;
        /**
         * When to disable handling of check failures
         */
        subdue_begin?: string;
        /**
         * Whether the check should be scheduled by the sensu client or server
         * This option obviates the need for specifying the I(subscribers) option
         */
        standalone?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 1
         *
         * Number of event occurrences before the handler should take action
         */
        occurrences?: number | string;
        /**
         * Default: present
         *
         * Whether the check should be present or not
         */
        state?: "present" | "absent";
        /**
         * Other checks this check depends on, if dependencies fail,
         * handling of this check will be disabled
         */
        dependencies?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Path to the sensu check to run (not required when I(state=absent))
         */
        command?: string;
        /**
         * The low threshhold for flap detection
         */
        high_flap_threshold?: number | string;
        /**
         * The low threshhold for flap detection
         */
        low_flap_threshold?: number | string;
        /**
         * Classifies the check as an aggregate check,
         * making it available via the aggregate API
         */
        aggregate?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: /etc/sensu/conf.d/checks.json
         *
         * Path to the json file of the check to be added/removed.
         * Will be created if it does not exist (unless I(state=absent)).
         * The parent folders need to exist when I(state=present), otherwise an error will be thrown
         */
        path?: string;
        /**
         * When to enable handling of check failures
         */
        subdue_end?: string;
        /**
         * Number of seconds handlers should wait before taking second action
         */
        refresh?: number | string;
        /**
         * Default: True
         *
         * Whether the check should be scheduled at all.
         * You can still issue it via the sensu api
         */
        publish?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Send a message to typetalk using typetalk API ( http://developers.typetalk.in/ )
       */
      typetalk?: {
        /**
         * message body
         */
        msg: string;
        /**
         * topic id to post message
         */
        topic: number | string;
        /**
         * OAuth2 client ID
         */
        client_id: string;
        /**
         * OAuth2 client secret
         */
        client_secret: string;
        [k: string]: any;
      };
      /**
       * Allows for the management of server certificates
       */
      iam_cert?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add and remove domain from the list of permissive domain.
       */
      selinux_permissive?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Add or Remove a floating IP to an instance
       */
      quantum_floating_ip?: {
        /**
         * Default: None
         *
         * Name of the region
         */
        region_name?: string;
        availability_zone?: string;
        /**
         * Default: yes
         *
         * Password of login user
         */
        login_password: string;
        /**
         * Default: None
         *
         * The name of the instance to which the IP address should be assigned
         */
        instance_name: string;
        /**
         * Default: yes
         *
         * The tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone url for authentication
         */
        auth_url?: string;
        /**
         * Default: None
         *
         * The name of the network of the port to associate with the floating ip. Necessary when VM multiple networks.
         */
        internal_network_name?: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Default: None
         *
         * Name of the network from which IP has to be assigned to VM. Please make sure the network is an external network
         */
        network_name: string;
        [k: string]: any;
      };
      /**
       * Composer is a tool for dependency management in PHP. It allows you to declare the dependent libraries your project needs and it will install them in your project for you
       */
      composer?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * maintains ec2 key pairs. This module has a dependency on python-boto >= 2.5
       */
      ec2_key?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * If behind NAT and need to know the public IP of your internet gateway.
       */
      ipify_facts?: {
        /**
         * Default: https://api.ipify.org
         *
         * URL of the ipify.org API service.
         * C(?format=json) will be appended per default.
         */
        api_url?: string;
        [k: string]: any;
      };
      /**
       * Create, update, restart and delete networks.
       */
      cs_network?: {
        /**
         * Domain the network is related to.
         */
        domain?: string;
        /**
         * The ending IPv6 address of the network belongs to.
         * If not specified, value of C(start_ipv6) is used.
         * Only considered on create.
         */
        end_ipv6?: string;
        api_http_method?: "get" | "post";
        /**
         * The gateway of the network.
         * Required for shared networks and isolated networks when it belongs to VPC.
         * Only considered on create.
         */
        gateway?: string;
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_url?: string;
        /**
         * Name of the zone in which the network should be deployed.
         * If not set, default zone is used.
         */
        zone?: string;
        /**
         * The beginning IPv6 address of the network belongs to.
         * Only considered on create.
         */
        start_ipv6?: string;
        /**
         * CIDR of IPv6 network, must be at least /64.
         * Only considered on create.
         */
        cidr_ipv6?: string;
        /**
         * Default: present
         *
         * State of the network.
         */
        state?: "present" | "absent" | "restarted";
        /**
         * The ending IPv4 address of the network belongs to.
         * If not specified, value of C(start_ip) is used.
         * Only considered on create.
         */
        end_ip?: string;
        api_key?: string;
        /**
         * The ID or VID of the network.
         */
        vlan?: string;
        api_secret?: string;
        api_timeout?: number | string;
        /**
         * Cleanup old network elements.
         * Only considered on C(state=restarted).
         */
        clean_up?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The netmask of the network.
         * Required for shared networks and isolated networks when it belongs to VPC.
         * Only considered on create.
         */
        netmask?: string;
        /**
         * Name of the offering for the network.
         * Required if C(state=present).
         */
        network_offering?: string;
        /**
         * The ID or VID of the network.
         */
        vpc?: string;
        /**
         * The beginning IPv4 address of the network belongs to.
         * Only considered on create.
         */
        start_ip?: string;
        /**
         * The gateway of the IPv6 network.
         * Required for shared networks.
         * Only considered on create.
         */
        gateway_ipv6?: string;
        /**
         * Display text of the network.
         * If not specified, C(name) will be used as C(display_text).
         */
        display_text?: string;
        /**
         * The isolated private vlan for this network.
         */
        isolated_pvlan?: string;
        /**
         * Account the network is related to.
         */
        account?: string;
        /**
         * Default: account
         *
         * Access control type.
         * Only considered on create.
         */
        acl_type?: "account" | "domain";
        /**
         * Name (case sensitive) of the network.
         */
        name: string;
        api_region?: string;
        /**
         * Name of the project the network to be deployed in.
         */
        project?: string;
        /**
         * The network domain.
         */
        network_domain?: string;
        [k: string]: any;
      };
      /**
       * This modules launches an ephemeral I(accelerate) daemon on the remote node which Ansible can use to communicate with nodes at high speed.
       * The daemon listens on a configurable port for a configurable amount of time.
       * Fireball mode is AES encrypted
       */
      accelerate?: {
        /**
         * Default: 300
         *
         * The number of seconds the socket will wait for data. If none is received when the timeout value is reached, the connection will be closed.
         */
        timeout?: string;
        /**
         * The listener daemon on the remote host will bind to the ipv6 localhost socket if this parameter is set to true.
         */
        ipv6?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        debug?: number | string;
        password: string;
        /**
         * Default: 30
         *
         * The I(accelerate) listener daemon is started on nodes and will stay around for this number of minutes before turning itself off.
         */
        minutes?: string;
        /**
         * Default: 5099
         *
         * TCP port for the socket connection
         */
        port?: string;
        /**
         * When enabled, the daemon will open a local socket file which can be used by future daemon executions to upload a new key to the already running daemon, so that multiple users can connect using different keys. This access still requires an ssh connection as the uid for which the daemon is currently running.
         */
        multi_key?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage Perl library dependencies.
       */
      cpanm?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create or Delete routers from OpenStack. Although Neutron allows routers to share the same name, this module enforces name uniqueness to be more user friendly.
       */
      os_router?: {
        /**
         * Default: True
         *
         * Enable Source NAT (SNAT) attribute.
         */
        enable_snat?: string;
        /**
         * Default: None
         *
         * Unique name or ID of the external gateway network.
         */
        network?: string;
        /**
         * Default: True
         *
         * Desired admin state of the created or existing router.
         */
        admin_state_up?: string;
        /**
         * Default: None
         *
         * List of subnets to attach to the router internal interface.
         */
        interfaces?: string;
        /**
         * Name to be give to the router
         */
        name?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: string;
        /**
         * Default: None
         *
         * The IP address parameters for the external gateway network. Each is a dictionary with the subnet name or ID (subnet) and the IP address to assign on the subnet (ip). If no IP is specified, one is automatically assigned from that subnet.
         */
        external_fixed_ips?: string;
        [k: string]: any;
      };
      /**
       * Manage Open vSwitch bridges
       */
      openvswitch_bridge?: {
        /**
         * Name of bridge to manage
         */
        bridge: string;
        /**
         * Default: present
         *
         * Whether the bridge should exist
         */
        state?: "present" | "absent";
        /**
         * Default: None
         *
         * Set bridge fail-mode. The default value (None) is a No-op.
         */
        fail_mode?: string;
        /**
         * Default: None
         *
         * A dictionary of external-ids. Omitting this parameter is a No-op. To  clear all external-ids pass an empty value.
         */
        external_ids?: string;
        /**
         * Default: 5
         *
         * How long to wait for ovs-vswitchd to respond
         */
        timeout?: number | string;
        [k: string]: any;
      };
      /**
       * Create/delete a DNS record in DigitalOcean.
       */
      digital_ocean_domain?: {
        /**
         * The IP address to point a domain at.
         */
        ip?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the target.
         */
        state?: string;
        /**
         * Numeric, the droplet id you want to operate on.
         */
        id?: string;
        /**
         * String, this is the name of the droplet - must be formatted by hostname rules, or the name of a SSH key, or the name of a domain.
         */
        name?: string;
        /**
         * DigitalOcean api token.
         */
        api_token?: string;
        [k: string]: any;
      };
      /**
       * Unified utility to interact with redis instances. 'slave' sets a redis instance in slave or master mode. 'flush' flushes all the instance or a specified db. 'config' (new in 1.6), ensures a configuration setting on an instance.
       */
      redis?: {
        /**
         * Default: 6379
         *
         * The port to connect to
         */
        login_port?: string;
        /**
         * The password used to authenticate with (usually not used)
         */
        login_password?: string;
        /**
         * A redis config key.
         */
        name?: string;
        /**
         * Default: all
         *
         * Type of flush (all the dbs in a redis instance or a specific one) [flush command]
         */
        flush_mode?: "all" | "db";
        /**
         * The host of the master instance [slave command]
         */
        master_host?: string;
        /**
         * Default: localhost
         *
         * The host running the database
         */
        login_host?: string;
        /**
         * The port of the master instance [slave command]
         */
        master_port?: string;
        /**
         * The database to flush (used in db mode) [flush command]
         */
        db?: string;
        /**
         * A redis config value.
         */
        value?: string;
        /**
         * The selected redis command
         */
        command?: "slave" | "flush" | "config";
        /**
         * Default: slave
         *
         * the mode of the redis instance [slave command]
         */
        slave_mode?: "master" | "slave";
        [k: string]: any;
      };
      /**
       * Send a message to Campfire.
       * Messages with newlines will result in a "Paste" message being sent.
       */
      campfire?: {
        /**
         * The message body.
         */
        msg: string;
        /**
         * API token.
         */
        token: string;
        /**
         * The subscription name to use.
         */
        subscription: string;
        /**
         * Room number to which the message should be sent.
         */
        room: string;
        /**
         * Send a notification sound before the message.
         */
        notify?:
          | "56k"
          | "bell"
          | "bezos"
          | "bueller"
          | "clowntown"
          | "cottoneyejoe"
          | "crickets"
          | "dadgummit"
          | "dangerzone"
          | "danielsan"
          | "deeper"
          | "drama"
          | "greatjob"
          | "greyjoy"
          | "guarantee"
          | "heygirl"
          | "horn"
          | "horror"
          | "inconceivable"
          | "live"
          | "loggins"
          | "makeitso"
          | "noooo"
          | "nyan"
          | "ohmy"
          | "ohyeah"
          | "pushit"
          | "rimshot"
          | "rollout"
          | "rumble"
          | "sax"
          | "secret"
          | "sexyback"
          | "story"
          | "tada"
          | "tmyk"
          | "trololo"
          | "trombone"
          | "unix"
          | "vuvuzela"
          | "what"
          | "whoomp"
          | "yeah"
          | "yodel";
        [k: string]: any;
      };
      /**
       * This module creates, removes or resizes logical volumes.
       */
      lvol?: {
        /**
         * Default: no
         *
         * Shrink or remove operations of volumes requires this switch. Ensures that that filesystems get never corrupted/destroyed by mistake.
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The volume group this logical volume is part of.
         */
        vg: string;
        /**
         * The name of the logical volume.
         */
        lv: string;
        /**
         * Default: present
         *
         * Control if the logical volume exists.
         */
        state?: "present" | "absent";
        /**
         * Free-form options to be passed to the lvcreate command
         */
        opts?: string;
        /**
         * The size of the logical volume, according to lvcreate(8) --size, by default in megabytes or optionally with one of [bBsSkKmMgGtTpPeE] units; or according to lvcreate(8) --extents as a percentage of [VG|PVS|FREE]; resizing is not supported with percentages. Float values must begin with a digit.
         */
        size?: string;
        [k: string]: any;
      };
      /**
       * Retrieve facts about server instances from OpenStack.
       */
      os_server_facts?: {
        /**
         * when true, return additional detail about servers at the expense of additional API calls.
         */
        detailed?: string;
        /**
         * Default: None
         *
         * restrict results to servers with names matching this glob expression (e.g., C<web*>).
         */
        server?: string;
        [k: string]: any;
      };
      /**
       * Adds or removes Vertica database user and, optionally, assigns roles.
       * A user will not be removed until all the dependencies have been dropped.
       * In such a situation, if the module tries to remove the user it will fail and only remove roles granted to the user.
       */
      vertica_user?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Add or remove flavors from OpenStack.
       */
      os_nova_flavor?: {
        /**
         * Default: auto
         *
         * ID for the flavor. This is optional as a unique UUID will be assigned if a value is not specified.
         */
        flavorid?: string;
        /**
         * Flavor name.
         */
        name?: string;
        /**
         * Amount of memory, in MB.
         */
        ram?: string;
        /**
         * Ephemeral space size, in GB.
         */
        ephemeral?: string;
        /**
         * Number of virtual CPUs.
         */
        vcpus?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource. When I(state) is 'present', then I(ram), I(vcpus), and I(disk) are all required. There are no default values for those parameters.
         */
        state?: string;
        /**
         * Swap space size, in MB.
         */
        swap?: string;
        /**
         * Default: 1.0
         *
         * RX/TX factor.
         */
        rxtx_factor?: string;
        /**
         * Default: True
         *
         * Make flavor accessible to the public.
         */
        is_public?: string;
        /**
         * Size of local disk, in GB.
         */
        disk?: string;
        [k: string]: any;
      };
      /**
       * Assembles a configuration file from fragments. Often a particular program will take a single configuration file and does not support a C(conf.d) style structure where it is easy to build up the configuration from multiple sources. M(assemble) will take a directory of files that can be local or have already been transferred to the system, and concatenate them together to produce a destination file. Files are assembled in string sorting order. Puppet calls this idea I(fragments).
       */
      assemble?: {
        /**
         * A boolean that controls if files that start with a '.' will be included or not.
         */
        ignore_hidden?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * An already existing directory full of source files.
         */
        src: string;
        /**
         * Default: True
         *
         * If False, it will search for src at originating/master machine, if True it will go to the remote/target machine for the src. Default is True.
         */
        remote_src?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A file to create using the concatenation of all of the source files.
         */
        dest: string;
        /**
         * A delimiter to separate the file contents.
         */
        delimiter?: string;
        /**
         * Assemble files only if C(regex) matches the filename. If not set, all files are assembled. All "\" (backslash) must be escaped as "\\" to comply yaml syntax. Uses Python regular expressions; see U(http://docs.python.org/2/library/re.html).
         */
        regexp?: string;
        /**
         * The validation command to run before copying into place.  The path to the file to validate is passed in via '%s' which must be present as in the sshd example below. The command is passed securely so shell features like expansion and pipes won't work.
         */
        validate?: string;
        /**
         * Default: no
         *
         * Create a backup file (if C(yes)), including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
         */
        backup?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Add or Remove rule from an existing security group
       */
      os_security_group_rule?: {
        /**
         * Default: ingress
         *
         * The direction in which the security group rule is applied. Not all providers support egress.
         */
        direction?: string;
        /**
         * Default: None
         *
         * IP protocol
         */
        protocol?: string;
        /**
         * Source IP address(es) in CIDR notation (exclusive with remote_group)
         */
        remote_ip_prefix?: string;
        /**
         * Default: None
         *
         * Ending port
         */
        port_range_max?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: None
         *
         * Starting port
         */
        port_range_min?: string;
        /**
         * Default: IPv4
         *
         * Must be IPv4 or IPv6, and addresses represented in CIDR must match the ingress or egress rules. Not all providers support IPv6.
         */
        ethertype?: string;
        /**
         * Name of the security group
         */
        security_group?: string;
        /**
         * ID of Security group to link (exclusive with remote_ip_prefix)
         */
        remote_group?: string;
        [k: string]: any;
      };
      /**
       * Manage firewall with UFW.
       */
      ufw?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Enable, disable, and set weights for HAProxy backend servers using socket commands.
       */
      haproxy?: {
        /**
         * Default: /var/run/haproxy.sock
         *
         * Path to the HAProxy socket file.
         */
        socket?: string;
        /**
         * The value passed in argument. If the value ends with the `%` sign, then the new weight will be relative to the initially configured weight. Relative weights are only permitted between 0 and 100% and absolute weights are permitted between 0 and 256.
         */
        weight?: string;
        /**
         * Default: 5
         *
         * Number of seconds to wait between retries.
         */
        wait_interval?: number | string;
        /**
         * Desired state of the provided backend host.
         */
        state: "enabled" | "disabled";
        /**
         * Default: auto-detected
         *
         * Name of the HAProxy backend pool.
         */
        backend?: string;
        /**
         * Default: 25
         *
         * Number of times to check for status after changing the state.
         */
        wait_retries?: number | string;
        /**
         * Name of the backend host to change.
         */
        host: string;
        /**
         * When disabling a server, immediately terminate all the sessions attached to the specified server. This can be used to terminate long-running sessions after a server is put into maintenance mode.
         */
        shutdown_sessions?: string;
        /**
         * Wait until the server reports a status of 'UP' when `state=enabled`, or status of 'MAINT' when `state=disabled`.
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module fetches data from the metadata API in CloudStack. The module must be called from within the instance itself.
       */
      cs_facts?: {
        /**
         * Filter for a specific fact.
         */
        filter?:
          | "cloudstack_service_offering"
          | "cloudstack_availability_zone"
          | "cloudstack_public_hostname"
          | "cloudstack_public_ipv4"
          | "cloudstack_local_hostname"
          | "cloudstack_local_ipv4"
          | "cloudstack_instance_id"
          | "cloudstack_user_data";
        [k: string]: any;
      };
      /**
       * Installs, upgrade and removes packages using the underlying OS package manager.
       */
      package?: {
        [k: string]: any;
      };
      /**
       * Downloads files from HTTP, HTTPS, or FTP to the remote server. The remote server I(must) have direct access to the remote resource.
       * By default, if an environment variable C(<protocol>_proxy) is set on the target host, requests will be sent through that proxy. This behaviour can be overridden by setting a variable for this task (see `setting the environment <http://docs.ansible.com/playbooks_environment.html>`_), or by using the use_proxy option.
       * HTTP redirects can redirect from HTTP to HTTPS so you should be sure that your proxy environment for both protocols is correct.
       */
      get_url?: {
        [k: string]: any;
      };
      /**
       * Sets and retrieves file ACL information.
       */
      acl?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Add or remove PostgreSQL databases from a remote host.
       */
      postgresql_db?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Creates or terminates azure instances. When created optionally waits for it to be 'running'.
       */
      azure?: {
        /**
         * Default: 22
         *
         * a comma-separated list of TCP ports to expose on the virtual machine (e.g., "22,80")
         */
        endpoints?: string;
        /**
         * Default: Small
         *
         * azure role size for the new virtual machine (e.g., Small, ExtraLarge, A6). You have to pay attention to the fact that instances of type G and DS are not available in all regions (locations). Make sure if you selected the size and type of instance available in your chosen location.
         */
        role_size?:
          | "ExtraSmall"
          | "Small"
          | "Medium"
          | "Large"
          | "ExtraLarge"
          | "A5"
          | "A6"
          | "A7"
          | "A8"
          | "A9"
          | "Basic_A0"
          | "Basic_A1"
          | "Basic_A2"
          | "Basic_A3"
          | "Basic_A4"
          | "Standard_D1"
          | "Standard_D2"
          | "Standard_D3"
          | "Standard_D4"
          | "Standard_D11"
          | "Standard_D12"
          | "Standard_D13"
          | "Standard_D14"
          | "Standard_DS1"
          | "Standard_DS2"
          | "Standard_DS3"
          | "Standard_DS4"
          | "Standard_DS11"
          | "Standard_DS12"
          | "Standard_DS13"
          | "Standard_DS14"
          | "Standard_G1"
          | "Standard_G2"
          | "Standard_G3"
          | "Standard_G4"
          | "Standard_G5";
        /**
         * name of the virtual machine and associated cloud service.
         */
        name?: string;
        /**
         * the azure location to use (e.g. 'East US')
         *
         * Possible choices:
         * South Central US
         * Central US
         * East US 2
         * East US
         * West US
         * North Central US
         * North Europe
         * West Europe
         * East Asia
         * Southeast Asia
         * Japan West
         * Japan East
         * Brazil South
         */
        location?: string;
        /**
         * Name of virtual network.
         */
        virtual_network_name?: string;
        /**
         * system image for creating the virtual machine (e.g., b39f27a8b8c64d52b05eac6a62ebad85__Ubuntu_DAILY_BUILD-precise-12_04_3-LTS-amd64-server-20131205-en-us-30GB)
         */
        image?: string;
        /**
         * hostname to write /etc/hostname. Defaults to <name>.cloudapp.net.
         */
        hostname?: string;
        /**
         * Default: yes
         *
         * Enable winrm on Windows Machines
         */
        enable_winrm?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * create or terminate instances
         */
        state?: string;
        /**
         * Default: 300
         *
         * how long before wait gives up for redirects, in seconds
         */
        wait_timeout_redirects?: string;
        /**
         * path to an azure management certificate associated with the subscription id. Overrides the AZURE_CERT_PATH environment variable.
         */
        management_cert_path?: string;
        /**
         * path to an X509 certificate containing the public ssh key to install in the virtual machine. See http://www.windowsazure.com/en-us/manage/linux/tutorials/intro-to-linux/ for more details.
         * if this option is specified, password-based ssh authentication will be disabled.
         */
        ssh_cert_path?: string;
        /**
         * Default: 600
         *
         * how long before wait gives up, in seconds
         */
        wait_timeout?: string;
        /**
         * Default: no
         *
         * Reset the admin password on first logon for windows hosts
         */
        reset_pass_atlogon?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * the unix username for the new virtual machine.
         */
        user?: string;
        /**
         * Default: no
         *
         * Enable Auto Updates on Windows Machines
         */
        auto_updates?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * the azure storage account in which to store the data disks.
         */
        storage_account?: string;
        /**
         * Default: linux
         *
         * The type of the os that is gettings provisioned
         */
        os_type?: "windows" | "linux";
        /**
         * the unix password for the new virtual machine.
         */
        password?: string;
        /**
         * azure subscription id. Overrides the AZURE_SUBSCRIPTION_ID environment variable.
         */
        subscription_id?: string;
        /**
         * Default: no
         *
         * wait for the instance to be in state 'running' before returning
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Creates or deletes instances of task definitions.
       */
      ecs_task?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module allows you to create, modify and delete Zabbix host entries and associated group and template data.
       */
      zabbix_host?: {
        /**
         * Default: enabled
         *
         * Monitoring status of the host.
         */
        status?: string;
        /**
         * Default: yes
         *
         * Overwrite the host configuration, even if already present
         */
        force?: string;
        /**
         * Default: 10
         *
         * The timeout of API request (seconds).
         */
        timeout?: string;
        /**
         * Zabbix user name, used to authenticate against the server.
         */
        login_user?: string;
        /**
         * List of interfaces to be created for the host (see example below).
         * Available values are: dns, ip, main, port, type and useip.
         * Please review the interface documentation for more information on the supported properties
         * https://www.zabbix.com/documentation/2.0/manual/appendix/api/hostinterface/definitions#host_interface
         */
        interfaces?: string;
        /**
         * Url of Zabbix server, with protocol (http or https).
         */
        server_url?: string;
        /**
         * Default: present
         *
         * State of the host.
         * On C(present), it will create if host does not exist or update the host if the associated data is different.
         * On C(absent) will remove a host if it exists.
         */
        state?: string;
        /**
         * Name of the host in Zabbix.
         * host_name is the unique identifier used and cannot be updated using this module.
         */
        host_name?: string;
        /**
         * List of host groups the host is part of.
         */
        host_groups?: string;
        /**
         * Zabbix user password.
         */
        login_password?: string;
        /**
         * Default: None
         *
         * List of templates linked to the host.
         */
        link_templates?: string;
        /**
         * Default: None
         *
         * The name of the Zabbix Proxy to be used
         */
        proxy?: string;
        [k: string]: any;
      };
      /**
       * Will install, upgrade and remove packages with swdepot package manager (HP-UX)
       */
      swdepot?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * creates / deletes a Linode Public Cloud instance and optionally waits for it to be 'running'.
       */
      linode?: {
        [k: string]: any;
      };
      /**
       * Manage DNS records on Rackspace Cloud DNS
       */
      rax_dns_record?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage users,tenants, roles from OpenStack.
       */
      keystone_user?: {
        /**
         * Default: None
         *
         * A description for the tenant
         */
        tenant_description?: string;
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone url for authentication
         */
        endpoint?: string;
        region_name?: string;
        availability_zone?: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_user?: string;
        /**
         * Default: None
         *
         * The token to be uses in case the password is not specified
         */
        token?: string;
        /**
         * Default: None
         *
         * The tenant login_user belongs to
         */
        login_tenant_name?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: None
         *
         * The name of the role to be assigned or created
         */
        role?: string;
        /**
         * Default: None
         *
         * The name of the user that has to added/removed from OpenStack
         */
        user?: string;
        /**
         * Default: yes
         *
         * Password of login user
         */
        login_password?: string;
        login_username?: string;
        /**
         * Default: None
         *
         * The password to be assigned to the user
         */
        password?: string;
        /**
         * Default: None
         *
         * An email address for the user
         */
        email?: string;
        /**
         * Default: None
         *
         * The tenant name that has be added/removed
         */
        tenant?: string;
        [k: string]: any;
      };
      /**
       * This module can create and destroy unformatted GCE persistent disks U(https://developers.google.com/compute/docs/disks#persistentdisks). It also supports attaching and detaching disks from running instances. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.
       */
      gce_pd?: {
        /**
         * Default: 10
         *
         * whole integer size of disk (in GB) to create, default is 10 GB
         */
        size_gb?: string;
        /**
         * Default: pd-standard
         *
         * type of disk provisioned
         */
        disk_type?: string;
        /**
         * name of the disk
         */
        name: string;
        /**
         * Default: us-central1-b
         *
         * zone in which to create the disk
         */
        zone?: string;
        /**
         * service account email
         */
        service_account_email?: string;
        /**
         * the source image to use for the disk
         */
        image?: string;
        /**
         * path to the pem file associated with the service account email
         */
        pem_file?: string;
        /**
         * instance name if you wish to attach or detach the disk
         */
        instance_name?: string;
        /**
         * Default: present
         *
         * desired state of the persistent disk
         */
        state?: string;
        /**
         * the source snapshot to use for the disk
         */
        snapshot?: string;
        /**
         * Default: READ_ONLY
         *
         * GCE mount mode of disk, READ_ONLY (default) or READ_WRITE
         */
        mode?: "READ_WRITE" | "READ_ONLY";
        /**
         * your GCE project ID
         */
        project_id?: string;
        /**
         * Default: no
         *
         * do not destroy the disk, merely detach it from an instance
         */
        detach_only?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module allows you to create or restore a volume snapshot. This module has a dependency on profitbricks >= 1.0.0
       */
      profitbricks_nic?: {
        /**
         * The datacenter in which to operate.
         */
        datacenter?: string;
        /**
         * The LAN to place the NIC on. You can pass a LAN that doesn't exist and it will be created. Required on create.
         */
        lan?: string;
        /**
         * The name or ID of the NIC. This is only required on deletes, but not on create.
         */
        name?: string;
        /**
         * The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environement variable.
         */
        subscription_user?: string;
        /**
         * The server name or ID.
         */
        server?: string;
        /**
         * THe ProfitBricks password. Overrides the PB_PASSWORD environement variable.
         */
        subscription_password?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: string;
        /**
         * Default: 600
         *
         * how long before wait gives up, in seconds
         */
        wait_timeout?: number | string;
        /**
         * Default: yes
         *
         * wait for the operation to complete before returning
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Copies AMI from a source region to a destination region. This module has a dependency on python-boto >= 2.5
       */
      ec2_ami_copy?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module works like M(fetch). It is used for fetching a base64- encoded blob containing the data in a remote file.
       */
      slurp?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * manages Zabbix host macros, it can create, update or delete them.
       */
      zabbix_hostmacro?: {
        /**
         * Value of the host macro.
         */
        macro_value?: string;
        /**
         * Name of the host macro.
         */
        macro_name?: string;
        /**
         * Zabbix user name.
         */
        login_user?: string;
        /**
         * Url of Zabbix server, with protocol (http or https).
         */
        server_url?: string;
        /**
         * Default: present
         *
         * State of the macro.
         * On C(present), it will create if macro does not exist or update the macro if the associated data is different.
         * On C(absent) will remove a macro if it exists.
         */
        state?: string;
        /**
         * Name of the host.
         */
        host_name?: string;
        /**
         * Default: 10
         *
         * The timeout of API request (seconds).
         */
        timeout?: string;
        /**
         * Zabbix user password.
         */
        login_password?: string;
        [k: string]: any;
      };
      /**
       * Create, disable, lock, enable and remove accounts.
       */
      cs_account?: {
        /**
         * Username of the user to be created if account did not exist.
         * Required on C(state=present).
         */
        username?: string;
        /**
         * Default: ROOT
         *
         * Domain the account is related to.
         */
        domain?: string;
        /**
         * Last name of the user to be created if account did not exist.
         * Required on C(state=present).
         */
        last_name?: string;
        /**
         * Default: user
         *
         * Type of the account.
         */
        account_type?: "user" | "root_admin" | "domain_admin";
        /**
         * Name of account.
         */
        name: string;
        api_http_method?: "get" | "post";
        /**
         * Network domain of the account.
         */
        network_domain?: string;
        api_secret?: string;
        api_timeout?: number | string;
        /**
         * First name of the user to be created if account did not exist.
         * Required on C(state=present).
         */
        first_name?: string;
        api_region?: string;
        api_key?: string;
        /**
         * Default: present
         *
         * State of the account.
         * C(unlocked) is an alias for C(enabled).
         */
        state?: "present" | "absent" | "enabled" | "disabled" | "locked" | "unlocked";
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Timezone of the user to be created if account did not exist.
         */
        timezone?: string;
        /**
         * Password of the user to be created if account did not exist.
         * Required on C(state=present).
         */
        password?: string;
        /**
         * Email of the user to be created if account did not exist.
         * Required on C(state=present).
         */
        email?: string;
        api_url?: string;
        [k: string]: any;
      };
      /**
       * Toggles SELinux booleans.
       */
      seboolean?: {
        /**
         * Desired boolean value
         */
        state:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Set to C(yes) if the boolean setting should survive a reboot
         */
        persistent?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the boolean to configure
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Adds, removes or changes procedural languages with a PostgreSQL database.
       * This module allows you to add a language, remote a language or change the trust relationship with a PostgreSQL database. The module can be used on the machine where executed or on a remote host.
       * When removing a language from a database, it is possible that dependencies prevent the database from being removed. In that case, you can specify casade to automatically drop objects that depend on the language (such as functions in the language). In case the language can't be deleted because it is required by the database system, you can specify fail_on_drop=no to ignore the error.
       * Be carefull when marking a language as trusted since this could be a potential security breach. Untrusted languages allow only users with the PostgreSQL superuser privilege to use this language to create new functions.
       */
      postgresql_lang?: {
        /**
         * name of the procedural language to add, remove or change
         */
        lang: string;
        /**
         * marks the language as trusted, even if it's marked as untrusted in pg_pltemplate.
         * use with care!
         */
        force_trust?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: postgres
         *
         * User used to authenticate with PostgreSQL
         */
        login_user?: string;
        /**
         * Default: localhost
         *
         * Host running PostgreSQL where you want to execute the actions.
         */
        login_host?: string;
        /**
         * name of database where the language will be added, removed or changed
         */
        db: string;
        /**
         * when dropping a language, also delete object that depend on this language.
         * only used when C(state=absent).
         */
        cascade?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * The state of the language for the selected database
         */
        state?: "present" | "absent";
        /**
         * Password used to authenticate with PostgreSQL (must match C(login_user))
         */
        login_password?: string;
        /**
         * make this language trusted for the selected db
         */
        trust?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: yes
         *
         * if C(yes), fail when removing a language. Otherwise just log and continue
         * in some cases, it is not possible to remove a language (used by the db-system). When         dependencies block the removal, consider using C(cascade).
         */
        fail_on_drop?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 5432
         *
         * Database port to connect to.
         */
        port?: string;
        [k: string]: any;
      };
      /**
       * allows the addition, modification and deletion of ACL keys and associated rules in a consul cluster via the agent. For more details on using and configuring ACLs, see https://www.consul.io/docs/internals/acl.html.
       */
      consul_acl?: {
        /**
         * the name that should be associated with the acl key, this is opaque to Consul
         */
        name?: string;
        /**
         * an list of the rules that should be associated with a given token.
         */
        rules?: string;
        /**
         * Default: localhost
         *
         * host of the consul agent defaults to localhost
         */
        host?: string;
        /**
         * whether the ACL pair should be present or absent, defaults to present
         */
        state?: string;
        /**
         * the token key indentifying an ACL rule set. If generated by consul this will be a UUID.
         */
        token?: string;
        /**
         * a management token is required to manipulate the acl lists
         */
        mgmt_token?: string;
        /**
         * the type of token that should be created, either management or client, defaults to client
         */
        type?: string;
        /**
         * Default: 8500
         *
         * the port on which the consul agent is running
         */
        port?: string;
        [k: string]: any;
      };
      /**
       * Reads data out of lldpctl
       */
      lldp?: {
        [k: string]: any;
      };
      /**
       * Manage I(git) checkouts of repositories to deploy files or software.
       */
      git?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Add a VMware Standard Switch to an ESXi host
       */
      vmware_vswitch?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Adds or removes Vertica database schema and, optionally, roles with schema access privileges.
       * A schema will not be removed until all the objects have been dropped.
       * In such a situation, if the module tries to remove the schema it will fail and only remove roles created for the schema if they have no dependencies.
       */
      vertica_schema?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * allows you to create/remove/update firewall rules
       */
      win_firewall_rule?: {
        /**
         * the profile this rule applies to
         */
        profile?: string;
        /**
         * the remote port this rule applies to
         */
        remoteport?: string;
        /**
         * is this rule for inbound or outbound trafic
         */
        direction?: string;
        /**
         * is this firewall rule enabled or disabled
         */
        enable?: string;
        /**
         * the protocol this rule applies to
         */
        protocol?: string;
        /**
         * the rules name
         */
        name?: string;
        /**
         * the service this rule applies to
         */
        service?: string;
        /**
         * the local port this rule applies to
         */
        localport?: string;
        /**
         * the local ip address this rule applies to
         */
        localip?: string;
        /**
         * Default: present
         *
         * create/remove/update or powermanage your VM
         */
        state?: string;
        /**
         * the program this rule applies to
         */
        program?: string;
        /**
         * the remote ip address/range this rule applies to
         */
        remoteip?: string;
        /**
         * what to do with the items this rule is for
         */
        action?: string;
        /**
         * Enforces the change if a rule with different values exists
         */
        force?: string;
        /**
         * description for the firewall rule
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * Create/delete/reconfigure a guest VM through VMware vSphere. This module has a dependency on pysphere >= 1.7
       */
      vsphere_guest?: {
        /**
         * Default: None
         *
         * The name of the resource_pool to create the VM in.
         */
        resource_pool?: string;
        /**
         * Desired hardware version identifier (for example, "vmx-08" for vms that needs to be managed with vSphere Client). Note that changing hardware version of existing vm is not supported.
         */
        vm_hw_version?: string;
        /**
         * The hostname of the vcenter server the module will connect to, to create the guest.
         */
        vcenter_hostname: string;
        /**
         * Default: no
         *
         * Boolean. Allows you to run commands which may alter the running state of a guest. Also used to reconfigure and destroy.
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The virtual server name you wish to manage.
         */
        guest: string;
        /**
         * A key, value list of disks and their sizes and which datastore to keep it in.
         */
        vm_disk?: {
          [k: string]: any;
        };
        /**
         * Dictionary which includes datacenter and hostname on which the VM should be created. For standalone ESXi hosts, ha-datacenter should be used as the datacenter name
         */
        esxi?: {
          [k: string]: any;
        };
        /**
         * A key, value list of nics, their types and what network to put them on.
         */
        vm_nic?: {
          [k: string]: any;
        };
        /**
         * A key, value list of VM config settings. Must include ['memory_mb', 'num_cpus', 'osid', 'scsi'].
         */
        vm_hardware?: {
          [k: string]: any;
        };
        /**
         * Username to connect to vcenter as.
         */
        username: string;
        /**
         * Default: None
         *
         * The name of the cluster to create the VM in. By default this is derived from the host you tell the module to build the guest on.
         */
        cluster?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the vm. 'reconfigured' only applies changes to 'memory_mb' and 'num_cpus' in vm_hardware parameter, and only when hot-plugging is enabled for the guest.
         */
        state?: "present" | "powered_off" | "absent" | "powered_on" | "restarted" | "reconfigured";
        /**
         * Gather facts from vCenter on a particular VM
         */
        vmware_guest_facts?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A key, value pair of any extra values you want set or changed in the vmx file of the VM. Useful to set advanced options on the VM.
         */
        vm_extra_config?: {
          [k: string]: any;
        };
        /**
         * Default: True
         *
         * Specifies if the VM should be powered on after the clone.
         */
        power_on_after_clone?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Password of the user to connect to vcenter as.
         */
        password: string;
        /**
         * Specifies if the VM should be deployed from a template (mutually exclusive with 'state' parameter). No guest customization changes to hardware such as CPU, RAM, NICs or Disks can be applied when launching from template.
         */
        from_template?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * Name of the source template to deploy from
         */
        template_src?: string;
        /**
         * Default: none
         *
         * A string that when specified, will create a linked clone copy of the VM. Snapshot must already be taken in vCenter.
         */
        snapshot_to_clone?: string;
        [k: string]: any;
      };
      /**
       * Add and remove local groups
       */
      win_group?: {
        /**
         * Default: present
         *
         * Create or remove the group
         */
        state?: string;
        /**
         * Name of the group
         */
        name?: string;
        /**
         * Description of the group
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * Runs getent against one of it's various databases and returns information into the host's facts, in a getent_<database> prefixed variable
       */
      getent?: {
        /**
         * Default: True
         *
         * If a supplied key is missing this will make the task fail if True
         */
        fail_key?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * character used to split the database values into lists/arrays such as ':' or '	', otherwise  it will try to pick one depending on the database
         */
        split?: string;
        /**
         * key from which to return values from the specified database, otherwise the full contents are returned.
         */
        key?: string;
        /**
         * the name of a getent database supported by the target system (passwd, group, hosts, etc).
         */
        database: string;
        [k: string]: any;
      };
      /**
       * This module will actively managed vCloud Air vApp instances.  Instances can be created and deleted as well as both deployed and undeployed.
       */
      vca_vapp?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Add and remove username/password entries in a password file using htpasswd.
       * This is used by web servers such as Apache and Nginx for basic authentication.
       */
      htpasswd?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manages Mercurial (hg) repositories. Supports SSH, HTTP/S and local address.
       */
      hg?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Installs or uninstalls a package
       */
      win_package?: {
        /**
         * product id of the installed package (used for checking if already installed)
         */
        product_id?: string;
        /**
         * Password of an account with access to the package if its located on a file share. Only needed if the winrm user doesn't have access to the package. Also specify user_name for this to function properly.
         */
        user_password?: string;
        /**
         * Default: present
         *
         * Install or Uninstall
         */
        state?: string;
        /**
         * Any arguments the installer needs
         */
        arguments?: string;
        /**
         * Location of the package to be installed (either on file system, network share or url)
         */
        path?: string;
        /**
         * Username of an account with access to the package if its located on a file share. Only needed if the winrm user doesn't have access to the package. Also specify user_password for this to function properly.
         */
        user_name?: string;
        /**
         * name of the package. Just for logging reasons, will use the value of path if name isn't specified
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * This module allows you to create, modify and delete Zabbix screens and associated graph data.
       */
      zabbix_screen?: {
        /**
         * List of screens to be created/updated/deleted(see example).
         * If the screen(s) already been added, the screen(s) name won't be updated.
         * When creating or updating screen(s), C(screen_name), C(host_group) are required.
         * When deleting screen(s), the C(screen_name) is required.
         * The available states are: C(present) (default) and C(absent). If the screen(s) already exists, and the state is not C(absent), the screen(s) will just be updated as needed.
         */
        screens?: string;
        /**
         * Zabbix user name.
         */
        login_user?: string;
        /**
         * Url of Zabbix server, with protocol (http or https).
         */
        server_url?: string;
        /**
         * Default: 10
         *
         * The timeout of API request (seconds).
         */
        timeout?: string;
        /**
         * Zabbix user password.
         */
        login_password?: string;
        [k: string]: any;
      };
      /**
       * Manage packages with the I(pacman) package manager, which is used by Arch Linux and its variants.
       */
      pacman?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Enables or disables RabbitMQ plugins
       */
      rabbitmq_plugin?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * This module allows for addition or deletion of services and ports either tcp or udp in either running or permanent firewalld rules.
       */
      firewalld?: {
        /**
         * Default: system-default(public)
         *
         * The firewalld zone to add/remove to/from (NOTE: default zone can be configured per system but "public" is default from upstream. Available choices can be extended based on per-system configs, listed here are "out of the box" defaults).
         */
        zone?: string;
        /**
         * Name of a service to add/remove to/from firewalld - service must be listed in /etc/services.
         */
        service?: string;
        /**
         * Should this configuration be applied immediately, if set as permanent
         */
        immediate?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The source/network you would like to add/remove to/from firewalld
         */
        source?: string;
        /**
         * Should this port accept(enabled) or reject(disabled) connections.
         */
        state: "enabled" | "disabled";
        /**
         * Should this configuration be in the running firewalld configuration or persist across reboots.
         */
        permanent?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The amount of time the rule should be in effect for when non-permanent.
         */
        timeout?: number | string;
        /**
         * Name of a port or port range to add/remove to/from firewalld. Must be in the form PORT/PROTOCOL or PORT-PORT/PROTOCOL for port ranges.
         */
        port?: string;
        /**
         * Rich rule to add/remove to/from firewalld.
         */
        rich_rule?: string;
        [k: string]: any;
      };
      /**
       * Manages ZFS file systems on Solaris and FreeBSD. Can manage file systems, volumes and snapshots. See zfs(1M) for more information about the properties.
       */
      zfs?: {
        /**
         * Name of the snapshot to clone
         */
        origin?: string;
        /**
         * The setuid property.
         */
        setuid?: "on" | "off";
        /**
         * The zoned property.
         */
        zoned?: "on" | "off";
        /**
         * The primarycache property.
         */
        primarycache?: "all" | "none" | "metadata";
        /**
         * The logbias property.
         */
        logbias?: "latency" | "throughput";
        /**
         * The sync property.
         */
        sync?: "standard" | "always" | "disabled";
        /**
         * The copies property.
         */
        copies?: "1" | "2" | "3";
        /**
         * The sharenfs property.
         */
        sharenfs?: string;
        /**
         * The sharesmb property.
         */
        sharesmb?: string;
        /**
         * The reservation property.
         */
        reservation?: string;
        /**
         * The mountpoint property.
         */
        mountpoint?: string;
        /**
         * The casesensitivity property.
         */
        casesensitivity?: "sensitive" | "insensitive" | "mixed";
        /**
         * The utf8only property.
         */
        utf8only?: "on" | "off";
        /**
         * The xattr property.
         */
        xattr?: "on" | "off";
        /**
         * The readonly property.
         */
        readonly?: "on" | "off";
        /**
         * The compression property.
         */
        compression?:
          | "on"
          | "off"
          | "lzjb"
          | "gzip"
          | "gzip-1"
          | "gzip-2"
          | "gzip-3"
          | "gzip-4"
          | "gzip-5"
          | "gzip-6"
          | "gzip-7"
          | "gzip-8"
          | "gzip-9"
          | "lz4"
          | "zle";
        /**
         * The shareiscsi property.
         */
        shareiscsi?: "on" | "off";
        /**
         * The aclmode property.
         */
        aclmode?: "discard" | "groupmask" | "passthrough";
        /**
         * The dedup property.
         */
        dedup?: "on" | "off";
        /**
         * The aclinherit property.
         */
        aclinherit?: "discard" | "noallow" | "restricted" | "passthrough" | "passthrough-x";
        /**
         * Whether to create (C(present)), or remove (C(absent)) a file system, snapshot or volume.
         */
        state: "present" | "absent";
        /**
         * The recordsize property.
         */
        recordsize?: string;
        /**
         * The jailed property.
         */
        jailed?: "on" | "off";
        /**
         * The secondarycache property.
         */
        secondarycache?: "all" | "none" | "metadata";
        /**
         * The refreservation property.
         */
        refreservation?: string;
        /**
         * The exec property.
         */
        exec?: "on" | "off";
        createparent?: "on" | "off";
        /**
         * The refquota property.
         */
        refquota?: string;
        /**
         * The quota property.
         */
        quota?: string;
        /**
         * The volsize property.
         */
        volsize?: string;
        /**
         * The vscan property.
         */
        vscan?: "on" | "off";
        /**
         * The canmount property.
         */
        canmount?: "on" | "off" | "noauto";
        /**
         * The atime property.
         */
        atime?: "on" | "off";
        /**
         * The normalization property.
         */
        normalization?: "none" | "formC" | "formD" | "formKC" | "formKD";
        /**
         * The volblocksize property.
         */
        volblocksize?: string;
        /**
         * File system, snapshot or volume name e.g. C(rpool/myfs)
         */
        name: string;
        /**
         * The checksum property.
         */
        checksum?: "on" | "off" | "fletcher2" | "fletcher4" | "sha256";
        /**
         * The devices property.
         */
        devices?: "on" | "off";
        /**
         * The nbmand property.
         */
        nbmand?: "on" | "off";
        /**
         * The snapdir property.
         */
        snapdir?: "hidden" | "visible";
        [k: string]: any;
      };
      /**
       * This module creates, removes or resizes volume groups.
       */
      lvg?: {
        /**
         * Additional options to pass to C(vgcreate) when creating the volume group.
         */
        vg_options?: string;
        /**
         * List of comma-separated devices to use as physical devices in this volume group. Required when creating or resizing volume group.
         */
        pvs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: no
         *
         * If yes, allows to remove volume group with logical volumes.
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The name of the volume group.
         */
        vg: string;
        /**
         * Default: present
         *
         * Control if the volume group exists.
         */
        state?: "present" | "absent";
        /**
         * Default: 4
         *
         * The size of the physical extent in megabytes. Must be a power of 2.
         */
        pesize?: number | string;
        [k: string]: any;
      };
      /**
       * Create or remove a Distributed vSwitch portgroup
       */
      vmware_dvs_portgroup?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Adds or removes a user from a MongoDB database.
       */
      mongodb_user?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        };
      /**
       * Return canonical (NAA) from an ESXi host based on SCSI target ID
       */
      vmware_target_canonical_facts?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Runs the I(facter) discovery program (U(https://github.com/puppetlabs/facter)) on the remote system, returning JSON data that can be useful for inventory purposes.
       */
      facter?: {
        [k: string]: any;
      };
      /**
       * Manage Open vSwitch ports
       */
      openvswitch_port?: {
        /**
         * Name of bridge to manage
         */
        bridge: string;
        /**
         * Default: None
         *
         * Set a single property on a port.
         */
        set?: string;
        /**
         * Default: present
         *
         * Whether the port should exist
         */
        state?: "present" | "absent";
        /**
         * Default: 5
         *
         * How long to wait for ovs-vswitchd to respond
         */
        timeout?: number | string;
        /**
         * Dictionary of external_ids applied to a port.
         */
        external_ids?: string;
        /**
         * Name of port to manage on the bridge
         */
        port: string;
        [k: string]: any;
      };
      /**
       * Create, update, suspend, activate and remove projects.
       */
      cs_project?: {
        /**
         * Display text of the project.
         * If not specified, C(name) will be used as C(display_text).
         */
        display_text?: string;
        /**
         * Account the project is related to.
         */
        account?: string;
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        api_region?: string;
        /**
         * Default: present
         *
         * State of the project.
         */
        state?: "present" | "absent" | "active" | "suspended";
        /**
         * Domain the project is related to.
         */
        domain?: string;
        api_key?: string;
        /**
         * Name of the project.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Query / Set MySQL variables
       */
      mysql_variables?: {
        ssl_key?: string;
        ssl_cert?: string;
        config_file?: string;
        login_port?: number | string;
        login_user?: string;
        login_host?: string;
        /**
         * If set, then sets variable value to this
         */
        value?: string;
        ssl_ca?: string;
        login_unix_socket?: string;
        login_password?: string;
        /**
         * Variable name to operate
         */
        variable?: string;
        [k: string]: any;
      };
      /**
       * The M(nagios) module has two basic functions: scheduling downtime and toggling alerts for services or hosts.
       * All actions require the I(host) parameter to be given explicitly. In playbooks you can use the C({{inventory_hostname}}) variable to refer to the host the playbook is currently running on.
       * You can specify multiple services at once by separating them with commas, .e.g., C(services=httpd,nfs,puppet).
       * When specifying what service to handle there is a special service value, I(host), which will handle alerts/downtime for the I(host itself), e.g., C(service=host). This keyword may not be given with other services at the same time. I(Setting alerts/downtime for a host does not affect alerts/downtime for any of the services running on it.) To schedule downtime for all services on particular host use keyword "all", e.g., C(service=all).
       * When using the M(nagios) module you will need to specify your Nagios server using the C(delegate_to) parameter.
       */
      nagios?: {
        [k: string]: any;
      };
      /**
       * Create an annotation event with a given category, title and description. Optionally start, end or durations can be provided
       */
      circonus_annotation?: {
        /**
         * Annotation Category
         */
        category: string;
        /**
         * Description of annotation
         */
        description: string;
        /**
         * Title of annotation
         */
        title: string;
        /**
         * Unix timestamp of event end, defaults to now + duration
         */
        stop?: number | string;
        /**
         * Unix timestamp of event start, defaults to now
         */
        start?: number | string;
        /**
         * Duration in seconds of annotation, defaults to 0
         */
        duration?: number | string;
        /**
         * Circonus API key
         */
        api_key: string;
        [k: string]: any;
      };
      /**
       * An Ansible module to add or delete public ip addresses on an existing server or servers in CenturyLink Cloud.
       */
      clc_publicip?: {
        /**
         * A list of servers to create public ips on.
         */
        server_ids:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * Determine whether to create or delete public IPs. If present module will not create a second public ip if one already exists.
         */
        state?: "present" | "absent";
        /**
         * Default: TCP
         *
         * The protocol that the public IP will listen for.
         */
        protocol?: "TCP" | "UDP" | "ICMP";
        /**
         * Default: None
         *
         * A list of ports to expose. This is required when state is 'present'
         */
        ports?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: True
         *
         * Whether to wait for the tasks to finish before returning.
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage OpenStack Identity users. Users can be created, updated or deleted using this module. A user will be updated if I(name) matches an existing user and I(state) is present. The value for I(name) cannot be updated without deleting and re-creating the user.
       */
      os_user?: {
        /**
         * Default: None
         *
         * Project name or ID that the user should be associated with by default
         */
        default_project?: string;
        /**
         * Username for the user
         */
        name?: string;
        /**
         * Default: True
         *
         * Is the user enabled
         */
        enabled?: string;
        /**
         * Default: None
         *
         * Domain to create the user in if the cloud supports domains
         */
        domain?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: None
         *
         * Password for the user
         */
        password?: string;
        /**
         * Default: None
         *
         * Email address for the user
         */
        email?: string;
        [k: string]: any;
      };
      /**
       * Use this module to schedule a command or script file to run once in the future.
       * All jobs are executed in the 'a' queue.
       */
      at?: {
        /**
         * The count of units in the future to execute the command or script file.
         */
        count?: number | string;
        /**
         * Default: present
         *
         * The state dictates if the command or script file should be evaluated as present(added) or absent(deleted).
         */
        state?: "present" | "absent";
        /**
         * A command to be executed in the future.
         */
        command?: string;
        /**
         * The type of units in the future to execute the command or script file.
         */
        units?: "minutes" | "hours" | "days" | "weeks";
        /**
         * If a matching job is present a new job will not be added.
         */
        unique?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * An existing script file to be executed in the future.
         */
        script_file?: string;
        [k: string]: any;
      };
      /**
       * Sets attributes of files, symlinks, and directories, or removes files/symlinks/directories. Many other modules support the same options as the M(file) module - including M(copy), M(template), and M(assemble).
       */
      file?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * An Ansible module to Create or Delete Anti Affinity Policies at CenturyLink Cloud.
       */
      clc_aa_policy?: {
        /**
         * Default: present
         *
         * Whether to create or delete the policy.
         */
        state?: "present" | "absent";
        /**
         * Datacenter in which the policy lives/should live.
         */
        location: string;
        /**
         * The name of the Anti Affinity Policy.
         */
        name: string;
        /**
         * Default: True
         *
         * Whether to wait for the tasks to finish before returning.
         */
        wait?: string;
        [k: string]: any;
      };
      /**
       * Manage Python library dependencies. To use this module, one of the following keys is required: C(name) or C(requirements).
       */
      pip?: {
        /**
         * An optional path to a I(virtualenv) directory to install into
         */
        virtualenv?: string;
        /**
         * Default: no
         *
         * Whether the virtual environment will inherit packages from the global site-packages directory.  Note that if this setting is changed on an already existing virtual environment it will not have any effect, the environment must be deleted and newly created.
         */
        virtualenv_site_packages?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The explicit executable or a pathname to the executable to be used to run pip for a specific version of Python installed in the system. For example C(pip-3.3), if there are both Python 2.7 and 3.3 installations in the system and you want to run pip for the Python 3.3 installation.
         */
        executable?: string;
        /**
         * cd into this directory before running the command
         */
        chdir?: string;
        /**
         * The path to a pip requirements file
         */
        requirements?: string;
        /**
         * The name of a Python library to install or the url of the remote package.
         */
        name?: string;
        /**
         * The Python executable used for creating the virtual environment. For example C(python3.4), C(python2.7). When not specified, the system Python version is used.
         */
        virtualenv_python?: string;
        /**
         * Default: True
         *
         * Pass the editable flag for versioning URLs.
         */
        editable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: virtualenv
         *
         * The command or a pathname to the command to create the virtual environment with. For example C(pyvenv), C(virtualenv), C(virtualenv2), C(~/bin/virtualenv), C(/usr/local/bin/virtualenv).
         */
        virtualenv_command?: string;
        use_mirrors?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Extra arguments passed to pip.
         */
        extra_args?: string;
        /**
         * Default: present
         *
         * The state of module
         */
        state?: "present" | "absent" | "latest";
        /**
         * The version number to install of the Python library specified in the I(name) parameter
         */
        version?: string;
        [k: string]: any;
      };
      /**
       * This module uses rabbitMQ Rest API to create/delete exchanges
       */
      rabbitmq_exchange?: {
        [k: string]: any;
      };
      /**
       * Register and remove ISO images.
       */
      cs_iso?: {
        /**
         * Register the ISO to be featured. Only used if C(state) is present.
         */
        is_featured?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_key?: string;
        /**
         * Name of the ISO.
         */
        name: string;
        api_http_method?: "get" | "post";
        /**
         * Default: present
         *
         * State of the ISO.
         */
        state?: "present" | "absent";
        /**
         * Default: True
         *
         * Register the ISO to be bootable. Only used if C(state) is present.
         */
        bootable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_secret?: string;
        api_timeout?: number | string;
        /**
         * Domain the ISO is related to.
         */
        domain?: string;
        /**
         * Register the ISO having XS/VMWare tools installed inorder to support dynamic scaling of VM cpu/memory. Only used if C(state) is present.
         */
        is_dynamically_scalable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the project the ISO to be registered in.
         */
        project?: string;
        /**
         * URL where the ISO can be downloaded from. Required if C(state) is present.
         */
        url?: string;
        /**
         * Default: self
         *
         * Name of the filter used to search for the ISO.
         */
        iso_filter?: "featured" | "self" | "selfexecutable" | "sharedexecutable" | "executable" | "community";
        api_region?: string;
        /**
         * This flag is used for searching existing ISOs. If set to C(true), it will only list ISO ready for deployment e.g. successfully downloaded and installed. Recommended to set it to C(false).
         */
        is_ready?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The MD5 checksum value of this ISO. If set, we search by checksum instead of name.
         */
        checksum?: string;
        /**
         * Account the ISO is related to.
         */
        account?: string;
        /**
         * Name of the OS that best represents the OS of this ISO. If the iso is bootable this parameter needs to be passed. Required if C(state) is present.
         */
        os_type?: string;
        /**
         * Name of the zone you wish the ISO to be registered or deleted from. If not specified, first zone found will be used.
         */
        zone?: string;
        api_url?: string;
        [k: string]: any;
      };
      /**
       * Adds service hooks and removes service hooks that have an error status.
       */
      github_hooks?: {
        /**
         * The oauth key provided by github. It can be found/generated on github under "Edit Your Profile" >> "Applications" >> "Personal Access Tokens"
         */
        oauthkey: string;
        /**
         * When creating a new hook, this is the url that you want github to post to. It is only required when creating a new hook.
         */
        hookurl?: string;
        /**
         * This is the API url for the repository you want to manage hooks for. It should be in the form of: https://api.github.com/repos/user:/repo:. Note this is different than the normal repo url.
         */
        repo: string;
        /**
         * Github username.
         */
        user: string;
        /**
         * Default: json
         *
         * Content type to use for requests made to the webhook
         */
        content_type?: "json" | "form";
        /**
         * This tells the githooks module what you want it to do.
         */
        action: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Creates/Removes a gateway interface from the router, used to associate a external network with a router to route external traffic.
       */
      quantum_router_gateway?: {
        /**
         * Default: None
         *
         * Name of the region
         */
        region_name?: string;
        availability_zone?: string;
        /**
         * Default: None
         *
         * Name of the external network which should be attached to the router.
         */
        network_name: string;
        /**
         * Default: yes
         *
         * The tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone URL for authentication
         */
        auth_url?: string;
        /**
         * Default: yes
         *
         * Password of login user
         */
        login_password: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Default: None
         *
         * Name of the router to which the gateway should be attached.
         */
        router_name: string;
        [k: string]: any;
      };
      /**
       * This module will search a file for a line, and ensure that it is present or absent.
       * This is primarily useful when you want to change a single line in a file only.
       */
      win_lineinfile?: {
        /**
         * Used with C(state=present). If specified, the line will be inserted before the last match of specified regular expression. A value is available; C(BOF) for inserting the line at the beginning of the file.
         * If specified regular expresion has no matches, the line will be inserted at the end of the file.  May not be used with C(backrefs).
         */
        insertbefore?: string;
        /**
         * Default: auto
         *
         * Specifies the encoding of the source text file to operate on (and thus what the output encoding will be). The default of C(auto) will cause the module to auto-detect the encoding of the source file and ensure that the modified file is written with the same encoding.
         * An explicit encoding can be passed as a string that is a valid value to pass to the .NET framework System.Text.Encoding.GetEncoding() method - see U(https://msdn.microsoft.com/en-us/library/system.text.encoding%28v=vs.110%29.aspx).
         * This is mostly useful with C(create=yes) if you want to create a new file with a specific encoding. If C(create=yes) is specified without a specific encoding, the default encoding (UTF-8, no BOM) will be used.
         */
        encoding?: string;
        /**
         * The path of the file to modify.
         */
        dest?: string;
        /**
         * Default: no
         *
         * Used with C(state=present). If specified, the file will be created if it does not already exist. By default it will fail if the file is missing.
         */
        create?: string;
        /**
         * Default: windows
         *
         * Specifies the line separator style to use for the modified file. This defaults to the windows line separator ( ). Note that the indicated line separator will be used for file output regardless of the original line seperator that appears in the input file.
         */
        newline?: string;
        /**
         * Default: no
         *
         * Used with C(state=present). If set, line can contain backreferences (both positional and named) that will get populated if the C(regexp) matches. This flag changes the operation of the module slightly; C(insertbefore) and C(insertafter) will be ignored, and if the C(regexp) doesn't match anywhere in the file, the file will be left unchanged.
         * If the C(regexp) does match, the last matching line will be replaced by the expanded line parameter.
         */
        backrefs?: string;
        /**
         * Default: present
         *
         * Whether the line should be there or not.
         */
        state?: string;
        /**
         * Default: EOF
         *
         * Used with C(state=present). If specified, the line will be inserted after the last match of specified regular expression. A special value is available; C(EOF) for inserting the line at the end of the file.
         * If specified regular expresion has no matches, EOF will be used instead.  May not be used with C(backrefs).
         */
        insertafter?: string;
        /**
         * The regular expression to look for in every line of the file. For C(state=present), the pattern to replace if found; only the last line found will be replaced. For C(state=absent), the pattern of the line to remove.  Uses .NET compatible regular expressions; see U(https://msdn.microsoft.com/en-us/library/hs600312%28v=vs.110%29.aspx).
         */
        regexp?: string;
        /**
         * Required for C(state=present). The line to insert/replace into the file. If C(backrefs) is set, may contain backreferences that will get expanded with the C(regexp) capture groups if the regexp matches.
         */
        line?: string;
        /**
         * Default: no
         *
         * Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
         */
        backup?: string;
        /**
         * Default: None
         *
         * Validation to run before copying into place.  Use %s in the command to indicate the current file to validate.
         * The command is passed securely so shell features like expansion and pipes won't work.
         */
        validate?: string;
        [k: string]: any;
      };
      /**
       * Change dpkg package selection state via --get-selections and --set-selections.
       */
      dpkg_selections?: {
        /**
         * The selection state to set the package to.
         */
        selection?: "install" | "hold" | "deinstall" | "purge";
        /**
         * Name of the package
         */
        name: string;
        [k: string]: any;
      };
      /**
       * An Ansible module to Create or Delete Alert Policies at CenturyLink Cloud.
       */
      clc_alert_policy?: {
        /**
         * Default: None
         *
         * The name of the alert policy. This is mutually exclusive with id
         */
        name?: string;
        /**
         * Default: None
         *
         * The metric on which to measure the condition that will trigger the alert. This is required for state 'present'
         */
        metric?: "cpu" | "memory" | "disk";
        /**
         * Default: None
         *
         * The alert policy id. This is mutually exclusive with name
         */
        id?: string;
        /**
         * The alias of your CLC Account
         */
        alias: string;
        /**
         * Default: present
         *
         * Whether to create or delete the policy.
         */
        state?: "present" | "absent";
        /**
         * Default: None
         *
         * The threshold that will trigger the alert when the metric equals or exceeds it. This is required for state 'present' This number represents a percentage and must be a value between 5.0 - 95.0 that is a multiple of 5.0
         */
        threshold?: number | string;
        /**
         * Default: None
         *
         * A list of recipient email ids to notify the alert. This is required for state 'present'
         */
        alert_recipients?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * The length of time in minutes that the condition must exceed the threshold. This is required for state 'present'
         */
        duration?: string;
        [k: string]: any;
      };
      /**
       * Creates, Removes and configures a virtual directory in IIS.
       */
      win_iis_virtualdirectory?: {
        /**
         * The application under which the virtual directory is created or exists.
         */
        application?: string;
        /**
         * Default: present
         *
         * Whether to add or remove the specified virtual directory
         */
        state?: string;
        /**
         * The name of the virtual directory to create or remove
         */
        name?: string;
        /**
         * The physical path to the folder in which the new virtual directory is created. The specified folder must already exist.
         */
        physical_path?: string;
        /**
         * The site name under which the virtual directory is created or exists.
         */
        site?: string;
        [k: string]: any;
      };
      /**
       * Create or Remove compute instances from OpenStack.
       */
      os_server?: {
        /**
         * The name or id of the base image to boot.
         */
        image?: string;
        /**
         * Text to use to filter image names, for the case, such as HP, where there are multiple image names matching the common identifying portions. image_exclude is a negative match filter - it is text that may not exist in the image name. Defaults to "(deprecated)"
         */
        image_exclude?: string;
        /**
         * Text to use to filter flavor names, for the case, such as Rackspace, where there are multiple flavors that have the same ram count. flavor_include is a positive match filter - it must exist in the flavor name.
         */
        flavor_include?: string;
        /**
         * Default: None
         *
         * A list of key value pairs that should be provided as a metadata to the new instance or a string containing a list of key-value pairs. Eg:  meta: "key1=value1,key2=value2"
         */
        meta?: string;
        /**
         * Default: 1
         *
         * The name or id of the flavor in which the new instance has to be created. Mutually exclusive with flavor_ram
         */
        flavor?: string;
        /**
         * Default: None
         *
         * Names of the security groups to which the instance should be added. This may be a YAML list or a comma separated string.
         */
        security_groups?: string;
        /**
         * Should the instance boot from a persistent volume created based on the image given. Mututally exclusive with boot_volume.
         */
        boot_from_volume?: string;
        /**
         * Default: None
         *
         * Opaque blob of data which is made available to the instance
         */
        userdata?: string;
        /**
         * Default: None
         *
         * Name or ID of a network to attach this instance to. A simpler version of the nics parameter, only one of network or nics should be supplied.
         */
        network?: string;
        /**
         * Default: None
         *
         * A list of networks to which the instance's interface should be attached. Networks may be referenced by net-id/net-name/port-id or port-name.
         * Also this accepts a string containing a list of (net/port)-(id/name) Eg: nics: "net-id=uuid-1,port-name=myport" Only one of network or nics should be supplied.
         */
        nics?: string;
        /**
         * Default: None
         *
         * list of valid floating IPs that pre-exist to assign to this node
         */
        floating_ips?: string;
        /**
         * Default: 1
         *
         * The minimum amount of ram in MB that the flavor in which the new instance has to be created must have. Mutually exclusive with flavor.
         */
        flavor_ram?: string;
        /**
         * The size of the volume to create in GB if booting from volume based on an image.
         */
        volume_size?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: yes
         *
         * Ensure instance has public ip however the cloud wants to do that
         */
        auto_ip?: string;
        /**
         * Default: no
         *
         * Whether to boot the server with config drive enabled
         */
        config_drive?: string;
        /**
         * A list of preexisting volumes names or ids to attach to the instance
         */
        volumes?: string;
        /**
         * Default: None
         *
         * The key pair name to be used when creating a instance
         */
        key_name?: string;
        /**
         * Default: None
         *
         * Volume name or id to use as the volume to boot from. Implies boot_from_volume. Mutually exclusive with image and boot_from_volume.
         */
        boot_volume?: string;
        /**
         * If true, delete volume when deleting instance (if booted from volume)
         */
        terminate_volume?: string;
        /**
         * Default: yes
         *
         * If the module should wait for the instance to be created.
         */
        wait?: string;
        /**
         * Name that has to be given to the instance
         */
        name?: string;
        /**
         * Default: 180
         *
         * The amount of time the module should wait for the instance to get into active state.
         */
        timeout?: string;
        /**
         * Default: None
         *
         * list of floating IP pools from which to choose a floating IP
         */
        floating_ip_pools?: string;
        [k: string]: any;
      };
      /**
       * Control Linux encrypted block devices that are set up during system boot in C(/etc/crypttab).
       */
      crypttab?: {
        /**
         * Name of the encrypted block device as it appears in the C(/etc/crypttab) file, or optionaly prefixed with C(/dev/mapper/), as it appears in the filesystem. I(/dev/mapper/) will be stripped from I(name).
         */
        name: string;
        /**
         * Path to the underlying block device or file, or the UUID of a block-device prefixed with I(UUID=)
         */
        backing_device?: string;
        /**
         * Use I(present) to add a line to C(/etc/crypttab) or update it's definition if already present. Use I(absent) to remove a line with matching I(name). Use I(opts_present) to add options to those already present; options with different values will be updated. Use I(opts_absent) to remove options from the existing set.
         */
        state: "present" | "absent" | "opts_present" | "opts_absent";
        /**
         * Default: /etc/crypttab
         *
         * Path to file to use instead of C(/etc/crypttab). This might be useful in a chroot environment.
         */
        path?: string;
        /**
         * Default: none
         *
         * Encryption password, the path to a file containing the pasword, or 'none' or '-' if the password should be entered at boot.
         */
        password?: string;
        /**
         * A comma-delimited list of options. See C(crypttab(5) ) for details.
         */
        opts?: string;
        [k: string]: any;
      };
      /**
       * This module can be used to join nodes to a cluster, check the status of the cluster.
       */
      riak?: {
        /**
         * Default: riak@127.0.0.1
         *
         * The target node for certain operations (join, ping)
         */
        target_node?: string;
        /**
         * Default: /etc/riak
         *
         * The path to the riak configuration directory
         */
        config_dir?: string;
        /**
         * Default: None
         *
         * Waits for a riak service to come online before continuing.
         */
        wait_for_service?: "kv";
        /**
         * Default: 127.0.0.1:8098
         *
         * The ip address and port that is listening for Riak HTTP queries
         */
        http_conn?: string;
        /**
         * Number of seconds to wait for all nodes to agree on the ring.
         */
        wait_for_ring?: number | string;
        /**
         * Number of seconds to wait for handoffs to complete.
         */
        wait_for_handoffs?: number | string;
        /**
         * The command you would like to perform against the cluster.
         */
        command?: "ping" | "kv_test" | "join" | "plan" | "commit";
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Retrieves facts for a file similar to the linux/unix 'stat' command.
       */
      stat?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add, Edit, or Remove Registry Keys and Values using ItemProperties Cmdlets
       */
      win_regedit?: {
        /**
         * Default: string
         *
         * Registry Value Data Type
         */
        datatype?: string;
        /**
         * Default: present
         *
         * State of Registry Value
         */
        state?: string;
        /**
         * Registry Value Data
         */
        data?: string;
        /**
         * Name of Registry Value
         */
        value?: string;
        /**
         * Name of Registry Key
         */
        key?: string;
        [k: string]: any;
      };
      /**
       * Manage PHP packages with the pear package manager.
       */
      pear?: {
        [k: string]: any;
      };
      /**
       * Returns information about a Windows file
       */
      win_stat?: {
        /**
         * The full path of the file/object to get the facts of; both forward and back slashes are accepted.
         */
        path?: string;
        /**
         * Default: True
         *
         * Whether to return the checksum sum of the file. As of Ansible 1.9 this is no longer a MD5, but a SHA1 instead.
         */
        get_md5?: string;
        /**
         * Default: True
         *
         * Whether to return a checksum of the file (only sha1 currently supported)
         */
        get_checksum?: string;
        [k: string]: any;
      };
      /**
       * Manipulate metadata for Rackspace Cloud Servers
       */
      rax_meta?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Unzips compressed files and archives. For extracting any compression types other than .zip, the PowerShellCommunityExtensions (PSCX) Module is required.  This module (in conjunction with PSCX) has the ability to recursively unzip files within the src zip file provided and also functionality for many other compression types. If the destination directory does not exist, it will be created before unzipping the file.  Specifying rm parameter will force removal of the src file after extraction.
       */
      win_unzip?: {
        /**
         * Destination of zip file (provide absolute path of directory). If it does not exist, the directory will be created.
         */
        dest?: string;
        /**
         * File to be unzipped (provide absolute path)
         */
        src?: string;
        /**
         * Recursively expand zipped files within the src file.
         */
        recurse?: string;
        /**
         * If this file or directory exists the specified src will not be extracted.
         */
        creates?: string;
        /**
         * Remove the zip file, after unzipping
         */
        rm?: string;
        [k: string]: any;
      };
      /**
       * Manage slb virtual server objects on A10 Networks devices via aXAPI
       */
      a10_virtual_server?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manages MacPorts packages
       */
      macports?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Create/delete an SSH key.
       */
      digital_ocean_sshkey?: {
        /**
         * String, this is the name of an SSH key to create or destroy.
         */
        name?: string;
        /**
         * Numeric, the SSH key id you want to operate on.
         */
        id?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the target.
         */
        state?: string;
        /**
         * DigitalOcean manager id.
         */
        client_id?: string;
        /**
         * DigitalOcean api key.
         */
        api_key?: string;
        /**
         * The public SSH key you want to add to your account.
         */
        ssh_pub_key?: string;
        [k: string]: any;
      };
      /**
       * Controls daemontools services on remote hosts using the svc utility.
       */
      svc?: {
        dist?: string;
        /**
         * Name of the service to manage.
         */
        name: string;
        /**
         * Should a 'down' file exist or not, if it exists it disables auto startup. defaults to no. Downed does not imply stopped.
         */
        downed?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Wheater the service is enabled or not, if disabled it also implies stopped. Make note that a service can be enabled and downed (no auto restart).
         */
        enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: /service
         *
         * directory svscan watches for services
         */
        service_dir?: string;
        /**
         * C(Started)/C(stopped) are idempotent actions that will not run commands unless necessary.  C(restarted) will always bounce the svc (svc -t) and C(killed) will always bounce the svc (svc -k). C(reloaded) will send a sigusr1 (svc -u). C(once) will run a normally downed svc once (svc -o), not really an idempotent operation.
         */
        state?: "started" | "stopped" | "restarted" | "killed" | "reloaded" | "once";
        /**
         * directory where services are defined, the source of symlinks to service_dir.
         */
        service_src?: string;
        [k: string]: any;
      };
      /**
       * Manages DNS records via the v2 REST API of the DNS Made Easy service.  It handles records only; there is no manipulation of domains or monitor/account support yet. See: U(http://www.dnsmadeeasy.com/services/rest-api/)
       */
      dnsmadeeasy?: {
        /**
         * Domain to work with. Can be the domain name (e.g. "mydomain.com") or the numeric ID of the domain in DNS Made Easy (e.g. "839989") for faster resolution.
         */
        domain: string;
        /**
         * Record name to get/create/delete/update. If record_name is not specified; all records for the domain will be returned in "result" regardless of the state argument.
         */
        record_name?: string;
        /**
         * Default: 1800
         *
         * record's "Time to live".  Number of seconds the record remains cached in DNS servers.
         */
        record_ttl?: number | string;
        /**
         * Accout Secret Key.
         */
        account_secret: string;
        /**
         * Accout API Key.
         */
        account_key: string;
        /**
         * Record type.
         */
        record_type?: "A" | "AAAA" | "CNAME" | "HTTPRED" | "MX" | "NS" | "PTR" | "SRV" | "TXT";
        /**
         * whether the record should exist or not
         */
        state: "present" | "absent";
        /**
         * Record value. HTTPRED: <redirection URL>, MX: <priority> <target name>, NS: <name server>, PTR: <target name>, SRV: <priority> <weight> <port> <target name>, TXT: <text value>
         * If record_value is not specified; no changes will be made and the record will be returned in 'result' (in other words, this module can be used to fetch a record's current id, type, and ttl)
         */
        record_value?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage the state of a program monitored via I(Monit)
       */
      monit?: {
        /**
         * The state of service
         */
        state: "present" | "started" | "stopped" | "restarted" | "monitored" | "unmonitored" | "reloaded";
        /**
         * The name of the I(monit) program/process to manage
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Manages monitors within Datadog
       * Options like described on http://docs.datadoghq.com/api/
       */
      datadog_monitor?: {
        /**
         * A boolean indicating whether tagged users will be notified on changes to this monitor.
         */
        notify_audit?: 0 | "on" | "f" | "false" | 1 | "no" | "n" | "1" | "0" | "t" | "y" | "off" | "yes" | "true";
        /**
         * The number of hours of the monitor not reporting data before it will automatically resolve from a triggered state.
         */
        timeout_h?: string;
        /**
         * Dictionary of scopes to timestamps or None. Each scope will be muted until the given POSIX timestamp or forever if the value is None.
         */
        silenced?: {
          [k: string]: any;
        };
        /**
         * Default: 2x timeframe for metric, 2 minutes for service
         *
         * The number of minutes before a monitor will notify when data stops reporting. Must be at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
         */
        no_data_timeframe?: string;
        /**
         * Your DataDog app key.
         */
        app_key: string;
        /**
         * A boolean indicating whether this monitor will notify when data stops reporting..
         */
        notify_no_data?: 0 | "on" | "f" | "false" | 1 | "no" | "n" | "1" | "0" | "t" | "y" | "off" | "yes" | "true";
        /**
         * The number of minutes after the last notification before a monitor will re-notify on the current status. It will only re-notify if it's not resolved.
         */
        renotify_interval?: string;
        /**
         * The designated state of the monitor.
         */
        state: string;
        /**
         * A message to include with a re-notification. Supports the '@username' notification we allow elsewhere. Not applicable if renotify_interval is None
         */
        escalation_message?: string;
        /**
         * The monitor query to notify on with syntax varying depending on what type of monitor you are creating.
         */
        query?: string;
        /**
         * A message to include with notifications for this monitor. Email notifications can be sent to specific users by using the same '@username' notation as events.
         */
        message?: string;
        /**
         * Your DataDog API key.
         */
        api_key: string;
        /**
         * The type of the monitor.
         */
        type?: string;
        /**
         * Default: {'warning': 1, 'ok': 1, 'critical': 1}
         *
         * A dictionary of thresholds by status. Because service checks can have multiple thresholds, we don't define them directly in the query.
         */
        thresholds?: {
          [k: string]: any;
        };
        /**
         * The name of the alert.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * An Ansible module to Create, Delete and Restore server snapshots in CenturyLink Cloud.
       */
      clc_server_snapshot?: {
        /**
         * Default: 7
         *
         * The number of days to keep the server snapshot before it expires.
         */
        expiration_days?: string;
        /**
         * The list of CLC server Ids.
         */
        server_ids:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * The state to insure that the provided resources are in.
         */
        state?: "present" | "absent" | "restore";
        /**
         * Default: True
         *
         * Whether to wait for the provisioning tasks to finish before returning.
         */
        wait?: string;
        [k: string]: any;
      };
      [k: string]: any;
    })[];

/* tslint:disable *//** * This file was automatically generated by json-schema-to-typescript. * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, * and run json-schema-to-typescript to regenerate this file. *//** * A command line script or scripts.Available variables:%project:Directory% - The project directory%project:Name% - The project name%project:Version% - The project version */export type Script = string[];export interface JSONSchemaForDNXProjectJsonFiles {  authors?: string[];  /**   * Pairs of destination folders and glob patterns specifying additional files to include in the output NuGet package. (data type: JSON map). Example: { "tools/": "tools/** /*.*" }   */  packInclude?: {    [k: string]: any;  };  /**   * Glob pattern to specify files to exclude from publish output. (data type: string or array with glob pattern(s)). Example: [ "Folder1/*.ext", "Folder2/*.ext" ]   */  publishExclude?: string[];  /**   * Glob pattern to specify files to compile. (data type: string or array with glob pattern(s)). Example: [ "Folder1/*.ext", "Folder2/*.ext" ]   */  compile?: string[];  /**   * Glob pattern to specify files to exclude from compilation. (data type: string or array with glob pattern(s)). Example: [ "Folder1/*.ext", "Folder2/*.ext" ]   */  compileExclude?: string[];  /**   * Files to include in compilation (overrides 'compileExclude'). (data type: string or array). Example: [ "Folder1/File1.ext", "Folder2/File2.ext" ]   */  compileFiles?: string[];  /**   * Glob pattern to specify files to include as content. (data type: string or array with glob pattern(s)). Example: [ "Folder1/*.ext", "Folder2/*.ext" ]   */  content?: string[];  /**   * Glob pattern to specify files to exclude from the content list. (data type: string or array with glob pattern(s)). Example: [ "Folder1/*.ext", "Folder2/*.ext" ]   */  contentExclude?: string[];  /**   * Files to include as content (overrides 'contentExclude'). (data type: string or array). Example: [ "Folder1/File1.ext", "Folder2/File2.ext" ]   */  contentFiles?: string[];  /**   * Glob pattern to specify files to use for preprocessing. (data type: string or array with glob pattern(s)). Example: [ "Folder1/*.ext", "Folder2/*.ext" ]   */  preprocess?: string[];  /**   * Glob pattern to specify files to exclude from use for preprocessing. (data type: string or array with glob pattern(s)). Example: [ "Folder1/*.ext", "Folder2/*.ext" ]   */  preprocessExclude?: string[];  /**   * Files to include to use for preprocessing (overrides 'preprocessExclude'). (data type: string or array). Example: [ "Folder1/File1.ext", "Folder2/File2.ext" ]   */  preprocessFiles?: string[];  /**   * Glob pattern to specify files to include as resources. (data type: string or array with glob pattern(s)). Example: [ "Folder1/*.ext", "Folder2/*.ext" ]   */  resource?: string[];  /**   * Glob pattern to specify files to exclude from the resources list. (data type: string or array with glob pattern(s)). Example: [ "Folder1/*.ext", "Folder2/*.ext" ]   */  resourceExclude?: string[];  /**   * Files to include as resources (overrides 'resourceExclude'). (data type: string or array). Example: [ "Folder1/File1.ext", "Folder2/File2.ext" ]   */  resourceFiles?: string[];  /**   * Glob pattern to specify files to share with dependent projects. (data type: string or array with glob pattern(s)). Example: [ "Folder1/*.ext", "Folder2/*.ext" ]   */  shared?: string[];  /**   * Glob pattern to specify files to exclude from sharing with dependent projects. (data type: string or array with glob pattern(s)). Example: [ "Folder1/*.ext", "Folder2/*.ext" ]   */  sharedExclude?: string[];  /**   * Files to include for sharing with dependent projects (overrides 'sharedExclude'). (data type: string or array). Example: [ "Folder1/File1.ext", "Folder2/File2.ext" ]   */  sharedFiles?: string[];  /**   * Glob pattern to indicate files to exclude from other glob patterns, in addition to the default patterns specified in 'excludeBuiltIn'. (data type: string or array with glob pattern(s)). Example: [ "Folder1/*.ext", "Folder2/*.ext" ]   */  exclude?: string[];  /**   * Default glob pattern to indicate files to exclude from other glob patterns. (data type: string or array with glob pattern(s)). Example: [ "Folder1/*.ext", "Folder2/*.ext" ]   */  excludeBuiltIn?: string[];  commands?: {    [k: string]: string;  };  compilationOptions?: CompilationOptions;  /**   * Configurations are named groups of compilation settings. There are two defaults built into the runtime: 'Debug' and 'Release'.   */  configurations?: {    [k: string]: {      compilationOptions?: CompilationOptions;      [k: string]: any;    };  };  dependencies?: Dependencies;  /**   * Copyright details for the package.   */  copyright?: string;  /**   * A URL for the image to use as the icon for the package. This should be a 32x32-pixel .png file that has a transparent background.   */  iconUrl?: string;  /**   * A link to the license for the package.   */  licenseUrl?: string;  /**   * A Boolean value that specifies whether the client needs to ensure that the package license (described by licenseUrl) is accepted before the package is installed.   */  requireLicenseAcceptance?: boolean;  owners?: string[];  /**   * A URL for the home page of the package.   */  projectUrl?: string;  /**   * A short description of the package.   */  summary?: string;  /**   * A space-delimited list of tags and keywords that describe the package.   */  tags?: string[];  /**   * The human-friendly title of the package   */  title?: string;  /**   * A description of the changes made in each release of the package.   */  releaseNotes?: string;  /**   * The locale ID for the package, such as en-us.   */  language?: string;  /**   * The description of the project/package.   */  description?: string;  frameworks?: {    [k: string]: ConfigType;  };  /**   * Overrides the generated resource names with custom ones.   */  namedResource?: {    [k: string]: string;  };  /**   * Contains information about the repository where the project is stored.   */  repository?: {    type?: "git";    [k: string]: string;  };  /**   * Scripts to execute during the various stages.   */  scripts?: {    prebuild?: Script;    postbuild?: Script;    prepack?: Script;    postpack?: Script;    prepublish?: Script;    postpublish?: Script;    prerestore?: Script;    postrestore?: Script;    prepare?: Script;    [k: string]: any;  };  /**   * The version of the project/package. Examples: 1.2.3, 1.2.3-beta, 1.2.3-*   */  version?: string;  /**   * Specifies the web server root for the application. In Visual Studio when running IIS this folder will be used as the root of the application. Static files should be put in here.   */  webroot?: string;  [k: string]: any;}export interface CompilationOptions {  define?: string[];  warningsAsErrors?: boolean;  allowUnsafe?: boolean;  emitEntryPoint?: boolean;  optimize?: boolean;  languageVersion?: "csharp1" | "csharp2" | "csharp3" | "csharp4" | "csharp5" | "csharp6" | "experimental";  keyFile?: string;  delaySign?: boolean;  strongName?: boolean;  [k: string]: any;}export interface Dependencies {  [k: string]:    | string    | {        [k: string]: any;      };}export interface ConfigType {  dependencies?: Dependencies;  compilationOptions?: CompilationOptions;  frameworkAssemblies?: Dependencies;  [k: string]: any;}
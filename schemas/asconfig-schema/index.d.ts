/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type NonEmptyString = string;
export type ArrayOfNonEmptyStrings = NonEmptyString[];
export type WebAssemblyFeatures =
  | "sign-extension"
  | "mutable-globals"
  | "nontrapping-f2i"
  | "bulk-memory"
  | "simd"
  | "threads"
  | "exception-handling"
  | "tail-calls"
  | "reference-types"
  | "multi-value"
  | "gc"
  | "memory64";

export interface JSONSchemaForAsconfigJson {
  extends?: NonEmptyString;
  entries?: ArrayOfNonEmptyStrings;
  options?: CompilerOptions;
  targets?: {
    [k: string]: CompilerOptions;
  };
}
export interface CompilerOptions {
  /**
   * Optimizes the module.
   */
  optimize?: boolean;
  /**
   * How much to focus on optimizing code.
   */
  optimizeLevel?: number;
  /**
   * How much to focus on shrinking code size.
   */
  shrinkLevel?: number;
  /**
   * Re-optimizes until no further improvements can be made.
   */
  converge?: boolean;
  /**
   * Specifies the base directory of input and output files.
   */
  baseDir?: string;
  /**
   * Specifies the WebAssembly output file (.wasm).
   */
  outFile?: string;
  /**
   * Specifies the WebAssembly text output file (.wat).
   */
  textFile?: string;
  /**
   * Specified the bindings to generate.
   */
  bindings?: ("esm" | "raw") | ("esm" | "raw")[];
  /**
   * Enables source map generation. Optionally takes the URL.
   */
  sourceMap?: boolean | NonEmptyString;
  /**
   * Specifies the runtime variant to include in the program.
   */
  runtime?: ("incremental" | "minimal" | "stub") | NonEmptyString;
  /**
   * Disallows the use of unsafe features in user code.
   */
  noUnsafe?: boolean;
  /**
   * Enables debug information in emitted binaries.
   */
  debug?: boolean;
  /**
   * Replaces assertions with just their value without trapping.
   */
  noAssert?: boolean;
  /**
   * Performs compilation as usual but does not emit code.
   */
  noEmit?: boolean;
  /**
   * Imports the memory provided as 'env.memory'.
   */
  importMemory?: boolean;
  /**
   * Does not export the memory as 'memory'.
   */
  noExportMemory?: boolean;
  /**
   * Sets the initial memory size in pages.
   */
  initialMemory?: number;
  /**
   * Sets the maximum memory size in pages.
   */
  maximumMemory?: number;
  /**
   * Declare memory as shared. Requires maximumMemory.
   */
  sharedMemory?: number;
  /**
   * Assume that imported memory is zero filled. Requires importMemory.
   */
  zeroFilledMemory?: boolean;
  /**
   * Sets the start offset of compiler-generated static memory.
   */
  memoryBase?: number;
  /**
   * Imports the function table provided as 'env.table'.
   */
  importTable?: boolean;
  /**
   * Exports the function table as 'table'.
   */
  exportTable?: boolean;
  /**
   * Exports the start function instead of calling it implicitly.
   */
  exportStart?: string;
  /**
   * Adds one or multiple paths to custom library components.
   */
  lib?: NonEmptyString | ArrayOfNonEmptyStrings;
  /**
   * Adds one or multiple paths to package resolution.
   */
  path?: NonEmptyString | ArrayOfNonEmptyStrings;
  /**
   * Aliases a global object under another name.
   */
  use?: NonEmptyString | ArrayOfNonEmptyStrings;
  /**
   * Sets the trap mode to use.
   */
  trapMode?: "allow" | "clamp" | "js";
  /**
   * Specifies additional Binaryen passes to run.
   */
  runPasses?: NonEmptyString | ArrayOfNonEmptyStrings;
  /**
   * Skips validating the module using Binaryen.
   */
  noValidate?: boolean;
  /**
   * Enables WebAssembly features that are disabled by default.
   */
  enable?: WebAssemblyFeatures | WebAssemblyFeatures[];
  /**
   * Disables WebAssembly features that are enabled by default.
   */
  disable?: WebAssemblyFeatures | WebAssemblyFeatures[];
  /**
   * Specifies the path to a custom transform to 'require'.
   */
  transform?: NonEmptyString | ArrayOfNonEmptyStrings;
  /**
   * Make yourself sad for no good reason.
   */
  pedantic?: boolean;
  /**
   * Prints measuring information on I/O and compile times.
   */
  stats?: boolean;
  /**
   * Disables terminal colors.
   */
  noColors?: boolean;
  /**
   * Exports the runtime helpers (__new, __collect etc.).
   */
  exportRuntime?: boolean;
  /**
   * Exports the runtime helpers (__new, __collect etc.).
   */
  stackSize?: number;
  /**
   * Enforces very low (<64k) memory constraints.
   */
  lowMemoryLimit?: number;
  /**
   * Sets the start offset of emitted table elements.
   */
  tableBase?: number;
  /**
   * Uses the specified Wasm binary of the compiler.
   */
  wasm?: string;
}

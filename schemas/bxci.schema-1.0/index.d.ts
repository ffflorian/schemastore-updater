/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Regular expression for validating branch names
 */
export type BranchPattern = string;
export type OutputHelmUpdatesProperties = {
  /**
   * Yaml property (full path) to be updated
   */
  key: string;
  /**
   * Environment variable whose value will be used to update the property
   */
  env?: string;
  /**
   * Value to update the given property
   */
  value?: string;
} & OutputHelmUpdatesProperties1;
export type OutputHelmUpdatesProperties1 = {
  [k: string]: unknown | undefined;
};

/**
 * CI configuration for Amdocs Bill Experience projects
 */
export interface BxciSchema1 {
  /**
   * Project properties
   */
  project: {
    /**
     * Project's name (used by Jenkins, Docker and Sonar)
     */
    name?: string;
    /**
     * Project type
     */
    type?: "npm" | "maven" | "mvn";
    /**
     * ID of a managed maven or npm Jenkins file
     */
    settings?: string;
  };
  config: {
    jenkins_runtime: {
      /**
       * Specifies how to build the Docker container (from an existing image or from a local Dockerfile)
       */
      docker: {
        /**
         * Prebuilt Docker image (has precedence over dockerfile)
         */
        image?: string;
        /**
         * Path to a local Dockerfile
         */
        dockerfile?: string;
      };
    };
    /**
     * Describes on which branch names a build will be run
     */
    branch?: {
      branch_pattern?: BranchPattern;
      /**
       * Disables branch name validation
       */
      disable_validation?: boolean;
    };
    build?: {
      /**
       * Whether Jenkins workspace should be cleaned after the build
       */
      clean_workspace_after_run?: boolean;
      checkmarx?: Checkmarx;
      static_analysis?: Sonar;
    };
  };
  /**
   * Additional services required by the project or application.
   */
  services?: ("Postgres" | "Postgis" | "Redis" | "Mssql" | "Mysql" | "Mongodb" | "Elasticsearch")[];
  /**
   * Custom environment variables to be added to the pipeline
   */
  environment?: {
    [k: string]: unknown | undefined;
  };
  /**
   * Jenkins environment variables that are passed to the Docker container
   */
  jenkinsEnvironment?: string[];
  /**
   * Defines the stages and steps required to build the project.
   */
  stages: {
    [k: string]: Stage;
  };
  /**
   * Describes artifacts generated after all the stages have been run
   */
  output?: {
    docker?: OutputDocker;
    helm?: OutputHelm;
  };
  /**
   * List of artifacts to archive (wildcards allowed). Check out https://www.jenkins.io/doc/pipeline/steps/core/#archiveartifacts-archive-the-artifacts
   */
  archive?: unknown[];
  /**
   * Build timeout in seconds
   */
  timeout?: number;
  [k: string]: unknown | undefined;
}
/**
 * Adds a Static Analysis stage for CheckMarx. See https://www.jenkins.io/doc/pipeline/steps/checkmarx/ for all the configuration options.
 */
export interface Checkmarx {
  enabled?: boolean;
  groupId?: string;
  preset?: string;
  projectName?: string;
  /**
   * Regular expression for validating branch names
   */
  branch_pattern?: string;
  useOwnServerCredentials?: boolean;
  serverUrl?: string;
  credentialsId?: string;
  generatePdfReport?: boolean;
  sourceEncoding?: string;
  isProxy?: boolean;
  waitForResultsEnabled?: boolean;
}
/**
 * Adds a Static Analysis stage for Sonar.
 */
export interface Sonar {
  enabled?: boolean;
  /**
   * Waits for analysis result and breaks the build when the project fails for some quality gates.
   */
  breaks_build?: boolean;
  /**
   * Seconds to wait for the result of the quality gate. Only applies when breaks_build is set to true
   */
  timeout?: number;
}
/**
 * Stage name in the Jenkins pipeline
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^\w+( \w+)*$".
 */
export interface Stage {
  /**
   * List of steps to run
   */
  steps: unknown[];
  /**
   * Condition that should be met to run this step
   */
  when?: {
    /**
     * Specifies in which branches this stage will be executed
     */
    branch?: string;
    [k: string]: unknown | undefined;
  };
}
export interface OutputDocker {
  /**
   * Path to Dockerfile used to generate the docker image
   */
  dockerfile: string;
  /**
   * Image name for the generated docker image. Cannot include tag. Tag will be automatically generated based on project version.
   */
  image_name: string;
  publish?: OutputDockerPublish;
  [k: string]: unknown | undefined;
}
/**
 * Docker publishing information. If not present, the image won't be published
 */
export interface OutputDockerPublish {
  /**
   * Indicates on what branches publishing is enabled. Typically, master and release branches
   */
  branch: string;
  /**
   * Docker registry. Must include protocol (http|https) and port
   */
  registry: string;
  /**
   * Jenkins credentials ID for publishing into the specified Docker registry
   */
  credentials: string;
  [k: string]: unknown | undefined;
}
export interface OutputHelm {
  /**
   * Path to the folder with all required chart config files
   */
  path: string;
  /**
   * Updates that must be done before packing Helm chart. It's a list of objects that specifies which updates must be done on which files
   */
  updates: OutputHelmUpdates[];
  publish: OutputHelmPublish;
}
export interface OutputHelmUpdates {
  /**
   * Name (including path from Helm object path) of the file to be updated. Only supports yaml files
   */
  file: string;
  /**
   * A list of properties to update. It can be updated with a fixed value or environment variable
   */
  properties: OutputHelmUpdatesProperties[];
}
/**
 * Allows to publish the Helm chart
 */
export interface OutputHelmPublish {
  /**
   * Indicates on which branches publishing is enabled. Typically, master and release branches
   */
  branch: string;
  /**
   * Helm chart repository. Must include protocol, host, port (if needed) and path
   */
  repository: string;
  /**
   * Jenkins credentials Id for this repository for uploading the chart
   */
  credentials: string;
}

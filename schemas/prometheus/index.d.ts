/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Prometheus configuration file
 */
export type Prometheus = Prometheus1 & Prometheus2;
/**
 * The labels to add to any time series or alerts when communicating with external systems (federation, remote storage, Alertmanager).
 */
export type Labels = {
  [k: string]: LabelValue;
} & ({
  [k: string]: LabelValue;
} | null);
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z_][a-zA-Z0-9_]*$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z_][a-zA-Z0-9_]*$".
 */
export type LabelValue = string;
export type FilepathGlob = string;
export type Auth = {
  [k: string]: unknown;
} & {
  [k: string]: unknown;
} & {
  [k: string]: unknown;
} & {
  [k: string]: unknown;
} & {
  [k: string]: unknown;
} & {
  [k: string]: unknown;
};
export type RelabelConfigs =
  | {
      /**
       * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
       */
      source_labels?: LabelName[];
      /**
       * Separator placed between concatenated source label values.
       */
      separator?: string;
      /**
       * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
       */
      target_label?: string;
      /**
       * Regular expression against which the extracted value is matched.
       */
      regex?: string;
      /**
       * Modulus to take of the hash of the source label values.
       */
      modulus?: number;
      /**
       * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available.
       */
      replacement?: string;
      /**
       * Action to perform based on regex matching.
       */
      action?: "replace" | "keep" | "drop" | "hashmod" | "labelmap" | "labeldrop" | "labelkeep";
      [k: string]: unknown;
    }[]
  | null;
export type LabelName = string;
export type Prometheus2 = {
  /**
   * The global configuration specifies parameters that are valid in all other configuration contexts. They also serve as defaults for other configuration sections.
   */
  global?: {
    /**
     * How frequently to scrape targets by default.
     */
    scrape_interval?: string | null;
    /**
     * How long until a scrape request times out.
     */
    scrape_timeout?: string | null;
    /**
     * How frequently to evaluate rules.
     */
    evaluation_interval?: string | null;
    external_labels?: Labels;
    /**
     * File to which PromQL queries are logged. Reloading the configuration will reopen the file.
     */
    query_log_file?: string | null;
  } | null;
  /**
   * Rule files specifies a list of globs. Rules and alerts are read from all matching files.
   */
  rule_files?: FilepathGlob[] | null;
  /**
   * Settings related to the remote write feature.
   */
  remote_write?: Auth[] | null;
  /**
   * Settings related to the remote read feature.
   */
  remote_read?: Auth[] | null;
  /**
   * A list of scrape configurations.
   */
  scrape_configs?: Auth[] | null;
  /**
   * Alerting specifies settings related to the Alertmanager.
   */
  alerting?: {
    alert_relabel_configs?: RelabelConfigs;
    alertmanagers?: Auth[] | null;
    [k: string]: unknown;
  } | null;
  /**
   * Storage related settings that are runtime reloadable.
   */
  storage?:
    | {
        max_exemplars?: number | null;
      }[]
    | null;
} | null;

export interface Prometheus1 {
  /**
   * The global configuration specifies parameters that are valid in all other configuration contexts. They also serve as defaults for other configuration sections.
   */
  global?: {
    /**
     * How frequently to scrape targets by default.
     */
    scrape_interval?: string | null;
    /**
     * How long until a scrape request times out.
     */
    scrape_timeout?: string | null;
    /**
     * How frequently to evaluate rules.
     */
    evaluation_interval?: string | null;
    external_labels?: Labels;
    /**
     * File to which PromQL queries are logged. Reloading the configuration will reopen the file.
     */
    query_log_file?: string | null;
  } | null;
  /**
   * Rule files specifies a list of globs. Rules and alerts are read from all matching files.
   */
  rule_files?: FilepathGlob[] | null;
  /**
   * Settings related to the remote write feature.
   */
  remote_write?: Auth[] | null;
  /**
   * Settings related to the remote read feature.
   */
  remote_read?: Auth[] | null;
  /**
   * A list of scrape configurations.
   */
  scrape_configs?: Auth[] | null;
  /**
   * Alerting specifies settings related to the Alertmanager.
   */
  alerting?: {
    alert_relabel_configs?: RelabelConfigs;
    alertmanagers?: Auth[] | null;
    [k: string]: unknown;
  } | null;
  /**
   * Storage related settings that are runtime reloadable.
   */
  storage?:
    | {
        max_exemplars?: number | null;
      }[]
    | null;
}

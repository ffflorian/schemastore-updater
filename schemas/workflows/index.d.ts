/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Orchestrate Workflows consisting of Google Cloud APIs, SaaS APIs or private API endpoints.
 */
export type GoogleCloudWorkflowsConfigFile =
  | StepArray
  | {
      [k: string]: Subworkflow;
    };
/**
 * A list of steps.
 *
 * @minItems 1
 */
export type StepArray = [
  {
    [k: string]: Step;
  },
  ...{
    [k: string]: Step;
  }[]
];
/**
 * A list of steps to run in this switch statement.
 *
 * @minItems 1
 */
export type StepArray1 = [
  {
    [k: string]: Step;
  },
  ...{
    [k: string]: Step;
  }[]
];
/**
 * Steps for loop
 * https://cloud.google.com/workflows/docs/reference/syntax/iteration
 *
 * @minItems 1
 */
export type StepArray2 = [
  {
    [k: string]: Step;
  },
  ...{
    [k: string]: Step;
  }[]
];
/**
 * A list of steps
 *
 * @minItems 1
 */
export type StepArray3 = [
  {
    [k: string]: Step;
  },
  ...{
    [k: string]: Step;
  }[]
];
/**
 * An array of objects with a single step.
 *
 * @minItems 1
 */
export type StepArray4 = [
  {
    [k: string]: Step;
  },
  ...{
    [k: string]: Step;
  }[]
];
/**
 * An array of objects with a single step.
 *
 * @minItems 1
 */
export type StepArray5 = [
  {
    [k: string]: Step;
  },
  ...{
    [k: string]: Step;
  }[]
];

/**
 * A single workflow step.
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^.*$".
 */
export interface Step {
  /**
   * Required
   */
  call?: ("http.get" | "http.post" | "http.request" | "sys.sleep") | string;
  /**
   * Arguments to a workflow step.
   */
  args?: {
    url?: string | string;
    /**
     * Required if using call type http.request. The type of HTTP request method to use.
     */
    method?: "GET" | "HEAD" | "POST" | "PUT" | "DELETE" | "CONNECT" | "OPTIONS" | "TRACE" | "PATCH";
    /**
     * Request headers.
     */
    headers?: {
      [k: string]: unknown;
    };
    /**
     * Request body.
     */
    body?: {
      [k: string]: unknown;
    };
    /**
     * Request query parameters.
     */
    query?: {
      [k: string]: unknown;
    };
    /**
     * Required if the API being called requires authentication.
     */
    auth?: {
      /**
       * The type of authentication.
       */
      type?: "OIDC" | "OAuth2";
    };
    /**
     * Time in seconds. How long a request is allowed to run before throwing an exception.
     */
    timeout?: number;
    /**
     * The number of seconds to sleep.
     */
    seconds?: number;
  };
  /**
   * Define a dictionary.
   */
  assign?: {
    [k: string]: unknown;
  }[];
  /**
   * Variable name where the result of an HTTP invocation step is stored.
   */
  result?: string;
  /**
   * A switch block.
   */
  switch?: {
    /**
     * An expression to switch on.
     */
    condition: string;
    /**
     * The next step to jump to. "end" to terminate.
     */
    next?: string;
    steps?: StepArray1;
    /**
     * Stop a workflow's execution and return a value, variable, or expression.
     */
    return?: {
      [k: string]: unknown;
    };
    /**
     * Raise an exception.
     */
    raise?:
      | string
      | {
          [k: string]: unknown;
        };
  }[];
  /**
   * The next step to jump to. "end" to terminate.
   */
  next?: string;
  /**
   * Stop a workflow's execution and return a value, variable, or expression.
   */
  return?: {
    [k: string]: unknown;
  };
  try?: Step1;
  /**
   * Optional. If omitted, all other fields are required. Options include ${http.default_retry} and ${http.default_retry_non_idempotent}. Allows you to specify a default retry policy to use. If you specify a retry policy, omit all other fields in the retry block.
   */
  retry?: {
    /**
     * Required if you don't select a default retry policy. Defines which error codes will be retried. Options include ${http.default_retry_predicate}, ${http.default_retry_predicate_non_idempotent}, or a custom predicate defined as a subworkflow.
     */
    predicate?: string;
    /**
     * Maximum number of times a step will be retried.
     */
    max_retries?: number;
    /**
     * Block that controls how retries occur.
     */
    backoff?: {
      /**
       * Delay in seconds between the initial failure and the first retry.
       */
      initial_delay?: number;
      /**
       * Maximum delay in seconds between retries.
       */
      max_delay?: number;
      /**
       * Multiplier applied to the previous delay to calculate the delay for the subsequent retry.
       */
      multiplier?: number;
    };
  };
  /**
   * Except a try clause.
   */
  except?:
    | Step2
    | {
        /**
         * Name of a dictionary variable that contains the error message.
         */
        as?: string;
        steps?: StepArray4;
      };
  /**
   * Raise an exception.
   */
  raise?:
    | string
    | {
        [k: string]: unknown;
      };
  for?: For;
  /**
   * Run branches or iterations in parallel
   */
  parallel?: {
    /**
     * The action for other branches when an exception occurs
     */
    exception_policy?: "continueAll";
    /**
     * A list of shared variables
     */
    shared?: string[];
    /**
     * An upper limit for branches/iterations to perform concurrently
     */
    concurrency_limit?: number;
    /**
     * A list of branches that will run concurrently
     *
     * @minItems 2
     * @maxItems 10
     */
    branches?:
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ];
    for?: For1;
  };
}
/**
 * Try a single step or a list of steps.
 */
export interface Step1 {
  /**
   * Required
   */
  call?: ("http.get" | "http.post" | "http.request" | "sys.sleep") | string;
  /**
   * Arguments to a workflow step.
   */
  args?: {
    url?: string | string;
    /**
     * Required if using call type http.request. The type of HTTP request method to use.
     */
    method?: "GET" | "HEAD" | "POST" | "PUT" | "DELETE" | "CONNECT" | "OPTIONS" | "TRACE" | "PATCH";
    /**
     * Request headers.
     */
    headers?: {
      [k: string]: unknown;
    };
    /**
     * Request body.
     */
    body?: {
      [k: string]: unknown;
    };
    /**
     * Request query parameters.
     */
    query?: {
      [k: string]: unknown;
    };
    /**
     * Required if the API being called requires authentication.
     */
    auth?: {
      /**
       * The type of authentication.
       */
      type?: "OIDC" | "OAuth2";
    };
    /**
     * Time in seconds. How long a request is allowed to run before throwing an exception.
     */
    timeout?: number;
    /**
     * The number of seconds to sleep.
     */
    seconds?: number;
  };
  /**
   * Define a dictionary.
   */
  assign?: {
    [k: string]: unknown;
  }[];
  /**
   * Variable name where the result of an HTTP invocation step is stored.
   */
  result?: string;
  /**
   * A switch block.
   */
  switch?: {
    /**
     * An expression to switch on.
     */
    condition: string;
    /**
     * The next step to jump to. "end" to terminate.
     */
    next?: string;
    steps?: StepArray1;
    /**
     * Stop a workflow's execution and return a value, variable, or expression.
     */
    return?: {
      [k: string]: unknown;
    };
    /**
     * Raise an exception.
     */
    raise?:
      | string
      | {
          [k: string]: unknown;
        };
  }[];
  /**
   * The next step to jump to. "end" to terminate.
   */
  next?: string;
  /**
   * Stop a workflow's execution and return a value, variable, or expression.
   */
  return?: {
    [k: string]: unknown;
  };
  try?: Step1;
  /**
   * Optional. If omitted, all other fields are required. Options include ${http.default_retry} and ${http.default_retry_non_idempotent}. Allows you to specify a default retry policy to use. If you specify a retry policy, omit all other fields in the retry block.
   */
  retry?: {
    /**
     * Required if you don't select a default retry policy. Defines which error codes will be retried. Options include ${http.default_retry_predicate}, ${http.default_retry_predicate_non_idempotent}, or a custom predicate defined as a subworkflow.
     */
    predicate?: string;
    /**
     * Maximum number of times a step will be retried.
     */
    max_retries?: number;
    /**
     * Block that controls how retries occur.
     */
    backoff?: {
      /**
       * Delay in seconds between the initial failure and the first retry.
       */
      initial_delay?: number;
      /**
       * Maximum delay in seconds between retries.
       */
      max_delay?: number;
      /**
       * Multiplier applied to the previous delay to calculate the delay for the subsequent retry.
       */
      multiplier?: number;
    };
  };
  /**
   * Except a try clause.
   */
  except?:
    | Step2
    | {
        /**
         * Name of a dictionary variable that contains the error message.
         */
        as?: string;
        steps?: StepArray4;
      };
  /**
   * Raise an exception.
   */
  raise?:
    | string
    | {
        [k: string]: unknown;
      };
  for?: For;
  /**
   * Run branches or iterations in parallel
   */
  parallel?: {
    /**
     * The action for other branches when an exception occurs
     */
    exception_policy?: "continueAll";
    /**
     * A list of shared variables
     */
    shared?: string[];
    /**
     * An upper limit for branches/iterations to perform concurrently
     */
    concurrency_limit?: number;
    /**
     * A list of branches that will run concurrently
     *
     * @minItems 2
     * @maxItems 10
     */
    branches?:
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ];
    for?: For1;
  };
}
/**
 * A single workflow step.
 */
export interface Step2 {
  /**
   * Required
   */
  call?: ("http.get" | "http.post" | "http.request" | "sys.sleep") | string;
  /**
   * Arguments to a workflow step.
   */
  args?: {
    url?: string | string;
    /**
     * Required if using call type http.request. The type of HTTP request method to use.
     */
    method?: "GET" | "HEAD" | "POST" | "PUT" | "DELETE" | "CONNECT" | "OPTIONS" | "TRACE" | "PATCH";
    /**
     * Request headers.
     */
    headers?: {
      [k: string]: unknown;
    };
    /**
     * Request body.
     */
    body?: {
      [k: string]: unknown;
    };
    /**
     * Request query parameters.
     */
    query?: {
      [k: string]: unknown;
    };
    /**
     * Required if the API being called requires authentication.
     */
    auth?: {
      /**
       * The type of authentication.
       */
      type?: "OIDC" | "OAuth2";
    };
    /**
     * Time in seconds. How long a request is allowed to run before throwing an exception.
     */
    timeout?: number;
    /**
     * The number of seconds to sleep.
     */
    seconds?: number;
  };
  /**
   * Define a dictionary.
   */
  assign?: {
    [k: string]: unknown;
  }[];
  /**
   * Variable name where the result of an HTTP invocation step is stored.
   */
  result?: string;
  /**
   * A switch block.
   */
  switch?: {
    /**
     * An expression to switch on.
     */
    condition: string;
    /**
     * The next step to jump to. "end" to terminate.
     */
    next?: string;
    steps?: StepArray1;
    /**
     * Stop a workflow's execution and return a value, variable, or expression.
     */
    return?: {
      [k: string]: unknown;
    };
    /**
     * Raise an exception.
     */
    raise?:
      | string
      | {
          [k: string]: unknown;
        };
  }[];
  /**
   * The next step to jump to. "end" to terminate.
   */
  next?: string;
  /**
   * Stop a workflow's execution and return a value, variable, or expression.
   */
  return?: {
    [k: string]: unknown;
  };
  try?: Step1;
  /**
   * Optional. If omitted, all other fields are required. Options include ${http.default_retry} and ${http.default_retry_non_idempotent}. Allows you to specify a default retry policy to use. If you specify a retry policy, omit all other fields in the retry block.
   */
  retry?: {
    /**
     * Required if you don't select a default retry policy. Defines which error codes will be retried. Options include ${http.default_retry_predicate}, ${http.default_retry_predicate_non_idempotent}, or a custom predicate defined as a subworkflow.
     */
    predicate?: string;
    /**
     * Maximum number of times a step will be retried.
     */
    max_retries?: number;
    /**
     * Block that controls how retries occur.
     */
    backoff?: {
      /**
       * Delay in seconds between the initial failure and the first retry.
       */
      initial_delay?: number;
      /**
       * Maximum delay in seconds between retries.
       */
      max_delay?: number;
      /**
       * Multiplier applied to the previous delay to calculate the delay for the subsequent retry.
       */
      multiplier?: number;
    };
  };
  /**
   * Except a try clause.
   */
  except?:
    | Step2
    | {
        /**
         * Name of a dictionary variable that contains the error message.
         */
        as?: string;
        steps?: StepArray4;
      };
  /**
   * Raise an exception.
   */
  raise?:
    | string
    | {
        [k: string]: unknown;
      };
  for?: For;
  /**
   * Run branches or iterations in parallel
   */
  parallel?: {
    /**
     * The action for other branches when an exception occurs
     */
    exception_policy?: "continueAll";
    /**
     * A list of shared variables
     */
    shared?: string[];
    /**
     * An upper limit for branches/iterations to perform concurrently
     */
    concurrency_limit?: number;
    /**
     * A list of branches that will run concurrently
     *
     * @minItems 2
     * @maxItems 10
     */
    branches?:
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ]
      | [
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          },
          {
            steps?: StepArray3;
            [k: string]: unknown;
          }
        ];
    for?: For1;
  };
}
/**
 * Iterates over a sequence of numbers or through a collection of data
 * https://cloud.google.com/workflows/docs/reference/syntax/syntax-search
 */
export interface For {
  /**
   * A loop variable name
   * https://cloud.google.com/workflows/docs/reference/syntax/iteration
   */
  value?: string;
  /**
   * An index variable name
   * https://cloud.google.com/workflows/docs/reference/syntax/iteration
   */
  index?: string;
  /**
   * A number's range
   * https://cloud.google.com/workflows/docs/reference/syntax/iteration
   *
   * @minItems 2
   * @maxItems 2
   */
  range?: [number, number];
  /**
   * A list expression
   * https://cloud.google.com/workflows/docs/reference/syntax/iteration
   */
  in?: unknown[];
  steps?: StepArray2;
}
/**
 * Iterates over a sequence of numbers or through a collection of data
 * https://cloud.google.com/workflows/docs/reference/syntax/syntax-search
 */
export interface For1 {
  /**
   * A loop variable name
   * https://cloud.google.com/workflows/docs/reference/syntax/iteration
   */
  value?: string;
  /**
   * An index variable name
   * https://cloud.google.com/workflows/docs/reference/syntax/iteration
   */
  index?: string;
  /**
   * A number's range
   * https://cloud.google.com/workflows/docs/reference/syntax/iteration
   *
   * @minItems 2
   * @maxItems 2
   */
  range?: [number, number];
  /**
   * A list expression
   * https://cloud.google.com/workflows/docs/reference/syntax/iteration
   */
  in?: unknown[];
  steps?: StepArray2;
}
/**
 * A subworkflow.
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^.*$".
 */
export interface Subworkflow {
  /**
   * A list of parameters.
   */
  params?: string[];
  steps?: StepArray5;
}

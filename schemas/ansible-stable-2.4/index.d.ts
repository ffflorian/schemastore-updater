/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Auto-Generated JSON Schema for Ansible-stable 2.4 (https://github.com/shaded-enmity/ansible-schema-generator)
 */
export type Ansible24 = (
  | {
      shell: string;
      args?: {
        /**
         * a filename, when it already exists, this step will B(not) be run.
         */
        creates?: string;
        /**
         * change the shell used to execute the command. Should be an absolute path to the executable.
         */
        executable?: string;
        /**
         * cd into this directory before running the command
         */
        chdir?: string;
        /**
         * Set the stdin of the command directly to the specified value.
         */
        stdin?: string;
        /**
         * a filename, when it does not exist, this step will B(not) be run.
         */
        removes?: string;
        /**
         * Default: True
         *
         * if command warnings are on in ansible.cfg, do not warn about this particular line if set to no/false.
         */
        warn?: string;
        [k: string]: any;
      };
      name?: string;
      [k: string]: any;
    }
  | {
      raw: string;
      args?: {
        /**
         * change the shell used to execute the command. Should be an absolute path to the executable.
         * when using privilege escalation (C(become)), a default shell will be assigned if one is not provided as privilege escalation requires a shell.
         */
        executable?: string;
        [k: string]: any;
      };
      name?: string;
      [k: string]: any;
    }
  | {
      args?: {
        /**
         * Default: yes
         *
         * If command_warnings are on in ansible.cfg, do not warn about this particular line if set to C(no).
         */
        warn?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A filename or (since 2.0) glob pattern, when it already exists, this step will B(not) be run.
         */
        creates?: string;
        /**
         * Change into this directory before running the command.
         */
        chdir?: string;
        /**
         * A filename or (since 2.0) glob pattern, when it does not exist, this step will B(not) be run.
         */
        removes?: string;
        /**
         * Set the stdin of the command directly to the specified value.
         */
        stdin?: string;
        [k: string]: any;
      };
      command: string;
      name?: string;
      [k: string]: any;
    }
  | {
      args?: {
        /**
         * a filename, when it already exists, this step will B(not) be run.
         */
        creates?: string;
        /**
         * cd into this directory on the remote node before running the script
         */
        chdir?: string;
        /**
         * a filename, when it does not exist, this step will B(not) be run.
         */
        removes?: string;
        [k: string]: any;
      };
      name?: string;
      script: string;
      [k: string]: any;
    }
  | {
      [k: string]: any;
    }
  | {
      [k: string]: any;
    }
  | {
      [k: string]: any;
    }
  | {
      [k: string]: any;
    }
  | {
      /**
       * List of file names to ignore.
       */
      ignore_files?: any[];
      /**
       * Limit the files that are loaded within any directory to this regular expression.
       */
      files_matching?: string;
      /**
       * When using C(dir), this module will, by default, recursively go through each sub directory and load up the variables. By explicitly setting the depth, this module will only go as deep as the depth.
       */
      depth?: string;
      /**
       * Default: ['yaml', 'yml', 'json']
       *
       * List of file extensions to read when using C(dir).
       */
      extensions?: any[];
      /**
       * The file name from which variables should be loaded.
       * If the path is relative, it will look for the file in vars/ subdirectory of a role or relative to playbook.
       */
      file?: string;
      /**
       * The directory name from which the variables should be loaded.
       * If the path is relative, it will look for the file in vars/ subdirectory of a role or relative to playbook.
       */
      dir?: string;
      /**
       * The name of a variable into which assign the included vars. If omitted (null) they will be made top level vars.
       */
      name?: string;
      [k: string]: any;
    }
  | {
      shell: string;
      args?: {
        /**
         * Default: True
         *
         * if command warnings are on in ansible.cfg, do not warn about this particular line if set to no/false.
         */
        warn?: string;
        /**
         * a filename, when it already exists, this step will B(not) be run.
         */
        creates?: string;
        /**
         * change the shell used to execute the command. Should be an absolute path to the executable.
         */
        executable?: string;
        /**
         * cd into this directory before running the command
         */
        chdir?: string;
        /**
         * a filename, when it does not exist, this step will B(not) be run.
         */
        removes?: string;
        [k: string]: any;
      };
      name?: string;
      [k: string]: any;
    }
  | {
      raw: string;
      args?: {
        /**
         * change the shell used to execute the command. Should be an absolute path to the executable.
         * when using privilege escalation (C(become)), a default shell will be assigned if one is not provided as privilege escalation requires a shell.
         */
        executable?: string;
        [k: string]: any;
      };
      name?: string;
      [k: string]: any;
    }
  | {
      args?: {
        /**
         * Default: True
         *
         * if command warnings are on in ansible.cfg, do not warn about this particular line if set to no/false.
         */
        warn?: string;
        /**
         * a filename or (since 2.0) glob pattern, when it already exists, this step will B(not) be run.
         */
        creates?: string;
        /**
         * change the shell used to execute the command. Should be an absolute path to the executable.
         */
        executable?: string;
        /**
         * cd into this directory before running the command
         */
        chdir?: string;
        /**
         * a filename or (since 2.0) glob pattern, when it does not exist, this step will B(not) be run.
         */
        removes?: string;
        [k: string]: any;
      };
      command: string;
      name?: string;
      [k: string]: any;
    }
  | {
      args?: {
        /**
         * a filename, when it already exists, this step will B(not) be run.
         */
        creates?: string;
        /**
         * a filename, when it does not exist, this step will B(not) be run.
         */
        removes?: string;
        [k: string]: any;
      };
      name?: string;
      script: string;
      [k: string]: any;
    }
  | {
      [k: string]: any;
    }
  | {
      /**
       * List of file names to ignore. The defaults can not be overridden, but can be extended.
       */
      ignore_files?: any[];
      /**
       * Limit the variables that are loaded within any directory to this regular expression.
       */
      files_matching?: string;
      /**
       * By default, this module will recursively go through each sub directory and load up the variables. By explicitly setting the depth, this module will only go as deep as the depth.
       */
      depth?: string;
      /**
       * The file name from which variables should be loaded.
       * If the path is relative, it will look for the file in vars/ subdirectory of a role or relative to playbook.
       */
      file?: string;
      /**
       * The directory name from which the variables should be loaded.
       * If the path is relative, it will look for the file in vars/ subdirectory of a role or relative to playbook.
       */
      dir?: string;
      /**
       * The name of a variable into which assign the included vars, if omitted (null) they will be made top level vars.
       */
      name?: string;
      [k: string]: any;
    }
  | {
      /**
       * Creates or terminates task definitions
       */
      ecs_taskdefinition?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module is used to configure AlertScriptConfig object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_alertscriptconfig?: {
        username?: string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * User defined alert action script.
         * Please refer to kb.avinetworks.com for more information.
         */
        action_script?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        controller?: string;
        tenant?: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * A user-friendly name of the script.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Create, update and delete an Azure Container Service Instance.
       */
      azure_rm_acs?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Master profile suboptions.
         */
        master_profile:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        /**
         * Name of the Container Services instance.
         */
        name: string;
        /**
         * Name of a resource group where the Container Services exists or will be created.
         */
        resource_group: string;
        tags?: {
          [k: string]: any;
        };
        /**
         * Should VM Diagnostics be enabled for the Container Service VM's.
         */
        diagnostics_profile:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ad_user?: string;
        append_tags?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        cloud_environment?: string;
        /**
         * Specifies the Container Orchestration Platform to use. Currently can be either DCOS, Kubernetes or Swarm.
         */
        orchestration_platform: "DCOS" | "Kubernetes" | "Swarm";
        /**
         * The linux profile suboptions.
         */
        linux_profile:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        secret?: string;
        /**
         * Default: present
         *
         * Assert the state of the ACS. Use 'present' to create or update an ACS and 'absent' to delete it.
         */
        state?: "absent" | "present";
        /**
         * The agent pool profile suboptions.
         */
        agent_pool_profiles:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        client_id?: string;
        subscription_id?: string;
        /**
         * The service principal suboptions.
         */
        service_principal?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        tenant?: string;
        /**
         * Default: resource_group location
         *
         * Valid azure location. Defaults to location of the resource group.
         */
        location?: string;
        [k: string]: any;
      };
      /**
       * Sends a request to the remote device running JUNOS to execute the specified RPC using the NetConf transport.  The reply is then returned to the playbook in the C(xml) key.  If an alternate output format is requested, the reply is transformed to the requested output.
       */
      junos_rpc?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * The C(args) argument provides a set of arguments for the RPC call and are encoded in the request message.  This argument accepts a set of key=value arguments.
         */
        args?: {
          [k: string]: any;
        };
        /**
         * The C(rpc) argument specifies the RPC call to send to the remote devices to be executed.  The RPC Reply message is parsed and the contents are returned to the playbook.
         */
        rpc: string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Default: xml
         *
         * The C(output) argument specifies the desired output of the return data.  This argument accepts one of C(xml), C(text), or C(json).  For C(json), the JUNOS device must be running a version of software that supports native JSON output.
         */
        output?: "xml" | "json" | "text";
        password?: string;
        port?: number | string;
        transport?: string;
        [k: string]: any;
      };
      /**
       * Execute vrouter-ospf-add, vrouter-ospf-remove command.
       * This command adds/removes Open Shortest Path First(OSPF) routing protocol to a virtual router(vRouter) service.
       */
      pn_ospf?: {
        /**
         * Stub area number for the configuration. Required for vrouter-ospf-add.
         */
        pn_ospf_area?: string;
        /**
         * Provide login password if user is not root.
         */
        pn_clipassword?: string;
        /**
         * Specify the name of the vRouter.
         */
        pn_vrouter_name: string;
        /**
         * Specify the network IP (IPv4 or IPv6) address.
         */
        pn_network_ip: string;
        /**
         * Provide login username if user is not root.
         */
        pn_cliusername?: string;
        /**
         * Default: present
         *
         * Assert the state of the ospf. Use 'present' to add ospf and 'absent' to remove ospf.
         */
        state?: "present" | "absent";
        /**
         * Target switch to run the CLI on.
         */
        pn_cliswitch?: string;
        [k: string]: any;
      };
      /**
       * List Topics/Subscriptions from Google PubSub.  Use the gcpubsub module for topic/subscription management. See U(https://cloud.google.com/pubsub/docs) for an overview.
       */
      gcpubsub_facts?: {
        service_account_email?: string;
        /**
         * GCP pubsub topic name.  Only the name, not the full path, is required.
         */
        topic?: string;
        /**
         * list is the only valid option.
         */
        state?: "list";
        credentials_file?: string;
        project_id?: string;
        /**
         * Choices are 'topics' or 'subscriptions'
         */
        view?: "topics" | "subscriptions";
        [k: string]: any;
      };
      /**
       * This module manages locally configured user accounts on remote network devices running the JUNOS operating system.  It provides a set of arguments for creating, removing and updating locally defined accounts
       */
      junos_user?: {
        [k: string]: any;
      };
      /**
       * Create, update and delete volume snapshot policies.
       */
      cs_snapshot_policy?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Install an operating system by setting the boot options like boot image and kickstart image.
       */
      nxos_install_os?: {
        username?: string;
        /**
         * Name of the system (or combined) image file on flash.
         */
        system_image_file: string;
        /**
         * Name of the kickstart image file on flash.
         */
        kickstart_image_file?: string;
        host?: string;
        ssh_keyfile?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Retrieve facts about a one or more OpenStack users
       */
      os_user_facts?: {
        /**
         * Default: None
         *
         * Name or ID of the domain containing the user if the cloud supports domains
         */
        domain?: string;
        /**
         * Name or ID of the user
         */
        name?: string;
        /**
         * Default: None
         *
         * A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.
         */
        filters?: string;
        [k: string]: any;
      };
      /**
       * Allows the addition, clearing and removal of local Windows event logs, and the creation and removal of sources from a given event log.  Also allows the specification of settings per log and source.
       */
      win_eventlog?: {
        /**
         * Name of the event log to manage.
         */
        name?: string;
        /**
         * For one or more sources specified, the path to a custom parameter resource file.
         */
        parameter_file?: string;
        /**
         * The minimum number of days event entries must remain in the log.
         * This option is only used when C(overflow_action) is C(OverwriteOlder).
         */
        retention_days?: string;
        /**
         * A list of one or more sources to ensure are present/absent in the log.
         * When C(category_file), C(message_file) and/or C(parameter_file) are specified, these values are applied across all sources.
         */
        sources?: string;
        /**
         * Default: present
         *
         * Desired state of the log and/or sources.
         * When C(sources) is populated, state is checked for sources.
         * When C(sources) is not populated, state is checked for the specified log itself.
         * If C(state) is C(clear), event log entries are cleared for the target log.
         */
        state?: string;
        /**
         * For one or more sources specified, the path to a custom event message resource file.
         */
        message_file?: string;
        /**
         * The maximum size of the event log.
         * Value must be between 64KB and 4GB, and divisible by 64KB.
         * Size can be specified in KB, MB or GB (e.g. 128KB, 16MB, 2.5GB).
         */
        maximum_size?: string;
        /**
         * For one or more sources specified, the path to a custom category resource file.
         */
        category_file?: string;
        /**
         * The action for the log to take once it reaches its maximum size.
         * For C(OverwriteOlder), new log entries overwrite those older than the C(retention_days) value.
         * For C(OverwriteAsNeeded), each new entry overwrites the oldest entry.
         * For C(DoNotOverwrite), all existing entries are kept and new entries are not retained.
         */
        overflow_action?: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure Cluster object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_cluster?: {
        username?: string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Name of the object.
         */
        name: string;
        controller?: string;
        /**
         * A virtual ip address.
         * This ip address will be dynamically reconfigured so that it always is the ip of the cluster leader.
         */
        virtual_ip?: {
          [k: string]: any;
        };
        tenant?: string;
        /**
         * List of clusternode.
         */
        nodes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Re-join cluster nodes automatically in the event one of the node is reset to factory.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        rejoin_nodes_automatically?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module can be used for calling any resources defined in Avi REST API. U(https://avinetworks.com/)
       * This module is useful for invoking HTTP Patch methods and accessing resources that do not have an REST object associated with them.
       */
      avi_api_session?: {
        username?: string;
        controller?: string;
        /**
         * Allowed HTTP methods for RESTful services and are supported by Avi Controller.
         */
        http_method: "get" | "put" | "post" | "patch" | "delete";
        /**
         * Query parameters passed to the HTTP API.
         */
        params?: {
          [k: string]: any;
        };
        tenant?: string;
        /**
         * Timeout (in seconds) for Avi API calls.
         */
        timeout?: number | string;
        /**
         * Path for Avi API resource. For example, C(path: virtualservice) will translate to C(api/virtualserivce).
         */
        path: string;
        password?: string;
        /**
         * HTTP body in YAML or JSON format.
         */
        data?: string;
        tenant_uuid?: string;
        api_version?: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure NetworkProfile object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_networkprofile?: {
        /**
         * Networkprofileunion settings for networkprofile.
         */
        profile: {
          [k: string]: any;
        };
        username?: string;
        /**
         * Uuid of the network profile.
         */
        uuid?: string;
        /**
         * User defined description for the object.
         */
        description?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        controller?: string;
        tenant?: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * The name of the network profile.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure Backup object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_backup?: {
        /**
         * Scheduler information.
         * It is a reference to an object of type scheduler.
         */
        scheduler_ref?: string;
        username?: string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * Url to download the backup file.
         */
        local_file_url?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * Unix timestamp of when the backup file is created.
         */
        timestamp?: string;
        /**
         * Url to download the backup file.
         */
        remote_file_url?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Backupconfiguration information.
         * It is a reference to an object of type backupconfiguration.
         */
        backup_config_ref?: string;
        controller?: string;
        tenant?: string;
        /**
         * The file name of backup.
         */
        file_name: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        [k: string]: any;
      };
      /**
       * Manages global configuration of EVPN on HUAWEI CloudEngine switches.
       */
      ce_evpn_global?: {
        username?: string;
        /**
         * Configure EVPN as the VXLAN control plane.
         */
        evpn_overlay_enable: "enable" | "disable";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Retrieve facts about one or more oVirt/RHV templates.
       */
      ovirt_templates_facts?: {
        /**
         * Search term which is accepted by oVirt/RHV search backend.
         * For example to search template X from datacenter Y use following pattern: name=X and datacenter=Y
         */
        pattern?: string;
        [k: string]: any;
      };
      /**
       * Allows uploading or removing IAM policies for IAM users, groups or roles.
       */
      iam_policy?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Ansible module which helps to manage Jenkins plugins.
       */
      jenkins_plugin?: {
        [k: string]: any;
      };
      /**
       * Manage the state of a program or group of programs running via supervisord
       */
      supervisorctl?: {
        /**
         * username to use for authentication
         */
        username?: string;
        /**
         * path to supervisorctl executable
         */
        supervisorctl_path?: string;
        /**
         * The name of the supervisord program or group to manage.
         * The name will be taken as group name when it ends with a colon I(:)
         * Group support is only available in Ansible version 1.6 or later.
         */
        name: string;
        /**
         * URL on which supervisord server is listening
         */
        server_url?: string;
        /**
         * The desired state of program/group.
         */
        state: "present" | "started" | "stopped" | "restarted" | "absent";
        /**
         * password to use for authentication
         */
        password?: string;
        /**
         * The supervisor configuration file path
         */
        config?: string;
        [k: string]: any;
      };
      /**
       * Manipulate Rackspace Cloud Block Storage Volume Attachments
       */
      rax_cbs_attachments?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module allows configuring block device partition using the C(parted) command line tool. For a full description of the fields and the options check the GNU parted manual.
       */
      parted?: {
        /**
         * Default: 0%
         *
         * Where the partition will start as offset from the beginning of the disk, that is, the "distance" from the start of the disk. The distance can be specified with all the units supported by parted (except compat) and it is case sensitive. E.g. C(10GiB), C(15%).
         */
        part_start?: string;
        /**
         * Default: 100%
         *
         * Where the partition will end as offset from the beginning of the disk, that is, the "distance" from the start of the disk. The distance can be specified with all the units supported by parted (except compat) and it is case sensitive. E.g. C(10GiB), C(15%).
         */
        part_end?: string;
        /**
         * Sets the name for the partition number (GPT, Mac, MIPS and PC98 only).
         */
        name?: string;
        /**
         * Default: optimal
         *
         * Set alignment for newly created partitions.
         */
        align?: "none" | "cylinder" | "minimal" | "optimal";
        /**
         * The number of the partition to work with or the number of the partition that will be created. Required when performing any action on the disk, except fetching information.
         */
        number?: number | string;
        /**
         * Default: msdos
         *
         * Creates a new disk label.
         */
        label?: "aix" | "amiga" | "bsd" | "dvh" | "gpt" | "loop" | "mac" | "msdos" | "pc98" | "sun";
        /**
         * Default: info
         *
         * If to create or delete a partition. If set to C(info) the module will only return the device information.
         */
        state?: "present" | "absent" | "info";
        /**
         * Default: primary
         *
         * Is one of 'primary', 'extended' or 'logical' and may be specified only with 'msdos' or 'dvh' partition tables. A name must be specified for a 'gpt' partition table. Neither part-type nor name may be used with a 'sun' partition table.
         */
        part_type?: "primary" | "extended" | "logical";
        /**
         * A list of the flags that has to be set on the partition.
         */
        flags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The block device (disk) where to operate.
         */
        device: string;
        /**
         * Default: KiB
         *
         * Selects the current default unit that Parted will use to display locations and capacities on the disk and to interpret those given by the user if they are not suffixed by an unit. When fetching information about a disk, it is always recommended to specify a unit.
         */
        unit?: "s" | "B" | "KB" | "KiB" | "MB" | "MiB" | "GB" | "GiB" | "TB" | "TiB" | "%" | "cyl" | "chs" | "compact";
        [k: string]: any;
      };
      /**
       * Creates AWS VPN Virtual Gateways
       * Deletes AWS VPN Virtual Gateways
       * Attaches Virtual Gateways to VPCs
       * Detaches Virtual Gateways from VPCs
       */
      ec2_vpc_vgw?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Place an ESXI host into maintenance mode
       * Support for VSAN compliant maintenance mode when selected
       */
      vmware_maintenancemode?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Returns list of matching Launch Configurations for a given name, along with other useful information
       * Results can be sorted and sliced
       * It depends on boto
       * Based on the work by Tom Bamford (https://github.com/tombamford)
       */
      ec2_lc_find?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Create, destroy, or update accounts on SolidFire
       */
      sf_snapshot_schedule_manager?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Retrieve facts about one or more oVirt/RHV storage domains.
       */
      ovirt_storage_domains_facts?: {
        /**
         * Search term which is accepted by oVirt/RHV search backend.
         * For example to search storage domain X from datacenter Y use following pattern: name=X and datacenter=Y
         */
        pattern?: string;
        [k: string]: any;
      };
      /**
       * Create/destroy Block Storage volume in DigitalOcean, or attach/detach Block Storage volume to a droplet.
       */
      digital_ocean_block_storage?: {
        [k: string]: any;
      };
      /**
       * Manage content switching actions
       * This module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance
       */
      netscaler_cs_action?: {
        /**
         * Comments associated with this cs action.
         */
        comment?: string;
        /**
         * Name for the content switching action. Must begin with an ASCII alphanumeric or underscore C(_) character, and must contain only ASCII alphanumeric, underscore C(_), hash C(#), period C(.), space C( ), colon C(:), at sign C(@), equal sign C(=), and hyphen C(-) characters. Can be changed after the content switching action is created.
         */
        name?: string;
        save_config?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        state?: "present" | "absent";
        /**
         * Name of the load balancing virtual server to which the content is switched.
         */
        targetlbvserver?: string;
        nitro_protocol?: "http" | "https";
        nsip: string;
        nitro_user: string;
        nitro_pass: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nitro_timeout?: number;
        /**
         * Information about this content switching action.
         */
        targetvserverexpr?: string;
        [k: string]: any;
      };
      /**
       * Retrieve facts about one or more oVirt/RHV vmpools.
       */
      ovirt_vmpools_facts?: {
        /**
         * Search term which is accepted by oVirt/RHV search backend.
         * For example to search vmpool X: name=X
         */
        pattern?: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure GslbApplicationPersistenceProfile object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_gslbapplicationpersistenceprofile?: {
        username?: string;
        /**
         * Uuid of the persistence profile.
         * Field introduced in 17.1.1.
         */
        uuid?: string;
        /**
         * Field introduced in 17.1.1.
         */
        description?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         * Field introduced in 17.1.1.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        controller?: string;
        tenant?: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * A user-friendly name for the persistence profile.
         * Field introduced in 17.1.1.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Manages network device configurations over SSH.  This module allows implementers to work with the device running-config.  It provides a way to push a set of commands onto a network device by evaluating the current running-config and only pushing configuration commands that are not already configured.  The config source can be a set of commands or a template.
       */
      iosxr_template?: {
        /**
         * The path to the config source.  The source can be either a file with config or a template that will be merged during runtime.  By default the task will first search for the source file in role or playbook root folder in templates unless a full path to the file is given.
         */
        src?: string;
        /**
         * The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task.  The I(config) argument allows the implementer to pass in the configuration to use as the base config for comparison.
         */
        config?: string;
        /**
         * The force argument instructs the module not to consider the current device running-config.  When set to true, this will cause the module to push the contents of I(src) into the device without first checking if already configured.
         */
        force?: string;
        /**
         * When this argument is configured true, the module will backup the running-config from the node prior to making any changes. The backup file will be written to backup_{{ hostname }} in the root of the playbook directory.
         */
        backup?: string;
        [k: string]: any;
      };
      /**
       * Creates or destroy Google instance templates of Compute Engine of Google Cloud Platform.
       */
      gce_instance_template?: {
        [k: string]: any;
      };
      /**
       * Manages the inittab on AIX.
       */
      aix_inittab?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manage ACI Fiber Channel interface policies on Cisco ACI fabrics.
       * More information from the internal APIC class I(fc:IfPol) at U(https://developer.cisco.com/media/mim-ref/MO-fcIfPol.html).
       */
      aci_intf_policy_fc?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * AireOS does not use a block indent file syntax, so there are no sections or parents. This module provides an implementation for working with AireOS configurations in a deterministic way.
       */
      aireos_config?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add, modify and delete a role within FreeIPA server using FreeIPA API
       */
      ipa_role?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * This module provides declarative management of logging on Cisco NX-OS devices.
       */
      nxos_logging?: {
        [k: string]: any;
      };
      /**
       * Manage BIG-IP data center configuration. A data center defines the location where the physical network components reside, such as the server and link objects that share the same subnet on the network. This module is able to manipulate the data center definitions in a BIG-IP
       */
      bigip_gtm_datacenter?: {
        /**
         * The description of the data center.
         */
        description?: string;
        /**
         * Whether the data center should be enabled. At least one of C(state) and C(enabled) are required.
         */
        enabled?: string;
        /**
         * The state of the datacenter on the BIG-IP. When C(present), guarantees that the data center exists. When C(absent) removes the data center from the BIG-IP. C(enabled) will enable the data center and C(disabled) will ensure the data center is disabled. At least one of state and enabled are required.
         */
        state?: string;
        /**
         * The name of the contact for the data center.
         */
        contact?: string;
        /**
         * The location of the data center.
         */
        location?: string;
        /**
         * The name of the data center.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * This module will replace all instances of a pattern within a file.
       * It is up to the user to maintain idempotence by ensuring that the same pattern would never match any replacements made.
       */
      replace?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Send a message to hipchat
       */
      hipchat?: {
        [k: string]: any;
      };
      /**
       * Installs, upgrade, removes, and lists packages and groups with the I(dnf) package manager.
       */
      dnf?: {
        [k: string]: any;
      };
      /**
       * nssm is a service helper which doesn't suck. See https://nssm.cc/ for more information.
       */
      win_nssm?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * This module is used to configure CloudConnectorUser object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_cloudconnectoruser?: {
        username?: string;
        /**
         * Public_key of cloudconnectoruser.
         */
        public_key?: string;
        /**
         * Private_key of cloudconnectoruser.
         */
        private_key?: string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        controller?: string;
        tenant?: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Name of the object.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Manage installation and Gem version dependencies for Ruby using the Bundler gem
       */
      bundler?: {
        /**
         * The path to the bundler executable
         */
        executable?: string;
        /**
         * Default: temporary working directory
         *
         * The directory to execute the bundler commands from. This directoy needs to contain a valid Gemfile or .bundle/ directory
         */
        chdir?: string;
        /**
         * Default: Gemfile in current directory
         *
         * Only applies if state is C(present). The path to the gemfile to use to install gems.
         */
        gemfile?: string;
        /**
         * Default: no
         *
         * Only applies if state is C(present). If set removes any gems on the target host that are not in the gemfile
         */
        clean?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: yes
         *
         * Only applies if state is C(present). Installs gems in the local user's cache or for all users
         */
        user_install?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A space separated string of additional commands that can be applied to the Bundler command. Refer to the Bundler documentation for more information
         */
        extra_args?: string;
        /**
         * Default: present
         *
         * The desired state of the Gem bundle. C(latest) updates gems to the most recent, acceptable version
         */
        state?: "present" | "latest";
        /**
         * Default: no
         *
         * Only applies if state is C(present). If set it will only install gems that are in the default or production groups. Requires a Gemfile.lock file to have been created prior
         */
        deployment_mode?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Only applies if state is C(present). Specifies the directory to install any gem bins files to. When executed the bin files will run within the context of the Gemfile and fail if any required gem dependencies are not installed. If C(chdir) is set then this path is relative to C(chdir)
         */
        binstub_directory?: string;
        /**
         * A list of Gemfile groups to exclude during operations. This only applies when state is C(present). Bundler considers this a 'remembered' property for the Gemfile and will automatically exclude groups in future operations even if C(exclude_groups) is not set
         */
        exclude_groups?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: no
         *
         * If set only installs gems from the cache on the target host
         */
        local?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: RubyGems gem paths
         *
         * Only applies if state is C(present). Specifies the directory to install the gems into. If C(chdir) is set then this path is relative to C(chdir)
         */
        gem_path?: string;
        [k: string]: any;
      };
      /**
       * This module allows to manage user groups on a univention corporate server (UCS). It uses the python API of the UCS to create a new object or edit it.
       */
      udm_group?: {
        /**
         * Group description.
         */
        description?: string;
        /**
         * Subpath inside the OU, e.g. C(cn=classes,cn=students,cn=groups).
         */
        subpath?: string;
        /**
         * Default: present
         *
         * Whether the group is present or not.
         */
        state?: "present" | "absent";
        /**
         * define the whole ldap position of the group, e.g. C(cn=g123m-1A,cn=classes,cn=schueler,cn=groups,ou=schule,dc=example,dc=com).
         */
        position?: string;
        /**
         * LDAP OU, e.g. school for LDAP OU C(ou=school,dc=example,dc=com).
         */
        ou?: string;
        /**
         * Name of the posix group.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Manages packages with I(urpmi) (such as for Mageia or Mandriva)
       */
      urpmi?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Start, restart, stop and destroy routers.
       * C(state=present) is not able to create routers, use M(cs_network) instead.
       */
      cs_router?: {
        /**
         * Account the router is related to.
         */
        account?: string;
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        api_region?: string;
        /**
         * Name of the project the router is related to.
         */
        project?: string;
        /**
         * Default: present
         *
         * State of the router.
         */
        state?: "present" | "absent" | "started" | "stopped" | "restarted";
        /**
         * Domain the router is related to.
         */
        domain?: string;
        /**
         * Name or id of the service offering of the router.
         */
        service_offering?: string;
        api_key?: string;
        /**
         * Name of the router.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Create VMware vSphere Cluster
       */
      vmware_cluster?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Add/remove subnet from a network
       */
      quantum_subnet?: {
        /**
         * Default: None
         *
         * Name of the region
         */
        region_name?: string;
        /**
         * Default: True
         *
         * Whether DHCP should be enabled for this subnet.
         */
        enable_dhcp?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        availability_zone?: string;
        /**
         * Default: None
         *
         * The name of the tenant for whom the subnet should be created
         */
        tenant_name?: string;
        /**
         * Default: None
         *
         * DNS nameservers for this subnet, comma-separated
         */
        dns_nameservers?: string;
        /**
         * Default: True
         *
         * The tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: None
         *
         * From the subnet pool the starting address from which the IP should be allocated
         */
        allocation_pool_start?: string;
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone URL for authentication
         */
        auth_url?: string;
        /**
         * Default: True
         *
         * Password of login user
         */
        login_password: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Default: None
         *
         * The ip that would be assigned to the gateway for this subnet
         */
        gateway_ip?: string;
        /**
         * Default: None
         *
         * The CIDR representation of the subnet that should be assigned to the subnet
         */
        cidr: string;
        /**
         * Default: None
         *
         * Name of the network to which the subnet should be attached
         */
        network_name: string;
        /**
         * Default: 4
         *
         * The IP version of the subnet 4 or 6
         */
        ip_version?: "4" | "6";
        /**
         * Default: None
         *
         * From the subnet pool the last IP that should be assigned to the virtual machines
         */
        allocation_pool_end?: string;
        /**
         * Default: None
         *
         * The name of the subnet that should be created
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Manage filter entries for a filter on Cisco ACI fabrics.
       * More information from the internal APIC class I(vz:Entry) at U(https://developer.cisco.com/media/mim-ref/MO-vzEntry.html).
       */
      aci_filter_entry?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Launch an Ansible Tower jobs. See U(https://www.ansible.com/tower) for an overview.
       */
      tower_job_launch?: {
        /**
         * Credential to use for job, only used if prompt for credential is set.
         */
        credential?: string;
        /**
         * Disable launching jobs from job template.
         */
        use_job_endpoint?: string;
        /**
         * Name of the job_template to use.
         */
        job_template?: string;
        /**
         * Specific tags to use for from playbook.
         */
        tags?: string;
        /**
         * Extra_vars to use for the job_template. Prepend '@' if a file.
         */
        extra_vars?: string;
        /**
         * Job explanation field.
         */
        job_explanation?: string;
        /**
         * Job_type to use for the job, only used if prompt for job_type is set.
         */
        job_type?: string;
        /**
         * Limit to use for the job_template.
         */
        limit?: string;
        /**
         * Inventory to use for the job, only used if prompt for inventory is set.
         */
        inventory?: string;
        [k: string]: any;
      };
      /**
       * This module provide management of firewall addresses on FortiOS devices.
       */
      fortios_address?: {
        /**
         * free text to describe address.
         */
        comment?: string;
        username?: string;
        config_file?: string;
        /**
         * Name of the address to add or delete.
         */
        name: string;
        backup_path?: string;
        /**
         * 2 letter country code (like FR).
         */
        country?: string;
        /**
         * Specifies if address need to be added or deleted.
         */
        state: "present" | "absent";
        /**
         * Address value, based on type. If type=fqdn, somthing like www.google.com. If type=ipmask, you can use simple ip (192.168.0.1), ip+mask (192.168.0.1 255.255.255.0) or CIDR (192.168.0.1/32).
         */
        value?: string;
        /**
         * First ip in range (used only with type=iprange).
         */
        start_ip?: string;
        host?: string;
        /**
         * Last ip in range (used only with type=iprange).
         */
        end_ip?: string;
        backup_filename?: string;
        timeout?: number | string;
        /**
         * Type of the address.
         */
        type?: "iprange" | "fqdn" | "ipmask" | "geography";
        /**
         * Default: any
         *
         * interface name the address apply to.
         */
        interface?: string;
        password?: string;
        backup?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        vdom?: string;
        file_mode?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module is automatically called by playbooks to gather useful variables about remote hosts that can be used in playbooks. It can also be executed directly by C(/usr/bin/ansible) to check what variables are available to a host. Ansible provides many I(facts) about the system, automatically.
       * This module is also supported for Windows targets.
       */
      setup?: {
        /**
         * Default: *
         *
         * if supplied, only return facts that match this shell-style (fnmatch) wildcard.
         */
        filter?: string;
        /**
         * Default: all
         *
         * if supplied, restrict the additional facts collected to the given subset. Possible values: all, min, hardware, network, virtual, ohai, and facter Can specify a list of values to specify a larger subset. Values can also be used with an initial C(!) to specify that that specific subset should not be collected.  For instance: !hardware, !network, !virtual, !ohai, !facter. If !all is specified then only the min subset is collected. To avoid collecting even the min subset, specify !all and !min subsets. To collect only specific facts, use !all, !min, and specify the particular fact subsets. Use the filter parameter if you do not want to display some collected facts.
         */
        gather_subset?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: /etc/ansible/facts.d
         *
         * path used for local ansible facts (*.fact) - files in this dir will be run (if executable) and their results be added to ansible_local facts if a file is not executable it is read. Check notes for Windows options. (from 2.1 on) File/results format can be json or ini-format
         */
        fact_path?: string;
        /**
         * Default: 10
         *
         * Set the default timeout in seconds for individual fact gathering
         */
        gather_timeout?: number | string;
        [k: string]: any;
      };
      /**
       * Gets various details related to AWS VPC Managed Nat Gateways
       */
      ec2_vpc_nat_gateway_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module will search a file for a line, and ensure that it is present or absent.
       * This is primarily useful when you want to change a single line in a file only. See the M(replace) module if you want to change multiple, similar lines or check M(blockinfile) if you want to insert/update/remove a block of lines in a file. For other cases, see the M(copy) or M(template) modules.
       */
      lineinfile?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * This module allows you to work with access-lists on a Cisco ASA device.
       */
      asa_acl?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * This module is used to configure VirtualService object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_virtualservice?: {
        /**
         * (internal-use) network port assigned to the virtual service ip address.
         * Field deprecated in 17.1.1.
         */
        port_uuid?: string;
        /**
         * Availability-zone to place the virtual service.
         * Field deprecated in 17.1.1.
         */
        availability_zone?: string;
        /**
         * Datascripts applied on the data traffic of the virtual service.
         */
        vs_datascripts?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Enable route health injection for source nat'ted floating ip address using the bgp config in the vrf context.
         */
        enable_rhi_snat?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Sideband configuration to be used for this virtualservice.it can be used for sending traffic to sideband vips for external inspection etc.
         */
        sideband_profile?: {
          [k: string]: any;
        };
        /**
         * Rate limit the incoming requests to this virtual service.
         */
        requests_rate_limit?: {
          [k: string]: any;
        };
        /**
         * Uuid of the virtualservice.
         */
        uuid?: string;
        /**
         * Determines the set of ssl versions and ciphers to accept for ssl/tls terminated connections.
         * It is a reference to an object of type sslprofile.
         */
        ssl_profile_ref?: string;
        /**
         * Creator name.
         */
        created_by?: string;
        /**
         * Maximum connections per second per client ip.
         * Allowed values are 10-1000.
         * Special values are 0- 'unlimited'.
         * Default value when not specified in API or module is interpreted by Avi Controller as 0.
         */
        max_cps_per_client?: number | string;
        /**
         * Select or create one or two certificates, ec and/or rsa, that will be presented to ssl/tls terminated connections.
         * It is a reference to an object of type sslkeyandcertificate.
         */
        ssl_key_and_certificate_refs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Enable application layer specific features for the virtual service.
         * It is a reference to an object of type applicationprofile.
         */
        application_profile_ref?: string;
        /**
         * Microservice representing the virtual service.
         * It is a reference to an object of type microservice.
         */
        microservice_ref?: string;
        password?: string;
        /**
         * Ip address of the virtual service.
         * Field deprecated in 17.1.1.
         */
        ip_address?: {
          [k: string]: any;
        };
        /**
         * If auto_allocate_floating_ip is true and more than one floating-ip subnets exist, then the subnet for the floating ip address allocation.
         * This field is applicable only if the virtualservice belongs to an openstack or aws cloud.
         * In openstack or aws cloud it is required when auto_allocate_floating_ip is selected.
         * Field deprecated in 17.1.1.
         */
        floating_subnet_uuid?: string;
        /**
         * Name for the virtual service.
         */
        name: string;
        /**
         * Response traffic to clients will be sent back to the source mac address of the connection, rather than statically sent to a default gateway.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        enable_autogw?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Profile used to match and rewrite strings in request and/or response body.
         */
        content_rewrite?: {
          [k: string]: any;
        };
        /**
         * Nat'ted floating source ip address(es) for upstream connection to servers.
         */
        snat_ip?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Determines analytics settings for the application.
         */
        analytics_policy?: {
          [k: string]: any;
        };
        tenant_uuid?: string;
        /**
         * The quality of service weight to assign to traffic transmitted from this virtual service.
         * A higher weight will prioritize traffic versus other virtual services sharing the same service engines.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1.
         */
        weight?: number | string;
        /**
         * Enable or disable the virtual service.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Remove listening port if virtualservice is down.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        remove_listening_port_on_vs_down?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Server network or list of servers for cloning traffic.
         * It is a reference to an object of type trafficcloneprofile.
         * Field introduced in 17.1.1.
         */
        traffic_clone_profile_ref?: string;
        /**
         * Virtual routing context that the virtual service is bound to.
         * This is used to provide the isolation of the set of networks the application is attached to.
         * It is a reference to an object of type vrfcontext.
         */
        vrf_context_ref?: string;
        /**
         * Subnet providing reachability for client facing virtual service ip.
         * Field deprecated in 17.1.1.
         */
        subnet?: {
          [k: string]: any;
        };
        /**
         * The exact name requested from the client's sni-enabled tls hello domain name field.
         * If this is a match, the parent vs will forward the connection to this child vs.
         */
        vh_domain_name?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The service engine group to use for this virtual service.
         * Moving to a new se group is disruptive to existing connections for this vs.
         * It is a reference to an object of type serviceenginegroup.
         */
        se_group_ref?: string;
        /**
         * Disable re-distribution of flows across service engines for a virtual service.
         * Enable if the network itself performs flow hashing with ecmp in environments such as gcp.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        scaleout_ecmp?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        api_version?: string;
        /**
         * Mostly used during the creation of shared vs, this fieldrefers to entities that can be shared across virtual services.
         * It is a reference to an object of type vsvip.
         * Field introduced in 17.1.1.
         */
        vsvip_ref?: string;
        /**
         * Optional settings that determine performance limits like max connections or bandwdith etc.
         */
        performance_limits?: {
          [k: string]: any;
        };
        /**
         * Floating ip to associate with this virtual service.
         * Field deprecated in 17.1.1.
         */
        floating_ip?: {
          [k: string]: any;
        };
        /**
         * Auto-allocate floating/elastic ip from the cloud infrastructure.
         * Field deprecated in 17.1.1.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        auto_allocate_floating_ip?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Rate limit the incoming connections to this virtual service.
         */
        connections_rate_limit?: {
          [k: string]: any;
        };
        /**
         * The pool is an object that contains destination servers and related attributes such as load-balancing and persistence.
         * It is a reference to an object of type pool.
         */
        pool_ref?: string;
        /**
         * Ignore pool servers network reachability constraints for virtual service placement.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        ign_pool_net_reach?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        tenant?: string;
        /**
         * Auto-allocate vip from the provided subnet.
         * Field deprecated in 17.1.1.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        auto_allocate_ip?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Dns resolvable, fully qualified domain name of the virtualservice.
         * Only one of 'fqdn' and 'dns_info' configuration is allowed.
         */
        fqdn?: string;
        /**
         * Network security policies for the virtual service.
         * It is a reference to an object of type networksecuritypolicy.
         */
        network_security_policy_ref?: string;
        /**
         * (internal-use) fip allocated by avi in the cloud infrastructure.
         * Field deprecated in 17.1.1.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        avi_allocated_fip?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Http authentication configuration for protected resources.
         */
        client_auth?: {
          [k: string]: any;
        };
        /**
         * It represents subnet for the virtual service ip address allocation when auto_allocate_ip is true.it is only applicable in openstack or aws cloud.
         * This field is required if auto_allocate_ip is true.
         * Field deprecated in 17.1.1.
         */
        subnet_uuid?: string;
        /**
         * Select the algorithm for qos fairness.
         * This determines how multiple virtual services sharing the same service engines will prioritize traffic over a congested network.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        delay_fairness?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * List of virtual service ips.
         * While creating a 'shared vs',please use vsvip_ref to point to the shared entities.
         * Field introduced in 17.1.1.
         */
        vip?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * List of static dns records applied to this virtual service.
         * These are static entries and no health monitoring is performed against the ip addresses.
         */
        static_dns_records?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * (internal-use) vip allocated by avi in the cloud infrastructure.
         * Field deprecated in 17.1.1.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        avi_allocated_vip?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specifies settings related to analytics.
         * It is a reference to an object of type analyticsprofile.
         */
        analytics_profile_ref?: string;
        /**
         * Determines the network settings profile for the server side of tcp proxied connections.
         * Leave blank to use the same settings as the client to vs side of the connection.
         * It is a reference to an object of type networkprofile.
         */
        server_network_profile_ref?: string;
        /**
         * Expected number of ssl session cache entries (may be exceeded).
         * Allowed values are 1024-16383.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1024.
         */
        ssl_sess_cache_avg_size?: number | string;
        username?: string;
        /**
         * Criteria for flow distribution among ses.
         * Enum options - LOAD_AWARE, CONSISTENT_HASH_SOURCE_IP_ADDRESS, CONSISTENT_HASH_SOURCE_IP_ADDRESS_AND_PORT.
         * Default value when not specified in API or module is interpreted by Avi Controller as LOAD_AWARE.
         */
        flow_dist?: string;
        /**
         * Http policies applied on the data traffic of the virtual service.
         */
        http_policies?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        controller?: string;
        /**
         * The pool group is an object that contains pools.
         * It is a reference to an object of type poolgroup.
         */
        pool_group_ref?: string;
        /**
         * Force placement on all se's in service group (mesos mode only).
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        east_west_placement?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Select pool based on destination port.
         */
        service_pool_select?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Specify if this is a normal virtual service, or if it is the parent or child of an sni-enabled virtual hosted virtual service.
         * Enum options - VS_TYPE_NORMAL, VS_TYPE_VH_PARENT, VS_TYPE_VH_CHILD.
         * Default value when not specified in API or module is interpreted by Avi Controller as VS_TYPE_NORMAL.
         */
        type?: string;
        /**
         * (internal-use) discovered networks providing reachability for client facing virtual service ip.
         * This field is used internally by avi, not editable by the user.
         * Field deprecated in 17.1.1.
         */
        discovered_networks?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Service discovery specific data including fully qualified domain name, type and time-to-live of the dns record.
         * Note that only one of fqdn and dns_info setting is allowed.
         */
        dns_info?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Subnet and/or network for allocating virtualservice ip by ipam provider module.
         */
        ipam_network_subnet?: {
          [k: string]: any;
        };
        /**
         * Criteria for flow labelling.
         * Enum options - NO_LABEL, SERVICE_LABEL.
         * Default value when not specified in API or module is interpreted by Avi Controller as NO_LABEL.
         */
        flow_label_type?: string;
        /**
         * Determines network settings such as protocol, tcp or udp, and related options for the protocol.
         * It is a reference to an object of type networkprofile.
         */
        network_profile_ref?: string;
        /**
         * Metadata pertaining to the service provided by this virtual service.
         * In openshift/kubernetes environments, egress pod info is stored.
         * Any user input to this field will be overwritten by avi vantage.
         */
        service_metadata?: string;
        /**
         * Enum options - cloud_none, cloud_vcenter, cloud_openstack, cloud_aws, cloud_vca, cloud_apic, cloud_mesos, cloud_linuxserver, cloud_docker_ucp,
         * cloud_rancher, cloud_oshift_k8s.
         * Default value when not specified in API or module is interpreted by Avi Controller as CLOUD_NONE.
         */
        cloud_type?: string;
        /**
         * It is a reference to an object of type cloud.
         */
        cloud_ref?: string;
        /**
         * Enable route health injection using the bgp config in the vrf context.
         */
        enable_rhi?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A list of nsx service groups representing the clients which can access the virtual ip of the virtual service.
         * Field introduced in 17.1.1.
         */
        nsx_securitygroup?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Checksum of cloud configuration for vs.
         * Internally set by cloud connector.
         */
        cloud_config_cksum?: string;
        /**
         * User defined description for the object.
         */
        description?: string;
        /**
         * Use bridge ip as vip on each host in mesos deployments.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        use_bridge_ip_as_vip?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Translate the host name sent to the servers to this value.
         * Translate the host name sent from servers back to the value used by the client.
         */
        host_name_xlate?: string;
        /**
         * Specifies the virtual service acting as virtual hosting (sni) parent.
         */
        vh_parent_vs_uuid?: string;
        /**
         * This configuration only applies if the virtualservice is in legacy active standby ha mode and load distribution among active standby is enabled.
         * This field is used to tag the virtualservice so that virtualservices with the same tag will share the same active serviceengine.
         * Virtualservices with different tags will have different active serviceengines.
         * If one of the serviceengine's in the serviceenginegroup fails, all virtualservices will end up using the same active serviceengine.
         * Redistribution of the virtualservices can be either manual or automated when the failed serviceengine recovers.
         * Redistribution is based on the auto redistribute property of the serviceenginegroup.
         * Enum options - ACTIVE_STANDBY_SE_1, ACTIVE_STANDBY_SE_2.
         * Default value when not specified in API or module is interpreted by Avi Controller as ACTIVE_STANDBY_SE_1.
         */
        active_standby_se_tag?: string;
        /**
         * (internal-use) discovered networks providing reachability for client facing virtual service ip.
         * This field is deprecated.
         * It is a reference to an object of type network.
         * Field deprecated in 17.1.1.
         */
        discovered_network_ref?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Limit potential dos attackers who exceed max_cps_per_client significantly to a fraction of max_cps_per_client for a while.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        limit_doser?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * Manually override the network on which the virtual service is placed.
         * It is a reference to an object of type network.
         * Field deprecated in 17.1.1.
         */
        network_ref?: string;
        /**
         * (internal-use) discovered subnets providing reachability for client facing virtual service ip.
         * This field is deprecated.
         * Field deprecated in 17.1.1.
         */
        discovered_subnet?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Dns policies applied on the dns traffic of the virtual service.
         * Field introduced in 17.1.1.
         */
        dns_policies?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * List of services defined for this virtual service.
         */
        services?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        [k: string]: any;
      };
      /**
       * Get facts for a specific public IP or all public IPs within a resource group.
       */
      azure_rm_publicipaddress_facts?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Only show results for a specific Public IP.
         */
        name?: string;
        /**
         * Limit results by resource group. Required when using name parameter.
         */
        resource_group?: string;
        /**
         * Limit results by providing a list of tags. Format tags as 'key' or 'key:value'.
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        ad_user?: string;
        cloud_environment?: string;
        secret?: string;
        client_id?: string;
        subscription_id?: string;
        password?: string;
        tenant?: string;
        [k: string]: any;
      };
      /**
       * Manage load balancing vserver configuration
       * This module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance
       */
      netscaler_lb_vserver?: {
        /**
         * List of services along with the weights that are load balanced.
         * The following suboptions are available.
         */
        servicebindings?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Use network address translation (NAT) for RTSP data connections.
         */
        rtspnat?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: no
         *
         * When set to C(yes) the lb vserver will be disabled.
         * When set to C(no) the lb vserver will be enabled.
         * Note that due to limitations of the underlying NITRO API a C(disabled) state change alone does not cause the module result to report a changed status.
         */
        disabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * This option is used to retain vlan information of incoming packet when macmode is enabled.
         */
        macmoderetainvlan?: "enabled" | "disabled";
        /**
         * Enable database specific load balancing for MySQL and MSSQL service types.
         */
        dbslb?: "enabled" | "disabled";
        /**
         * Default syntax expression identifying traffic accepted by the virtual server. Can be either an expression (for example, C(CLIENT.IP.DST.IN_SUBNET(192.0.2.0/24)) or the name of a named expression. In the above example, the virtual server accepts all requests whose destination IP address is in the 192.0.2.0/24 subnet.
         */
        listenpolicy?: string;
        /**
         * IP mask, in dotted decimal notation, for the IP Pattern parameter. Can have leading or trailing non-zero octets (for example, C(255.255.240.0) or C(0.0.255.255)). Accordingly, the mask specifies whether the first n bits or the last n bits of the destination IP address in a client request are to be matched with the corresponding bits in the IP pattern. The former is called a forward mask. The latter is called a reverse mask.
         */
        ipmask?: string;
        /**
         * Name for the inserted header. The default name is vip-header.
         * Minimum length = 1
         */
        vipheader?: string;
        /**
         * Name of the load balancing virtual server, of type PUSH or SSL_PUSH, to which the server pushes updates received on the load balancing virtual server that you are configuring.
         * Minimum length = 1
         */
        pushvserver?: string;
        /**
         * Offset to be considered when extracting a token from the TCP payload. Applicable to virtual servers, of type TCP, using the token method of load balancing. Must be within the first 24 KB of the TCP payload.
         * Minimum value = C(0)
         * Maximum value = C(25400)
         */
        dataoffset?: number;
        /**
         * Length of the token to be extracted from the data segment of an incoming packet, for use in the token method of load balancing. The length of the token, specified in bytes, must not be greater than 24 KB. Applicable to virtual servers of type TCP.
         * Minimum value = C(1)
         * Maximum value = C(100)
         */
        datalength?: number;
        nitro_timeout?: number;
        /**
         * Apply AppFlow logging to the virtual server.
         */
        appflowlog?: "enabled" | "disabled";
        /**
         * If the primary virtual server goes down, do not allow it to return to primary status until manually enabled.
         */
        disableprimaryondown?: "enabled" | "disabled";
        /**
         * By turning on this option packets destined to a vserver in a cluster will not under go any steering. Turn this option for single packet request response mode or when the upstream device is performing a proper RSS for connection based distribution.
         */
        processlocal?: "enabled" | "disabled";
        /**
         * Minimum number of members expected to be present when vserver is used in Autoscale.
         * Minimum value = C(0)
         * Maximum value = C(5000)
         */
        minautoscalemembers?: number;
        /**
         * Name for the virtual server. Must begin with an ASCII alphanumeric or underscore C(_) character, and must contain only ASCII alphanumeric, underscore, hash C(#), period C(.), space C( ), colon C(:), at sign C(@), equal sign C(=), and hyphen C(-) characters. Can be changed after the virtual server is created.
         * Minimum length = 1
         */
        name?: string;
        /**
         * Backup load balancing method. Becomes operational if the primary load balancing me
         * thod fails or cannot be used.
         * Valid only if the primary method is based on static proximity.
         */
        backuplbmethod?:
          | "ROUNDROBIN"
          | "LEASTCONNECTION"
          | "LEASTRESPONSETIME"
          | "SOURCEIPHASH"
          | "LEASTBANDWIDTH"
          | "LEASTPACKETS"
          | "CUSTOMLOAD";
        /**
         * Flush all active transactions associated with a virtual server whose state transitions from UP to DOWN. Do not enable this option for applications that must complete their transactions.
         */
        downstateflush?: "enabled" | "disabled";
        /**
         * Expression for extracting a label from the server's response. Can be either an expression or the name of a named expression.
         */
        pushlabel?: string;
        /**
         * Number of bytes to consider for the hash value used in the URLHASH and DOMAINHASH load balancing methods.
         * Minimum value = C(1)
         * Maximum value = C(4096)
         */
        hashlength?: number;
        /**
         * Time period for which a persistence session is in effect.
         * Minimum value = C(0)
         * Maximum value = C(1440)
         */
        timeout?: number;
        /**
         * Persistence mask for IP based persistence types, for IPv6 virtual servers.
         * Minimum value = C(1)
         * Maximum value = C(128)
         */
        v6persistmasklen?: number;
        /**
         * When set to YES, this option causes the DNS replies from this vserver to have the RA bit turned on. Typically one would set this option to YES, when the vserver is load balancing a set of DNS servers thatsupport recursive queries.
         */
        recursionavailable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Maximum number of members expected to be present when vserver is used in Autoscale.
         * Minimum value = C(0)
         * Maximum value = C(5000)
         */
        maxautoscalemembers?: number;
        /**
         * Oracle server version.
         */
        oracleserverversion?: "10G" | "11G";
        /**
         * Name of the authentication profile to be used when authentication is turned on.
         */
        authnprofile?: string;
        /**
         * Port number for the virtual server.
         * Range C(1) - C(65535)
         * * in CLI is represented as C(65535) in NITRO API
         */
        port?: number | string;
        /**
         * The name of the ssl certificate that is bound to this service.
         * The ssl certificate must already exist.
         * Creating the certificate can be done with the M(netscaler_ssl_certkey) module.
         * This option is only applicable only when C(servicetype) is C(SSL).
         */
        ssl_certkey?: string;
        /**
         * Character set that the virtual server advertises to clients.
         */
        mysqlcharacterset?: number;
        /**
         * Enable or disable user authentication with HTTP 401 responses.
         */
        authn401?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        state?: "present" | "absent";
        /**
         * Name of an authentication virtual server with which to authenticate users.
         * Minimum length = 1
         * Maximum length = 252
         */
        authnvsname?: string;
        nitro_user: string;
        /**
         * Name of the network profile to associate with the virtual server. If you set this parameter, the virtual server uses only the IP addresses in the network profile as source IP addresses when initiating connections with servers.
         * Minimum length = 1
         * Maximum length = 127
         */
        netprofile?: string;
        /**
         * Allow multiple Web 2.0 connections from the same client to connect to the virtual server and expect updates.
         */
        pushmulticlients?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Load balancing method. The available settings function as follows:
         * * C(ROUNDROBIN) - Distribute requests in rotation, regardless of the load. Weights can be assigned to services to enforce weighted round robin distribution.
         * * C(LEASTCONNECTION) (default) - Select the service with the fewest connections.
         * * C(LEASTRESPONSETIME) - Select the service with the lowest average response time.
         * * C(LEASTBANDWIDTH) - Select the service currently handling the least traffic.
         * * C(LEASTPACKETS) - Select the service currently serving the lowest number of packets per second.
         * * C(CUSTOMLOAD) - Base service selection on the SNMP metrics obtained by custom load monitors.
         * * C(LRTM) - Select the service with the lowest response time. Response times are learned through monitoring probes. This method also takes the number of active connections into account.
         * Also available are a number of hashing methods, in which the appliance extracts a predetermined portion of the request, creates a hash of the portion, and then checks whether any previous requests had the same hash value. If it finds a match, it forwards the request to the service that served those previous requests. Following are the hashing methods:
         * * C(URLHASH) - Create a hash of the request URL (or part of the URL).
         * * C(DOMAINHASH) - Create a hash of the domain name in the request (or part of the domain name). The domain name is taken from either the URL or the Host header. If the domain name appears in both locations, the URL is preferred. If the request does not contain a domain name, the load balancing method defaults to C(LEASTCONNECTION).
         * * C(DESTINATIONIPHASH) - Create a hash of the destination IP address in the IP header.
         * * C(SOURCEIPHASH) - Create a hash of the source IP address in the IP header.
         * * C(TOKEN) - Extract a token from the request, create a hash of the token, and then select the service to which any previous requests with the same token hash value were sent.
         * * C(SRCIPDESTIPHASH) - Create a hash of the string obtained by concatenating the source IP address and destination IP address in the IP header.
         * * C(SRCIPSRCPORTHASH) - Create a hash of the source IP address and source port in the IP header.
         * * C(CALLIDHASH) - Create a hash of the SIP Call-ID header.
         */
        lbmethod?:
          | "ROUNDROBIN"
          | "LEASTCONNECTION"
          | "LEASTRESPONSETIME"
          | "URLHASH"
          | "DOMAINHASH"
          | "DESTINATIONIPHASH"
          | "SOURCEIPHASH"
          | "SRCIPDESTIPHASH"
          | "LEASTBANDWIDTH"
          | "LEASTPACKETS"
          | "TOKEN"
          | "SRCIPSRCPORTHASH"
          | "LRTM"
          | "CALLIDHASH"
          | "CUSTOMLOAD"
          | "LEASTREQUEST"
          | "AUDITLOGHASH"
          | "STATICPROXIMITY";
        /**
         * Mode in which the connection failover feature must operate for the virtual server. After a failover, established TCP connections and UDP packet flows are kept active and resumed on the secondary appliance. Clients remain connected to the same servers. Available settings function as follows:
         * * C(STATEFUL) - The primary appliance shares state information with the secondary appliance, in real time, resulting in some runtime processing overhead.
         * * C(STATELESS) - State information is not shared, and the new primary appliance tries to re-create the packet flow on the basis of the information contained in the packets it receives.
         * * C(DISABLED) - Connection failover does not occur.
         */
        connfailover?: "DISABLED" | "STATEFUL" | "STATELESS";
        /**
         * Threshold at which spillover occurs. Specify an integer for the C(CONNECTION) spillover method, a bandwidth value in kilobits per second for the C(BANDWIDTH) method (do not enter the units), or a percentage for the C(HEALTH) method (do not enter the percentage symbol).
         * Minimum value = C(1)
         * Maximum value = C(4294967287)
         */
        sothreshold?: number;
        /**
         * If spillover occurs, maintain source IP address based persistence for both primary and backup virtual servers.
         */
        sopersistence?: "enabled" | "disabled";
        /**
         * This argument is for enabling/disabling the C(dns64) on lbvserver.
         */
        dns64?: "enabled" | "disabled";
        /**
         * This argument decides the behavior incase the service which is selected from an existing persistence session has reached threshold.
         */
        skippersistency?: "Bypass" | "ReLb" | "None";
        /**
         * TOS ID of the virtual server. Applicable only when the load balancing redirection mode is set to TOS.
         * Minimum value = C(1)
         * Maximum value = C(63)
         */
        tosid?: number;
        /**
         * Name of the TCP profile whose settings are to be applied to the virtual server.
         * Minimum length = 1
         * Maximum length = 127
         */
        tcpprofilename?: string;
        /**
         * Time period for which backup persistence is in effect.
         * Minimum value = C(2)
         * Maximum value = C(1440)
         */
        backuppersistencetimeout?: number;
        /**
         * Units in which to increment load at each interval in slow-start mode.
         */
        newservicerequestunit?: "PER_SECOND" | "PERCENT";
        /**
         * Integer specifying the priority of the listen policy. A higher number specifies a lower priority. If a request matches the listen policies of more than one virtual server the virtual server whose listen policy has the highest priority (the lowest priority number) accepts the request.
         * Minimum value = C(0)
         * Maximum value = C(101)
         */
        listenpriority?: number;
        /**
         * Number of IP addresses that the appliance must generate and assign to the virtual server. The virtual server then functions as a network virtual server, accepting traffic on any of the generated IP addresses. The IP addresses are generated automatically, as follows:
         * * For a range of n, the last octet of the address specified by the IP Address parameter increments n-1 times.
         * * If the last octet exceeds 255, it rolls over to 0 and the third octet increments by 1.
         * Note: The Range parameter assigns multiple IP addresses to one virtual server. To generate an array of virtual servers, each of which owns only one IP address, use brackets in the IP Address and Name parameters to specify the range. For example:
         * add lb vserver my_vserver[1-3] HTTP 192.0.2.[1-3] 80.
         * Minimum value = C(1)
         * Maximum value = C(254)
         */
        range?: number;
        nitro_pass: string;
        /**
         * Any comments that you might want to associate with the virtual server.
         */
        comment?: string;
        /**
         * Insert an HTTP header, whose value is the IP address and port number of the virtual server, before forwarding a request to the server. The format of the header is <vipHeader>: <virtual server IP address>_<port number >, where vipHeader is the name that you specify for the header. If the virtual server has an IPv6 address, the address in the header is enclosed in brackets ([ and ]) to separate it from the port number. If you have mapped an IPv4 address to a virtual server's IPv6 address, the value of this parameter determines which IP address is inserted in the header, as follows:
         * * C(VIPADDR) - Insert the IP address of the virtual server in the HTTP header regardless of whether the virtual server has an IPv4 address or an IPv6 address. A mapped IPv4 address, if configured, is ignored.
         * * C(V6TOV4MAPPING) - Insert the IPv4 address that is mapped to the virtual server's IPv6 address. If a mapped IPv4 address is not configured, insert the IPv6 address.
         * * C(OFF) - Disable header insertion.
         */
        insertvserveripport?: "OFF" | "VIPADDR" | "V6TOV4MAPPING";
        /**
         * Rewrite the port and change the protocol to ensure successful HTTP redirects from services.
         */
        redirectportrewrite?: "enabled" | "disabled";
        /**
         * Idle time, in seconds, after which a client connection is terminated.
         * Minimum value = C(0)
         * Maximum value = C(31536000)
         */
        clttimeout?: number;
        /**
         * Fully qualified domain name (FQDN) of the authentication virtual server to which the user must be redirected for authentication. Make sure that the Authentication parameter is set to C(yes).
         * Minimum length = 3
         * Maximum length = 252
         */
        authenticationhost?: string;
        /**
         * Protocol used by the service (also called the service type).
         */
        servicetype?:
          | "HTTP"
          | "FTP"
          | "TCP"
          | "UDP"
          | "SSL"
          | "SSL_BRIDGE"
          | "SSL_TCP"
          | "DTLS"
          | "NNTP"
          | "DNS"
          | "DHCPRA"
          | "ANY"
          | "SIP_UDP"
          | "SIP_TCP"
          | "SIP_SSL"
          | "DNS_TCP"
          | "RTSP"
          | "PUSH"
          | "SSL_PUSH"
          | "RADIUS"
          | "RDP"
          | "MYSQL"
          | "MSSQL"
          | "DIAMETER"
          | "SSL_DIAMETER"
          | "TFTP"
          | "ORACLE"
          | "SMPP"
          | "SYSLOGTCP"
          | "SYSLOGUDP"
          | "FIX"
          | "SSL_FIX";
        /**
         * Server capabilities that the virtual server advertises to clients.
         */
        mysqlservercapabilities?: number;
        /**
         * Name of the HTTP profile whose settings are to be applied to the virtual server.
         * Minimum length = 1
         * Maximum length = 127
         */
        httpprofilename?: string;
        /**
         * Interval, in seconds, between successive increments in the load on a new service or a service whose state has just changed from DOWN to UP. A value of 0 (zero) specifies manual slow start.
         * Minimum value = C(0)
         * Maximum value = C(3600)
         */
        newservicerequestincrementinterval?: number;
        /**
         * IPv4 subnet mask to apply to the destination IP address or source IP address when the load balancing method is C(DESTINATIONIPHASH) or C(SOURCEIPHASH).
         * Minimum length = 1
         */
        netmask?: string;
        /**
         * Type of threshold that, when exceeded, triggers spillover. Available settings function as follows:
         * * C(CONNECTION) - Spillover occurs when the number of client connections exceeds the threshold.
         * * DYNAMICCONNECTION - Spillover occurs when the number of client connections at the virtual server exceeds the sum of the maximum client (Max Clients) settings for bound services. Do not specify a spillover threshold for this setting, because the threshold is implied by the Max Clients settings of bound services.
         * * C(BANDWIDTH) - Spillover occurs when the bandwidth consumed by the virtual server's incoming and outgoing traffic exceeds the threshold.
         * * C(HEALTH) - Spillover occurs when the percentage of weights of the services that are UP drops below the threshold. For example, if services svc1, svc2, and svc3 are bound to a virtual server, with weights 1, 2, and 3, and the spillover threshold is 50%, spillover occurs if svc1 and svc3 or svc2 and svc3 transition to DOWN.
         * * C(NONE) - Spillover does not occur.
         */
        somethod?: "CONNECTION" | "DYNAMICCONNECTION" | "BANDWIDTH" | "HEALTH" | "NONE";
        /**
         * Persistence mask for IP based persistence types, for IPv4 virtual servers.
         * Minimum length = 1
         */
        persistmask?: string;
        /**
         * Name of the DNS profile to be associated with the VServer. DNS profile properties will be applied to the transactions processed by a VServer. This parameter is valid only for DNS and DNS-TCP VServers.
         * Minimum length = 1
         * Maximum length = 127
         */
        dnsprofilename?: string;
        /**
         * How the NetScaler appliance responds to ping requests received for an IP address that is common to one or more virtual servers. Available settings function as follows:
         * * If set to C(PASSIVE) on all the virtual servers that share the IP address, the appliance always responds to the ping requests.
         * * If set to C(ACTIVE) on all the virtual servers that share the IP address, the appliance responds to the ping requests if at least one of the virtual servers is UP. Otherwise, the appliance does not respond.
         * * If set to C(ACTIVE) on some virtual servers and PASSIVE on the others, the appliance responds if at least one virtual server with the ACTIVE setting is UP. Otherwise, the appliance does not respond.
         * Note: This parameter is available at the virtual server level. A similar parameter, ICMP Response, is available at the IP address level, for IPv4 addresses of type VIP. To set that parameter, use the add ip command in the CLI or the Create IP dialog box in the GUI.
         */
        icmpvsrresponse?: "PASSIVE" | "ACTIVE";
        save_config?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * If this option is enabled while resolving DNS64 query AAAA queries are not sent to back end dns server.
         */
        bypassaaaa?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Use this parameter to specify the cookie name for C(COOKIE) peristence type. It specifies the name of cookie with a maximum of 32 characters. If not specified, cookie name is internally generated.
         */
        cookiename?: string;
        nitro_protocol?: "http" | "https";
        /**
         * MySQL protocol version that the virtual server advertises to clients.
         */
        mysqlprotocolversion?: number;
        /**
         * URL to which to redirect traffic if the virtual server becomes unavailable.
         * WARNING! Make sure that the domain in the URL does not match the domain specified for a content switching policy. If it does, requests are continuously redirected to the unavailable virtual server.
         * Minimum length = 1
         */
        redirurl?: string;
        /**
         * List of service groups along with the weights that are load balanced.
         * The following suboptions are available.
         */
        servicegroupbindings?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Route cacheable requests to a cache redirection virtual server. The load balancing virtual server can forward requests only to a transparent cache redirection virtual server that has an IP address and port combination of *:80, so such a cache redirection virtual server must be configured on the appliance.
         */
        cacheable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Backup persistence type for the virtual server. Becomes operational if the primary persistence mechanism fails.
         */
        persistencebackup?: "SOURCEIP" | "NONE";
        /**
         * MySQL server version string that the virtual server advertises to clients.
         * Minimum length = 1
         * Maximum length = 31
         */
        mysqlserverversion?: string;
        /**
         * Enable or disable user authentication.
         */
        authentication?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Threshold in percent of active services below which vserver state is made down. If this threshold is 0, vserver state will be up even if one bound service is up.
         * Minimum value = C(0)
         * Maximum value = C(100)
         */
        healththreshold?: number;
        /**
         * Route Health Injection (RHI) functionality of the NetSaler appliance for advertising the route of the VIP address associated with the virtual server. When Vserver RHI Level (RHI) parameter is set to VSVR_CNTRLD, the following are different RHI behaviors for the VIP address on the basis of RHIstate (RHI STATE) settings on the virtual servers associated with the VIP address:
         * * If you set C(rhistate) to C(PASSIVE) on all virtual servers, the NetScaler ADC always advertises the route for the VIP address.
         * * If you set C(rhistate) to C(ACTIVE) on all virtual servers, the NetScaler ADC advertises the route for the VIP address if at least one of the associated virtual servers is in UP state.
         * * If you set C(rhistate) to C(ACTIVE) on some and PASSIVE on others, the NetScaler ADC advertises the route for the VIP address if at least one of the associated virtual servers, whose C(rhistate) set to C(ACTIVE), is in UP state.
         */
        rhistate?: "PASSIVE" | "ACTIVE";
        /**
         * Action to be performed if spillover is to take effect, but no backup chain to spillover is usable or exists.
         */
        sobackupaction?: "DROP" | "ACCEPT" | "REDIRECT";
        /**
         * Use Layer 2 parameters (channel number, MAC address, and VLAN ID) in addition to the 4-tuple (<source IP>:<source port>::<destination IP>:<destination port>) that is used to identify a connection. Allows multiple TCP and non-TCP connections with the same 4-tuple to co-exist on the NetScaler appliance.
         */
        l2conn?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Number of bits to consider in an IPv6 destination or source IP address, for creating the hash that is required by the C(DESTINATIONIPHASH) and C(SOURCEIPHASH) load balancing methods.
         * Minimum value = C(1)
         * Maximum value = C(128)
         */
        v6netmasklen?: number;
        /**
         * Perform load balancing on a per-packet basis, without establishing sessions. Recommended for load balancing of intrusion detection system (IDS) servers and scenarios involving direct server return (DSR), where session information is unnecessary.
         */
        sessionless?: "enabled" | "disabled";
        /**
         * IPv4 or IPv6 address to assign to the virtual server.
         */
        ipv46?: string;
        /**
         * Type of persistence for the virtual server. Available settings function as follows:
         * * C(SOURCEIP) - Connections from the same client IP address belong to the same persistence session.
         * * C(COOKIEINSERT) - Connections that have the same HTTP Cookie, inserted by a Set-Cookie directive from a server, belong to the same persistence session.
         * * C(SSLSESSION) - Connections that have the same SSL Session ID belong to the same persistence session.
         * * C(CUSTOMSERVERID) - Connections with the same server ID form part of the same session. For this persistence type, set the Server ID (CustomServerID) parameter for each service and configure the Rule parameter to identify the server ID in a request.
         * * C(RULE) - All connections that match a user defined rule belong to the same persistence session.
         * * C(URLPASSIVE) - Requests that have the same server ID in the URL query belong to the same persistence session. The server ID is the hexadecimal representation of the IP address and port of the service to which the request must be forwarded. This persistence type requires a rule to identify the server ID in the request.
         * * C(DESTIP) - Connections to the same destination IP address belong to the same persistence session.
         * * C(SRCIPDESTIP) - Connections that have the same source IP address and destination IP address belong to the same persistence session.
         * * C(CALLID) - Connections that have the same CALL-ID SIP header belong to the same persistence session.
         * * C(RTSPSID) - Connections that have the same RTSP Session ID belong to the same persistence session.
         * * FIXSESSION - Connections that have the same SenderCompID and TargetCompID values belong to the same persistence session.
         */
        persistencetype?:
          | "SOURCEIP"
          | "COOKIEINSERT"
          | "SSLSESSION"
          | "RULE"
          | "URLPASSIVE"
          | "CUSTOMSERVERID"
          | "DESTIP"
          | "SRCIPDESTIP"
          | "CALLID"
          | "RTSPSID"
          | "DIAMETER"
          | "FIXSESSION"
          | "NONE";
        /**
         * IP address pattern, in dotted decimal notation, for identifying packets to be accepted by the virtual server. The IP Mask parameter specifies which part of the destination IP address is matched against the pattern. Mutually exclusive with the IP Address parameter.
         * For example, if the IP pattern assigned to the virtual server is C(198.51.100.0) and the IP mask is C(255.255.240.0) (a forward mask), the first 20 bits in the destination IP addresses are matched with the first 20 bits in the pattern. The virtual server accepts requests with IP addresses that range from C(198.51.96.1) to C(198.51.111.254). You can also use a pattern such as C(0.0.2.2) and a mask such as C(0.0.255.255) (a reverse mask).
         * If a destination IP address matches more than one IP pattern, the pattern with the longest match is selected, and the associated virtual server processes the request. For example, if virtual servers C(vs1) and C(vs2) have the same IP pattern, C(0.0.100.128), but different IP masks of C(0.0.255.255) and C(0.0.224.255), a destination IP address of C(198.51.100.128) has the longest match with the IP pattern of vs1. If a destination IP address matches two or more virtual servers to the same extent, the request is processed by the virtual server whose port number matches the port number in the request.
         */
        ippattern?: string;
        /**
         * Name of the DB profile whose settings are to be applied to the virtual server.
         * Minimum length = 1
         * Maximum length = 127
         */
        dbprofilename?: string;
        /**
         * Redirection mode for load balancing. Available settings function as follows:
         * * C(IP) - Before forwarding a request to a server, change the destination IP address to the server's IP address.
         * * C(MAC) - Before forwarding a request to a server, change the destination MAC address to the server's MAC address. The destination IP address is not changed. MAC-based redirection mode is used mostly in firewall load balancing deployments.
         * * C(IPTUNNEL) - Perform IP-in-IP encapsulation for client IP packets. In the outer IP headers, set the destination IP address to the IP address of the server and the source IP address to the subnet IP (SNIP). The client IP packets are not modified. Applicable to both IPv4 and IPv6 packets.
         * * C(TOS) - Encode the virtual server's TOS ID in the TOS field of the IP header.
         * You can use either the C(IPTUNNEL) or the C(TOS) option to implement Direct Server Return (DSR).
         */
        m?: "IP" | "MAC" | "IPTUNNEL" | "TOS";
        /**
         * For a load balancing virtual server of type C(MSSQL), the Microsoft SQL Server version. Set this parameter if you expect some clients to run a version different from the version of the database. This setting provides compatibility between the client-side and server-side connections by ensuring that all communication conforms to the server's version.
         */
        mssqlserverversion?: "70" | "2000" | "2000SP1" | "2005" | "2008" | "2008R2" | "2012" | "2014";
        /**
         * Timeout for spillover persistence, in minutes.
         * Minimum value = C(2)
         * Maximum value = C(1440)
         */
        sopersistencetimeout?: number;
        nsip: string;
        /**
         * Number of requests, or percentage of the load on existing services, by which to increase the load on a new service at each interval in slow-start mode. A non-zero value indicates that slow-start is applicable. A zero value indicates that the global RR startup parameter is applied. Changing the value to zero will cause services currently in slow start to take the full traffic as determined by the LB method. Subsequently, any new services added will use the global RR factor.
         */
        newservicerequest?: number;
        /**
         * Process traffic with the push virtual server that is bound to this load balancing virtual server.
         */
        push?: "enabled" | "disabled";
        [k: string]: any;
      };
      /**
       * Create and remove security groups.
       */
      cs_securitygroup?: {
        /**
         * Domain the security group is related to.
         */
        domain?: string;
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        /**
         * Description of the security group.
         */
        description?: string;
        api_timeout?: number | string;
        api_region?: string;
        /**
         * Name of the project the security group to be created in.
         */
        project?: string;
        /**
         * Default: present
         *
         * State of the security group.
         */
        state?: "present" | "absent";
        /**
         * Account the security group is related to.
         */
        account?: string;
        api_key?: string;
        /**
         * Name of the security group.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * The M(proxysql_query_rules) module modifies query rules using the proxysql admin interface.
       */
      proxysql_query_rules?: {
        /**
         * Free form text field, usable for a descriptive comment of the query rule.
         */
        comment?: string;
        /**
         * Used in combination with I(flagIN) and apply to create chains of rules. When set, I(flagOUT) signifies the I(flagIN) to be used in the next chain of rules.
         */
        flagOUT?: number | string;
        /**
         * Default: None
         *
         * The username used to authenticate to ProxySQL admin interface.
         */
        login_user?: string;
        /**
         * Default: None
         *
         * The password used to authenticate to ProxySQL admin interface.
         */
        login_password?: string;
        /**
         * Regular expression that matches the query text. The dialect of regular expressions used is that of re2 - https://github.com/google/re2
         */
        match_pattern?: string;
        /**
         * Enables query mirroring. If set I(mirror_flagOUT) can be used to evaluates the mirrored query against the specified chain of rules.
         */
        mirror_flagOUT?: number | string;
        /**
         * Used in combination with I(flagIN) and I(flagOUT) to create chains of rules. Setting apply to True signifies the last rule to be applied.
         */
        apply?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Filtering criteria matching schemaname. If I(schemaname) is non-NULL, a query will match only if the connection uses schemaname as its default schema.
         */
        schemaname?: string;
        /**
         * This is the pattern with which to replace the matched pattern. Note that this is optional, and when omitted, the query processor will only cache, route, or set other parameters without rewriting.
         */
        replace_pattern?: string;
        /**
         * Match queries with a specific digest, as returned by stats_mysql_query_digest.digest.
         */
        digest?: string;
        /**
         * Regular expression that matches the query digest. The dialect of regular expressions used is that of re2 - https://github.com/google/re2
         */
        match_digest?: string;
        /**
         * Enables query mirroring. If set I(mirror_hostgroup) can be used to mirror queries to the same or different hostgroup.
         */
        mirror_hostgroup?: number | string;
        /**
         * Query will be logged.
         */
        log?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Number of milliseconds to delay the execution of the query. This is essentially a throttling mechanism and QoS, and allows a way to give priority to queries over others. This value is added to the mysql-default_query_delay global variable that applies to all queries.
         */
        delay?: number | string;
        /**
         * Default: present
         *
         * When C(present) - adds the rule, when C(absent) - removes the rule.
         */
        state?: "present" | "absent";
        /**
         * Match incoming traffic on a specific local IP.
         */
        proxy_addr?: string;
        /**
         * Filtering criteria matching username.  If I(username) is non-NULL, a query will match only if the connection is made with the correct username.
         */
        username?: string;
        /**
         * Specify a config file from which login_user and login_password are to be read.
         */
        config_file?: string;
        /**
         * Default: 6032
         *
         * The port used to connect to ProxySQL admin interface.
         */
        login_port?: number | string;
        /**
         * Default: 127.0.0.1
         *
         * The host used to connect to ProxySQL admin interface.
         */
        login_host?: string;
        /**
         * Route matched queries to this hostgroup. This happens unless there is a started transaction and the logged in user has I(transaction_persistent) set to C(True) (see M(proxysql_mysql_users)).
         */
        destination_hostgroup?: number | string;
        /**
         * Match incoming traffic on a specific local port.
         */
        proxy_port?: number | string;
        login_unix_socket?: string;
        /**
         * Default: True
         *
         * Dynamically load mysql host config to runtime memory.
         */
        load_to_runtime?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * Save mysql host config to sqlite db on disk to persist the configuration.
         */
        save_to_disk?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A rule with I(active) set to C(False) will be tracked in the database, but will be never loaded in the in-memory data structures.
         */
        active?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The number of milliseconds for which to cache the result of the query. Note in ProxySQL 1.1 I(cache_ttl) was in seconds.
         */
        cache_ttl?: number | string;
        /**
         * Query will be blocked, and the specified error_msg will be returned to the client.
         */
        error_msg?: string;
        /**
         * The maximum number of times a query needs to be re-executed in case of detected failure during the execution of the query. If retries is not specified, the global variable mysql-query_retries_on_failure applies.
         */
        retries?: number | string;
        /**
         * If I(negate_match_pattern) is set to C(True), only queries not matching the query text will be considered as a match. This acts as a NOT operator in front of the regular expression matching against match_pattern.
         */
        negate_match_pattern?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * By default we avoid deleting more than one schedule in a single batch, however if you need this behaviour and you're not concerned about the schedules deleted, you can set I(force_delete) to C(True).
         */
        force_delete?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Match traffic from a specific source.
         */
        client_addr?: string;
        /**
         * The maximum timeout in milliseconds with which the matched or rewritten query should be executed. If a query run for longer than the specific threshold, the query is automatically killed. If timeout is not specified, the global variable mysql-default_query_timeout applies.
         */
        timeout?: number | string;
        /**
         * Used in combination with I(flagOUT) and I(apply) to create chains of rules.
         */
        flagIN?: number | string;
        /**
         * The unique id of the rule. Rules are processed in rule_id order.
         */
        rule_id?: number | string;
        [k: string]: any;
      };
      /**
       * Retrieve facts about one or more oVirt/RHV HostStorages (applicable only for block storage).
       */
      ovirt_host_storage_facts?: {
        /**
         * Dictionary with values for fibre channel storage type:
         * C(address) - Address of the fibre channel storage server.
         * C(port) - Port of the fibre channel storage server.
         * C(lun_id) - LUN id.
         */
        fcp?: string;
        /**
         * Host to get device list from.
         */
        host?: string;
        /**
         * Dictionary with values for iSCSI storage type:
         * C(address) - Address of the iSCSI storage server.
         * C(target) - The target IQN for the storage device.
         * C(username) - A CHAP user name for logging into a target.
         * C(password) - A CHAP password for logging into a target.
         */
        iscsi?: string;
        [k: string]: any;
      };
      /**
       * Lists S3 buckets in AWS
       */
      aws_s3_bucket_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage AWS IAM roles
       */
      iam_role?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module helps to install Powershell modules and register custom modules repository on Windows Server.
       */
      win_psmodule?: {
        /**
         * Url of the custom repository.
         */
        url?: string;
        /**
         * If yes imports all commands, even if they have the same names as commands that already exists. Available only in Powershell 5.1 or higher.
         */
        allow_clobber?: string;
        /**
         * Name of the powershell module that has to be installed.
         */
        name?: string;
        /**
         * Name of the custom repository to register.
         */
        repository?: string;
        /**
         * Default: present
         *
         * If present a new module is installed. If absent a module is removed.
         */
        state?: string;
        [k: string]: any;
      };
      /**
       * Create, delete or modify hosts on Pure Storage FlashArrays.
       */
      purefa_host?: {
        /**
         * Default: iscsi
         *
         * Defines the host connection protocol for volumes.
         */
        protocol?: string;
        /**
         * The name of the host.
         */
        host?: string;
        /**
         * Volume name to map to the host.
         */
        volume?: string;
        /**
         * Default: present
         *
         * Define whether the host should exist or not.
         * When removing host all connected volumes will be disconnected.
         */
        state?: string;
        /**
         * List of IQNs of the host if protocol is iscsi.
         */
        iqn?: string;
        /**
         * List of wwns of the host if protocol is fc.
         */
        wwns?: string;
        [k: string]: any;
      };
      /**
       * Gets various details related to AWS VPC Endpoints
       */
      ec2_vpc_endpoint_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Checks management connectivity of a windows host.
       * This is NOT ICMP ping, this is just a trivial test module.
       * For non-Windows targets, use the M(ping) module instead.
       */
      win_ping?: {
        /**
         * Default: pong
         *
         * Alternate data to return instead of 'pong'.
         * If this parameter is set to C(crash), the module will cause an exception.
         */
        data?: string;
        [k: string]: any;
      };
      /**
       * Create, update, or destroy Ansible Tower projects. See U(https://www.ansible.com/tower) for an overview.
       */
      tower_project?: {
        /**
         * Name of the credential to use with this scm resource.
         */
        scm_credential?: string;
        /**
         * The branch to use for the scm resource.
         */
        scm_branch?: string;
        /**
         * Description to use for the project.
         */
        description?: string;
        /**
         * URL to your Tower instance.
         */
        tower_host?: string;
        /**
         * Before an update to the local repository before launching a job with this project.
         */
        scm_update_on_launch?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Remove local modifications before updating.
         */
        scm_clean?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: manual
         *
         * Type of scm resource.
         */
        scm_type?: "manual" | "git" | "hg" | "svn";
        /**
         * Remove the repository completely before updating.
         */
        scm_delete_on_update?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Username for your Tower instance.
         */
        tower_username?: string;
        /**
         * Default: present
         *
         * Desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * The server playbook directory for manual projects.
         */
        local_path?: string;
        /**
         * URL of scm resource.
         */
        scm_url?: string;
        /**
         * Password for your Tower instance.
         */
        tower_password?: string;
        /**
         * Path to the Tower config file. See notes.
         */
        tower_config_file?: string;
        /**
         * Primary key of organization for project.
         */
        organization?: string;
        /**
         * Default: True
         *
         * Dis/allow insecure connections to Tower. If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        tower_verify_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name to use for the project.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Gather facts about dhcp options sets in AWS
       */
      ec2_vpc_dhcp_options_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Uses syslog to add log entries to the host.
       * Can specify facility and priority.
       */
      syslogger?: {
        /**
         * Default: info
         *
         * Set the log priority
         */
        priority?: "emerg" | "alert" | "crit" | "err" | "warning" | "notice" | "info" | "debug";
        /**
         * This is the message to place in syslog
         */
        msg: string;
        /**
         * Default: daemon
         *
         * Set the log facility
         */
        facility?:
          | "kern"
          | "user"
          | "mail"
          | "daemon"
          | "auth"
          | "lpr"
          | "news"
          | "uucp"
          | "cron"
          | "syslog"
          | "local0"
          | "local1"
          | "local2"
          | "local3"
          | "local4"
          | "local5"
          | "local6"
          | "local7";
        /**
         * Default: no
         *
         * Log the pid in brackets
         */
        log_pid?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Create, update, or delete OpenStack Identity service. If a service with the supplied name already exists, it will be updated with the new description and enabled attributes.
       */
      os_keystone_service?: {
        /**
         * The type of service
         */
        service_type?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: True
         *
         * Is the service enabled
         */
        enabled?: string;
        /**
         * Name of the service
         */
        name?: string;
        /**
         * Default: None
         *
         * Description of the service
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * Allows one to run different config-sync actions. These actions allow you to manually sync your configuration across multiple BIG-IPs when those devices are in an HA pair.
       */
      bigip_configsync_actions?: {
        /**
         * Indicates that the sync operation overwrites the configuration on the target.
         */
        overwrite_config?: string;
        /**
         * Specifies that the system synchronizes configuration data from this device to other members of the device group. In this case, the device will do a "push" to all the other devices in the group. This option is mutually exclusive with the C(sync_group_to_device) option.
         */
        sync_device_to_group?: string;
        /**
         * Specifies that the system synchronizes configuration data from the device with the most recent configuration. In this case, the device will do a "pull" from the most recently updated device. This option is mutually exclusive with the C(sync_device_to_group) options.
         */
        sync_most_recent_to_device?: string;
        /**
         * The device group that you want to perform config-sync actions on.
         */
        device_group?: string;
        [k: string]: any;
      };
      /**
       * Adds or removes nat rules from a gateway in a vca environment
       */
      vca_nat?: {
        /**
         * A list of rules to be added to the gateway, Please see examples on valid entries
         */
        nat_rules?: string;
        /**
         * If set to true, it will delete all rules in the gateway that are not given as paramter to this module.
         */
        purge_rules?: string;
        [k: string]: any;
      };
      /**
       * Manages access list entries for ACLs.
       */
      nxos_acl?: {
        protocol?: "http" | "https";
        /**
         * Match packets with given precedence.
         */
        precedence?:
          | "critical"
          | "flash"
          | "flash-override"
          | "immediate"
          | "internet"
          | "network"
          | "priority"
          | "routine";
        time_range?: string;
        /**
         * Destination port operands such as eq, neq, gt, lt, range.
         */
        dest_port_op?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        /**
         * Match established connections.
         */
        established?: "enable";
        /**
         * Log matches against this entry.
         */
        log?: "enable";
        /**
         * Port number or protocol (as supported by the switch).
         */
        proto?: string;
        include_defaults?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent" | "delete_acl";
        provider?: {
          [k: string]: any;
        };
        /**
         * Check non-initial fragments.
         */
        fragments?: "enable";
        save?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Match on the FIN bit.
         */
        fin?: "enable";
        /**
         * Second (end) port when using range operand.
         */
        src_port2?: string;
        username?: string;
        /**
         * Source port operands such as eq, neq, gt, lt, range.
         */
        src_port_op?: string;
        /**
         * Match on the PSH bit.
         */
        psh?: "enable";
        /**
         * Destination ip and mask using IP/MASK notation and supports the keyword 'any'.
         */
        dest?: string;
        /**
         * Match on the SYN bit.
         */
        syn?: "enable";
        /**
         * Match packets with given dscp value.
         */
        dscp?:
          | "af11"
          | "af12"
          | "af13"
          | "af21"
          | "af22"
          | "af23"
          | "af31"
          | "af32"
          | "af33"
          | "af41"
          | "af42"
          | "af43"
          | "cs1"
          | "cs2"
          | "cs3"
          | "cs4"
          | "cs5"
          | "cs6"
          | "cs7"
          | "default"
          | "ef";
        /**
         * Port/protocol and also first (lower) port when using range operand.
         */
        src_port1?: string;
        host?: string;
        /**
         * Match on the URG bit.
         */
        urg?: "enable";
        /**
         * Match on the RST bit.
         */
        rst?: "enable";
        password?: string;
        /**
         * Sequence number of the entry (ACE).
         */
        seq?: string;
        /**
         * Source ip and mask using IP/MASK notation and supports keyword 'any'.
         */
        src?: string;
        /**
         * If action is set to remark, this is the description.
         */
        remark?: string;
        ssh_keyfile?: string;
        /**
         * Case sensitive name of the access list (ACL).
         */
        name: string;
        /**
         * Match on the ACK bit.
         */
        ack?: "enable";
        config?: string;
        timeout?: number | string;
        /**
         * Action of the ACE.
         */
        action?: "permit" | "deny" | "remark";
        /**
         * Port/protocol and also first (lower) port when using range operand.
         */
        dest_port1?: string;
        /**
         * Second (end) port when using range operand.
         */
        dest_port2?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module is used to configure IpAddrGroup object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_ipaddrgroup?: {
        username?: string;
        /**
         * Configure ip address prefix(es).
         */
        prefixes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Configure (ip address, port) tuple(s).
         */
        ip_ports?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Populate ip addresses from tasks of this marathon app.
         */
        marathon_app_name?: string;
        /**
         * Uuid of the ip address group.
         */
        uuid?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * User defined description for the object.
         */
        description?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Task port associated with marathon service port.
         * If marathon app has multiple service ports, this is required.
         * Else, the first task port is used.
         */
        marathon_service_port?: number | string;
        /**
         * Populate ip addresses from members of this cisco apic epg.
         */
        apic_epg_name?: string;
        /**
         * Configure ip address range(s).
         */
        ranges?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        controller?: string;
        /**
         * Configure ip address(es).
         */
        addrs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        tenant?: string;
        /**
         * Populate the ip address ranges from the geo database for this country.
         */
        country_codes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Name of the ip address group.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module manage MAC pools in oVirt/RHV.
       */
      ovirt_mac_pools?: {
        /**
         * If (true) allow a MAC address to be used multiple times in a pool.
         * Default value is set by oVirt/RHV engine to I(false).
         */
        allow_duplicates?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the MAC pool to manage.
         */
        name: string;
        poll_interval?: number | string;
        fetch_nested?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nested_attributes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * List of MAC ranges. The from and to should be split by comma.
         * For example: 00:1a:4a:16:01:51,00:1a:4a:16:01:61
         */
        ranges?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * Should the mac pool be present or absent.
         */
        state?: "present" | "absent";
        auth: {
          [k: string]: any;
        };
        timeout?: number | string;
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Description of the MAC pool.
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * Create and remove domain records.
       */
      exo_dns_domain?: {
        /**
         * Name of the record.
         */
        name: string;
        /**
         * Secret key of the Exoscale DNS API.
         */
        api_secret?: string;
        /**
         * Default: 10
         *
         * HTTP timeout to Exoscale DNS API.
         */
        api_timeout?: number | string;
        /**
         * Default: cloudstack
         *
         * Name of the ini section in the C(cloustack.ini) file.
         */
        api_region?: string;
        /**
         * Default: present
         *
         * State of the resource.
         */
        state?: "present" | "absent";
        /**
         * API key of the Exoscale DNS API.
         */
        api_key?: string;
        /**
         * Default: True
         *
         * Validate SSL certs of the Exoscale DNS API.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Create a policy nat rule. Keep in mind that we can either end up configuring source NAT, destination NAT, or both. Instead of splitting it into two we will make a fair attempt to determine which one the user wants.
       */
      panos_nat_policy?: {
        /**
         * Default: admin
         *
         * username for authentication
         */
        username?: string;
        /**
         * Default: None
         *
         * dnat translated address
         */
        dnat_address?: string;
        /**
         * Default: false
         *
         * bidirectional flag
         */
        snat_bidirectional?: string;
        /**
         * destination zone
         */
        to_zone: string;
        /**
         * Default: any
         *
         * service
         */
        service?: string;
        /**
         * Default: None
         *
         * type of source translation
         */
        snat_type?: string;
        /**
         * Default: ['any']
         *
         * list of source addresses
         */
        source?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * list of source zones
         */
        from_zone:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: ['any']
         *
         * list of destination addresses
         */
        destination?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * dnat translated port
         */
        dnat_port?: string;
        /**
         * Default: None
         *
         * snat interface address
         */
        snat_interface_address?: string;
        /**
         * name of the SNAT rule
         */
        rule_name: string;
        /**
         * Default: false
         *
         * attempt to override rule if one with the same name already exists
         */
        override?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * commit if changed
         */
        commit?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * password for authentication
         */
        password: string;
        /**
         * IP address (or hostname) of PAN-OS device
         */
        ip_address: string;
        /**
         * Default: None
         *
         * snat translated address
         */
        snat_address?: string;
        /**
         * Default: None
         *
         * snat interface
         */
        snat_interface?: string;
        [k: string]: any;
      };
      /**
       * Create, remove, start, stop and tune GlusterFS volumes
       */
      gluster_volume?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Manages Sensu handler configuration
       * For more information, refer to the Sensu documentation: U(https://sensuapp.org/docs/latest/reference/handlers.html)
       */
      sensu_handler?: {
        /**
         * The Sensu event filter (name) to use when filtering events for the handler.
         */
        filter?: string;
        /**
         * The socket definition scope, used to configure the TCP/UDP handler socket.
         * NOTE: the socket attribute is only required for TCP/UDP handlers (i.e. handlers configured with "type": "tcp" or "type": "udp").
         */
        socket?: {
          [k: string]: any;
        };
        /**
         * An array of Sensu event handlers (names) to use for events using the handler set.
         * Each array item must be a string.
         * NOTE: the handlers attribute is only required for handler sets (i.e. handlers configured with "type": "set").
         */
        handlers?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * An array of Sensu event filters (names) to use when filtering events for the handler.
         * Each array item must be a string.
         */
        filters?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * An array of check result severities the handler will handle.
         * NOTE: event resolution bypasses this filtering.
         */
        severities?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The pipe definition scope, used to configure the Sensu transport pipe.
         * NOTE: the pipe attribute is only required for Transport handlers (i.e. handlers configured with "type": "transport").
         */
        pipe?: {
          [k: string]: any;
        };
        /**
         * The Sensu event mutator (name) to use to mutate event data for the handler.
         */
        mutator?: string;
        /**
         * Default: present
         *
         * Whether the handler should be present or not
         */
        state?: "present" | "absent";
        /**
         * The handler command to be executed.
         * The event data is passed to the process via STDIN.
         * NOTE: the command attribute is only required for Pipe handlers (i.e. handlers configured with "type": "pipe").
         */
        command?: string;
        /**
         * Default: 10
         *
         * The handler execution duration timeout in seconds (hard stop).
         * Only used by pipe and tcp handler types.
         */
        timeout?: number | string;
        /**
         * If events in the flapping state should be handled.
         */
        handle_flapping?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * If events matching one or more silence entries should be handled.
         */
        handle_silenced?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The handler type
         */
        type?: "pipe" | "tcp" | "udp" | "transport" | "set";
        /**
         * A unique name for the handler. The name cannot contain special characters or spaces.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Manage slb server objects on A10 Networks devices via aXAPI
       */
      a10_server?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Allows you to set the local security policies that are configured by SecEdit.exe.
       */
      win_security_policy?: {
        /**
         * The ini section the key exists in.
         * If the section does not exist then the module will return an error.
         * Example sections to use are 'Account Policies', 'Local Policies', 'Event Log', 'Restricted Groups', 'System Services', 'Registry' and 'File System'
         */
        section?: string;
        /**
         * The value for the ini key or policy name.
         * If the key takes in a boolean value then 0 = False and 1 = True.
         */
        value?: string;
        /**
         * The ini key of the section or policy name to modify.
         * The module will return an error if this key is invalid.
         */
        key?: string;
        [k: string]: any;
      };
      /**
       * Creates, Removes and configures a binding to an existing IIS Web site
       */
      win_iis_webbinding?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Adds or removes Red Hat software channels
       */
      rhn_channel?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Retrieve facts about one or more oVirt/RHV quotas.
       */
      ovirt_quotas_facts?: {
        /**
         * Name of the quota, can be used as glob expression.
         */
        name?: string;
        /**
         * Name of the datacenter where quota resides.
         */
        data_center?: string;
        [k: string]: any;
      };
      /**
       * Manage Config Snapshots on Cisco ACI fabrics.
       * Creating new Snapshots is done using the configExportP class.
       * Removing Snapshots is done using the configSnapshot class.
       * More information from the internal APIC classes I(config:Snapshot) at U(https://developer.cisco.com/media/mim-ref/MO-configSnapshot.html) and I(config:ExportP) at U(https://developer.cisco.com/media/mim-ref/MO-configExportP.html).
       */
      aci_config_snapshot?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        };
      /**
       * Assume a role using AWS Security Token Service and obtain temporary credentials
       */
      sts_assume_role?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * create / delete a database in the Cloud Databases.
       */
      rax_cdb_user?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * allows you to create/delete/stop instances in Proxmox VE cluster
       * Starting in Ansible 2.1, it automatically detects containerization type (lxc for PVE 4, openvz for older)
       */
      proxmox?: {
        /**
         * forcing operations
         * can be used only with states C(present), C(stopped), C(restarted)
         * with C(state=present) force option allow to overwrite existing container
         * with states C(stopped) , C(restarted) allow to force stop instance
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 1
         *
         * numbers of allocated cpus for instance
         */
        cpus?: number | string;
        /**
         * the template for VM creating
         * required only for C(state=present)
         */
        ostemplate?: string;
        /**
         * Default: 3
         *
         * hard disk size in GB for instance
         */
        disk?: string;
        /**
         * sets DNS search domain for a container
         */
        searchdomain?: string;
        /**
         * the user to authenticate with
         */
        api_user: string;
        /**
         * the instance hostname
         * required only for C(state=present)
         */
        hostname?: string;
        /**
         * Default: local
         *
         * target storage
         */
        storage?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the instance
         */
        state?: "present" | "started" | "absent" | "stopped" | "restarted";
        /**
         * swap memory size in MB for instance
         */
        swap?: number | string;
        /**
         * Default: 512
         *
         * memory size in MB for instance
         */
        memory?: number | string;
        /**
         * Proxmox VE node, when new VM will be created
         * required only for C(state=present)
         * for another states will be autodiscovered
         */
        node?: string;
        /**
         * Default: 1000
         *
         * CPU weight for a VM
         */
        cpuunits?: number | string;
        /**
         * the password to authenticate with
         * you can use PROXMOX_PASSWORD environment variable
         */
        api_password?: string;
        /**
         * the instance root password
         * required only for C(state=present)
         */
        password?: string;
        /**
         * specifies the address the container will be assigned
         */
        ip_address?: string;
        /**
         * the host of the Proxmox VE cluster
         */
        api_host: string;
        /**
         * specifies network interfaces for the container
         */
        netif?: {
          [k: string]: any;
        };
        /**
         * the instance id
         */
        vmid: string;
        /**
         * Default: 30
         *
         * timeout for operations
         */
        timeout?: number | string;
        /**
         * specifies additional mounts (separate disks) for the container
         */
        mounts?: {
          [k: string]: any;
        };
        /**
         * sets DNS server IP address for a container
         */
        nameserver?: string;
        /**
         * enable / disable https certificate verification
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * specifies whether a VM will be started during system bootup
         */
        onboot?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Migrate a VMK interface from VSS to VDS
       */
      vmware_migrate_vmk?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manage scheduled tasks
       */
      win_scheduled_task?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manages Cisco IOS network device configurations over SSH.  This module allows implementers to work with the device running-config.  It provides a way to push a set of commands onto a network device by evaluating the current running-config and only pushing configuration commands that are not already configured.  The config source can be a set of commands or a template.
       */
      ios_template?: {
        /**
         * The path to the config source.  The source can be either a file with config or a template that will be merged during runtime.  By default the task will first search for the source file in role or playbook root folder in templates unless a full path to the file is given.
         */
        src?: string;
        /**
         * The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task.  The I(config) argument allows the implementer to pass in the configuration to use as the base config for comparison.
         */
        config?: string;
        /**
         * The force argument instructs the module not to consider the current device running-config.  When set to true, this will cause the module to push the contents of I(src) into the device without first checking if already configured.
         */
        force?: string;
        /**
         * When this argument is configured true, the module will backup the running-config from the node prior to making any changes. The backup file will be written to backup_{{ hostname }} in the root of the playbook directory.
         */
        backup?: string;
        /**
         * The module, by default, will collect the current device running-config to use as a base for comparison to the commands in I(src).  Setting this value to true will cause the command issued to add any necessary flags to collect all defaults as well as the device configuration.  If the destination device does not support such a flag, this argument is silently ignored.
         */
        include_defaults?: string;
        [k: string]: any;
      };
      /**
       * Manage packages for FreeBSD using 'portinstall'.
       */
      portinstall?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manages BGP Address-family configurations on HUAWEI CloudEngine switches.
       */
      ce_bgp_af?: {
        /**
         * ID of a router that is in IPv4 address format. The value is a string of 0 to 255 characters. The value is in dotted decimal notation.
         */
        router_id?: string;
        /**
         * Ingress lsp policy name.
         */
        ingress_lsp_policy_name?: string;
        /**
         * Default: no_use
         *
         * If the value is true, VPN BGP instances are enabled to automatically select router IDs. If the value is false, VPN BGP instances are disabled from automatically selecting router IDs.
         */
        vrf_rid_auto_sel?: "no_use" | "true" | "false";
        /**
         * Process ID of an imported routing protocol. The value is an integer ranging from 0 to 4294967295.
         */
        import_process_id?: string;
        /**
         * Default: no_use
         *
         * If the value is true, the route reflector is enabled to modify route path attributes based on an export policy. If the value is false, the route reflector is disabled from modifying route path attributes based on an export policy.
         */
        reflect_chg_path?: "no_use" | "true" | "false";
        /**
         * Set the protocol priority of a local BGP route. The value is an integer ranging from 1 to 255.
         */
        preference_local?: string;
        /**
         * Set the protocol priority of EBGP routes. The value is an integer ranging from 1 to 255.
         */
        preference_external?: string;
        /**
         * Default: no_use
         *
         * If the value is true, the router ID attribute is ignored when BGP selects the optimal route. If the value is false, the router ID attribute is not ignored when BGP selects the optimal route.
         */
        router_id_neglect?: "no_use" | "true" | "false";
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Set the Local-Preference attribute. The value is an integer. The value is an integer ranging from 0 to 4294967295.
         */
        default_local_pref?: string;
        port?: number | string;
        transport?: "cli";
        /**
         * Set a cluster ipv4 address. The value is expressed in the format of an IPv4 address.
         */
        reflector_cluster_ipv4?: string;
        /**
         * Set a routing policy to filter routes so that a configured priority is applied to the routes that match the specified policy. The value is a string of 1 to 40 characters.
         */
        prefrence_policy_name?: string;
        /**
         * Specify the name of a route-policy for route iteration. The value is a string of 1 to 40 characters.
         */
        nhp_relay_route_policy_name?: string;
        /**
         * Set a cluster ID. Configuring multiple RRs in a cluster can enhance the stability of the network. The value is an integer ranging from 1 to 4294967295.
         */
        reflector_cluster_id?: string;
        /**
         * Default: no_use
         *
         * If the value is true, the AS path attribute is ignored when BGP selects an optimal route. If the value is false, the AS path attribute is not ignored when BGP selects an optimal route. An AS path with a smaller length has a higher priority.
         */
        as_path_neglect?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * If the value is true, BGP auto FRR is enabled. If the value is false, BGP auto FRR is disabled.
         */
        auto_frr_enable?: "no_use" | "true" | "false";
        /**
         * Specify the mask length of an IP address. The value is an integer ranging from 0 to 128.
         */
        mask_len?: string;
        /**
         * Default: no_use
         *
         * If the value is true, the next hop of an advertised route is changed to the advertiser itself in IBGP load-balancing scenarios. If the value is false, the next hop of an advertised route is not changed to the advertiser itself in IBGP load-balancing scenarios.
         */
        ibgp_ecmp_nexthop_changed?: "no_use" | "true" | "false";
        /**
         * Address family type of a BGP instance.
         */
        af_type: "ipv4uni" | "ipv4multi" | "ipv4vpn" | "ipv6uni" | "ipv6vpn" | "evpn";
        /**
         * Default: no_use
         *
         * If the value is true, the third-party next hop function is enabled. If the value is false, the third-party next hop function is disabled.
         */
        nexthop_third_party?: "no_use" | "true" | "false";
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Specify the Multi-Exit-Discriminator (MED) of BGP routes. The value is an integer ranging from 0 to 4294967295.
         */
        default_med?: string;
        /**
         * Number of Add-Path routes. The value is an integer ranging from 2 to 64.
         */
        add_path_sel_num?: string;
        /**
         * Default: no_use
         *
         * If the value is true, when BGP selects an optimal route, the system uses 4294967295 as the MED value of a route if the route's attribute does not carry a MED value. If the value is false, the system uses 0 as the MED value of a route if the route's attribute does not carry a MED value.
         */
        med_none_as_maximum?: "no_use" | "true" | "false";
        provider?: {
          [k: string]: any;
        };
        /**
         * Default: no_use
         *
         * If the value is true, the next hop of an advertised route is changed to the advertiser itself in BGP load-balancing scenarios. If the value is false, the next hop of an advertised route is not changed to the advertiser itself in BGP load-balancing scenarios.
         */
        ecmp_nexthop_changed?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * If the value is true, enable reduce priority to advertise route. If the value is false, disable reduce priority to advertise route.
         */
        lowest_priority?: "no_use" | "true" | "false";
        /**
         * Set the number of the extended community filter supported by an RR group. The value is a string of 1 to 51 characters.
         */
        rr_filter_number?: string;
        /**
         * Set the protocol priority of IBGP routes. The value is an integer ranging from 1 to 255.
         */
        preference_internal?: string;
        username?: string;
        /**
         * Default: no_use
         *
         * If the value is true, BGP deterministic-MED is enabled. If the value is false, BGP deterministic-MED is disabled.
         */
        determin_med?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * Load balancing as path ignore.
         */
        load_balancing_as_path_ignore?: "no_use" | "true" | "false";
        /**
         * Specify the maximum number of equal-cost routes in the BGP routing table. The value is an integer ranging from 1 to 65535.
         */
        maximum_load_balance?: string;
        /**
         * Default: no_use
         *
         * If the value is true, the MEDs of routes learned from peers in different autonomous systems are compared when BGP selects an optimal route. If the value is false, the MEDs of routes learned from peers in different autonomous systems are not compared when BGP selects an optimal route.
         */
        always_compare_med?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * Allow routes with BGP origin AS validation result Invalid to be selected. If the value is true, invalid routes can participate in route selection. If the value is false, invalid routes cannot participate in route selection.
         */
        allow_invalid_as?: "no_use" | "true" | "false";
        /**
         * Specify the name of a routing policy. The value is a string of 1 to 40 characters.
         */
        rib_only_policy_name?: string;
        /**
         * Default: no_use
         *
         * If the value is true, relay delay enable. If the value is false, relay delay disable.
         */
        relay_delay_enable?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * If the value is true, the function to advertise supernetwork label is enabled. If the value is false, the function to advertise supernetwork label is disabled.
         */
        supernet_label_adv?: "no_use" | "true" | "false";
        host?: string;
        /**
         * Specify the maximum number of equal-cost EBGP routes. The value is an integer ranging from 1 to 65535.
         */
        max_load_ebgp_num?: string;
        /**
         * Routing protocol from which routes can be imported.
         */
        import_protocol?: "direct" | "ospf" | "isis" | "static" | "rip" | "ospfv3" | "ripng";
        /**
         * Default: no_use
         *
         * If the value is true, after the fast EBGP interface awareness function is enabled, EBGP sessions on an interface are deleted immediately when the interface goes Down. If the value is false, after the fast EBGP interface awareness function is enabled, EBGP sessions on an interface are not deleted immediately when the interface goes Down.
         */
        ebgp_if_sensitive?: "no_use" | "true" | "false";
        password?: string;
        /**
         * Specify the IP address advertised by BGP. The value is a string of 0 to 255 characters.
         */
        network_address?: string;
        /**
         * Default: no_use
         *
         * If the value is true, the metrics of next-hop IGP routes are not compared when BGP selects an optimal route. If the value is false, the metrics of next-hop IGP routes are not compared when BGP selects an optimal route. A route with a smaller metric has a higher priority.
         */
        igp_metric_ignore?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * If the value is true, the function to advertise supernetwork unicast routes is enabled. If the value is false, the function to advertise supernetwork unicast routes is disabled.
         */
        supernet_uni_adv?: "no_use" | "true" | "false";
        /**
         * Default: default
         *
         * Next hop select depend type.
         */
        next_hop_sel_depend_type?: "default" | "dependTunnel" | "dependIp";
        /**
         * Default: no_use
         *
         * If the value is true, importing default routes to the BGP routing table is allowed. If the value is false, importing default routes to the BGP routing table is not allowed.
         */
        default_rt_import_enable?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * Originator prior.
         */
        originator_prior?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * If the value is true, BGP is enabled to advertise only optimal routes in the RM to peers. If the value is false, BGP is not enabled to advertise only optimal routes in the RM to peers.
         */
        active_route_advertise?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * If the value is true, route reflection is enabled between clients. If the value is false, route reflection is disabled between clients.
         */
        reflect_between_client?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * If the value is true, VPN-Target filtering function is performed for received VPN routes. If the value is false, VPN-Target filtering function is not performed for received VPN routes.
         */
        policy_vpn_target?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * If the value is true, automatic aggregation is enabled for locally imported routes. If the value is false, automatic aggregation is disabled for locally imported routes.
         */
        summary_automatic?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * If the value is true, BGP routes cannot be advertised to the IP routing table. If the value is false, Routes preferred by BGP are advertised to the IP routing table.
         */
        rib_only_enable?: "no_use" | "true" | "false";
        /**
         * Specify the maximum number of equal-cost IBGP routes. The value is an integer ranging from 1 to 65535.
         */
        max_load_ibgp_num?: string;
        /**
         * Route selection delay. The value is an integer ranging from 0 to 3600.
         */
        route_sel_delay?: string;
        /**
         * Default: no_use
         *
         * If the value is true, the next hop of an advertised route is changed to the advertiser itself in EBGP load-balancing scenarios. If the value is false, the next hop of an advertised route is not changed to the advertiser itself in EBGP load-balancing scenarios.
         */
        ebgp_ecmp_nexthop_changed?: "no_use" | "true" | "false";
        /**
         * Name of a BGP instance. The name is a case-sensitive string of characters. The BGP instance can be used only after the corresponding VPN instance is created. The value is a string of 1 to 31 case-sensitive characters.
         */
        vrf_name: string;
        timeout?: number | string;
        /**
         * Default: no_use
         *
         * If the value is true, modifying extended community attributes is allowed. If the value is false, modifying extended community attributes is not allowed.
         */
        policy_ext_comm_enable?: "no_use" | "true" | "false";
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Installs packages using Chocolatey (http://chocolatey.org/). If Chocolatey is missing from the system, the module will install it. List of packages can be found at http://chocolatey.org/packages
       */
      win_chocolatey?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Module to manage network interfaces of Virtual Machines in oVirt/RHV.
       */
      ovirt_nics?: {
        /**
         * Virtual network interface profile to be attached to VM network interface.
         */
        profile?: string;
        fetch_nested?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the network interface to manage.
         */
        name: string;
        poll_interval?: number | string;
        /**
         * Name of the Virtual Machine to manage.
         * You must provide either C(vm) parameter or C(template) parameter.
         */
        vm?: string;
        nested_attributes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * Should the Virtual Machine NIC be present/absent/plugged/unplugged.
         */
        state?: "present" | "absent" | "plugged" | "unplugged";
        auth: {
          [k: string]: any;
        };
        timeout?: number | string;
        /**
         * Custom MAC address of the network interface, by default it's obtained from MAC pool.
         */
        mac_address?: string;
        /**
         * Default: virtio
         *
         * Type of the network interface.
         */
        interface?: string;
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the template to manage.
         * You must provide either C(vm) parameter or C(template) parameter.
         */
        template?: string;
        /**
         * Logical network to which the VM network interface should use, by default Empty network is used if network is not specified.
         */
        network?: string;
        [k: string]: any;
      };
      /**
       * Manages OpenWrt packages
       */
      opkg?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * This module prints statements during execution and can be useful for debugging variables or expressions without necessarily halting the playbook. Useful for debugging together with the 'when:' directive.
       * This module is also supported for Windows targets.
       */
      debug?: {
        /**
         * Default: Hello world!
         *
         * The customized message that is printed. If omitted, prints a generic message.
         */
        msg?: string;
        /**
         * A variable name to debug.  Mutually exclusive with the 'msg' option.
         */
        var?: string;
        /**
         * A number that controls when the debug is run, if you set to 3 it will only run debug when -vvv or above
         */
        verbosity?: string;
        [k: string]: any;
      };
      /**
       * The C(win_dns_client) module configures the DNS client on Windows network adapters.
       */
      win_dns_client?: {
        /**
         * Adapter name or list of adapter names for which to manage DNS settings ('*' is supported as a wildcard value). The adapter name used is the connection caption in the Network Control Panel or via C(Get-NetAdapter), eg C(Local Area Connection).
         */
        adapter_names?: string;
        /**
         * Single or ordered list of DNS server IPv4 addresses to configure for lookup. An empty list will configure the adapter to use the DHCP-assigned values on connections where DHCP is enabled, or disable DNS lookup on statically-configured connections.
         */
        ipv4_addresses?: string;
        [k: string]: any;
      };
      /**
       * Create, start, stop and delete servers on the cloudscale.ch IaaS service.
       * All operations are performed using the cloudscale.ch public API v1.
       * For details consult the full API documentation: U(https://www.cloudscale.ch/en/api/v1).
       * An valid API token is required for all operations. You can create as many tokens as you like using the cloudscale.ch control panel at U(https://control.cloudscale.ch).
       */
      cloudscale_server?: {
        /**
         * Default: 10
         *
         * Size of the root volume in GB
         */
        volume_size_gb?: number | string;
        /**
         * UUID of the server
         * Either C(name) or C(uuid) are required. These options are mutually exclusive.
         */
        uuid?: string;
        /**
         * Default: True
         *
         * Attach a public network interface to the server
         */
        use_public_network?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: running
         *
         * State of the server
         */
        state?: "running" | "stopped" | "absent";
        /**
         * Image used to create the server
         */
        image?: string;
        /**
         * cloudscale.ch API token.
         * This can also be passed in the CLOUDSCALE_API_TOKEN environment variable.
         */
        api_token?: string;
        /**
         * Cloud-init configuration (cloud-config) data to use for the server.
         */
        user_data?: string;
        /**
         * Name of the Server
         * Either C(name) or C(uuid) are required. These options are mutually exclusive.
         */
        name?: string;
        /**
         * UUID of another server to create an anti-affinity group with
         */
        anti_affinity_with?: string;
        /**
         * Attach a private network interface to the server
         */
        use_private_network?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: null (no bulk storage volume)
         *
         * Size of the bulk storage volume in GB
         */
        bulk_volume_size_gb?: number | string;
        /**
         * Default: True
         *
         * Enable IPv6 on the public network interface
         */
        use_ipv6?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Flavor of the server
         */
        flavor?: string;
        /**
         * List of SSH public keys
         * Use the full content of your .pub file here.
         */
        ssh_keys?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        [k: string]: any;
      };
      /**
       * The M(proxysql_scheduler) module adds or removes schedules using the proxysql admin interface.
       */
      proxysql_scheduler?: {
        /**
         * Text field that can be used for any purposed defined by the user.
         */
        comment?: string;
        /**
         * Default: 6032
         *
         * The port used to connect to ProxySQL admin interface.
         */
        login_port?: number | string;
        /**
         * Specify a config file from which login_user and login_password are to be read.
         */
        config_file?: string;
        /**
         * Default: present
         *
         * When C(present) - adds the schedule, when C(absent) - removes the schedule.
         */
        state?: "present" | "absent";
        /**
         * Argument that can be passed to the job.
         */
        arg1?: string;
        /**
         * Default: None
         *
         * The username used to authenticate to ProxySQL admin interface.
         */
        login_user?: string;
        /**
         * Argument that can be passed to the job.
         */
        arg2?: string;
        /**
         * Argument that can be passed to the job.
         */
        arg3?: string;
        /**
         * Argument that can be passed to the job.
         */
        arg4?: string;
        /**
         * Argument that can be passed to the job.
         */
        arg5?: string;
        /**
         * Full path of the executable to be executed.
         */
        filename: string;
        login_unix_socket?: string;
        /**
         * By default we avoid deleting more than one schedule in a single batch, however if you need this behaviour and you're not concerned about the schedules deleted, you can set I(force_delete) to C(True).
         */
        force_delete?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 10000
         *
         * How often (in millisecond) the job will be started. The minimum value for I(interval_ms) is 100 milliseconds.
         */
        interval_ms?: number | string;
        /**
         * Default: True
         *
         * Dynamically load mysql host config to runtime memory.
         */
        load_to_runtime?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * The password used to authenticate to ProxySQL admin interface.
         */
        login_password?: string;
        /**
         * Default: True
         *
         * A schedule with I(active) set to C(False) will be tracked in the database, but will be never loaded in the in-memory data structures.
         */
        active?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * Save mysql host config to sqlite db on disk to persist the configuration.
         */
        save_to_disk?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 127.0.0.1
         *
         * The host used to connect to ProxySQL admin interface.
         */
        login_host?: string;
        [k: string]: any;
      };
      /**
       * Manages Homebrew casks.
       */
      homebrew_cask?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Get facts for a specific availability set or all availability sets.
       */
      azure_rm_availabilityset_facts?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Limit results to a specific availability set
         */
        name?: string;
        /**
         * The resource group to search for the desired availability set
         */
        resource_group?: string;
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        ad_user?: string;
        cloud_environment?: string;
        secret?: string;
        client_id?: string;
        subscription_id?: string;
        password?: string;
        tenant?: string;
        [k: string]: any;
      };
      /**
       * Create and remove instance groups.
       */
      cs_instancegroup?: {
        /**
         * Account the instance group is related to.
         */
        account?: string;
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        api_region?: string;
        /**
         * Project the instance group is related to.
         */
        project?: string;
        /**
         * Default: present
         *
         * State of the instance group.
         */
        state?: "present" | "absent";
        /**
         * Domain the instance group is related to.
         */
        domain?: string;
        api_key?: string;
        /**
         * Name of the instance group.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Create, remove and revert VM from snapshots.
       */
      cs_vmsnapshot?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Execute vrouter-bgp-add, vrouter-bgp-remove, vrouter-bgp-modify command.
       * Each fabric, cluster, standalone switch, or virtual network (VNET) can provide its tenants with a vRouter service that forwards traffic between networks and implements Layer 4 protocols.
       */
      pn_vrouterbgp?: {
        /**
         * Specify a neighbor IP address to use for BGP.
         * Required for vrouter-bgp-add.
         */
        pn_neighbor?: string;
        /**
         * Specify a name for the vRouter service.
         */
        pn_vrouter_name: string;
        /**
         * Specify if you want a soft reconfiguration of inbound traffic.
         */
        pn_soft_reconfig?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify a value for external BGP to accept or attempt BGP connections to external peers, not directly connected, on the network. This is a value between 1 and 255.
         */
        pn_ebgp?: number | string;
        /**
         * Specify if a route reflector client is used.
         */
        pn_route_reflector?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify BGP neighbor keepalive interval in seconds.
         */
        pn_keepalive?: string;
        /**
         * Specify a multi-protocol for BGP.
         */
        pn_multiprotocol?: "ipv4-unicast" | "ipv6-unicast";
        /**
         * State the action to perform. Use 'present' to add bgp, 'absent' to remove bgp and 'update' to modify bgp.
         */
        state: "present" | "absent" | "update";
        /**
         * Target switch(es) to run the cli on.
         */
        pn_cliswitch?: string;
        /**
         * Specify the maximum number of prefixes.
         */
        pn_max_prefix?: number | string;
        /**
         * Specify outbound route map for neighbor.
         */
        pn_route_mapout?: string;
        /**
         * Specify if you want BFD protocol support for fault detection.
         */
        pn_bfd?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify inbound route map for neighbor.
         */
        pn_route_mapin?: string;
        /**
         * Specify if you want to override capability.
         */
        pn_override_capability?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify the prefix list to filter traffic inbound.
         */
        pn_prefix_listin?: string;
        /**
         * Specify a password, if desired.
         */
        pn_password?: string;
        /**
         * Provide login password if user is not root.
         */
        pn_clipassword?: string;
        /**
         * Specify if you want announce default routes to the neighbor or not.
         */
        pn_default_originate?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Provide login username if user is not root.
         */
        pn_cliusername?: string;
        /**
         * Specify a default weight value between 0 and 65535 for the neighbor routes.
         */
        pn_weight?: number | string;
        /**
         * Specify the prefix list to filter traffic outbound.
         */
        pn_prefix_listout?: string;
        /**
         * Specify the remote Autonomous System(AS) number. This value is between 1 and 4294967295.
         * Required for vrouter-bgp-add.
         */
        pn_remote_as?: string;
        /**
         * Specify if you want a warning message when the maximum number of prefixes is exceeded.
         */
        pn_max_prefix_warn?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify BGP neighbor holdtime in seconds.
         */
        pn_holdtime?: string;
        /**
         * Specify if the next-hop is the same router or not.
         */
        pn_next_hop_self?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module provides declarative management of Interfaces on Cisco IOS XR network devices.
       */
      iosxr_interface?: {
        username?: string;
        /**
         * Default: 10
         *
         * Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state argument which are I(state) with values C(up)/C(down), I(tx_rate) and I(rx_rate).
         */
        delay?: number | string;
        ssh_keyfile?: string;
        /**
         * Description of Interface.
         */
        description?: string;
        /**
         * Interface link status
         */
        duplex?: "full" | "half";
        /**
         * Interface link status.
         */
        enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * State of the Interface configuration, C(up) means present and operationally up and C(down) means present and operationally C(down)
         */
        state?: "present" | "absent" | "up" | "down";
        /**
         * Maximum size of transmit packet.
         */
        mtu?: string;
        /**
         * Receiver rate in bits per second (bps).
         */
        rx_rate?: string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of Interfaces definitions.
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        /**
         * Interface link speed.
         */
        speed?: string;
        port?: number | string;
        /**
         * Transmit rate in bits per second (bps).
         */
        tx_rate?: string;
        /**
         * Name of the Interface.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Policy objects form the match criteria for policy rules and many other functions in PAN-OS. These may include address object, address groups, service objects, service groups, and tag.
       */
      panos_object?: {
        /**
         * Default: admin
         *
         * Username credentials to use for authentication.
         */
        username?: string;
        /**
         * A group of service objects.
         */
        servicegroup?: string;
        /**
         * The type of address object definition.  Valid types are I(ip-netmask) and I(ip-range).
         */
        address_type?: "ip-netmask" | "ip-range" | "fqdn";
        /**
         * A group of address objects to be used in an addressgroup definition.
         */
        static_value?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The description of the object.
         */
        description?: string;
        /**
         * - The color of the tag object.  Valid values are I(red, green, blue, yellow, copper, orange, purple, gray, light green, cyan, light gray, blue gray, lime, black, gold, and brown).
         *
         *
         * Possible choices:
         * red
         * green
         * blue
         * yellow
         * copper
         * orange
         * purple
         * gray
         * light green
         * cyan
         * light gray
         * blue gray
         * lime
         * black
         * gold
         * brown
         */
        color?: string;
        /**
         * The filter match criteria to be used in a dynamic addressgroup definition.
         */
        dynamic_value?: string;
        /**
         * The IP protocol to be used in a service object definition.  Valid values are I(tcp) or I(udp).
         */
        protocol?: "tcp" | "udp";
        /**
         * A static group of address objects or dynamic address group.
         */
        addressgroup?: string;
        /**
         * The name of the address object.
         */
        addressobject?: string;
        /**
         * The source port to be used in a service object definition.
         */
        source_port?: string;
        /**
         * The name of an object or rule tag.
         */
        tag_name?: string;
        /**
         * The name of the service object.
         */
        serviceobject?: string;
        /**
         * API key that can be used instead of I(username)/I(password) credentials.
         */
        api_key?: string;
        /**
         * The IP address of the host or network in CIDR notation.
         */
        address?: string;
        /**
         * The group of service objects used in a servicegroup definition.
         */
        services?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * - The name of the Panorama device group. The group must exist on Panorama. If device group is not defined it is assumed that we are contacting a firewall.
         *
         */
        devicegroup?: string;
        /**
         * The operation to be performed.  Supported values are I(add)/I(delete)/I(find).
         */
        operation: "add" | "update" | "delete" | "find";
        /**
         * Password credentials to use for authentication.
         */
        password?: string;
        /**
         * IP address (or hostname) of PAN-OS device or Panorama management console being configured.
         */
        ip_address: string;
        /**
         * The destination port to be used in a service object definition.
         */
        destination_port?: string;
        [k: string]: any;
      };
      /**
       * This module allows you to work with switch configurations. It provides a way to back up the running or startup configurations of a switch to a remote server. This is achieved by periodically saving a copy of the startup or running configuration of the network device to a remote server using FTP, SFTP, TFTP, or SCP. The first step is to create a directory from where the remote server can be reached. The next step is to provide the full file path of the location where the configuration will be backed up. Authentication details required by the remote server must be provided as well. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run. For more information about this module from Lenovo and customizing it usage for your use cases, please visit U(http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_backup.html)
       */
      cnos_backup?: {
        /**
         * Specify the password for the server relating to the protocol used.
         */
        serverpassword?: string;
        /**
         * This refers to the protocol used by the network device to interact with the remote server to where to upload the backup configuration. The choices are FTP, SFTP, TFTP, or SCP. Any other protocols will result in error. If this parameter is not specified, there is no default value to be used.
         */
        protocol?: string;
        /**
         * This specifies what type of configuration will be backed up. The choices are the running or startup configurations. There is no default value, so it will result in an error if the input is incorrect.
         */
        configType?: string;
        /**
         * Specify the username for the server relating to the protocol used.
         */
        serverusername?: string;
        /**
         * -This specifies the IP Address of the remote server to where the configuration will be backed up.
         */
        rcserverip?: string;
        /**
         * This specifies the full file path where the configuration file will be copied on the remote server. In case the relative path is used as the variable value, the root folder for the user of the server needs to be specified.
         */
        rcpath?: string;
        [k: string]: any;
      };
      /**
       * Add or Remove a subnet to an OpenStack network
       */
      os_subnet?: {
        /**
         * The gateway IP would not be assigned for this subnet
         */
        no_gateway_ip?: string;
        /**
         * Use the default subnetpool for I(ip_version) to obtain a CIDR.
         */
        use_default_subnetpool?: string;
        /**
         * Default: True
         *
         * Whether DHCP should be enabled for this subnet.
         */
        enable_dhcp?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        /**
         * Default: None
         *
         * List of DNS nameservers for this subnet.
         */
        dns_nameservers?: string;
        /**
         * Default: None
         *
         * The ip that would be assigned to the gateway for this subnet
         */
        gateway_ip?: string;
        /**
         * Default: None
         *
         * Project name or ID containing the subnet (name admin-only)
         */
        project?: string;
        /**
         * Default: None
         *
         * IPv6 router advertisement mode
         */
        ipv6_ra_mode?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: string;
        /**
         * Default: None
         *
         * From the subnet pool the starting address from which the IP should be allocated.
         */
        allocation_pool_start?: string;
        /**
         * Default: None
         *
         * A list of host route dictionaries for the subnet.
         */
        host_routes?: string;
        /**
         * Default: 4
         *
         * The IP version of the subnet 4 or 6
         */
        ip_version?: string;
        /**
         * Default: None
         *
         * IPv6 address mode
         */
        ipv6_address_mode?: string;
        /**
         * Default: None
         *
         * The CIDR representation of the subnet that should be assigned to the subnet. Required when I(state) is 'present' and a subnetpool is not specified.
         */
        cidr?: string;
        /**
         * Name of the network to which the subnet should be attached
         * Required when I(state) is 'present'
         */
        network_name?: string;
        /**
         * Default: None
         *
         * From the subnet pool the last IP that should be assigned to the virtual machines.
         */
        allocation_pool_end?: string;
        /**
         * The name of the subnet that should be created. Although Neutron allows for non-unique subnet names, this module enforces subnet name uniqueness.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of the local usernames configured on Arista EOS devices.  It allows playbooks to manage either individual usernames or the collection of usernames in the current running config.  It also supports purging usernames from the configuration that are not explicitly defined.
       */
      eos_user?: {
        [k: string]: any;
      };
      /**
       * Create or destroy Azure Resource Manager template deployments via the Azure SDK for Python. You can find some quick start templates in GitHub here https://github.com/azure/azure-quickstart-templates. For more information on Azue resource manager templates see https://azure.microsoft.com/en-us/documentation/articles/resource-group-template-deploy/.
       */
      azure_rm_deployment?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Create/delete an SSH key in Packet host.
       * API is documented at U(https://www.packet.net/help/api/#page:ssh-keys,header:ssh-keys-ssh-keys-post).
       */
      packet_sshkey?: {
        [k: string]: any;
      };
      /**
       * Manage the network devices. Create, modify, and manage, ethernet, teams, bonds, vlans etc.
       */
      nmcli?: {
        /**
         * Where conn_name will be the name used to call the connection. when not provided a default name is generated: <type>[-<ifname>][-<num>]
         */
        conn_name: string;
        /**
         * Default: None
         *
         * This is only used with VLAN - VLAN ingress priority mapping
         */
        ingress?: string;
        /**
         * Default: 32
         *
         * This is only used with 'bridge-slave' - [<0-63>] - STP priority of this slave
         */
        slavepriority?: string;
        /**
         * Default: None
         *
         * This is only used with VLAN - parent device this VLAN is on, can use ifname
         */
        vlandev?: string;
        /**
         * Default: 15
         *
         * This is only used with bridge - [forward-delay <2-30>] STP forwarding delay, in seconds
         */
        forwarddelay?: string;
        /**
         * Default: None
         *
         * This is only used with VLAN - VLAN egress priority mapping
         */
        egress?: string;
        /**
         * Default: None
         *
         * This is only used with VLAN - VLAN ID in range <0-4095>
         */
        vlanid?: string;
        /**
         * Default: None
         *
         * A list of upto 3 dns servers, ipv4 format e.g. To add two IPv4 DNS server addresses: ["192.0.2.53", "198.51.100.53"]
         */
        dns4?: string;
        /**
         * Default: 2
         *
         * This is only used with bridge - [hello-time <1-10>] STP hello time, in seconds
         */
        hellotime?: string;
        /**
         * Default: 20
         *
         * This is only used with bridge - [max-age <6-42>] STP maximum message age, in seconds
         */
        maxage?: string;
        /**
         * Default: 300
         *
         * This is only used with bridge - [ageing-time <0-1000000>] the Ethernet MAC address aging time, in seconds
         */
        ageingtime?: string;
        /**
         * Default: 128
         *
         * This is only used with 'bridge' - sets STP priority
         */
        priority?: string;
        /**
         * The IPv4 gateway for this interface using this format ie: "192.0.2.1"
         */
        gw4?: string;
        /**
         * Whether the device should exist or not, taking action if the state is different from what is stated.
         */
        state: "present" | "absent";
        /**
         * Default: None
         *
         * The IPv6 gateway for this interface using this format ie: "2001:db8::1"
         */
        gw6?: string;
        /**
         * Default: None
         *
         * master <master (ifname, or connection UUID or conn_name) of bridge, team, bond master connection profile.
         */
        master?: string;
        /**
         * Default: None
         *
         * This is only used with bridge and controls whether Spanning Tree Protocol (STP) is enabled for this bridge
         */
        stp?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: conn_name
         *
         * Where IFNAME will be the what we call the interface name.
         * interface to bind the connection to. The connection will only be applicable to this interface name.
         * A special value of "*" can be used for interface-independent connections.
         * The ifname argument is mandatory for all connection types except bond, team, bridge and vlan.
         */
        ifname?: string;
        /**
         * This is the type of device or network connection that you wish to create.
         */
        type?: "ethernet" | "team" | "team-slave" | "bond" | "bond-slave" | "bridge" | "vlan";
        /**
         * Default: 100
         *
         * This is only used with bond - miimon
         */
        miimon?: string;
        /**
         * Default: None
         *
         * This is only used with bond - ARP IP target
         */
        arp_ip_target?: string;
        /**
         * Default: None
         *
         * This is only used with bond - downdelay
         */
        downdelay?: string;
        /**
         * Default: None
         *
         * This is only used with bridge - MAC address of the bridge (note: this requires a recent kernel feature, originally introduced in 3.15 upstream kernel)
         */
        mac?: string;
        /**
         * Default: None
         *
         * The IPv6 address to this interface using this format ie: "abbe::cafe"
         */
        ip6?: string;
        /**
         * Default: None
         *
         * The IPv4 address to this interface using this format ie: "192.0.2.24/24"
         */
        ip4?: string;
        /**
         * Default: yes
         *
         * Whether the connection should start on boot.
         * Whether the connection profile can be automatically activated
         */
        autoconnect?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A list of upto 3 dns servers, ipv6 format e.g. To add two IPv6 DNS server addresses: ["2001:4860:4860::8888 2001:4860:4860::8844"]
         */
        dns6?: string;
        /**
         * Default: 1500
         *
         * The connection MTU, e.g. 9000. This can't be applied when creating the interface and is done once the interface has been created.
         * Can be used when modifying Team, VLAN, Ethernet (Future plans to implement wifi, pppoe, infiniband)
         */
        mtu?: string;
        /**
         * Default: None
         *
         * This is only used with bond - ARP interval
         */
        arp_interval?: string;
        /**
         * Default: None
         *
         * This is only used with VLAN - flags
         */
        flags?: string;
        /**
         * Default: balence-rr
         *
         * This is the type of device or network connection that you wish to create for a bond, team or bridge.
         */
        mode?: "balance-rr" | "active-backup" | "balance-xor" | "broadcast" | "802.3ad" | "balance-tlb" | "balance-alb";
        /**
         * Default: None
         *
         * This is only used with bond - updelay
         */
        updelay?: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure IpamDnsProviderProfile object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_ipamdnsproviderprofile?: {
        username?: string;
        /**
         * Provider details if type is openstack.
         */
        openstack_profile?: {
          [k: string]: any;
        };
        /**
         * Uuid of the ipam/dns provider profile.
         */
        uuid?: string;
        /**
         * Provider details if type is google cloud.
         */
        gcp_profile?: {
          [k: string]: any;
        };
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * Provider details if type is infoblox.
         */
        infoblox_profile?: {
          [k: string]: any;
        };
        controller?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Provider details if type is avi.
         */
        internal_profile?: {
          [k: string]: any;
        };
        /**
         * Provider details if type is custom.
         * Field introduced in 17.1.1.
         */
        custom_profile?: {
          [k: string]: any;
        };
        /**
         * Field introduced in 17.1.1.
         */
        proxy_configuration?: {
          [k: string]: any;
        };
        /**
         * Provider details if type is aws.
         */
        aws_profile?: {
          [k: string]: any;
        };
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        tenant?: string;
        password?: string;
        /**
         * Provider type for the ipam/dns provider profile.
         * Enum options - IPAMDNS_TYPE_INFOBLOX, IPAMDNS_TYPE_AWS, IPAMDNS_TYPE_OPENSTACK, IPAMDNS_TYPE_GCP, IPAMDNS_TYPE_INFOBLOX_DNS, IPAMDNS_TYPE_CUSTOM,
         * IPAMDNS_TYPE_CUSTOM_DNS, IPAMDNS_TYPE_INTERNAL, IPAMDNS_TYPE_INTERNAL_DNS, IPAMDNS_TYPE_AWS_DNS.
         */
        type: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Name for the ipam/dns provider profile.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Get facts for a specific resource group or all resource groups.
       */
      azure_rm_resouregroup_facts?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Limit results to a specific resource group.
         */
        name?: string;
        /**
         * Limit results by providing a list of tags. Format tags as 'key' or 'key:value'.
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        cloud_environment?: string;
        ad_user?: string;
        secret?: string;
        client_id?: string;
        subscription_id?: string;
        password?: string;
        tenant?: string;
        [k: string]: any;
      };
      /**
       * This module allows you to work with port aggregation related configurations. The operators used are overloaded to ensure control over switch port aggregation configurations. Apart from the regular device connection related attributes, there are five LAG arguments which are overloaded variables that will perform further configurations. They are interfaceArg1, interfaceArg2, interfaceArg3, interfaceArg4, and interfaceArg5. For more details on how to use these arguments, see [Overloaded Variables]. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run. For more information about this module from Lenovo and customizing it usage for your use cases, please U(http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_portchannel.html)
       */
      cnos_portchannel?: {
        /**
         * This specifies the interface range in which the port aggregation is envisaged
         */
        interfaceRange?: string;
        /**
         * This is an overloaded Port Channel fourth argument. Usage of this argument can be found is the User Guide referenced above.
         */
        interfaceArg4?: string;
        /**
         * This is an overloaded Port Channel fifth argument. Usage of this argument can be found is the User Guide referenced above.
         */
        interfaceArg5?: string;
        /**
         * This is an overloaded Port Channel sixth argument. Usage of this argument can be found is the User Guide referenced above.
         */
        interfaceArg6?: string;
        /**
         * This is an overloaded Port Channel seventh argument. Usage of this argument can be found is the User Guide referenced above.
         */
        interfaceArg7?: string;
        /**
         * This is an overloaded Port Channel first argument. Usage of this argument can be found is the User Guide referenced above.
         */
        interfaceArg1?: string;
        /**
         * This is an overloaded Port Channel second argument. Usage of this argument can be found is the User Guide referenced above.
         */
        interfaceArg2?: string;
        /**
         * This is an overloaded Port Channel third argument. Usage of this argument can be found is the User Guide referenced above.
         */
        interfaceArg3?: string;
        [k: string]: any;
      };
      /**
       * Create, destroy, or update volumes on SolidFire
       */
      sf_volume_manager?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * This module provides declarative management of node system attributes on network devices.  It provides an option to configure host system parameters or remove those parameters from the device active configuration.
       */
      net_system?: {
        username?: string;
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        auth_pass?: string;
        host?: string;
        gather_subset?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Manages configuration of an OSPF interface instanceon HUAWEI CloudEngine switches.
       */
      ce_interface_ospf?: {
        username?: string;
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        /**
         * Specifies a process ID. The value is an integer ranging from 1 to 4294967295.
         */
        process_id: string;
        /**
         * Time between sending successive hello packets. Valid values are an integer in the range from 1 to 65535.
         */
        hello_interval?: string;
        /**
         * Ospf area associated with this ospf process. Valid values are a string, formatted as an IP address (i.e. "0.0.0.0") or as an integer between 1 and 4294967295.
         */
        area: string;
        /**
         * Full name of interface, i.e. 40GE1/0/10.
         */
        interface: string;
        /**
         * Setting to true will prevent this interface from receiving HELLO packets. Valid values are 'true' and 'false'.
         */
        silent_interface?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Authentication key id when C(auth_mode) is 'hmac-sha256', 'md5' or 'hmac-md5. Valid value is an integer is in the range from 1 to 255.
         */
        auth_key_id?: string;
        /**
         * Specifies the authentication type.
         */
        auth_mode?: "none" | "null" | "hmac-sha256" | "md5" | "hmac-md5" | "simple";
        /**
         * Time interval an ospf neighbor waits for a hello packet before tearing down adjacencies. Valid values are an integer in the range from 1 to 235926000.
         */
        dead_interval?: string;
        /**
         * Specifies a password for simple authentication. The value is a string of 1 to 8 characters.
         */
        auth_text_simple?: string;
        host?: string;
        /**
         * The cost associated with this interface. Valid values are an integer in the range from 1 to 65535.
         */
        cost?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Specifies a password for MD5, HMAC-MD5, or HMAC-SHA256 authentication. The value is a string of 1 to 255 case-sensitive characters, spaces not supported.
         */
        auth_text_md5?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * This module creates and manages CloudWatch event rules and targets.
       */
      cloudwatchevent_rule?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module allows users to manage their objects/buckets in Google Cloud Storage.  It allows upload and download operations and can set some canned permissions. It also allows retrieval of URLs for objects for use in playbooks, and retrieval of string contents of objects.  This module requires setting the default project in GCS prior to playbook usage.  See U(https://developers.google.com/storage/docs/reference/v1/apiversion1) for information about setting the default project.
       */
      gc_storage?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage the state of a virtual host in RabbitMQ.
       */
      rabbitmq_policy?: {
        /**
         * Default: rabbit
         *
         * Erlang node name of the rabbit we wish to configure.
         */
        node?: string;
        /**
         * The name of the policy to manage.
         */
        name: string;
        /**
         * A dict or string describing the policy.
         */
        tags: {
          [k: string]: any;
        };
        /**
         * A regex of queues to apply the policy to.
         */
        pattern: string;
        /**
         * The priority of the policy.
         */
        priority?: string;
        /**
         * Default: /
         *
         * The name of the vhost to apply to.
         */
        vhost?: string;
        /**
         * Default: present
         *
         * The state of the policy.
         */
        state?: "present" | "absent";
        /**
         * Default: all
         *
         * What the policy applies to. Requires RabbitMQ 3.2.0 or later.
         */
        apply_to?: "all" | "exchanges" | "queues";
        [k: string]: any;
      };
      /**
       * Gets various details related to Route53 zone, record set or health check details
       */
      route53_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create or delete a Rackspace Cloud Monitoring notification plan by associating existing rax_mon_notifications with severity levels. Rackspace monitoring module flow | rax_mon_entity -> rax_mon_check -> rax_mon_notification -> *rax_mon_notification_plan* -> rax_mon_alarm
       */
      rax_mon_notification_plan?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage BIG-IP module provisioning. This module will only provision at the standard levels of Dedicated, Nominal, and Minimum.
       */
      bigip_provision?: {
        /**
         * Default: present
         *
         * The state of the provisioned module on the system. When C(present), guarantees that the specified module is provisioned at the requested level provided that there are sufficient resources on the device (such as physical RAM) to support the provisioned module. When C(absent), de-provision the module.
         */
        state?: string;
        /**
         * The module to provision in BIG-IP.
         */
        module?: string;
        /**
         * Default: nominal
         *
         * Sets the provisioning level for the requested modules. Changing the level for one module may require modifying the level of another module. For example, changing one module to C(dedicated) requires setting all others to C(none). Setting the level of a module to C(none) means that the module is not run.
         */
        level?: string;
        [k: string]: any;
      };
      /**
       * Manage cache clusters in Amazon Elasticache.
       * Returns information about the specified cache cluster.
       */
      elasticache?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Apstra AOS Rack Type module let you manage your Rack Type easily. You can create create and delete Rack Type by Name, ID or by using a JSON File. This module is idempotent and support the I(check) mode. It's using the AOS REST API.
       */
      aos_rack_type?: {
        /**
         * Datastructure of the Rack Type to create. The data can be in YAML / JSON or directly a variable. It's the same datastructure that is returned on success in I(value).
         */
        content?: string;
        /**
         * Default: present
         *
         * Indicate what is the expected state of the Rack Type (present or not).
         */
        state?: "present" | "absent";
        /**
         * An existing AOS session as obtained by M(aos_login) module.
         */
        session: {
          [k: string]: any;
        };
        /**
         * AOS Id of the Rack Type to manage (can't be used to create a new Rack Type), Only one of I(name), I(id) or I(content) can be set.
         */
        id?: string;
        /**
         * Name of the Rack Type to manage. Only one of I(name), I(id) or I(content) can be set.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Add or remove an APT repositories in Ubuntu and Debian.
       */
      apt_repository?: {
        [k: string]: any;
      };
      /**
       * Create, update or delete ECS container instance attributes.
       */
      ecs_attribute?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add, modify and delete an IPA host using IPA API
       */
      ipa_host?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Nokia SR OS configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with SR OS configuration sections in a deterministic way.
       */
      sros_config?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Upload files to a vCenter datastore
       */
      vsphere_copy?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * This module is used to configure PriorityLabels object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_prioritylabels?: {
        username?: string;
        /**
         * A description of the priority labels.
         */
        description?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        controller?: string;
        /**
         * The name of the priority labels.
         */
        name: string;
        /**
         * It is a reference to an object of type cloud.
         */
        cloud_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        tenant?: string;
        /**
         * Equivalent priority labels in descending order.
         */
        equivalent_labels?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Uuid of the priority labels.
         */
        uuid?: string;
        [k: string]: any;
      };
      /**
       * Retrieve facts about a one or more OpenStack projects
       */
      os_project_facts?: {
        /**
         * Default: None
         *
         * Name or ID of the domain containing the project if the cloud supports domains
         */
        domain?: string;
        /**
         * Name or ID of the project
         */
        name?: string;
        /**
         * Default: None
         *
         * A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.
         */
        filters?: string;
        [k: string]: any;
      };
      /**
       * creates / deletes a Rackspace Public Cloud isolated network.
       */
      rax_network?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages AAA server host configuration on HUAWEI CloudEngine switches.
       */
      ce_aaa_server_host?: {
        /**
         * Configured server port for a particular server. The value is an integer ranging from 1 to 65535.
         */
        radius_server_port?: string;
        /**
         * Server IPv6 address. Must be a valid unicast IP address. The total length is 128 bits.
         */
        hwtacacs_server_ipv6?: string;
        /**
         * The type of local user login through, such as ftp ssh snmp telnet.
         */
        local_service_type?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * IPv6 address of configured server. The total length is 128 bits.
         */
        radius_server_ipv6?: string;
        port?: number | string;
        transport?: "cli";
        /**
         * Server IPv4 address. Must be a valid unicast IP address. The value is a string of 0 to 255 characters, in dotted decimal notation.
         */
        hwtacacs_server_ip?: string;
        /**
         * Name of the user group where the user belongs. The user inherits all the rights of the user group. The value is a string of 1 to 32 characters.
         */
        local_user_group?: string;
        /**
         * Login level of a local user. The value is an integer ranging from 0 to 15.
         */
        local_user_level?: string;
        /**
         * Set VPN instance. The value is a string of 1 to 31 case-sensitive characters.
         */
        radius_vpn_name?: string;
        /**
         * VPN instance name.
         */
        hwtacacs_vpn_name?: string;
        /**
         * Hwtacacs server host name.
         */
        hwtacacs_server_host_name?: string;
        /**
         * Login password of a user. The password can contain letters, numbers, and special characters. The value is a string of 1 to 255 characters.
         */
        local_password?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        provider?: {
          [k: string]: any;
        };
        /**
         * Name of a local user. The value is a string of 1 to 253 characters.
         */
        local_user_name?: string;
        /**
         * IPv4 address of configured server. The value is a string of 0 to 255 characters, in dotted decimal notation.
         */
        radius_server_ip?: string;
        username?: string;
        /**
         * Hostname of configured server. The value is a string of 0 to 255 case-sensitive characters.
         */
        radius_server_name?: string;
        host?: string;
        /**
         * Configured primary or secondary server for a particular server.
         */
        radius_server_mode?: "Secondary-server" | "Primary-server";
        /**
         * Hwtacacs server type.
         */
        hwtacacs_server_type?: "Authentication" | "Authorization" | "Accounting" | "Common";
        password?: string;
        raduis_server_type?: "Authentication" | "Accounting";
        /**
         * FTP user directory. The value is a string of 1 to 255 characters.
         */
        local_ftp_dir?: string;
        /**
         * RADIUS server group's name. The value is a string of 1 to 32 case-insensitive characters.
         */
        radius_group_name?: string;
        /**
         * Name of a HWTACACS template. The value is a string of 1 to 32 case-insensitive characters.
         */
        hwtacacs_template?: string;
        timeout?: number | string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Whether the server is secondary.
         */
        hwtacacs_is_secondary_server?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Set the public-net.
         */
        hwtacacs_is_public_net?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Use variables to create new hosts and groups in inventory for use in later plays of the same playbook. Takes variables so you can define the new hosts more fully.
       * This module is also supported for Windows targets.
       */
      add_host?: {
        /**
         * The hostname/ip of the host to add to the inventory, can include a colon and a port number.
         */
        name?: string;
        /**
         * The groups to add the hostname to, comma separated.
         */
        groups?: string;
        [k: string]: any;
      };
      /**
       * Manage limits of resources for domains, accounts and projects.
       */
      cs_resourcelimit?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Manages global VPC configuration
       */
      nxos_vpc?: {
        username?: string;
        /**
         * Enables/Disables peer gateway
         */
        peer_gw:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        /**
         * System priority device.  Remember they must match between peers.
         */
        system_priority?: string;
        /**
         * Role priority for device. Remember lower is better.
         */
        role_priority?: string;
        /**
         * Enables/Disables auto recovery
         */
        auto_recovery:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: management
         *
         * VRF used for peer keepalive link
         */
        pkl_vrf?: string;
        /**
         * manages delay restore command and config value in seconds
         */
        delay_restore?: string;
        /**
         * VPC domain
         */
        domain: string;
        /**
         * Source IP address used for peer keepalive link
         */
        pkl_src?: string;
        /**
         * Manages desired state of the resource
         */
        state?: "present" | "absent";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        host?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        /**
         * Destination (remote) IP address used for peer keepalive link
         */
        pkl_dest?: string;
        [k: string]: any;
      };
      /**
       * Create, start, stop and delete Solaris zones. This module doesn't currently allow changing of options for a zone that's already been created.
       */
      solaris_zone?: {
        /**
         * Default: empty string
         *
         * Extra options to the zoneadm(1M) install command. To automate Solaris 11 zone creation, use this to specify the profile XML file, e.g. install_options="-c sc_profile.xml"
         */
        install_options?: string;
        /**
         * Default: 600
         *
         * Timeout, in seconds, for zone to boot.
         */
        timeout?: number | string;
        /**
         * Default: empty string
         *
         * Extra options to the zonecfg(1M) create command.
         */
        create_options?: string;
        /**
         * Default: present
         *
         * C(present), configure and install the zone.
         * C(installed), synonym for C(present).
         * C(running), if the zone already exists, boot it, otherwise, configure and install the zone first, then boot it.
         * C(started), synonym for C(running).
         * C(stopped), shutdown a zone.
         * C(absent), destroy the zone.
         * C(configured), configure the ready so that it's to be attached.
         * C(attached), attach a zone, but do not boot it.
         * C(detached), shutdown and detach a zone
         */
        state?:
          | "present"
          | "installed"
          | "started"
          | "running"
          | "stopped"
          | "absent"
          | "configured"
          | "attached"
          | "detached";
        /**
         * The password hash for the root account. If not specified, the zone's root account will not have a password.
         */
        root_password?: string;
        /**
         * Whether to create a sparse (C(true)) or whole root (C(false)) zone.
         */
        sparse?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The path where the zone will be created. This is required when the zone is created, but not used otherwise.
         */
        path?: string;
        /**
         * Default: empty string
         *
         * The zonecfg configuration commands for this zone. See zonecfg(1M) for the valid options and syntax. Typically this is a list of options separated by semi-colons or new lines, e.g. "set auto-boot=true;add net;set physical=bge0;set address=10.1.1.1;end"
         */
        config?: string;
        /**
         * Default: empty string
         *
         * Extra options to the zoneadm attach command. For example, this can be used to specify whether a minimum or full update of packages is required and if any packages need to be deleted. For valid values, see zoneadm(1M)
         */
        attach_options?: string;
        /**
         * Zone name.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Creates, modifies or removes groups in Active Directory.
       * For local groups, use the M(win_group) module instead.
       */
      win_domain_group?: {
        /**
         * The category of the group, this is the value to assign to the LDAP C(groupType) attribute.
         * If a new group is created then C(security) will be used by default.
         */
        category?: string;
        /**
         * Will set the C(ProtectedFromAccidentalDeletion) flag based on this value.
         * This flag stops a user from deleting or moving a group to a different path.
         */
        protect?: string;
        /**
         * The value to assign to the LDAP C(displayName) attribute.
         */
        display_name?: string;
        /**
         * The value to be assigned to the LDAP C(description) attribute.
         */
        description?: string;
        /**
         * The username to use when interacting with AD.
         * If this is not set then the user Ansible used to log in with will be used instead.
         */
        domain_username?: string;
        /**
         * Default: no
         *
         * Will ignore the C(ProtectedFromAccidentalDeletion) flag when deleting or moving a group.
         * The module will fail if one of these actions need to occur and this value is set to no.
         */
        ignore_protection?: string;
        /**
         * Default: present
         *
         * If C(state=present) this module will ensure the group is created and is configured accordingly.
         * If C(state=absent) this module will delete the group if it exists
         */
        state?: string;
        /**
         * The password for C(username).
         */
        domain_password?: string;
        /**
         * The full LDAP path to create or move the group to.
         * This should be the path to the parent object to create or move the group to.
         * See examples for details of how this path is formed.
         */
        organizational_unit?: string;
        /**
         * The scope of the group.
         * If C(state=present) and the group doesn't exist then this must be set.
         */
        scope?: string;
        /**
         * The value to be assigned to the LDAP C(managedBy) attribute.
         * This value can be in the forms C(Distinguished Name), C(objectGUID), C(objectSid) or C(sAMAccountName), see examples for more details.
         */
        managed_by?: string;
        /**
         * A dict of custom LDAP attributes to set on the group.
         * This can be used to set custom attributes that are not exposed as module parameters, e.g. C(mail).
         * See the examples on how to format this parameter.
         */
        attributes?: string;
        /**
         * The name of the group to create, modify or remove.
         * This value can be in the forms C(Distinguished Name), C(objectGUID), C(objectSid) or C(sAMAccountName), see examples for more details.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Migrates a virtual machine from a standard vswitch to distributed
       */
      vmware_vm_vss_dvs_migrate?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * This module allows you to copy the running configuration of a switch over its startup configuration. It is recommended to use this module shortly after any major configuration changes so they persist after a switch restart. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run. For more information about this module from Lenovo and customizing it usage for your use cases, please visit U(http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_save.html)
       */
      cnos_save?: {
        [k: string]: any;
      };
      /**
       * Get facts for a specific resource group or all resource groups.
       */
      azure_rm_resourcegroup_facts?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Limit results to a specific resource group.
         */
        name?: string;
        /**
         * Limit results by providing a list of tags. Format tags as 'key' or 'key:value'.
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        cloud_environment?: string;
        ad_user?: string;
        secret?: string;
        client_id?: string;
        subscription_id?: string;
        password?: string;
        tenant?: string;
        [k: string]: any;
      };
      /**
       * Manages Citrix NetScaler server and service entities.
       */
      netscaler?: {
        /**
         * Default: hostname
         *
         * name of the entity
         */
        name?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: https
         *
         * protocol used to access netscaler
         */
        nsc_protocol?: string;
        /**
         * hostname or ip of your netscaler
         */
        nsc_host: string;
        /**
         * username
         */
        user: string;
        /**
         * Default: disable
         *
         * the action you want to perform on the entity
         */
        action?: "enable" | "disable";
        /**
         * password
         */
        password: string;
        /**
         * Default: server
         *
         * type of the entity
         */
        type?: "server" | "service";
        [k: string]: any;
      };
      /**
       * Creates and deletes Azure DNS zones.
       */
      azure_rm_dnszone?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * name of the DNS Zone.
         */
        name: string;
        /**
         * name of resource group.
         */
        resource_group: string;
        tags?: {
          [k: string]: any;
        };
        ad_user?: string;
        append_tags?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        cloud_environment?: string;
        secret?: string;
        /**
         * Default: present
         *
         * Assert the state of the zone. Use 'present' to create or update and 'absent' to delete.
         */
        state?: "absent" | "present";
        client_id?: string;
        subscription_id?: string;
        password?: string;
        tenant?: string;
        [k: string]: any;
      };
      /**
       * Sends an arbitrary set of commands to an JUNOS node and returns the results read from the device.  This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.
       */
      junos_command?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Enables or disables a specified module of the Apache2 webserver.
       */
      apache2_module?: {
        /**
         * Default: present
         *
         * indicate the desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * force disabling of default modules and override Debian warnings
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * name of the module to enable/disable
         */
        name: string;
        /**
         * Ignore configuration checks about inconsistent module configuration. Especially for mpm_* modules.
         */
        ignore_configcheck?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Management of LXC containers
       */
      lxc_container?: {
        /**
         * Create zfs under given zfsroot.
         */
        zfs_root?: string;
        /**
         * Name of the new cloned server. This is only used when state is clone.
         */
        clone_name?: string;
        /**
         * list of 'key=value' options to use when configuring a container.
         */
        container_config?: string;
        /**
         * Default: ext4
         *
         * Create fstype TYPE.
         */
        fs_type?: string;
        /**
         * Create an archive of a container. This will create a tarball of the running container.
         */
        archive?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enable a container log for host actions to the container.
         */
        container_log?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: started
         *
         * Define the state of a container. If you clone a container using `clone_name` the newly cloned container created in a stopped state. The running container will be stopped while the clone operation is happening and upon completion of the clone the original container state will be restored.
         */
        state?: "absent" | "restarted" | "started" | "clone" | "frozen" | "stopped";
        /**
         * Default: ubuntu
         *
         * Name of the template to use within an LXC create.
         */
        template?: string;
        /**
         * Path to the LXC configuration file.
         */
        config?: string;
        /**
         * Path the save the archived container. If the path does not exist the archive method will attempt to create it.
         */
        archive_path?: string;
        /**
         * Default: INFO
         *
         * Set the log level for a container where *container_log* was set.
         */
        container_log_level?: "info" | "INFO" | "Info" | "debug" | "DEBUG" | "Debug" | "error" | "ERROR" | "Error";
        /**
         * Template options when building the container.
         */
        template_options?: string;
        /**
         * Run a command within a container.
         */
        container_command?: string;
        /**
         * Place container under PATH
         */
        lxc_path?: string;
        /**
         * Default: gzip
         *
         * Type of compression to use when creating an archive of a running container.
         */
        archive_compression?: "gzip" | "bzip2" | "none";
        /**
         * Use LVM thin pool called TP.
         */
        thinpool?: string;
        /**
         * Create a snapshot a container when cloning. This is not supported by all container storage backends. Enabling this may fail if the backing store does not support snapshots.
         */
        clone_snapshot?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of a container.
         */
        name: string;
        /**
         * Default: $CONTAINER_NAME
         *
         * Name of the logical volume, defaults to the container name.
         */
        lv_name?: string;
        /**
         * Default: 5G
         *
         * File system Size.
         */
        fs_size?: string;
        /**
         * Default: dir
         *
         * Backend storage type for the container.
         */
        backing_store?: "dir" | "lvm" | "loop" | "btrfs" | "overlayfs" | "zfs";
        /**
         * Default: lxc
         *
         * If Backend store is lvm, specify the name of the volume group.
         */
        vg_name?: string;
        /**
         * Place rootfs directory under DIR.
         */
        directory?: string;
        [k: string]: any;
      };
      /**
       * Use to enable or disable eAPI access, and set the port and state of http, https, local_http and unix-socket servers.
       * When enabling eAPI access the default is to enable HTTP on port 80, enable HTTPS on port 443, disable local HTTP, and disable Unix socket server. Use the options listed below to override the default configuration.
       * Requires EOS v4.12 or greater.
       */
      eos_eapi?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Creates (empty) files, updates file modification stamps of existing files, and can create or remove directories.
       * Unlike M(file), does not modify ownership, permissions or manipulate links.
       * For non-Windows targets, use the M(file) module instead.
       */
      win_file?: {
        /**
         * path to the file being managed.  Aliases: I(dest), I(name)
         */
        path?: string;
        /**
         * If C(directory), all immediate subdirectories will be created if they do not exist. If C(file), the file will NOT be created if it does not exist, see the M(copy) or M(template) module if you want that behavior.  If C(absent), directories will be recursively deleted, and files will be removed. If C(touch), an empty file will be created if the C(path) does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way C(touch) works from the command line).
         */
        state?: string;
        [k: string]: any;
      };
      /**
       * creates / deletes a Rackspace Public Cloud instance and optionally waits for it to be 'running'.
       */
      rax?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Acquires and associates a public IP to an account or project. Due to API limitations this is not an idempotent call, so be sure to only conditionally call this when C(state=present)
       */
      cs_ip_address?: {
        /**
         * Account the IP address is related to.
         */
        account?: string;
        api_key?: string;
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        api_region?: string;
        /**
         * Name of the project the IP address is related to.
         */
        project?: string;
        state?: "present" | "absent";
        /**
         * Domain the IP address is related to.
         */
        domain?: string;
        /**
         * Name of the zone in which the IP address is in.
         * If not set, default zone is used.
         */
        zone?: string;
        /**
         * Public IP address.
         * Required if C(state=absent)
         */
        ip_address?: string;
        /**
         * VPC the IP address is related to.
         */
        vpc?: string;
        /**
         * Network the IP address is related to.
         */
        network?: string;
        [k: string]: any;
      };
      /**
       * Manages interface specific VPN configuration of HUAWEI CloudEngine switches.
       */
      ce_vrf_interface?: {
        username?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        /**
         * An interface that can binding VPN instance, i.e. 40GE1/0/22, Vlanif10. Must be fully qualified interface name. Interface types, such as 10GE, 40GE, 100GE, LoopBack, MEth, Tunnel, Vlanif....
         */
        vpn_interface: string;
        host?: string;
        /**
         * VPN instance, the length of vrf name is 1 ~ 31, i.e. "test", but can not be C(_public_).
         */
        vrf: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Gather facts about internet gateways in AWS.
       */
      ec2_vpc_igw_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add or remove Zypper repositories on SUSE and openSUSE
       */
      zypper_repository?: {
        [k: string]: any;
      };
      /**
       * Obtain the AOS server session token by providing the required username and password credentials.  Upon successful authentication, this module will return the session-token that is required by all subsequent AOS module usage. On success the module will automatically populate ansible facts with the variable I(aos_session) This module is not idempotent and do not support check mode.
       */
      aos_login?: {
        /**
         * Default: admin
         *
         * Password to use when connecting to the AOS server.
         */
        passwd?: string;
        /**
         * Address of the AOS Server on which you want to open a connection.
         */
        server: string;
        /**
         * Default: 443
         *
         * Port number to use when connecting to the AOS server.
         */
        port?: number | string;
        /**
         * Default: admin
         *
         * Login username to use when connecting to the AOS server.
         */
        user?: string;
        [k: string]: any;
      };
      /**
       * Manage SPAN source groups on Cisco ACI fabrics.
       * More information from the internal APIC class I(span:SrcGrp) at U(https://developer.cisco.com/media/mim-ref/MO-spanSrcGrp.html).
       */
      aci_tenant_span_src_group?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Setting the Timestamp Format of Logs. Configuring the Device to Output Logs to the Log Buffer.
       */
      ce_info_center_log?: {
        username?: string;
        /**
         * Specifies a log severity.
         */
        log_level?:
          | "emergencies"
          | "alert"
          | "critical"
          | "error"
          | "warning"
          | "notification"
          | "informational"
          | "debugging";
        /**
         * Specifies the name of a module. The value is a module name in registration logs.
         */
        module_name?: string;
        /**
         * Default: no_use
         *
         * Indicates whether log filtering is enabled.
         */
        log_enable?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * Enables the Switch to send logs to the log buffer.
         */
        log_buff_enable?: "no_use" | "true" | "false";
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        /**
         * Specifies the maximum number of logs in the log buffer. The value is an integer that ranges from 0 to 10240. If logbuffer-size is 0, logs are not displayed.
         */
        log_buff_size?: string;
        /**
         * Specifies a channel ID. The value is an integer ranging from 0 to 9.
         */
        channel_id?: string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Sets the timestamp format of logs.
         */
        log_time_stamp?:
          | "date_boot"
          | "date_second"
          | "date_tenthsecond"
          | "date_millisecond"
          | "shortdate_second"
          | "shortdate_tenthsecond"
          | "shortdate_millisecond"
          | "formatdate_second"
          | "formatdate_tenthsecond"
          | "formatdate_millisecond";
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Manage ssl cerificate keys.
       */
      netscaler_ssl_certkey?: {
        /**
         * Issue an alert when the certificate is about to expire.
         */
        expirymonitor?: "enabled" | "disabled";
        nitro_protocol?: "http" | "https";
        /**
         * Pass phrase used to encrypt the private-key. Required when adding an encrypted private-key in PEM format.
         * Minimum length = 1
         */
        passplain?: string;
        save_config?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nsip: string;
        /**
         * Input format of the certificate and the private-key files. The three formats supported by the appliance are:
         * PEM - Privacy Enhanced Mail
         * DER - Distinguished Encoding Rule
         * PFX - Personal Information Exchange.
         */
        inform?: "DER" | "PEM" | "PFX";
        /**
         * Name of and, optionally, path to the X509 certificate file that is used to form the certificate-key pair. The certificate file should be present on the appliance's hard-disk drive or solid-state drive. Storing a certificate in any location other than the default might cause inconsistency in a high availability setup. /nsconfig/ssl/ is the default path.
         * Minimum length = 1
         */
        cert?: string;
        state?: "present" | "absent";
        nitro_user: string;
        /**
         * Name of and, optionally, path to the private-key file that is used to form the certificate-key pair. The certificate file should be present on the appliance's hard-disk drive or solid-state drive. Storing a certificate in any location other than the default might cause inconsistency in a high availability setup. /nsconfig/ssl/ is the default path.
         * Minimum length = 1
         */
        key?: string;
        /**
         * Time, in number of days, before certificate expiration, at which to generate an alert that the certificate is about to expire.
         * Minimum value = C(10)
         * Maximum value = C(100)
         */
        notificationperiod?: number;
        /**
         * Name for the certificate and private-key pair. Must begin with an ASCII alphanumeric or underscore C(_) character, and must contain only ASCII alphanumeric, underscore C(_), hash C(#), period C(.), space C( ), colon C(:), at C(@), equals C(=), and hyphen C(-) characters. Cannot be changed after the certificate-key pair is created.
         * The following requirement applies only to the NetScaler CLI:
         * If the name includes one or more spaces, enclose the name in double or single quotation marks (for example, "my cert" or 'my cert').
         * Minimum length = 1
         */
        certkey?: string;
        nitro_pass: string;
        /**
         * Passphrase that was used to encrypt the private-key. Use this option to load encrypted private-keys in PEM format.
         */
        password?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nitro_timeout?: number;
        [k: string]: any;
      };
      /**
       * Create and delete snapshots images on snapshot groups for NetApp E-series storage arrays.
       * Only the oldest snapshot image can be deleted so consistency is preserved.
       * Related: Snapshot volumes are created from snapshot images.
       */
      netapp_e_snapshot_images?: {
        /**
         * The url to the SANtricity WebServices Proxy or embedded REST API.
         */
        api_url?: string;
        /**
         * The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_password?: string;
        /**
         * Whether a new snapshot image should be created or oldest be deleted.
         */
        state?: string;
        /**
         * The name of the snapshot group in which you want to create a snapshot image.
         */
        snapshot_group?: string;
        /**
         * The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_username?: string;
        /**
         * Default: True
         *
         * Should https certificates be validated?
         */
        validate_certs?: string;
        [k: string]: any;
      };
      /**
       * Can create or delete AWS Autoscaling Configurations
       * Works with the ec2_asg module to manage Autoscaling Groups
       */
      ec2_lc?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * creates / deletes or resize a Rackspace Cloud Databases instance and optionally waits for it to be 'running'. The name option needs to be unique since it's used to identify the instance.
       */
      rax_cdb?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Runs one or more commands on remote devices running VyOS. This module can also be introspected to validate key parameters before returning successfully.
       */
      vyos_system?: {
        [k: string]: any;
      };
      /**
       * Each row in mysql_replication_hostgroups represent a pair of writer_hostgroup and reader_hostgroup. ProxySQL will monitor the value of read_only for all the servers in specified hostgroups, and based on the value of read_only will assign the server to the writer or reader hostgroups.
       */
      proxysql_replication_hostgroups?: {
        /**
         * Text field that can be used for any purposed defined by the user.
         */
        comment?: string;
        /**
         * Default: 6032
         *
         * The port used to connect to ProxySQL admin interface.
         */
        login_port?: number | string;
        /**
         * Id of the reader hostgroup.
         */
        reader_hostgroup: number | string;
        /**
         * Specify a config file from which login_user and login_password are to be read.
         */
        config_file?: string;
        /**
         * Default: None
         *
         * The username used to authenticate to ProxySQL admin interface.
         */
        login_user?: string;
        /**
         * Default: 127.0.0.1
         *
         * The host used to connect to ProxySQL admin interface.
         */
        login_host?: string;
        /**
         * Default: None
         *
         * The password used to authenticate to ProxySQL admin interface.
         */
        login_password?: string;
        /**
         * Id of the writer hostgroup.
         */
        writer_hostgroup: number | string;
        login_unix_socket?: string;
        /**
         * Default: present
         *
         * When C(present) - adds the replication hostgroup, when C(absent) - removes the replication hostgroup.
         */
        state?: "present" | "absent";
        /**
         * Default: True
         *
         * Dynamically load mysql host config to runtime memory.
         */
        load_to_runtime?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * Save mysql host config to sqlite db on disk to persist the configuration.
         */
        save_to_disk?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Sends an arbitrary command to an HUAWEI CloudEngine node and returns the results read from the device.  The ce_command module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.
       */
      ce_command?: {
        username?: string;
        /**
         * Default: 10
         *
         * Specifies the number of retries a command should by tried before it is considered failed.  The command is run on the target device every retry and evaluated against the I(wait_for) conditionals.
         */
        retries?: number | string;
        /**
         * The commands to send to the remote HUAWEI CloudEngine device over the configured provider.  The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of I(retries) has been exceeded.
         */
        commands:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Specifies what to evaluate from the output of the command and what conditionals to apply.  This argument will cause the task to wait for a particular conditional to be true before moving forward.   If the conditional is not true by the configured retries, the task fails.  See examples.
         */
        wait_for?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: 1
         *
         * Configures the interval in seconds to wait between retries of the command.  If the command does not pass the specified conditional, the interval indicates how to long to wait before trying the command again.
         */
        interval?: number | string;
        host?: string;
        /**
         * Default: all
         *
         * The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy.  Valid values are C(all) or C(any).  If the value is set to C(all) then all conditionals in the I(wait_for) must be satisfied.  If the value is set to C(any) then only one of the values must be satisfied.
         */
        match?: "any" | "all";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Create, update, disable, lock, enable and remove users.
       */
      cs_user?: {
        /**
         * Username of the user.
         */
        username: string;
        /**
         * Default: ROOT
         *
         * Domain the user is related to.
         */
        domain?: string;
        /**
         * Last name of the user.
         * Required on C(state=present).
         */
        last_name?: string;
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        /**
         * Account the user will be created under.
         * Required on C(state=present).
         */
        account?: string;
        api_region?: string;
        api_key?: string;
        /**
         * Default: present
         *
         * State of the user.
         * C(unlocked) is an alias for C(enabled).
         */
        state?: "present" | "absent" | "enabled" | "disabled" | "locked" | "unlocked";
        /**
         * First name of the user.
         * Required on C(state=present).
         */
        first_name?: string;
        /**
         * Timezone of the user.
         */
        timezone?: string;
        /**
         * Password of the user to be created.
         * Required on C(state=present).
         * Only considered on creation and will not be updated if user exists.
         */
        password?: string;
        /**
         * Email of the user.
         * Required on C(state=present).
         */
        email?: string;
        [k: string]: any;
      };
      /**
       * The M(grove) module sends a message for a service to a Grove.io channel.
       */
      grove?: {
        /**
         * Default: ansible
         *
         * Name of the service (displayed as the "user" in the message)
         */
        service?: string;
        /**
         * Service URL for the web client
         */
        url?: string;
        /**
         * Icon for the service
         */
        icon_url?: string;
        /**
         * Token of the channel to post to.
         */
        channel_token: string;
        /**
         * Message content
         */
        message: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module is used to configure TrafficCloneProfile object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_trafficcloneprofile?: {
        username?: string;
        /**
         * Uuid of the traffic clone profile.
         * Field introduced in 17.1.1.
         */
        uuid?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         * Field introduced in 17.1.1.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * It is a reference to an object of type cloud.
         * Field introduced in 17.1.1.
         */
        cloud_ref?: string;
        controller?: string;
        tenant?: string;
        /**
         * Field introduced in 17.1.1.
         */
        clone_servers?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        /**
         * Specifies if client ip needs to be preserved to clone destination.
         * Field introduced in 17.1.1.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        preserve_client_ip?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Name for the traffic clone profile.
         * Field introduced in 17.1.1.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Retrieve facts about one or more oVirt/RHV tags.
       */
      ovirt_tags_facts?: {
        /**
         * Name of the host, which tags should be listed.
         */
        host?: string;
        /**
         * Name of the tag which should be listed.
         */
        name?: string;
        /**
         * Name of the VM, which tags should be listed.
         */
        vm?: string;
        [k: string]: any;
      };
      /**
       * Get facts for virtual machine images.
       */
      azure_rm_virtualmachineimage_facts?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        tags?: {
          [k: string]: any;
        };
        cloud_environment?: string;
        append_tags?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ad_user?: string;
        secret?: string;
        /**
         * Specific version number of an image.
         */
        version?: string;
        /**
         * Azure location value (ie. westus, eastus, eastus2, northcentralus, etc.). Supplying only a location value will yield a list of available publishers for the location.
         */
        location: string;
        client_id?: string;
        /**
         * Image offering SKU. Combine with offer to see a list of available versions.
         */
        sku?: string;
        /**
         * Name of an image publisher. List image offerings associated with a particular publisher.
         */
        publisher?: string;
        subscription_id?: string;
        password?: string;
        /**
         * Name of an image offering. Combine with sku to see a list of available image versions.
         */
        offer?: string;
        tenant?: string;
        [k: string]: any;
      };
      /**
       * Provides direct access to the Cisco IMC REST API.
       * Perform any configuration changes and actions that the Cisco IMC supports.
       * More information about the IMC REST API is available from U(http://www.cisco.com/c/en/us/td/docs/unified_computing/ucs/c/sw/api/3_0/b_Cisco_IMC_api_301.html)
       */
      imc_rest?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        };
      /**
       * Controls runit services on remote hosts using the sv utility.
       */
      runit?: {
        dist?: string;
        /**
         * Name of the service to manage.
         */
        name: string;
        /**
         * Wheater the service is enabled or not, if disabled it also implies stopped.
         */
        enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: /var/service
         *
         * directory runsv watches for services
         */
        service_dir?: string;
        /**
         * C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.  C(restarted) will always bounce the service (sv restart) and C(killed) will always bounce the service (sv force-stop). C(reloaded) will send a HUP (sv reload). C(once) will run a normally downed sv once (sv once), not really an idempotent operation.
         */
        state?: "started" | "stopped" | "restarted" | "killed" | "reloaded" | "once";
        /**
         * Default: /etc/sv
         *
         * directory where services are defined, the source of symlinks to service_dir.
         */
        service_src?: string;
        [k: string]: any;
      };
      /**
       * Manages updates and bundles with the swupd bundle manager, which is used by the Clear Linux Project for Intel Architecture.
       */
      swupd?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Bind EPGs to Contracts on Cisco ACI fabrics.
       * More information from the internal APIC classes I(fv:RsCons) at U(https://developer.cisco.com/media/mim-ref/MO-fvRsCons.html) and I(fv:RsProv) at U(https://developer.cisco.com/media/mim-ref/MO-fvRsProv.html).
       */
      aci_epg_to_contract?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Create and update a virtual machine scale set.
       */
      azure_rm_virtualmachine_scaleset?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages F5 BIG-IP GTM wide ip
       */
      bigip_gtm_wide_ip?: {
        /**
         * LB method of wide ip
         */
        lb_method?: string;
        /**
         * Wide IP name
         */
        wide_ip?: string;
        [k: string]: any;
      };
      /**
       * This module will load a candidate configuration from a template file onto a remote device running Junos.  The module will return the differences in configuration if the diff option is specified on the Ansible command line
       */
      junos_template?: {
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        username?: string;
        password?: string;
        ssh_keyfile?: string;
        /**
         * The C(confirm) argument will configure a time out value for the commit to be confirmed before it is automatically rolled back.  If the C(confirm) argument is set to False, this argument is silently ignored.  If the value for this argument is set to 0, the commit is confirmed immediately.
         */
        confirm?: number | string;
        auth_pass?: string;
        /**
         * Default: configured by junos_template
         *
         * The C(comment) argument specifies a text string to be used when committing the configuration.  If the C(confirm) argument is set to False, this argument is silently ignored.
         */
        comment?: string;
        host: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Default: merge
         *
         * The C(action) argument specifies how the module will apply changes.
         */
        action?: "merge" | "overwrite" | "replace";
        /**
         * The C(format) argument specifies the format of the configuration template specified in C(src).  If the format argument is not specified, the module will attempt to infer the configuration format based of file extension.  Files that end in I(xml) will set the format to xml.  Files that end in I(set) will set the format to set and all other files will default the format to text.
         */
        config_format?: "text" | "xml" | "set";
        /**
         * The path to the config source.  The source can be either a file with config or a template that will be merged during runtime.  By default the task will search for the source file in role or playbook root folder in templates directory.
         */
        src: string;
        /**
         * When this argument is configured true, the module will backup the configuration from the node prior to making any changes. The backup file will be written to backup_{{ hostname }} in the root of the playbook directory.
         */
        backup?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "netconf";
        [k: string]: any;
      };
      /**
       * Uses Layman to manage an additional repositories for the Portage package manager on Gentoo Linux. Please note that Layman must be installed on a managed node prior using this module.
       */
      layman?: {
        [k: string]: any;
      };
      /**
       * Manages VLAN configurations on Huawei CloudEngine switches.
       */
      ce_vlan?: {
        username?: string;
        /**
         * Range of VLANs such as C(2-10) or C(2,5,10-15), etc.
         */
        vlan_range?: string;
        /**
         * Specify VLAN description, in the range from 1 to 80.
         */
        description?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        host?: string;
        /**
         * Single VLAN ID, in the range from 1 to 4094.
         */
        vlan_id?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        /**
         * Name of VLAN, in the range from 1 to 31.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Iptables is used to set up, maintain, and inspect the tables of IP packet filter rules in the Linux kernel. This module does not handle the saving and/or loading of rules, but rather only manipulates the current rules that are present in memory. This is the same as the behaviour of the "iptables" and "ip6tables" command which this module uses internally.
       */
      iptables?: {
        /**
         * This specifies a comment that will be added to the rule
         */
        comment?: string;
        /**
         * This enables the administrator to initialize the packet and byte counters of a rule (during INSERT, APPEND, REPLACE operations).
         */
        set_counters?: string;
        /**
         * Chain to operate on. This option can either be the name of a user defined chain or any of the builtin chains: 'INPUT', 'FORWARD', 'OUTPUT', 'PREROUTING', 'POSTROUTING', 'SECMARK', 'CONNSECMARK'.
         */
        chain?: string;
        /**
         * Default: ipv4
         *
         * Which version of the IP protocol this rule should apply to.
         */
        ip_version?: "ipv4" | "ipv6";
        /**
         * Name of an interface via which a packet is going to be sent (for packets entering the FORWARD, OUTPUT and POSTROUTING chains). When the "!" argument is used before the interface name, the sense is inverted. If the interface name ends in a "+", then any interface which begins with this name will match. If this option is omitted, any interface name will match.
         */
        out_interface?: string;
        /**
         * Specifies the maximum burst before the above limit kicks in.
         */
        limit_burst?: string;
        /**
         * ctstate is a list of the connection states to match in the conntrack module. Possible states are: 'INVALID', 'NEW', 'ESTABLISHED', 'RELATED', 'UNTRACKED', 'SNAT', 'DNAT'
         */
        ctstate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * This specifies the target of the rule; i.e., what to do if the packet matches it. The target can be a user-defined chain (other than the one this rule is in), one of the special builtin targets which decide the fate of the packet immediately, or an extension (see EXTENSIONS below).  If this option is omitted in a rule (and the goto paramater is not used), then matching the rule will have no effect on the packet's fate, but the counters on the rule will be incremented.
         */
        jump?: string;
        /**
         * This specifies a destination port or range of ports to use: without this, the destination port is never altered. This is only valid if the rule also specifies one of the following protocols: tcp, udp, dccp or sctp.
         */
        to_ports?: string;
        /**
         * Flushes the specified table and chain of all rules. If no chain is specified then the entire table is purged. Ignores all other parameters.
         */
        flush?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: filter
         *
         * This option specifies the packet matching table which the command should operate on. If the kernel is configured with automatic module loading, an attempt will be made to load the appropriate module for that table if it is not already there.
         */
        table?: "filter" | "nat" | "mangle" | "raw" | "security";
        /**
         * This allows specification of the ICMP type, which can be a numeric ICMP type, type/code pair, or one of the ICMP type names shown by the command 'iptables -p icmp -h'
         */
        icmp_type?: string;
        /**
         * This specifies a destination address to use with DNAT: without this, the destination address is never altered.
         */
        to_destination?: string;
        /**
         * Specifies the UID or username to use in match by owner rule.
         */
        uid_owner?: string;
        /**
         * This allows specifying a predefined DiffServ class which will be translated to the corresponding DSCP mark. Mutually exclusive with C(set_dscp_mark).
         */
        set_dscp_mark_class?: string;
        /**
         * Destination specification. Address can be either a network name, a hostname, a network IP address (with /mask), or a plain IP address. Hostnames will be resolved once only, before the rule is submitted to the kernel. Please note that specifying any name to be resolved with a remote query such as DNS is a really bad idea. The mask can be either a network mask or a plain number, specifying the number of 1's at the left side of the network mask. Thus, a mask of 24 is equivalent to 255.255.255.0. A "!" argument before the address specification inverts the sense of the address.
         */
        destination?: string;
        /**
         * Default: present
         *
         * Whether the rule should be absent or present.
         */
        state?: "present" | "absent";
        /**
         * The protocol of the rule or of the packet to check. The specified protocol can be one of tcp, udp, udplite, icmp, esp, ah, sctp or the special keyword "all", or it can be a numeric value, representing one of these protocols or a different one. A protocol name from /etc/protocols is also allowed. A "!" argument before the protocol inverts the test.  The number zero is equivalent to all. "all" will match with all protocols and is taken as default when this option is omitted.
         */
        protocol?: string;
        /**
         * Source specification. Address can be either a network name, a hostname, a network IP address (with /mask), or a plain IP address. Hostnames will be resolved once only, before the rule is submitted to the kernel. Please note that specifying any name to be resolved with a remote query such as DNS is a really bad idea. The mask can be either a network mask or a plain number, specifying the number of 1's at the left side of the network mask. Thus, a mask of 24 is equivalent to 255.255.255.0. A "!" argument before the address specification inverts the sense of the address.
         */
        source?: string;
        /**
         * This allows specifying a DSCP mark to be added to packets. It takes either an integer or hex value. Mutually exclusive with C(set_dscp_mark_class).
         */
        set_dscp_mark?: string;
        /**
         * Set the policy for the chain to the given target. Valid targets are ACCEPT, DROP, QUEUE, RETURN. Only built in chains can have policies. This parameter requires the chain parameter. Ignores all other parameters.
         */
        policy?: "ACCEPT" | "DROP" | "QUEUE" | "RETURN";
        /**
         * Specifies a match to use, that is, an extension module that tests for a specific property. The set of matches make up the condition under which a target is invoked. Matches are evaluated first to last if specified as an array and work in short-circuit fashion, i.e. if one extension yields false, evaluation will stop.
         */
        match?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * This specifies that the processing should continue in a user specified chain. Unlike the jump argument return will not continue processing in this chain but instead in the chain that called us via jump.
         */
        goto?: string;
        /**
         * This means that the rule only refers to second and further fragments of fragmented packets. Since there is no way to tell the source or destination ports of such a packet (or ICMP type), such a packet will not match any rules which specify them. When the "!" argument precedes fragment argument, the rule will only match head fragments, or unfragmented packets.
         */
        fragment?: string;
        /**
         * This specifies a source address to use with SNAT: without this, the source address is never altered.
         */
        to_source?: string;
        /**
         * Default: append
         *
         * Whether the rule should be appended at the bottom or inserted at the top. If the rule already exists the chain won't be modified.
         */
        action?: "append" | "insert";
        /**
         * Destination port or port range specification. This can either be a service name or a port number. An inclusive range can also be specified, using the format first:last. If the first port is omitted, '0' is assumed; if the last is omitted, '65535' is assumed. If the first port is greater than the second one they will be swapped.
         */
        destination_port?: string;
        /**
         * Specifies the error packet type to return while rejecting.
         */
        reject_with?: string;
        /**
         * Specifies the maximum average number of matches to allow per second. The number can specify units explicitly, using `/second', `/minute', `/hour' or `/day', or parts of them (so `5/second' is the same as `5/s').
         */
        limit?: string;
        /**
         * Source port or port range specification. This can either be a service name or a port number. An inclusive range can also be specified, using the format first:last. If the first port is omitted, '0' is assumed; if the last is omitted, '65535' is assumed. If the first port is greater than the second one they will be swapped.
         */
        source_port?: string;
        /**
         * Name of an interface via which a packet was received (only for packets entering the INPUT, FORWARD and PREROUTING chains). When the "!" argument is used before the interface name, the sense is inverted. If the interface name ends in a "+", then any interface which begins with this name will match. If this option is omitted, any interface name will match.
         */
        in_interface?: string;
        [k: string]: any;
      };
      /**
       * Create or delete a Rackspace Cloud Monitoring entity, which represents a device to monitor. Entities associate checks and alarms with a target system and provide a convenient, centralized place to store IP addresses. Rackspace monitoring module flow | *rax_mon_entity* -> rax_mon_check -> rax_mon_notification -> rax_mon_notification_plan -> rax_mon_alarm
       */
      rax_mon_entity?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * The command module allows running one or more commands on remote devices running VyOS.  This module can also be introspected to validate key parameters before returning successfully.  If the conditional statements are not met in the wait period, the task fails.
       * Certain C(show) commands in VyOS produce many lines of output and use a custom pager that can cause this module to hang.  If the value of the environment variable C(ANSIBLE_VYOS_TERMINAL_LENGTH) is not set, the default number of 10000 is used.
       */
      vyos_command?: {
        [k: string]: any;
      };
      /**
       * Add or remove a database on a Webfaction host. Further documentation at http://github.com/quentinsf/ansible-webfaction.
       */
      webfaction_db?: {
        /**
         * The name of the database
         */
        name: string;
        /**
         * The machine name to use (optional for accounts with only one machine)
         */
        machine?: string;
        /**
         * Default: present
         *
         * Whether the database should exist
         */
        state?: "present" | "absent";
        /**
         * The webfaction password to use
         */
        login_password: string;
        /**
         * Default: None
         *
         * The password for the new database user.
         */
        password?: string;
        /**
         * The type of database to create.
         */
        type: string;
        /**
         * The webfaction account to use
         */
        login_name: string;
        [k: string]: any;
      };
      /**
       * Create, update, remove snapshot volumes for NetApp E/EF-Series storage arrays.
       */
      netapp_e_snapshot_volume?: {
        /**
         * storage array ID
         */
        ssid: string;
        /**
         * The identifier of the snapshot image used to create the new snapshot volume.
         * Note: You'll likely want to use the M(netapp_e_facts) module to find the ID of the image you want.
         */
        snapshot_image_id: string;
        /**
         * The url to the SANtricity WebServices Proxy or embedded REST API.
         */
        api_url: string;
        /**
         * Whether to create or remove the snapshot volume
         */
        state: "absent" | "present";
        /**
         * Default: 20
         *
         * The size of the view in relation to the size of the base volume
         */
        repo_percentage?: number | string;
        /**
         * The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_password: string;
        /**
         * Default: 85
         *
         * The repository utilization warning threshold percentage
         */
        full_threshold?: number | string;
        /**
         * The snapshot volume access mode
         */
        view_mode?: "readOnly" | "readWrite" | "modeUnknown" | "__Undefined";
        /**
         * Name of the storage pool on which to allocate the repository volume.
         */
        storage_pool_name: string;
        /**
         * The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_username: string;
        /**
         * Default: True
         *
         * Should https certificates be validated?
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The name you wish to give the snapshot volume
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module offers the ability to set a configuration checkpoint file or rollback to a configuration checkpoint file on HUAWEI CloudEngine switches.
       */
      ce_rollback?: {
        /**
         * Specifies the label of the configuration rollback point to which system configurations are expected to roll back. The value is an integer that the system generates automatically.
         */
        commit_id?: string;
        username?: string;
        /**
         * Specifies the number of configuration rollback points. The value is an integer that ranges from 1 to 80.
         */
        oldest?: string;
        /**
         * Specifies the number of configuration rollback points. The value is an integer that ranges from 1 to 80.
         */
        last?: string;
        /**
         * Specifies a configuration file for configuration rollback. The value is a string of 5 to 64 case-sensitive characters in the format of *.zip, *.cfg, or *.dat, spaces not supported.
         */
        filename?: string;
        /**
         * Specifies a user label for a configuration rollback point. The value is a string of 1 to 256 case-sensitive ASCII characters, spaces not supported. The value must start with a letter and cannot be presented in a single hyphen (-).
         */
        label?: string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * The operation of configuration rollback.
         */
        action?: "rollback" | "clear" | "set" | "display" | "commit";
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Manages F5 BIG-IP LTM virtual servers via iControl SOAP API
       */
      bigip_virtual_server?: {
        /**
         * Default: Common
         *
         * Partition
         */
        partition?: string;
        /**
         * Virtual server name
         */
        name?: string;
        /**
         * Default: None
         *
         * Default Profile which manages the session persistence
         */
        default_persistence_profile?: string;
        /**
         * Destination IP of the virtual server (only host is currently supported). Required when state=present and vs does not exist.
         */
        destination?: string;
        /**
         * Default: None
         *
         * List of all Profiles (HTTP,ClientSSL,ServerSSL,etc) that must be used by the virtual server
         */
        all_profiles?: string;
        /**
         * Default: None
         *
         * List of rules to be applied in priority order
         */
        all_rules?: string;
        /**
         * Default: None
         *
         * List of vlans to be enabled. When a VLAN named C(ALL) is used, all VLANs will be allowed.
         */
        enabled_vlans?: string;
        /**
         * Default: present
         *
         * Virtual Server state
         * Absent, delete the VS if present
         * C(present) (and its synonym enabled), create if needed the VS and set state to enabled
         * C(disabled), create if needed the VS and set state to disabled
         */
        state?: string;
        /**
         * Default: None
         *
         * Source network address policy
         */
        snat?: string;
        /**
         * Default: None
         *
         * Port of the virtual server . Required when state=present and vs does not exist
         */
        port?: string;
        /**
         * Default: None
         *
         * Default pool for the virtual server
         */
        pool?: string;
        /**
         * Default: None
         *
         * Virtual server description
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of Interfaces on VyOS network devices.
       */
      vyos_interface?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Description of Interface.
         */
        description?: string;
        /**
         * Default: auto
         *
         * Interface link status.
         */
        duplex?: "full" | "half" | "auto";
        /**
         * Interface link status.
         */
        enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * State of the Interface configuration, C(up) means present and operationally up and C(down) means present and operationally C(down)
         */
        state?: "present" | "absent" | "up" | "down";
        /**
         * Maximum size of transmit packet.
         */
        mtu?: number | string;
        /**
         * Default: 10
         *
         * Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state argument which are I(state) with values C(up)/C(down) and I(neighbors).
         */
        delay?: number | string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of Interfaces definitions.
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        /**
         * Interface link speed.
         */
        speed?: string;
        port?: number | string;
        /**
         * Name of the Interface.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Apply patch files using the GNU patch tool.
       */
      patch?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Retrieve facts about one or more networks from OpenStack.
       */
      os_networks_facts?: {
        /**
         * Name or ID of the Network
         */
        name?: string;
        /**
         * A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.
         */
        filters?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        [k: string]: any;
      };
      /**
       * The manageiq_user module supports adding, updating and deleting users in ManageIQ.
       */
      manageiq_user?: {
        /**
         * The name of the group to which the user belongs.
         */
        group?: string;
        /**
         * The users' full name.
         */
        name?: string;
        /**
         * The unique userid in manageiq, often mentioned as username.
         */
        userid: string;
        /**
         * Default: present
         *
         * absent - user should not exist, present - user should be.
         */
        state?: "absent" | "present";
        manageiq_connection: {
          [k: string]: any;
        };
        /**
         * The users' password.
         */
        password?: string;
        /**
         * The users' E-mail address.
         */
        email?: string;
        [k: string]: any;
      };
      /**
       * Allows the addition and removal of local, service and domain users, and domain groups from a local group.
       */
      win_group_membership?: {
        /**
         * Default: present
         *
         * Desired state of the members in the group.
         */
        state?: string;
        /**
         * Name of the local group to manage membership on.
         */
        name?: string;
        /**
         * A list of members to ensure are present/absent from the group.
         * Accepts local users as username, .\username, and SERVERNAME\username.
         * Accepts domain users and groups as DOMAIN\username and username@DOMAIN.
         * Accepts service users as NT AUTHORITY\username.
         */
        members?: string;
        [k: string]: any;
      };
      /**
       * Create, delete or activate ZFS boot environments.
       * Mount and unmount ZFS boot environments.
       */
      beadm?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Discover targets on given portal, (dis)connect targets, mark targets to manually or auto start, return device nodes of connected targets.
       */
      open_iscsi?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages a system startup information on HUAWEI CloudEngine switches.
       */
      ce_startup?: {
        /**
         * Position of the device.The value is a string of 1 to 32 characters. The possible value of slot is all, slave-board, or the specific slotID.
         */
        slot?: string;
        username?: string;
        /**
         * Default: present
         *
         * Name of the configuration file that is applied for the next startup. The value is a string of 5 to 255 characters.
         */
        cfg_file?: string;
        host?: string;
        /**
         * File name of the system software that is applied for the next startup. The value is a string of 5 to 255 characters.
         */
        software_file?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Display the startup information.
         */
        action?: "display";
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        /**
         * Name of the patch file that is applied for the next startup.
         */
        patch_file?: string;
        [k: string]: any;
      };
      /**
       * Reboot a HUAWEI CloudEngine switches.
       */
      ce_reboot?: {
        username?: string;
        /**
         * Safeguard boolean. Set to true if you're sure you want to reboot.
         */
        confirm:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Flag indicating whether to save the configuration.
         */
        save_config?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * This module fails the progress with a custom message. It can be useful for bailing out when a certain condition is met using C(when).
       * This module is also supported for Windows targets.
       */
      fail?: {
        active_connection_states?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        host?: string;
        connect_timeout?: number | string;
        delay?: number | string;
        search_regex?: string;
        state?: "absent" | "drained" | "present" | "started" | "stopped";
        sleep?: number | string;
        timeout?: number | string;
        exclude_hosts?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: 'Failed as requested from task'
         *
         * The customized message used for failing execution. If omitted, fail will simply bail out with a generic message.
         */
        msg?: string;
        path?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * This module gathers facts for a specific system using its HP iLO interface. These facts include hardware and network related information useful for provisioning (e.g. macaddress, uuid).
       * This module requires the hpilo python module.
       */
      hpilo_facts?: {
        /**
         * Default: Administrator
         *
         * The login name to authenticate to the HP iLO interface.
         */
        login?: string;
        /**
         * Default: admin
         *
         * The password to authenticate to the HP iLO interface.
         */
        password?: string;
        /**
         * Default: TLSv1
         *
         * Change the ssl_version used.
         */
        ssl_version?: "SSLv3" | "SSLv23" | "TLSv1" | "TLSv1_1" | "TLSv1_2";
        /**
         * The HP iLO hostname/address that is linked to the physical system.
         */
        host: string;
        [k: string]: any;
      };
      /**
       * Create, update, stop and start a virtual machine. Provide an existing storage account and network interface or allow the module to create these for you. If you choose not to provide a network interface, the resource group must contain a virtual network with at least one subnet.
       * Currently requires an image found in the Azure Marketplace. Use azure_rm_virtualmachineimage_facts module to discover the publisher, offer, sku and version of a particular image.
       */
      azure_rm_virtualmachine?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Send a message to an IRC channel. This is a very simplistic implementation.
       */
      irc?: {
        [k: string]: any;
      };
      /**
       * Much like the `roles:` keyword, this task loads a role, but it allows you to control it when the role tasks run in between other tasks of the play.
       * Most keywords, loops and conditionals will only be applied to the imported tasks, not to this statement itself. If you want the opposite behaviour, use M(include_role) instead.
       */
      import_role?: {
        timeout?: number | string;
        ipv6?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        debug?: number | string;
        password: string;
        minutes?: number | string;
        port?: number | string;
        multi_key?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module uses rabbitMQ Rest API to create/delete queues
       */
      rabbitmq_queue?: {
        /**
         * Default: 15672
         *
         * rabbitMQ management api port
         */
        login_port?: string;
        /**
         * Default: None
         *
         * Optional name of an exchange to which messages will be republished if they
         * are rejected or expire
         */
        dead_letter_exchange?: string;
        /**
         * Name of the queue to create
         */
        name: string;
        /**
         * Default: guest
         *
         * rabbitMQ user for connection
         */
        login_user?: string;
        /**
         * Default: localhost
         *
         * rabbitMQ host for connection
         */
        login_host?: string;
        /**
         * rabbitMQ password for connection
         */
        login_password?: string;
        /**
         * Default: /
         *
         * rabbitMQ virtual host
         */
        vhost?: string;
        /**
         * Default: present
         *
         * Whether the queue should be present or absent
         * Only present implemented atm
         */
        state?: "present" | "absent";
        /**
         * Default: no limit
         *
         * How many messages can the queue contain before it starts rejecting
         */
        max_length?: number | string;
        /**
         * extra arguments for queue. If defined this argument is a key/value dictionary
         */
        arguments?: {
          [k: string]: any;
        };
        /**
         * if the queue should delete itself after all queues/queues unbound from it
         */
        auto_delete?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: forever
         *
         * How long a message can live in queue before it is discarded (milliseconds)
         */
        message_ttl?: number | string;
        /**
         * Default: forever
         *
         * How long a queue can be unused before it is automatically deleted (milliseconds)
         */
        auto_expires?: number | string;
        /**
         * Default: None
         *
         * Optional replacement routing key to use when a message is dead-lettered.
         * Original routing key will be used if unset
         */
        dead_letter_routing_key?: string;
        /**
         * Default: True
         *
         * whether queue is durable or not
         */
        durable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Gather facts about EC2 Elastic Load Balancers in AWS
       */
      elb_classic_lb_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create, update and delete a Public IP address. Allows setting and updating the address allocation method and domain name label. Use the azure_rm_networkinterface module to associate a Public IP with a network interface.
       */
      azure_rm_publicipaddress?: {
        [k: string]: any;
      };
      /**
       * Manages F5 BIG-IP LTM pools via iControl SOAP API
       */
      bigip_pool?: {
        /**
         * Monitor template name list. Always use the full path to the monitor.
         */
        monitors?: string;
        /**
         * Default: round_robin
         *
         * Load balancing method
         */
        lb_method?: string;
        /**
         * Monitor quorum value when monitor_type is m_of_n
         */
        quorum?: string;
        /**
         * Default: Common
         *
         * Partition of pool/pool member
         */
        partition?: string;
        /**
         * Sets the ramp-up time (in seconds) to gradually ramp up the load on newly added or freshly detected up pool members
         */
        slow_ramp_time?: string;
        /**
         * Pool member IP
         */
        host?: string;
        /**
         * Sets the action to take when node goes down in pool
         */
        service_down_action?: string;
        /**
         * Sets the number of times the system tries to contact a pool member after a passive failure
         */
        reselect_tries?: string;
        /**
         * Monitor rule type when monitors > 1
         */
        monitor_type?: string;
        /**
         * Default: present
         *
         * Pool/pool member state
         */
        state?: string;
        /**
         * Pool member port
         */
        port?: string;
        /**
         * Pool name
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Restart a device
       */
      panos_restart?: {
        /**
         * Default: admin
         *
         * username for authentication
         */
        username?: string;
        /**
         * password for authentication
         */
        password?: string;
        /**
         * IP address (or hostname) of PAN-OS device
         */
        ip_address?: string;
        [k: string]: any;
      };
      /**
       * Manages interface VPC configuration
       */
      nxos_vpc_interface?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * VPC group/id that will be configured on associated portchannel.
         */
        vpc?: string;
        /**
         * Group number of the portchannel that will be configured.
         */
        portchannel: string;
        /**
         * Set to true/false for peer link config on associated portchannel.
         */
        peer_link?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Manages desired state of the resource.
         */
        state?: "present" | "absent";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        host?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Deploy to nodes controlled by Ironic.
       */
      os_ironic_node?: {
        /**
         * An integer value representing the number of seconds to wait for the node activation or deactivation to complete.
         */
        timeout?: string;
        /**
         * Default: None
         *
         * globally unique identifier (UUID) to be given to the resource.
         */
        uuid?: string;
        /**
         * Default: present
         *
         * A setting to allow power state to be asserted allowing nodes that are not yet deployed to be powered on, and nodes that are deployed to be powered off.
         */
        power?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        /**
         * Default: True
         *
         * Indicates if the resource should be deployed. Allows for deployment logic to be disengaged and control of the node power or maintenance state to be changed.
         */
        deploy?: string;
        /**
         * Default: None
         *
         * If noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API.  Use with "auth" and "auth_type" settings set to None.
         */
        ironic_url?: string;
        /**
         * Default: None
         *
         * A string expression regarding the reason a node is in a maintenance mode.
         */
        maintenance_reason?: string;
        /**
         * Default: present
         *
         * Indicates desired state of the resource
         */
        state?: string;
        /**
         * A setting to allow the direct control if a node is in maintenance mode.
         */
        maintenance?: string;
        /**
         * A boolean value instructing the module to wait for node activation or deactivation to complete before returning.
         */
        wait?: string;
        /**
         * Definition of the instance information which is used to deploy the node.  This information is only required when an instance is set to present.
         */
        instance_info?: string;
        /**
         * Default: None
         *
         * A configdrive file or HTTP(S) URL that will be passed along to the node.
         */
        config_drive?: string;
        [k: string]: any;
      };
      /**
       * Sends arbitrary commands to an ios node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.
       * This module does not support running commands in configuration mode. Please use M(ios_config) to configure IOS devices.
       */
      ios_command?: {
        [k: string]: any;
      };
      /**
       * This module allows the user to manage S3 buckets and the objects within them. Includes support for creating and deleting both objects and buckets, retrieving objects as files or strings and generating download links. This module has a dependency on boto3 and botocore.
       */
      aws_s3?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module manages whole lifecycle of the Virtual Machine(VM) in oVirt. Since VM can hold many states in oVirt, this see notes to see how the states of the VM are handled.
       */
      ovirt_vms?: {
        /**
         * Amount of minimal guaranteed memory of the Virtual Machine. Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB).
         * C(memory_guaranteed) parameter can't be lower than C(memory) parameter. Default value is set by engine.
         */
        memory_guaranteed?: string;
        /**
         * Please check to I(Synopsis) to more detailed description of force parameter, it can behave differently in different situations.
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the cluster, where Virtual Machine should be created. Required if creating VM.
         */
        cluster?: string;
        fetch_nested?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * ID of the the Virtual Machine to manage.
         */
        id?: string;
        /**
         * Number of virtual CPUs sockets of the Virtual Machine. Default value is set by oVirt engine.
         */
        cpu_sockets?: number | string;
        /**
         * If I(True) Virtual Machine will be set as highly available.
         * If I(False) Virtual Machine won't be set as highly available.
         * If no value is passed, default value is set by oVirt engine.
         */
        high_availability?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * List of NICs, which should be attached to Virtual Machine. NIC is described by following dictionary:
         * C(name) - Name of the NIC.
         * C(profile_name) - Profile name where NIC should be attached.
         * C(interface) -  Type of the network interface. One of following: I(virtio), I(e1000), I(rtl8139), default is I(virtio).
         * C(mac_address) - Custom MAC address of the network interface, by default it's obtained from MAC pool.
         * C(Note:)
         * This parameter is used only when C(state) is I(running) or I(present) and is able to only create NICs. To manage NICs of the VM in more depth please use M(ovirt_nics) module instead.
         */
        nics?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Dictionary with values for Windows Virtual Machine initialization using sysprep:
         * C(host_name) - Hostname to be set to Virtual Machine when deployed.
         * C(active_directory_ou) - Active Directory Organizational Unit, to be used for login of user.
         * C(org_name) - Organization name to be set to Windows Virtual Machine.
         * C(domain) - Domain to be set to Windows Virtual Machine.
         * C(timezone) - Timezone to be set to Windows Virtual Machine.
         * C(ui_language) - UI language of the Windows Virtual Machine.
         * C(system_locale) - System localization of the Windows Virtual Machine.
         * C(input_locale) - Input localization of the Windows Virtual Machine.
         * C(windows_license_key) - License key to be set to Windows Virtual Machine.
         * C(user_name) - Username to be used for set password to Windows Virtual Machine.
         * C(root_password) - Password to be set for username to Windows Virtual Machine.
         */
        sysprep?: {
          [k: string]: any;
        };
        /**
         * Number of virtual CPUs cores of the Virtual Machine. Default value is set by oVirt engine.
         */
        cpu_cores?: number | string;
        /**
         * Default: present
         *
         * Should the Virtual Machine be running/stopped/present/absent/suspended/next_run.
         * I(present) and I(running) are equal states.
         * I(next_run) state updates the VM and if the VM has next run configuration it will be rebooted.
         * Please check I(notes) to more detailed description of states.
         */
        state?: "running" | "stopped" | "present" | "absent" | "suspended" | "next_run";
        /**
         * Name of the template, which should be used to create Virtual Machine. Required if creating VM.
         * If template is not specified and VM doesn't exist, VM will be created from I(Blank) template.
         */
        template?: string;
        /**
         * Amount of memory of the Virtual Machine. Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB).
         * Default value is set by engine.
         */
        memory?: string;
        /**
         * ISO file from ISO storage domain which should be attached to Virtual Machine.
         * If you pass empty string the CD will be ejected from VM.
         * If used with C(state) I(running) or I(present) and VM is running the CD will be attached to VM.
         * If used with C(state) I(running) or I(present) and VM is down the CD will be attached to VM persistently.
         */
        cd_iso?: string;
        /**
         * If I(True) then the permissions of the template (only the direct ones, not the inherited ones) will be copied to the created virtual machine.
         * This parameter is used only when C(state) is I(running) or I(present) and VM didn't exist before.
         */
        clone_permissions?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Type of the Virtual Machine. Default value is set by oVirt engine.
         */
        type?: "server" | "desktop";
        /**
         * If I(True) Virtual Machine will be set as delete protected.
         * If I(False) Virtual Machine won't be set as delete protected.
         * If no value is passed, default value is set by oVirt engine.
         */
        delete_protected?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * If I(True) then the disks of the created virtual machine will be cloned and independent of the template.
         * This parameter is used only when C(state) is I(running) or I(present) and VM didn't exist before.
         */
        clone?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * List of boot devices which should be used to boot. Choices I(network), I(hd) and I(cdrom).
         * For example: ['cdrom', 'hd']. Default value is set by oVirt engine.
         */
        boot_devices?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        nested_attributes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Specify host where Virtual Machine should be running. By default the host is chosen by engine scheduler.
         * This parameter is used only when C(state) is I(running) or I(present).
         */
        host?: string;
        auth: {
          [k: string]: any;
        };
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * If I(True) Virtual Machine will be set as stateless.
         * If I(False) Virtual Machine will be unset as stateless.
         * If no value is passed, default value is set by oVirt engine.
         */
        stateless?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Operating system of the Virtual Machine. Default value is set by oVirt engine.
         */
        operating_system?:
          | "rhel_6_ppc64"
          | "other"
          | "freebsd"
          | "windows_2003x64"
          | "windows_10"
          | "rhel_6x64"
          | "rhel_4x64"
          | "windows_2008x64"
          | "windows_2008R2x64"
          | "debian_7"
          | "windows_2012x64"
          | "ubuntu_14_04"
          | "ubuntu_12_04"
          | "ubuntu_13_10"
          | "windows_8x64"
          | "other_linux_ppc64"
          | "windows_2003"
          | "other_linux"
          | "windows_10x64"
          | "windows_2008"
          | "rhel_3"
          | "rhel_5"
          | "rhel_4"
          | "other_ppc64"
          | "sles_11"
          | "rhel_6"
          | "windows_xp"
          | "rhel_7x64"
          | "freebsdx64"
          | "rhel_7_ppc64"
          | "windows_7"
          | "rhel_5x64"
          | "ubuntu_14_04_ppc64"
          | "sles_11_ppc64"
          | "windows_8"
          | "windows_2012R2x64"
          | "windows_2008r2x64"
          | "ubuntu_13_04"
          | "ubuntu_12_10"
          | "windows_7x64";
        /**
         * Name of the the Virtual Machine to manage. If VM don't exists C(name) is required. Otherwise C(id) or C(name) can be used.
         */
        name?: string;
        /**
         * Dictionary with values for Unix-like Virtual Machine initialization using cloud init:
         * C(host_name) - Hostname to be set to Virtual Machine when deployed.
         * C(timezone) - Timezone to be set to Virtual Machine when deployed.
         * C(user_name) - Username to be used to set password to Virtual Machine when deployed.
         * C(root_password) - Password to be set for user specified by C(user_name) parameter.
         * C(authorized_ssh_keys) - Use this SSH keys to login to Virtual Machine.
         * C(regenerate_ssh_keys) - If I(True) SSH keys will be regenerated on Virtual Machine.
         * C(custom_script) - Cloud-init script which will be executed on Virtual Machine when deployed.
         * C(dns_servers) - DNS servers to be configured on Virtual Machine.
         * C(dns_search) - DNS search domains to be configured on Virtual Machine.
         * C(nic_boot_protocol) - Set boot protocol of the network interface of Virtual Machine. Can be one of None, DHCP or Static.
         * C(nic_ip_address) - If boot protocol is static, set this IP address to network interface of Virtual Machine.
         * C(nic_netmask) - If boot protocol is static, set this netmask to network interface of Virtual Machine.
         * C(nic_gateway) - If boot protocol is static, set this gateway to network interface of Virtual Machine.
         * C(nic_name) - Set name to network interface of Virtual Machine.
         * C(nic_on_boot) - If I(True) network interface will be set to start on boot.
         */
        cloud_init?: {
          [k: string]: any;
        };
        /**
         * List of disks, which should be attached to Virtual Machine. Disk is described by following dictionary:
         * C(name) - Name of the disk. Either C(name) or C(id) is reuqired.
         * C(id) - ID of the disk. Either C(name) or C(id) is reuqired.
         * C(interface) - Interface of the disk, either I(virtio) or I(IDE), default is I(virtio).
         * C(bootable) - I(True) if the disk should be bootable, default is non bootable.
         * C(activate) - I(True) if the disk should be activated, default is activated.
         * C(Note:)
         * This parameter is used only when C(state) is I(running) or I(present) and is able to only attach disks. To manage disks of the VM in more depth please use M(ovirt_disks) module instead.
         */
        disks?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        poll_interval?: number | string;
        timeout?: number | string;
        /**
         * Set a CPU shares for this Virtual Machine. Default value is set by oVirt engine.
         */
        cpu_shares?: number | string;
        [k: string]: any;
      };
      /**
       * Manages CSW packages (SVR4 format) on Solaris 10 and 11.
       * These were the native packages on Solaris <= 10 and are available as a legacy feature in Solaris 11.
       * Pkgutil is an advanced packaging system, which resolves dependency on installation. It is designed for CSW packages.
       */
      pkgutil?: {
        /**
         * Whether to install (C(present)), or remove (C(absent)) a package.
         * The upgrade (C(latest)) operation will update/install the package to the latest version available.
         * Note: The module has a limitation that (C(latest)) only works for one package, not lists of them.
         */
        state: "present" | "absent" | "latest";
        /**
         * Specifies the repository path to install the package from.
         * Its global definition is done in C(/etc/opt/csw/pkgutil.conf).
         */
        site?: string;
        /**
         * Package name, e.g. (C(CSWnrpe))
         */
        name: string;
        /**
         * If you want to refresh your catalog from the mirror, set this to (C(yes)).
         */
        update_catalog?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * The C(win_copy) module copies a file on the local box to remote windows locations.
       * For non-Windows targets, use the M(copy) module instead.
       */
      win_copy?: {
        /**
         * Local path to a file to copy to the remote server; can be absolute or relative.
         * If path is a directory, it is copied (including the source folder name) recursively to C(dest).
         * If path is a directory and ends with "/", only the inside contents of that directory are copied to the destination. Otherwise, if it does not end with "/", the directory itself with all contents is copied.
         * If path is a file and dest ends with "\", the file is copied to the folder with the same filename.
         */
        src?: string;
        /**
         * Default: yes
         *
         * If set to C(yes), the file will only be transferred if the content is different than destination.
         * If set to C(no), the file will only be transferred if the destination does not exist.
         * If set to C(no), no checksuming of the content is performed which can help improve performance on larger files.
         */
        force?: string;
        /**
         * Default: no
         *
         * If False, it will search for src at originating/master machine, if True it will go to the remote/target machine for the src.
         */
        remote_src?: string;
        /**
         * Remote absolute path where the file should be copied to. If src is a directory, this must be a directory too.
         * Use \ for path separators or \\ when in "double quotes".
         * If C(dest) ends with \ then source or the contents of source will be copied to the directory without renaming.
         * If C(dest) is a nonexistent path, it will only be created if C(dest) ends with "/" or "\", or C(src) is a directory.
         * If C(src) and C(dest) are files and if the parent directory of C(dest) doesn't exist, then the task will fail.
         */
        dest?: string;
        /**
         * When used instead of C(src), sets the contents of a file directly to the specified value. This is for simple values, for anything complex or with formatting please switch to the template module.
         */
        content?: string;
        /**
         * Default: yes
         *
         * This flag indicates that filesystem links in the source tree, if they exist, should be followed.
         */
        local_follow?: string;
        [k: string]: any;
      };
      /**
       * This module manages boundary meters
       */
      boundary_meter?: {
        /**
         * Organizations boundary API ID
         */
        apiid: string;
        /**
         * Organizations boundary API KEY
         */
        apikey: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * meter name
         */
        name?: string;
        /**
         * Default: True
         *
         * Whether to create or remove the client from boundary
         */
        state: "present" | "absent";
        [k: string]: any;
      };
      /**
       * Manages BFD session configuration, creates a BFD session or deletes a specified BFD session on HUAWEI CloudEngine devices.
       */
      ce_bfd_session?: {
        username?: string;
        /**
         * Indicates the source IP address carried in BFD packets.
         */
        src_addr?: string;
        /**
         * Indicates the default multicast IP address that is bound to a BFD session. By default, BFD uses the multicast IP address 224.0.0.184. You can set the multicast IP address by running the default-ip-address command. The value is a bool type.
         */
        use_default_ip?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        /**
         * Specifies the type and number of the interface bound to the BFD session.
         */
        out_if_name?: string;
        /**
         * Specifies the peer IP address type.
         */
        addr_type?: "ipv4";
        host?: string;
        /**
         * Specifies the peer IP address bound to the BFD session.
         */
        dest_addr?: string;
        /**
         * Specifies the name of a Virtual Private Network (VPN) instance that is bound to a BFD session. The value is a string of 1 to 31 case-sensitive characters, spaces not supported. When double quotation marks are used around the string, spaces are allowed in the string. The value _public_ is reserved and cannot be used as the VPN instance name.
         */
        vrf_name?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * BFD session creation mode, the currently created BFD session only supports static or static auto-negotiation mode.
         */
        create_type?: "static" | "auto";
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specifies the name of a BFD session. The value is a string of 1 to 15 case-sensitive characters without spaces.
         */
        session_name: string;
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Manage or find Nuage VSP entities, this includes create, update, delete, assign, unassign and find, with all supported properties.
       */
      nuage_vspk?: {
        /**
         * Properties are the key, value pairs of the different properties an entity has.
         * If no I(id) and no I(match_filter) is specified, these are used to find or determine if the entity exists.
         */
        properties?: {
          [k: string]: any;
        };
        /**
         * The type of parent the ID is specified for (example Enterprise).
         * This should match the objects CamelCase class name in VSPK-Python.
         * This Class name can be found on U(https://nuagenetworks.github.io/vspkdoc/html/index.html).
         * If specified, I(parent_id) also needs to be specified.
         */
        parent_type?: string;
        /**
         * Dict with the authentication information required to connect to a Nuage VSP environment.
         * Requires a I(api_username) parameter (example csproot).
         * Requires either a I(api_password) parameter (example csproot) or a I(api_certificate) and I(api_key) parameters, which point to the certificate and key files for certificate based authentication.
         * Requires a I(api_enterprise) parameter (example csp).
         * Requires a I(api_url) parameter (example https://10.0.0.10:8443).
         * Requires a I(api_version) parameter (example v4_0).
         */
        auth: {
          [k: string]: any;
        };
        /**
         * The ID of the entity you want to work on.
         * In combination with I(command=find), it will only return the single entity.
         * In combination with I(state), it will either update or delete this entity.
         * Will take precedence over I(match_filter) and I(properties) whenever an entity needs to be found.
         */
        id?: string;
        /**
         * A filter used when looking (both in I(command) and I(state) for entities, in the format the Nuage VSP API expects.
         * If I(match_filter) is defined, it will take precedence over the I(properties), but not on the I(id)
         */
        match_filter?: string;
        /**
         * The ID of the parent of the entity you want to work on.
         * When I(state) is specified, the entity will be gathered from this parent, if it exists, unless an I(id) is specified.
         * When I(command=find) is specified, the entity will be searched for in this parent, unless an I(id) is specified.
         * If specified, I(parent_type) also needs to be specified.
         */
        parent_id?: string;
        /**
         * Specifies the desired state of the entity.
         * If I(state=present), in case the entity already exists, will update the entity if it is needed.
         * If I(state=present), in case the relationship with the parent is a member relationship, will assign the entity as a member of the parent.
         * If I(state=absent), in case the relationship with the parent is a member relationship, will unassign the entity as a member of the parent.
         * Either I(state) or I(command) needs to be defined, both can not be defined at the same time.
         */
        state?: "present" | "absent";
        /**
         * Specifies a command to be executed.
         * With I(command=find), if I(parent_id) and I(parent_type) are defined, it will only search within the parent. Otherwise, if allowed, will search in the root object.
         * With I(command=find), if I(id) is specified, it will only return the single entity matching the id.
         * With I(command=find), otherwise, if I(match_filter) is define, it will use that filter to search.
         * With I(command=find), otherwise, if I(properties) are defined, it will do an AND search using all properties.
         * With I(command=change_password), a password of a user can be changed. Warning - In case the password is the same as the existing, it will throw an error.
         * With I(command=wait_for_job), the module will wait for a job to either have a status of SUCCESS or ERROR. In case an ERROR status is found, the module will exit with an error.
         * With I(command=wait_for_job), the job will always be returned, even if the state is ERROR situation.
         * Either I(state) or I(command) needs to be defined, both can not be defined at the same time.
         */
        command?: "find" | "change_password" | "wait_for_job" | "get_csp_enterprise";
        /**
         * The type of entity you want to work on (example Enterprise).
         * This should match the objects CamelCase class name in VSPK-Python.
         * This Class name can be found on U(https://nuagenetworks.github.io/vspkdoc/html/index.html).
         */
        type: string;
        /**
         * Can be used to specify a set of child entities.
         * A mandatory property of each child is the I(type).
         * Supported optional properties of each child are I(id), I(properties) and I(match_filter).
         * The function of each of these properties is the same as in the general task definition.
         * This can be used recursively
         * Only useable in case I(state=present).
         */
        children?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        [k: string]: any;
      };
      /**
       * Manages F5 BIG-IP GTM pools.
       */
      bigip_gtm_pool?: {
        /**
         * The load balancing mode that the system tries if the C(preferred_lb_method) is unsuccessful in picking a pool.
         */
        alternate_lb_method?: string;
        /**
         * Name of the GTM pool.
         */
        name?: string;
        /**
         * Specifies the IPv4, or IPv6 address of the server to which the system directs requests when it cannot use one of its pools to do so. Note that the system uses the fallback IP only if you select the C(fallback_ip) load balancing method.
         */
        fallback_ip?: string;
        /**
         * Pool member state. When C(present), ensures that the pool is created and enabled. When C(absent), ensures that the pool is removed from the system. When C(enabled) or C(disabled), ensures that the pool is enabled or disabled (respectively) on the remote device.
         */
        state?: string;
        /**
         * The load balancing mode that the system tries if both the C(preferred_lb_method) and C(alternate_lb_method)s are unsuccessful in picking a pool.
         */
        fallback_lb_method?: string;
        /**
         * The load balancing mode that the system tries first.
         */
        preferred_lb_method?: string;
        /**
         * The type of GTM pool that you want to create. On BIG-IP releases prior to version 12, this parameter is not required. On later versions of BIG-IP, this is a required parameter.
         */
        type?: string;
        [k: string]: any;
      };
      /**
       * Add or remove an I(apt) key, optionally downloading it.
       */
      apt_key?: {
        key?: string;
        /**
         * The keyserver to retrieve key from.
         */
        keyserver?: string;
        /**
         * The URL to retrieve key from.
         */
        url?: string;
        /**
         * The keyfile contents to add to the keyring.
         */
        data?: string;
        /**
         * -The path to specific keyring file in /etc/apt/trusted.gpg.d/
         */
        keyring?: string;
        /**
         * Default: present
         *
         * Ensures that the key is present (added) or absent (revoked).
         */
        state?: "absent" | "present";
        /**
         * The path to a keyfile on the remote server to add to the keyring.
         */
        file?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The identifier of the key.
         * Including this allows check mode to correctly report the changed state.
         * If specifying a subkey's id be aware that apt-key does not understand how to remove keys via a subkey id.  Specify the primary key's id instead.
         * This parameter is required when C(state) is set to C(absent).
         */
        id?: string;
        [k: string]: any;
      };
      /**
       * Retrieve facts about one or more oVirt/RHV groups.
       */
      ovirt_group_facts?: {
        /**
         * Search term which is accepted by oVirt/RHV search backend.
         * For example to search group X use following pattern: name=X
         */
        pattern?: string;
        [k: string]: any;
      };
      /**
       * Used to test the management connection to the cluster.
       * The test pings the MVIP and SVIP, and executes a simple API method to verify connectivity.
       */
      sf_check_connections?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manage packages on SUSE and openSUSE using the zypper and rpm tools.
       */
      zypper?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Executes a low-down and dirty telnet command, not going through the module subsystem.
       * This is mostly to be used for enabling ssh on devices that only have telnet enabled by default.
       */
      telnet?: {
        /**
         * Default: 1
         *
         * Seconds to pause between each command issued
         */
        pause?: string;
        /**
         * Default: ['$']
         *
         * List of prompts expected before sending next command
         */
        prompts?: string;
        /**
         * Default: remote_addr
         *
         * The host/target on which to execute the command
         */
        host?: string;
        /**
         * List of commands to be executed in the telnet session.
         */
        command?: string;
        /**
         * Default: remote_user
         *
         * The user for login
         */
        user?: string;
        /**
         * Default: 120
         *
         * timeout for remote operations
         */
        timeout?: string;
        /**
         * The password for login
         */
        password?: string;
        /**
         * Default: 23
         *
         * Remote port to use
         */
        port?: string;
        [k: string]: any;
      };
      /**
       * Configure gslb vserver entities in Netscaler.
       */
      netscaler_gslb_vserver?: {
        /**
         * Any comments that you might want to associate with the GSLB virtual server.
         */
        comment?: string;
        domainname?: string;
        save_config?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * When set to C(yes) the GSLB Vserver state will be set to C(disabled).
         * When set to C(no) the GSLB Vserver state will be set to C(enabled).
         * Note that due to limitations of the underlying NITRO API a C(disabled) state change alone does not cause the module result to report a changed status.
         */
        disabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nitro_protocol?: "http" | "https";
        /**
         * Protocol used by services bound to the virtual server.
         *
         */
        servicetype?:
          | "HTTP"
          | "FTP"
          | "TCP"
          | "UDP"
          | "SSL"
          | "SSL_BRIDGE"
          | "SSL_TCP"
          | "NNTP"
          | "ANY"
          | "SIP_UDP"
          | "SIP_TCP"
          | "SIP_SSL"
          | "RADIUS"
          | "RDP"
          | "RTSP"
          | "MYSQL"
          | "MSSQL"
          | "ORACLE";
        /**
         * List of bindings for gslb services bound to this gslb virtual server.
         */
        service_bindings?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        state?: "present" | "absent";
        nitro_user: string;
        /**
         * Include multiple IP addresses in the DNS responses sent to clients.
         */
        mir?: "enabled" | "disabled";
        /**
         * Site selection tolerance, in milliseconds, for implementing the RTT load balancing method. If a site's RTT deviates from the lowest RTT by more than the specified tolerance, the site is not considered when the NetScaler appliance makes a GSLB decision. The appliance implements the round robin method of global server load balancing between sites whose RTT values are within the specified tolerance. If the tolerance is 0 (zero), the appliance always sends clients the IP address of the site with the lowest RTT.
         * Minimum value = C(0)
         * Maximum value = C(100)
         */
        tolerance?: number;
        nitro_timeout?: number;
        /**
         * Threshold at which spillover occurs. Specify an integer for the CONNECTION spillover method, a bandwidth value in kilobits per second for the BANDWIDTH method (do not enter the units), or a percentage for the HEALTH method (do not enter the percentage symbol).
         * Minimum value = C(1)
         * Maximum value = C(4294967287)
         */
        sothreshold?: number;
        /**
         * If spillover occurs, maintain source IP address based persistence for both primary and backup GSLB virtual servers.
         */
        sopersistence?: "enabled" | "disabled";
        /**
         * Enable logging appflow flow information.
         */
        appflowlog?: "enabled" | "disabled";
        /**
         * The persistence ID for the GSLB virtual server. The ID is a positive integer that enables GSLB sites to identify the GSLB virtual server, and is required if source IP address based or spill over based persistence is enabled on the virtual server.
         * Minimum value = C(0)
         * Maximum value = C(65535)
         */
        persistenceid?: number;
        /**
         * Action to be performed if spillover is to take effect, but no backup chain to spillover is usable or exists.
         */
        sobackupaction?: "DROP" | "ACCEPT" | "REDIRECT";
        /**
         * List of bindings for domains for this glsb vserver.
         */
        domain_bindings?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * DNS record type to associate with the GSLB virtual server's domain name.
         * Default value: A
         * Possible values = A, AAAA, CNAME, NAPTR
         */
        dnsrecordtype?: "A" | "AAAA" | "CNAME" | "NAPTR";
        /**
         * If the primary state of all bound GSLB services is DOWN, consider the effective states of all the GSLB services, obtained through the Metrics Exchange Protocol (MEP), when determining the state of the GSLB virtual server. To consider the effective state, set the parameter to STATE_ONLY. To disregard the effective state, set the parameter to NONE.
         * The effective state of a GSLB service is the ability of the corresponding virtual server to serve traffic. The effective state of the load balancing virtual server, which is transferred to the GSLB service, is UP even if only one virtual server in the backup chain of virtual servers is in the UP state.
         */
        considereffectivestate?: "NONE" | "STATE_ONLY";
        /**
         * IPv4 network mask for use in the SOURCEIPHASH load balancing method.
         * Minimum length = 1
         */
        netmask?: string;
        /**
         * Number of bits to consider, in an IPv6 source IP address, for creating the hash that is required by the C(SOURCEIPHASH) load balancing method.
         * Default value: C(128)
         * Minimum value = C(1)
         * Maximum value = C(128)
         */
        v6netmasklen?: number;
        /**
         * Use source IP address based persistence for the virtual server.
         * After the load balancing method selects a service for the first packet, the IP address received in response to the DNS query is used for subsequent requests from the same client.
         */
        persistencetype?: "SOURCEIP" | "NONE";
        /**
         * Name for the GSLB virtual server. Must begin with an ASCII alphanumeric or underscore C(_) character, and must contain only ASCII alphanumeric, underscore C(_), hash C(#), period C(.), space, colon C(:), at C(@), equals C(=), and hyphen C(-) characters. Can be changed after the virtual server is created.
         * Minimum length = 1
         */
        name?: string;
        /**
         * Continue to direct traffic to the backup chain even after the primary GSLB virtual server returns to the UP state. Used when spillover is configured for the virtual server.
         */
        disableprimaryondown?: "enabled" | "disabled";
        cookie_domain?: string;
        /**
         * Backup load balancing method. Becomes operational if the primary load balancing method fails or cannot be used. Valid only if the primary method is based on either round-trip time (RTT) or static proximity.
         */
        backuplbmethod?:
          | "ROUNDROBIN"
          | "LEASTCONNECTION"
          | "LEASTRESPONSETIME"
          | "SOURCEIPHASH"
          | "LEASTBANDWIDTH"
          | "LEASTPACKETS"
          | "STATICPROXIMITY"
          | "RTT"
          | "CUSTOMLOAD";
        /**
         * Specify if the appliance should consider the service count, service weights, or ignore both when using weight-based load balancing methods. The state of the number of services bound to the virtual server help the appliance to select the service.
         */
        dynamicweight?: "SERVICECOUNT" | "SERVICEWEIGHT" | "DISABLED";
        /**
         * Type of threshold that, when exceeded, triggers spillover. Available settings function as follows:
         * * C(CONNECTION) - Spillover occurs when the number of client connections exceeds the threshold.
         * * C(DYNAMICCONNECTION) - Spillover occurs when the number of client connections at the GSLB virtual server exceeds the sum of the maximum client (Max Clients) settings for bound GSLB services. Do not specify a spillover threshold for this setting, because the threshold is implied by the Max Clients settings of the bound GSLB services.
         * * C(BANDWIDTH) - Spillover occurs when the bandwidth consumed by the GSLB virtual server's incoming and outgoing traffic exceeds the threshold.
         * * C(HEALTH) - Spillover occurs when the percentage of weights of the GSLB services that are UP drops below the threshold. For example, if services gslbSvc1, gslbSvc2, and gslbSvc3 are bound to a virtual server, with weights 1, 2, and 3, and the spillover threshold is 50%, spillover occurs if gslbSvc1 and gslbSvc3 or gslbSvc2 and gslbSvc3 transition to DOWN.
         * * C(NONE) - Spillover does not occur.
         */
        somethod?: "CONNECTION" | "DYNAMICCONNECTION" | "BANDWIDTH" | "HEALTH" | "NONE";
        /**
         * Load balancing method for the GSLB virtual server.
         * Default value: LEASTCONNECTION
         * Possible values = ROUNDROBIN, LEASTCONNECTION, LEASTRESPONSETIME, SOURCEIPHASH, LEASTBANDWIDTH, LEASTPACKETS, STATICPROXIMITY, RTT, CUSTOMLOAD
         */
        lbmethod?:
          | "ROUNDROBIN"
          | "LEASTCONNECTION"
          | "LEASTRESPONSETIME"
          | "SOURCEIPHASH"
          | "LEASTBANDWIDTH"
          | "LEASTPACKETS"
          | "STATICPROXIMITY"
          | "RTT"
          | "CUSTOMLOAD";
        /**
         * Timeout for spillover persistence, in minutes.
         * Default value: C(2)
         * Minimum value = C(2)
         * Maximum value = C(1440)
         */
        sopersistencetimeout?: number;
        nsip: string;
        /**
         * The optional IPv4 network mask applied to IPv4 addresses to establish source IP address based persistence.
         * Minimum length = 1
         */
        persistmask?: string;
        /**
         * Idle time, in minutes, after which a persistence entry is cleared.
         * Default value: C(2)
         * Minimum value = C(2)
         * Maximum value = C(1440)
         */
        timeout?: number;
        /**
         * Number of bits to consider in an IPv6 source IP address when creating source IP address based persistence sessions.
         * Default value: C(128)
         * Minimum value = C(1)
         * Maximum value = C(128)
         */
        v6persistmasklen?: number;
        nitro_pass: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module is used to configure HardwareSecurityModuleGroup object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_hardwaresecuritymodulegroup?: {
        username?: string;
        /**
         * Uuid of the hsm group configuration object.
         */
        uuid?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Hardware security module configuration.
         */
        hsm: {
          [k: string]: any;
        };
        controller?: string;
        tenant?: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Name of the hsm group configuration object.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure Gslb object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_gslb?: {
        username?: string;
        /**
         * Uuid of the gslb object.
         */
        uuid?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * The view-id is used in maintenance mode to differentiate partitioned groups while they havethe same gslb namespace.
         * Each partitioned groupwill be able to operate independently by using theview-id.
         * Default value when not specified in API or module is interpreted by Avi Controller as 0.
         */
        view_id?: number | string;
        /**
         * Frequency with which group members communicate.
         * Allowed values are 1-3600.
         * Default value when not specified in API or module is interpreted by Avi Controller as 15.
         */
        send_interval?: number | string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Select avi site member belonging to this gslb.
         */
        sites?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * This field indicates that this object is replicated across gslb federation.
         * Field introduced in 17.1.3.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        is_federated?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        controller?: string;
        /**
         * Third party site member belonging to this gslb.
         * Field introduced in 17.1.1.
         */
        third_party_sites?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Max retries after which the remote site is treatedas a fresh start.
         * In fresh start all the configsare downloaded.
         * Allowed values are 1-1024.
         * Default value when not specified in API or module is interpreted by Avi Controller as 20.
         */
        clear_on_max_retries?: number | string;
        /**
         * Sub domain configuration for the gslb.
         * Gslb service's fqdn must be a match one of these subdomains.
         */
        dns_configs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * User defined description for the object.
         */
        description?: string;
        tenant?: string;
        /**
         * Mark this site as leader of gslb configuration.
         * This site is the one among the avi sites.
         */
        leader_cluster_uuid?: string;
        password?: string;
        /**
         * Group to specify if the client ip addresses are public or private.
         * Field introduced in 17.1.2.
         */
        client_ip_addr_group?: {
          [k: string]: any;
        };
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Name for the gslb object.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module can manage a pacemaker cluster and nodes from Ansible using the pacemaker cli.
       */
      pacemaker_cluster?: {
        /**
         * Default: None
         *
         * Specify which node of the cluster you want to manage. None == the cluster status itself, 'all' == check the status of all nodes.
         */
        node?: string;
        /**
         * Indicate desired state of the cluster
         */
        state?: string;
        /**
         * Default: True
         *
         * Force the change of the cluster state
         */
        force?: string;
        /**
         * Default: 300
         *
         * Timeout when the module should considered that the action has failed
         */
        timeout?: string;
        [k: string]: any;
      };
      /**
       * Manages locales by editing /etc/locale.gen and invoking locale-gen.
       */
      locale_gen?: {
        /**
         * Default: present
         *
         * Whether the locale shall be present.
         */
        state?: "present" | "absent";
        /**
         * Name and encoding of the locale, such as "en_GB.UTF-8".
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Create, update and remove domains.
       */
      cs_domain?: {
        api_key?: string;
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        api_region?: string;
        /**
         * Clean up all domain resources like child domains and accounts.
         * Considered on C(state=absent).
         */
        clean_up?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * State of the domain.
         */
        state?: "present" | "absent";
        /**
         * Path of the domain.
         * Prefix C(ROOT/) or C(/ROOT/) in path is optional.
         */
        path: string;
        /**
         * Network domain for networks in the domain.
         */
        network_domain?: string;
        [k: string]: any;
      };
      /**
       * This module will let you trigger, acknowledge or resolve a PagerDuty incident by sending events
       */
      pagerduty_alert?: {
        /**
         * The URL of the monitoring client that is triggering this event.
         */
        client_url?: string;
        /**
         * PagerDuty unique subdomain.
         */
        name: string;
        /**
         * Type of event to be sent.
         */
        state: "triggered" | "acknowledged" | "resolved";
        /**
         * Identifies the incident to which this I(state) should be applied.
         * For C(triggered) I(state) - If there's no open (i.e. unresolved) incident with this key, a new one will be created. If there's already an open incident with a matching key, this event will be appended to that incident's log. The event key provides an easy way to "de-dup" problem reports.
         * For C(acknowledged) or C(resolved) I(state) - This should be the incident_key you received back when the incident was first opened by a trigger event. Acknowledge events referencing resolved or nonexistent incidents will be discarded.
         */
        incident_key?: string;
        /**
         * The name of the monitoring client that is triggering this event.
         */
        client?: string;
        /**
         * The GUID of one of your "Generic API" services.
         * This is the "service key" listed on a Generic API's service detail page.
         */
        service_key: string;
        /**
         * The pagerduty API key (readonly access), generated on the pagerduty site.
         */
        api_key: string;
        /**
         * Default: Created via Ansible
         *
         * For C(triggered) I(state) - Required. Short description of the problem that led to this trigger. This field (or a truncated version) will be used when generating phone calls, SMS messages and alert emails. It will also appear on the incidents tables in the PagerDuty UI. The maximum length is 1024 characters.
         * For C(acknowledged) or C(resolved) I(state) - Text that will appear in the incident's log associated with this event.
         */
        desc?: string;
        [k: string]: any;
      };
      /**
       * Creates, removes, or updates GitHub access keys.
       */
      github_key?: {
        /**
         * Default: none
         *
         * SSH public key value. Required when C(state=present).
         */
        pubkey?: string;
        /**
         * GitHub Access Token with permission to list and create public keys.
         */
        token: string;
        /**
         * Default: yes
         *
         * The default is C(yes), which will replace the existing remote key if it's different than C(pubkey). If C(no), the key will only be set if no key with the given C(name) exists.
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * SSH key name
         */
        name: string;
        /**
         * Default: present
         *
         * Whether to remove a key, ensure that it exists, or update its value.
         */
        state?: "present" | "absent";
        [k: string]: any;
      };
      /**
       * Register a template from URL, create a template from a ROOT volume of a stopped VM or its snapshot, extract and delete templates.
       */
      cs_template?: {
        /**
         * Domain the template, snapshot or VM is related to.
         */
        domain?: string;
        api_http_method?: "get" | "post";
        /**
         * VM name the template will be created from its volume or alternatively from a snapshot.
         * VM must be in stopped state if created from its volume.
         * Mutually exclusive with C(url).
         */
        vm?: string;
        /**
         * True if the template or its derivatives are extractable.
         */
        is_extractable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name the hypervisor to be used for creating the new template.
         * Relevant when using C(state=present).
         */
        hypervisor?:
          | "KVM"
          | "kvm"
          | "VMware"
          | "vmware"
          | "BareMetal"
          | "baremetal"
          | "XenServer"
          | "xenserver"
          | "LXC"
          | "lxc"
          | "HyperV"
          | "hyperv"
          | "UCS"
          | "ucs"
          | "OVM"
          | "ovm"
          | "Simulator"
          | "simulator";
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_url?: string;
        /**
         * Name of the zone you wish the template to be registered or deleted from.
         * If not specified, first found zone will be used.
         */
        zone?: string;
        /**
         * True if the template supports the sshkey upload feature.
         */
        sshkey_enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Register the template having XS/VMWare tools installed in order to support dynamic scaling of VM CPU/memory.
         * Only used if C(state) is present.
         */
        is_dynamically_scalable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * State of the template.
         */
        state?: "present" | "absent" | "extracted";
        /**
         * This flag is used for searching existing templates.
         * If set to C(true), it will only list template ready for deployment e.g. successfully downloaded and installed.
         * Recommended to set it to C(false).
         */
        is_ready?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Template details in key/value pairs.
         */
        details?: string;
        /**
         * True if the template type is routing i.e., if template is used to deploy router.
         * Only considered if C(url) is used.
         */
        is_routing?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Register the template to be featured.
         * Only used if C(state) is present.
         */
        is_featured?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_key?: string;
        /**
         * Default: 64
         *
         * 32 or 64 bits support.
         */
        bits?: number | string;
        /**
         * The format for the template.
         * Relevant when using C(state=present).
         */
        format?: "QCOW2" | "RAW" | "VHD" | "OVA";
        api_secret?: string;
        api_timeout?: number | string;
        /**
         * Register the template to be publicly available to all users.
         * Only used if C(state) is present.
         */
        is_public?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * true if this template requires HVM.
         */
        requires_hvm?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * True if the template supports the password reset feature.
         */
        password_enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Display text of the template.
         */
        display_text?: string;
        /**
         * Account the template, snapshot or VM is related to.
         */
        account?: string;
        /**
         * the tag for this template.
         */
        template_tag?: string;
        /**
         * Name of the template.
         */
        name: string;
        /**
         * URL of where the template is hosted on C(state=present).
         * URL to which the template would be extracted on C(state=extracted).
         * Mutually exclusive with C(vm).
         */
        url?: string;
        /**
         * Default: self
         *
         * Name of the filter used to search for the template.
         */
        template_filter?: "featured" | "self" | "selfexecutable" | "sharedexecutable" | "executable" | "community";
        api_region?: string;
        /**
         * Whether the template should be synced or removed across zones.
         * Only used if C(state) is present or absent.
         */
        cross_zones?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the project the template to be registered in.
         */
        project?: string;
        /**
         * Name of the snapshot, created from the VM ROOT volume, the template will be created from.
         * C(vm) is required together with this argument.
         */
        snapshot?: string;
        /**
         * Default: http_download
         *
         * Mode for the template extraction.
         * Only used if C(state=extracted).
         */
        mode?: "http_download" | "ftp_upload";
        /**
         * The MD5 checksum value of this template.
         * If set, we search by checksum instead of name.
         */
        checksum?: string;
        /**
         * OS type that best represents the OS of this template.
         */
        os_type?: string;
        [k: string]: any;
      };
      /**
       * Create, delete or modify protection groups on Pure Storage FlashArrays.
       */
      purefa_pg?: {
        /**
         * Default: yes
         *
         * Define whether to enabled snapshots for the protection group.
         */
        enabled?: string;
        /**
         * Default: present
         *
         * Define whether the protection group should exist or not.
         */
        state?: string;
        /**
         * List of existing hostgroups to add to protection group.
         */
        hostgroup?: string;
        /**
         * List of existing volumes to add to protection group.
         */
        volume?: string;
        /**
         * List of existing hosts to add to protection group.
         */
        host?: string;
        /**
         * The name of the protection group.
         */
        pgroup?: string;
        /**
         * Default: no
         *
         * Define whether to eradicate the protection group on delete and leave in trash.
         */
        eradicate?: string;
        [k: string]: any;
      };
      /**
       * Retrieve an auth token from an OpenStack Cloud
       */
      os_auth?: {
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        [k: string]: any;
      };
      /**
       * Manages SNMP target host configurations on HUAWEI CloudEngine switches.
       */
      ce_snmp_target_host?: {
        /**
         * VPN instance Name.
         */
        vpn_name?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        /**
         * UDP Port number used by network management to receive alarm messages.
         */
        recv_port?: string;
        /**
         * Security Model.
         */
        security_model?: "v1" | "v2c" | "v3";
        /**
         * Security Name.
         */
        security_name?: string;
        /**
         * Default: no_use
         *
         * To enable or disable Public Net-manager for target Host.
         */
        is_public_net?: "no_use" | "true" | "false";
        state?: "present" | "absent";
        /**
         * Version(s) Supported by SNMP Engine.
         */
        version?: "none" | "v1" | "v2c" | "v3" | "v1v2c" | "v1v3" | "v2cv3" | "all";
        /**
         * Security level indicating whether to use authentication and encryption.
         */
        security_level?: "noAuthNoPriv" | "authentication" | "privacy";
        /**
         * Name of the interface to send the trap message.
         */
        interface_name?: string;
        username?: string;
        /**
         * Security Name V3.
         */
        security_name_v3?: string;
        provider?: {
          [k: string]: any;
        };
        host?: string;
        /**
         * Network Address.
         */
        address?: string;
        password?: string;
        /**
         * Udp port used by SNMP agent to connect the Network management.
         */
        connect_port?: string;
        /**
         * Unique name to identify target host entry.
         */
        host_name?: string;
        timeout?: number | string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * To configure notify type as trap or inform.
         */
        notify_type?: "trap" | "inform";
        [k: string]: any;
      };
      /**
       * This module is used to configure SSLKeyAndCertificate object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_sslkeyandcertificate?: {
        username?: string;
        /**
         * It is a reference to an object of type hardwaresecuritymodulegroup.
         */
        hardwaresecuritymodulegroup_ref?: string;
        /**
         * Sslkeyparams settings for sslkeyandcertificate.
         */
        key_params?: {
          [k: string]: any;
        };
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * Sslcertificate settings for sslkeyandcertificate.
         */
        certificate: {
          [k: string]: any;
        };
        /**
         * Name of the encrypted private key (e.g.
         * Those generated by an hsm such as thales nshield).
         */
        enckey_name?: string;
        /**
         * Creator name.
         */
        created_by?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Enum options - ssl_certificate_type_virtualservice, ssl_certificate_type_system, ssl_certificate_type_ca.
         * Default value when not specified in API or module is interpreted by Avi Controller as SSL_CERTIFICATE_TYPE_VIRTUALSERVICE.
         */
        type?: string;
        api_version?: string;
        /**
         * Enum options - ssl_certificate_finished, ssl_certificate_pending.
         * Default value when not specified in API or module is interpreted by Avi Controller as SSL_CERTIFICATE_FINISHED.
         */
        status?: string;
        /**
         * It is a reference to an object of type certificatemanagementprofile.
         */
        certificate_management_profile_ref?: string;
        controller?: string;
        /**
         * Private key.
         */
        key?: string;
        password?: string;
        tenant?: string;
        /**
         * Encrypted private key corresponding to the private key (e.g.
         * Those generated by an hsm such as thales nshield).
         */
        enckey_base64?: string;
        /**
         * Name of the object.
         */
        name: string;
        /**
         * Dynamic parameters needed for certificate management profile.
         */
        dynamic_params?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Ca certificates in certificate chain.
         */
        ca_certs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        tenant_uuid?: string;
        [k: string]: any;
      };
      /**
       * Run targets in a Makefile.
       */
      make?: {
        /**
         * cd into this directory before running make
         */
        chdir: string;
        /**
         * Default: none
         *
         * Any extra parameters to pass to make
         */
        params?: {
          [k: string]: any;
        };
        /**
         * Default: none
         *
         * The target to run
         */
        target?: string;
        [k: string]: any;
      };
      /**
       * Create a dynamic address group object in the firewall used for policy rules
       */
      panos_dag?: {
        /**
         * Default: admin
         *
         * username for authentication
         */
        username?: string;
        /**
         * name of the dynamic address group
         */
        dag_name: string;
        /**
         * Default: True
         *
         * commit if changed
         */
        commit?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * password for authentication
         */
        password: string;
        /**
         * IP address (or hostname) of PAN-OS device
         */
        ip_address: string;
        /**
         * dynamic filter user by the dynamic address group
         */
        dag_filter: string;
        [k: string]: any;
      };
      /**
       * Create a VMware portgroup
       */
      vmware_portgroup?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * This module is used to configure GslbService object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_gslbservice?: {
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        controller?: string;
        /**
         * Fully qualified domain name of the gslb service.
         */
        domain_names?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Ttl value (in seconds) for records served for this gslb service by the dns service.
         * Allowed values are 1-86400.
         */
        ttl?: number | string;
        /**
         * Health monitor probe can be executed for all the members or it can be executed only for third-party members.
         * This operational mode is useful to reduce the number of health monitor probes in case of a hybrid scenario.
         * In such a case, avi members can have controller derived status while non-avi members can be probed by via health monitor probes in dataplane.
         * Enum options - GSLB_SERVICE_HEALTH_MONITOR_ALL_MEMBERS, GSLB_SERVICE_HEALTH_MONITOR_ONLY_NON_AVI_MEMBERS.
         * Default value when not specified in API or module is interpreted by Avi Controller as GSLB_SERVICE_HEALTH_MONITOR_ALL_MEMBERS.
         */
        health_monitor_scope?: string;
        /**
         * Uuid of the gslb service.
         */
        uuid?: string;
        /**
         * Response to the client query when the gslb service is down.
         */
        down_response?: {
          [k: string]: any;
        };
        /**
         * Creator name.
         * Field introduced in 17.1.2.
         */
        created_by?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        api_version?: string;
        username?: string;
        /**
         * User defined description for the object.
         */
        description?: string;
        /**
         * Enable wild-card match of fqdn  if an exact match is not found in the dns table, the longest match is chosen by wild-carding the fqdn in the dns
         * request.
         * Default is false.
         * Field introduced in 17.1.1.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        wildcard_match?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Use the client ip subnet from the edns option as source ipaddress for client geo-location and consistent hash algorithm.
         * Default is true.
         * Field introduced in 17.1.1.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        use_edns_client_subnet?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Select list of pools belonging to this gslb service.
         */
        groups?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        tenant?: string;
        /**
         * Gs member's overall health status is derived based on a combination of controller and datapath health-status inputs.
         * Note that the datapath status is determined by the association of health monitor profiles.
         * Only the controller provided status is determined through this configuration.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        controller_health_status_enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name for the gslb service.
         */
        name: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * Enable or disable the gslb service.
         * If the gslb service is enabled, then the vips are sent in the dns responses based on reachability and configured algorithm.
         * If the gslb service is disabled, then the vips are no longer available in the dns response.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * This field indicates that this object is replicated across gslb federation.
         * Field introduced in 17.1.3.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        is_federated?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Verify vs health by applying one or more health monitors.
         * Active monitors generate synthetic traffic from dns service engine and to mark a vs up or down based on the response.
         * It is a reference to an object of type healthmonitor.
         */
        health_monitor_refs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Number of ip addresses of this gslb service to be returned by the dns service.
         * Enter 0 to return all ip addresses.
         * Allowed values are 1-20.
         * Special values are 0- 'return all ip addresses'.
         */
        num_dns_ip?: number | string;
        tenant_uuid?: string;
        [k: string]: any;
      };
      /**
       * Add, update and remove network ACL rules.
       */
      cs_network_acl_rule?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Manage VRF (private networks aka. contexts) on Cisco ACI fabrics.
       * Each context is a private network associated to a tenant, i.e. VRF.
       * More information from the internal APIC class I(fv:Ctx) at U(https://developer.cisco.com/media/mim-ref/MO-fvCtx.html).
       */
      aci_vrf?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Retrieve facts about one or more oVirt/RHV hosts.
       */
      ovirt_hosts_facts?: {
        /**
         * Search term which is accepted by oVirt/RHV search backend.
         * For example to search host X from datacenter Y use following pattern: name=X and datacenter=Y
         */
        pattern?: string;
        [k: string]: any;
      };
      /**
       * Configure Sampled Flow (sFlow) to monitor traffic on an interface in real time, detect abnormal traffic, and locate the source of attack traffic, ensuring stable running of the network.
       */
      ce_sflow?: {
        /**
         * Configures the sFlow packets sent by the switch not to carry routing information.
         */
        export_route?: "enable" | "disable";
        /**
         * Specifies the source IPv4/IPv6 address of sFlow packets.
         */
        source_ip?: string;
        /**
         * Specifies the maximum length of sFlow packets sent from an sFlow agent to an sFlow collector. The value is an integer, in bytes. It ranges from 1024 to 8100. The default value is 1400.
         */
        collector_datagram_size?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        /**
         * Enables flow sampling in the inbound or outbound direction.
         */
        sample_direction?: "inbound" | "outbound" | "both";
        /**
         * Specifies the name of a VPN instance. The value is a string of 1 to 31 case-sensitive characters, spaces not supported. When double quotation marks are used around the string, spaces are allowed in the string. The value C(_public_) is reserved and cannot be used as the VPN instance name.
         */
        collector_ip_vpn?: string;
        /**
         * Enable the Embedded Network Processor (ENP) chip function. The switch uses the ENP chip to perform sFlow sampling, and the maximum sFlow sampling interval is 65535. If you set the sampling interval to be larger than 65535, the switch automatically restores it to 65535. The value is an integer or 'all'.
         */
        forward_enp_slot?: string;
        /**
         * Specifies the IPv4/IPv6 address of the sFlow collector.
         */
        collector_ip?: string;
        /**
         * Full name of interface for Flow Sampling or Counter. It must be a physical interface, Eth-Trunk, or Layer 2 subinterface.
         */
        sflow_interface?: string;
        /**
         * Configures the device to send sFlow packets through service interfaces, enhancing the sFlow packet forwarding capability. The enhanced parameter is optional. No matter whether you configure the enhanced mode, the switch determines to send sFlow packets through service cards or management port based on the routing information on the collector. When the value is meth, the device forwards sFlow packets at the control plane. When the value is enhanced, the device forwards sFlow packets at the forwarding plane to enhance the sFlow packet forwarding capacity.
         */
        collector_meth?: "meth" | "enhanced";
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        /**
         * Specifies the ID of an sFlow collector. This ID is used when you specify the collector in subsequent sFlow configuration.
         */
        collector_id?: "1" | "2";
        /**
         * Indicates the counter sampling interval. The value is an integer that ranges from 10 to 4294967295, in seconds. The default value is 20.
         */
        counter_interval?: string;
        provider?: {
          [k: string]: any;
        };
        username?: string;
        /**
         * Specifies the IPv4/IPv6 address of an sFlow agent.
         */
        agent_ip?: string;
        /**
         * Indicates the ID list of the counter collector.
         */
        counter_collector?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Specifies the slot where the rate of output sFlow packets is limited. If this parameter is not specified, the rate of sFlow packets sent from all cards to the control plane is limited. The value is an integer or a string of characters.
         */
        rate_limit_slot?: string;
        /**
         * Specifies the UDP destination port number of sFlow packets. The value is an integer that ranges from 1 to 65535. The default value is 6343.
         */
        collector_udp_port?: string;
        host?: string;
        /**
         * Indicates the ID list of the collector.
         */
        sample_collector?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        /**
         * Specifies the rate of sFlow packets sent from a card to the control plane. The value is an integer that ranges from 100 to 1500, in pps.
         */
        rate_limit?: string;
        /**
         * Specifies the maximum length of sampled packets. The value is an integer and ranges from 18 to 512, in bytes. The default value is 128.
         */
        sample_length?: string;
        /**
         * Specifies the flow sampling rate in the format 1/rate. The value is an integer and ranges from 1 to 4294967295. The default value is 8192.
         */
        sample_rate?: string;
        timeout?: number | string;
        /**
         * Specifies the description of an sFlow collector. The value is a string of 1 to 255 case-sensitive characters without spaces.
         */
        collector_description?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manages UDLD interface configuration params.
       */
      nxos_udld_interface?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        host?: string;
        /**
         * Manages UDLD mode for an interface.
         */
        mode: "enabled" | "disabled" | "aggressive";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * FULL name of the interface, i.e. Ethernet1/1-
         */
        interface: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * PanOS module that will commit firewall's candidate configuration on
       * the device. The new configuration will become active immediately.
       */
      panos_commit?: {
        /**
         * Default: admin
         *
         * username for authentication
         */
        username?: string;
        /**
         * Default: 0.5
         *
         * interval for checking commit job
         */
        interval?: string;
        /**
         * Default: True
         *
         * if commit should be synchronous
         */
        sync?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * timeout for commit job
         */
        timeout?: string;
        /**
         * password for authentication
         */
        password?: string;
        /**
         * IP address (or hostname) of PAN-OS device
         */
        ip_address?: string;
        [k: string]: any;
      };
      /**
       * Add or remove a website on a Webfaction host.  Further documentation at http://github.com/quentinsf/ansible-webfaction.
       */
      webfaction_site?: {
        /**
         * A mapping of URLs to apps
         */
        site_apps?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * Whether the website should exist
         */
        state?: "present" | "absent";
        /**
         * A list of subdomains associated with this site.
         */
        subdomains?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The webfaction host on which the site should be created.
         */
        host: string;
        /**
         * Default: false
         *
         * Whether or not to use HTTPS
         */
        https?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The webfaction password to use
         */
        login_password: string;
        /**
         * The webfaction account to use
         */
        login_name: string;
        /**
         * The name of the website
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Add, modify and delete an IPA DNS Record using IPA API
       */
      ipa_dnsrecord?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * PanOS module that allows changes to the user account passwords by doing API calls to the Firewall using pan-api as the protocol.
       */
      panos_admin?: {
        /**
         * Default: admin
         *
         * username for authentication
         */
        username?: string;
        /**
         * Default: admin
         *
         * username for admin user
         */
        admin_username?: string;
        /**
         * role for admin user
         */
        role?: string;
        /**
         * password for admin user
         */
        admin_password?: string;
        /**
         * Default: True
         *
         * commit if changed
         */
        commit?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * password for authentication
         */
        password?: string;
        /**
         * IP address (or hostname) of PAN-OS device
         */
        ip_address?: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure CertificateManagementProfile object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_certificatemanagementprofile?: {
        username?: string;
        /**
         * List of customparams.
         */
        script_params?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        controller?: string;
        tenant?: string;
        /**
         * Script_path of certificatemanagementprofile.
         */
        script_path: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Name of the pki profile.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * The C(win_wakeonlan) module sends magic Wake-on-LAN (WoL) broadcast packets.
       */
      win_wakeonlan?: {
        /**
         * Default: 255.255.255.255
         *
         * Network broadcast address to use for broadcasting magic Wake-on-LAN packet.
         */
        broadcast?: string;
        /**
         * MAC address to send Wake-on-LAN broadcast packet for.
         */
        mac?: string;
        /**
         * Default: 7
         *
         * UDP port to use for magic Wake-on-LAN packet.
         */
        port?: string;
        [k: string]: any;
      };
      /**
       * Creates a maintenance window for status.io
       * Deletes a maintenance window for status.io
       */
      statusio_maintenance?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Use this module to manage order of boot devices
       */
      ipmi_boot?: {
        /**
         * Set boot device to use on next reboot
         */
        bootdev: "network" | "hd" | "safe" | "optical" | "setup" | "default";
        /**
         * Hostname or ip address of the BMC.
         */
        name: string;
        /**
         * If set, ask that system firmware uses this device beyond next boot. Be aware many systems do not honor this.
         */
        persistent?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * If set, request UEFI boot explicitly. Strictly speaking, the spec suggests that if not set, the system should BIOS boot and offers no "don't care" option. In practice, this flag not being set does not preclude UEFI boot on any system I've encountered.
         */
        uefiboot?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * Whether to ensure that boot devices is desired.
         */
        state?: "present" | "absent";
        /**
         * Username to use to connect to the BMC.
         */
        user: string;
        /**
         * Password to connect to the BMC.
         */
        password: string;
        /**
         * Default: 623
         *
         * Remote RMCP port.
         */
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Allows you to create/delete/stop Qemu(KVM) Virtual Machines in Proxmox VE cluster.
       */
      proxmox_kvm?: {
        /**
         * Target storage for full clone.
         */
        storage?: string;
        /**
         * Allow to force stop VM.
         * Can be used only with states C(stopped), C(restarted).
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Revert a pending change.
         */
        revert?: string;
        /**
         * A hash/dictionaries of NUMA topology. C(numa='{"key":"value", "key":"value"}').
         * Keys allowed are - C(numa[n]) where 0 ≤ n ≤ N.
         * Values allowed are - C("cpu="<id[-id];...>",hostnodes="<id[-id];...>",memory="number",policy="(bind|interleave|preferred)"").
         * C(cpus) CPUs accessing this NUMA node.
         * C(hostnodes) Host NUMA nodes to use.
         * C(memory) Amount of memory this NUMA node provides.
         * C(policy) NUMA allocation policy.
         */
        numa?: {
          [k: string]: any;
        };
        /**
         * Specifies the SCSI controller model.
         */
        scsihw?: "lsi" | "lsi53c810" | "virtio-scsi-pci" | "virtio-scsi-single" | "megasas" | "pvscsi";
        /**
         * Startup and shutdown behavior. C([[order=]\d+] [,up=\d+] [,down=\d+]).
         * Order is a non-negative number defining the general startup order.
         * Shutdown in done with reverse ordering.
         */
        startup?: string;
        /**
         * Sets maximum speed (in MB/s) for migrations.
         * A value of 0 is no limit.
         */
        migrate_speed?: number | string;
        /**
         * Specify if PVE should freeze CPU at startup (use 'c' monitor command to start execution).
         */
        freeze?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * Create a full copy of all disk. This is always done when you clone a normal VM.
         * For VM templates, we try to create a linked clone by default.
         * Used only with clone
         */
        full?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Sets the keyboard layout for VNC server.
         */
        keyboard?: string;
        /**
         * Ignore locks
         * Only root is allowed to use this option.
         */
        skiplock?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Creates a virtual hardware watchdog device.
         */
        watchdog?: string;
        /**
         * A hash/dictionary of serial device to create inside the VM. C('{"key":"value", "key":"value"}').
         * Keys allowed are - serial[n](str; required) where 0 ≤ n ≤ 3.
         * Values allowed are - C((/dev/.+|socket)).
         * /!\ If you pass through a host serial device, it is no longer possible to migrate such machines - use with special care.
         */
        serial?: {
          [k: string]: any;
        };
        numa_enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 1
         *
         * Sets the number of CPU sockets. (1 - N).
         */
        sockets?: number | string;
        /**
         * Specify if to prevent changes if current configuration file has different SHA1 digest.
         * This can be used to prevent concurrent modifications.
         */
        digest?: string;
        /**
         * Specify the description for the VM. Only used on the configuration web interface.
         * This is saved as comment inside the configuration file.
         */
        description?: string;
        /**
         * Sets the initial date of the real time clock.
         * Valid format for date are C('now') or C('2016-09-25T16:01:21') or C('2016-09-25').
         */
        startdate?: string;
        /**
         * Default: no
         *
         * Enables/disables the USB tablet device.
         */
        tablet?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify the BIOS implementation.
         */
        bios?: "seabios" | "ovmf";
        /**
         * Default: kvm64
         *
         * Specify emulated CPU type.
         */
        cpu?: string;
        /**
         * Specify the amount of RAM for the VM in MB.
         * Using zero disables the balloon driver.
         */
        balloon?: number | string;
        /**
         * Default: qcow2
         *
         * Target drive's backing file's data format.
         * Used only with clone
         */
        format?: "cloop" | "cow" | "qcow" | "qcow2" | "qed" | "raw" | "vmdk";
        /**
         * Default: cnd
         *
         * Specify the boot order -> boot on floppy C(a), hard disk C(c), CD-ROM C(d), or network C(n).
         * You can combine to set order.
         */
        boot?: string;
        /**
         * Default: std
         *
         * Select VGA type. If you want to use high resolution modes (>= 1280x1024x16) then you should use option 'std' or 'vmware'.
         */
        vga?:
          | "std"
          | "cirrus"
          | "vmware"
          | "qxl"
          | "serial0"
          | "serial1"
          | "serial2"
          | "serial3"
          | "qxl2"
          | "qxl3"
          | "qxl4";
        /**
         * Rets amount of memory shares for auto-ballooning. (0 - 50000).
         * The larger the number is, the more memory this VM gets.
         * The number is relative to weights of all other running VMs.
         * Using 0 disables auto-ballooning, this means no limit.
         */
        shares?: number | string;
        /**
         * Specifies the Qemu machine type.
         * type => C((pc|pc(-i440fx)?-\d+\.\d+(\.pxe)?|q35|pc-q35-\d+\.\d+(\.pxe)?))
         */
        machine?: string;
        /**
         * Specify a hash/dictionary of map host pci devices into guest. C(hostpci='{"key":"value", "key":"value"}').
         * Keys allowed are - C(hostpci[n]) where 0 ≤ n ≤ N.
         * Values allowed are -  C("host="HOSTPCIID[;HOSTPCIID2...]",pcie="1|0",rombar="1|0",x-vga="1|0"").
         * The C(host) parameter is Host PCI device pass through. HOSTPCIID syntax is C(bus:dev.func) (hexadecimal numbers).
         * C(pcie=boolean) I(default=0) Choose the PCI-express bus (needs the q35 machine model).
         * C(rombar=boolean) I(default=1) Specify whether or not the device's ROM will be visible in the guest's memory map.
         * C(x-vga=boolean) I(default=0) Enable vfio-vga device support.
         * /!\ This option allows direct access to host hardware. So it is no longer possible to migrate such machines - use with special care.
         */
        hostpci?: {
          [k: string]: any;
        };
        /**
         * Default: present
         *
         * Indicates desired state of the instance.
         * If C(current), the current state of the VM will be fecthed. You can access it with C(results.status)
         */
        state?: "present" | "started" | "absent" | "stopped" | "restarted" | "current";
        /**
         * Default: no
         *
         * Specify, if the VM should be automatically restarted after crash (currently ignored in PVE API).
         */
        autostart?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 512
         *
         * Memory size in MB for instance.
         */
        memory?: number | string;
        /**
         * A hash/dictionary of network interfaces for the VM. C(net='{"key":"value", "key":"value"}').
         * Keys allowed are - C(net[n]) where 0 ≤ n ≤ N.
         * Values allowed are - C("model="XX:XX:XX:XX:XX:XX",brigde="value",rate="value",tag="value",firewall="1|0",trunks="vlanid"").
         * Model is one of C(e1000 e1000-82540em e1000-82544gc e1000-82545em i82551 i82557b i82559er ne2k_isa ne2k_pci pcnet rtl8139 virtio vmxnet3).
         * C(XX:XX:XX:XX:XX:XX) should be an unique MAC address. This is automatically generated if not specified.
         * The C(bridge) parameter can be used to automatically add the interface to a bridge device. The Proxmox VE standard bridge is called 'vmbr0'.
         * Option C(rate) is used to limit traffic bandwidth from and to this interface. It is specified as floating point number, unit is 'Megabytes per second'.
         * If you specify no bridge, we create a kvm 'user' (NATed) network device, which provides DHCP and DNS services.
         */
        net?: {
          [k: string]: any;
        };
        /**
         * Target node. Only allowed if the original VM is on shared storage.
         * Used only with clone
         */
        target?: string;
        /**
         * Sets maximum tolerated downtime (in seconds) for migrations.
         */
        migrate_downtime?: number | string;
        /**
         * Sets the real time clock to local time.
         * This is enabled by default if ostype indicates a Microsoft OS.
         */
        localtime?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Proxmox VE node, where the new VM will be created.
         * Only required for C(state=present).
         * For other states, it will be autodiscovered.
         */
        node?: string;
        /**
         * Specify if the QEMU GuestAgent should be enabled/disabled.
         */
        agent?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A hash/dictionary of volume used as VIRTIO hard disk. C(virtio='{"key":"value", "key":"value"}').
         * Keys allowed are - C(virto[n]) where 0 ≤ n ≤ 15.
         * Values allowed are -  C("storage:size,format=value").
         * C(storage) is the storage identifier where to create the disk.
         * C(size) is the size of the disk in GB.
         * C(format) is the drive's backing file's data format. C(qcow2|raw|subvol).
         */
        virtio?: {
          [k: string]: any;
        };
        /**
         * Default: no
         *
         * Enables/disables the template.
         */
        template?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 1000
         *
         * Specify CPU weight for a VM.
         * You can disable fair-scheduler configuration by setting this to 0
         */
        cpuunits?: number | string;
        /**
         * Name of VM to be cloned. If C(vmid) is setted, C(clone) can take arbitrary value but required for intiating the clone.
         */
        clone?: string;
        /**
         * Default: -serial unix:/var/run/qemu-server/VMID.serial,server,nowait
         *
         * Pass arbitrary arguments to kvm.
         * This option is for experts only!
         */
        args?: string;
        /**
         * Specify the password to authenticate with.
         * You can use C(PROXMOX_PASSWORD) environment variable.
         */
        api_password?: string;
        /**
         * The name of the snapshot. Used only with clone.
         */
        snapname?: string;
        /**
         * Enables/disables time drift fix.
         */
        tdf?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: yes
         *
         * Enable/disable KVM hardware virtualization.
         */
        kvm?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A hash/dictionary of volume used as sata hard disk or CD-ROM. C(sata='{"key":"value", "key":"value"}').
         * Keys allowed are - C(sata[n]) where 0 ≤ n ≤ 5.
         * Values allowed are -  C("storage:size,format=value").
         * C(storage) is the storage identifier where to create the disk.
         * C(size) is the size of the disk in GB.
         * C(format) is the drive's backing file's data format. C(qcow2|raw|subvol).
         */
        sata?: {
          [k: string]: any;
        };
        /**
         * Enable/disable the protection flag of the VM. This will enable/disable the remove VM and remove disk operations.
         */
        protection?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Allow reboot. If set to yes, the VM exit on reboot.
         */
        reboot?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Selectively enable hotplug features.
         * This is a comma separated list of hotplug features C('network', 'disk', 'cpu', 'memory' and 'usb').
         * Value 0 disables hotplug completely and value 1 is an alias for the default C('network,disk,usb').
         */
        hotplug?: string;
        /**
         * Specify the user to authenticate with.
         */
        api_user: string;
        /**
         * A hash/dictionary of map host parallel devices. C(parallel='{"key":"value", "key":"value"}').
         * Keys allowed are - (parallel[n]) where 0 ≤ n ≤ 2.
         * Values allowed are - C("/dev/parport\d+|/dev/usb/lp\d+").
         */
        parallel?: {
          [k: string]: any;
        };
        /**
         * Add the new VM to the specified pool.
         */
        pool?: string;
        /**
         * Specify the target host of the Proxmox VE cluster.
         */
        api_host: string;
        /**
         * Lock/unlock the VM.
         */
        lock?: "migrate" | "backup" | "snapshot" | "rollback";
        /**
         * Specify if CPU usage will be limited. Value 0 indicates no CPU limit.
         * If the computer has 2 CPUs, it has total of '2' CPU time
         */
        cpulimit?: number | string;
        /**
         * Specifies the VM name. Only used on the configuration web interface.
         * Required only for C(state=present).
         */
        name?: string;
        /**
         * Default: no
         *
         * If C(yes), the VM will be update with new value.
         * Cause of the operations of the API and security reasons, I have disabled the update of the following parameters
         * C(net, virtio, ide, sata, scsi). Per example updating C(net) update the MAC address and C(virtio) create always new disk...
         */
        update?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specifies the VM ID. Instead use I(name) parameter.
         * If vmid is not set, the next available VM ID will be fetched from ProxmoxAPI.
         */
        vmid?: number | string;
        /**
         * Enable/disable hugepages memory.
         */
        hugepages?: "any" | "2" | "1024";
        /**
         * Enable booting from specified disk. C((ide|sata|scsi|virtio)\d+)
         */
        bootdisk?: string;
        /**
         * Default: yes
         *
         * Specify if ACPI should be enables/disabled.
         */
        acpi?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Sets number of hotplugged vcpus.
         */
        vcpus?: number | string;
        /**
         * VMID for the clone. Used only with clone.
         * If newid is not set, the next available VM ID will be fetched from ProxmoxAPI.
         */
        newid?: number | string;
        /**
         * Default: 30
         *
         * Timeout for operations.
         */
        timeout?: number | string;
        /**
         * Specifies SMBIOS type 1 fields.
         */
        smbios?: string;
        /**
         * Default: l26
         *
         * Specifies guest operating system. This is used to enable special optimization/features for specific operating systems.
         * The l26 is Linux 2.6/3.X Kernel.
         */
        ostype?: "other" | "wxp" | "w2k" | "w2k3" | "w2k8" | "wvista" | "win7" | "win8" | "l24" | "l26" | "solaris";
        /**
         * Default: 1
         *
         * Specify number of cores per socket.
         */
        cores?: number | string;
        /**
         * A hash/dictionary of volume used as SCSI hard disk or CD-ROM. C(scsi='{"key":"value", "key":"value"}').
         * Keys allowed are - C(sata[n]) where 0 ≤ n ≤ 13.
         * Values allowed are -  C("storage:size,format=value").
         * C(storage) is the storage identifier where to create the disk.
         * C(size) is the size of the disk in GB.
         * C(format) is the drive's backing file's data format. C(qcow2|raw|subvol).
         */
        scsi?: {
          [k: string]: any;
        };
        /**
         * A hash/dictionary of volume used as IDE hard disk or CD-ROM. C(ide='{"key":"value", "key":"value"}').
         * Keys allowed are - C(ide[n]) where 0 ≤ n ≤ 3.
         * Values allowed are - C("storage:size,format=value").
         * C(storage) is the storage identifier where to create the disk.
         * C(size) is the size of the disk in GB.
         * C(format) is the drive's backing file's data format. C(qcow2|raw|subvol).
         */
        ide?: {
          [k: string]: any;
        };
        /**
         * Default: no
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: yes
         *
         * Specifies whether a VM will be started during system bootup.
         */
        onboot?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify a list of settings you want to delete.
         */
        delete?: string;
        [k: string]: any;
      };
      /**
       * Create or delete AWS Dynamo DB tables.
       * Can update the provisioned throughput on existing tables.
       * Returns the status of the specified table.
       */
      dynamodb_table?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Use facts to create ad-hoc groups that can be used later in a playbook.
       * This module is also supported for Windows targets.
       */
      group_by?: {
        /**
         * Default: all
         *
         * The list of the parent groups
         */
        parents?: string;
        /**
         * The variables whose values will be used as groups
         */
        key?: string;
        [k: string]: any;
      };
      /**
       * Create or delete a Rackspace Cloud Monitoring notification that specifies a channel that can be used to communicate alarms, such as email, webhooks, or PagerDuty. Rackspace monitoring module flow | rax_mon_entity -> rax_mon_check -> *rax_mon_notification* -> rax_mon_notification_plan -> rax_mon_alarm
       */
      rax_mon_notification?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module will let you start and pause Uptime Robot Monitoring
       */
      uptimerobot?: {
        /**
         * ID of the monitor to check.
         */
        monitorid: string;
        /**
         * Define whether or not the monitor should be running or paused.
         */
        state: "started" | "paused";
        /**
         * Uptime Robot API key.
         */
        apikey: string;
        [k: string]: any;
      };
      /**
       * Management of LXD profiles
       */
      lxd_profile?: {
        /**
         * A new name of a profile.
         * If this parameter is specified a profile will be renamed to this name. See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-11)
         */
        new_name?: string;
        description?: string;
        /**
         * Default: unix:/var/lib/lxd/unix.socket
         *
         * The unix domain socket path or the https URL for the LXD server.
         */
        url?: string;
        /**
         * The config for the container (e.g. {"limits.memory": "4GB"}). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#patch-3)
         * If the profile already exists and its "config" value in metadata obtained from GET /1.0/profiles/<name> U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#get-19) are different, they this module tries to apply the configurations.
         * Not all config values are supported to apply the existing profile. Maybe you need to delete and recreate a profile.
         */
        config?: {
          [k: string]: any;
        };
        /**
         * Default: "{}/.config/lxc/client.crt" .format(os.environ["HOME"])
         *
         * The client certificate file path.
         */
        cert_file?: string;
        /**
         * The devices for the profile (e.g. {"rootfs": {"path": "/dev/kvm", "type": "unix-char"}). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#patch-3)
         */
        devices?: {
          [k: string]: any;
        };
        /**
         * Default: present
         *
         * Define the state of a profile.
         */
        state?: "present" | "absent";
        /**
         * Default: "{}/.config/lxc/client.key" .format(os.environ["HOME"])
         *
         * The client certificate key file path.
         */
        key_file?: string;
        /**
         * The client trusted password.
         * You need to set this password on the LXD server before running this module using the following command. lxc config set core.trust_password <some random password> See U(https://www.stgraber.org/2016/04/18/lxd-api-direct-interaction/)
         * If trust_password is set, this module send a request for authentication before sending any requests.
         */
        trust_password?: string;
        /**
         * Name of a profile.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure SSLProfile object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_sslprofile?: {
        /**
         * Prefer the ssl cipher ordering presented by the client during the ssl handshake over the one specified in the ssl profile.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        prefer_client_cipher_ordering?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Set of versions accepted by the server.
         */
        accepted_versions?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The amount of time before an ssl session expires.
         * Default value when not specified in API or module is interpreted by Avi Controller as 86400.
         */
        ssl_session_timeout?: number | string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Enable ssl session re-use.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        enable_ssl_session_reuse?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enum options - tls_ecdhe_ecdsa_with_aes_128_gcm_sha256, tls_ecdhe_ecdsa_with_aes_256_gcm_sha384, tls_ecdhe_rsa_with_aes_128_gcm_sha256,
         * tls_ecdhe_rsa_with_aes_256_gcm_sha384, tls_ecdhe_ecdsa_with_aes_128_cbc_sha256, tls_ecdhe_ecdsa_with_aes_256_cbc_sha384,
         * tls_ecdhe_rsa_with_aes_128_cbc_sha256, tls_ecdhe_rsa_with_aes_256_cbc_sha384, tls_rsa_with_aes_128_gcm_sha256, tls_rsa_with_aes_256_gcm_sha384,
         * tls_rsa_with_aes_128_cbc_sha256, tls_rsa_with_aes_256_cbc_sha256, tls_ecdhe_ecdsa_with_aes_128_cbc_sha, tls_ecdhe_ecdsa_with_aes_256_cbc_sha,
         * tls_ecdhe_rsa_with_aes_128_cbc_sha, tls_ecdhe_rsa_with_aes_256_cbc_sha, tls_rsa_with_aes_128_cbc_sha, tls_rsa_with_aes_256_cbc_sha,
         * tls_rsa_with_3des_ede_cbc_sha, tls_rsa_with_rc4_128_sha.
         */
        cipher_enums?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Send 'close notify' alert message for a clean shutdown of the ssl connection.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        send_close_notify?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Dh parameters used in ssl.
         * At this time, it is not configurable and is set to 2048 bits.
         */
        dhparam?: string;
        /**
         * Sslrating settings for sslprofile.
         */
        ssl_rating?: {
          [k: string]: any;
        };
        api_version?: string;
        username?: string;
        /**
         * Ciphers suites represented as defined by U(http://www.openssl.org/docs/apps/ciphers.html).
         * Default value when not specified in API or module is interpreted by Avi Controller as AES:3DES:RC4.
         */
        accepted_ciphers?: string;
        /**
         * User defined description for the object.
         */
        description?: string;
        /**
         * List of tag.
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        controller?: string;
        password?: string;
        tenant?: string;
        /**
         * Name of the object.
         */
        name: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        tenant_uuid?: string;
        [k: string]: any;
      };
      /**
       * Create or delete a Rackspace Cloud Monitoring check associated with an existing rax_mon_entity. A check is a specific test or measurement that is performed, possibly from different monitoring zones, on the systems you monitor. Rackspace monitoring module flow | rax_mon_entity -> *rax_mon_check* -> rax_mon_notification -> rax_mon_notification_plan -> rax_mon_alarm
       */
      rax_mon_check?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module is used to configure SnmpTrapProfile object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_snmptrapprofile?: {
        username?: string;
        /**
         * Uuid of the snmp trap profile object.
         */
        uuid?: string;
        /**
         * The ip address or hostname of the snmp trap destination server.
         */
        trap_servers?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        controller?: string;
        tenant?: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * A user-friendly name of the snmp trap configuration.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module uses rabbitMQ Rest API to create/delete bindings
       */
      rabbitmq_binding?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * This module provides declarative management of link aggregation groups on VyOS network devices.
       */
      vyos_linkagg?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Name of the link aggregation group.
         */
        name?: string;
        /**
         * Default: present
         *
         * State of the link aggregation group.
         */
        state?: "present" | "absent" | "up" | "down";
        /**
         * List of members of the link aggregation group.
         */
        members?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        host?: string;
        /**
         * Mode of the link aggregation group.
         */
        mode?:
          | "802.3ad"
          | "active-backup"
          | "broadcast"
          | "round-robin"
          | "transmit-load-balance"
          | "adaptive-load-balance"
          | "xor-hash"
          | "on";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of link aggregation definitions.
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Manages VLAN configurations on NX-OS switches.
       */
      nxos_vlan?: {
        username?: string;
        /**
         * Range of VLANs such as 2-10 or 2,5,10-15, etc.
         */
        vlan_range?: string;
        save?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Single VLAN ID.
         */
        vlan_id?: string;
        /**
         * Name of VLAN.
         */
        name?: string;
        config?: string;
        /**
         * The Virtual Network Identifier (VNI) ID that is mapped to the VLAN. Valid values are integer and keyword 'default'.
         */
        mapped_vni?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        port?: number | string;
        include_defaults?: string;
        host?: string;
        /**
         * Default: active
         *
         * Manage the vlan operational state of the VLAN (equivalent to state {active | suspend} command.
         */
        vlan_state?: "active" | "suspend";
        /**
         * Default: up
         *
         * Manage the VLAN administrative state of the VLAN equivalent to shut/no shut in VLAN config mode.
         */
        admin_state?: "up" | "down";
        /**
         * Set VLAN mode to classical ethernet or fabricpath.
         */
        mode?: "ce" | "fabricpath";
        timeout?: number | string;
        ssh_keyfile?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        provider?: {
          [k: string]: any;
        };
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Manages interface specific VRF configuration.
       */
      nxos_vrf_interface?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Default: present
         *
         * Manages desired state of the resource.
         */
        state?: "present" | "absent";
        host?: string;
        /**
         * Name of VRF to be managed.
         */
        vrf: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Full name of interface to be managed, i.e. Ethernet1/1.
         */
        interface: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Manages configuration of an ospf instance.
       */
      nxos_ospf?: {
        username?: string;
        save?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        include_defaults?: string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        config?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        /**
         * Name of the ospf instance.
         */
        ospf: string;
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * This module generates a self-signed certificate that can be used by GlobalProtect client, SSL connector, or
       * otherwise. Root certificate must be preset on the system first. This module depends on paramiko for ssh.
       */
      panos_cert_gen_ssh?: {
        /**
         * Human friendly certificate name (not CN but just a friendly name).
         */
        cert_friendly_name: string;
        /**
         * Location of the filename that is used for the auth. Either I(key_filename) or I(password) is required.
         */
        key_filename?: string;
        /**
         * Default: 2048
         *
         * Number of bits used by the RSA algorithm for the certificate generation.
         */
        rsa_nbits?: string;
        /**
         * Undersigning authority (CA) that MUST already be presents on the device.
         */
        signed_by: string;
        /**
         * Password credentials to use for auth. Either I(key_filename) or I(password) is required.
         */
        password?: string;
        /**
         * IP address (or hostname) of PAN-OS device being configured.
         */
        ip_address: string;
        /**
         * Certificate CN (common name) embedded in the certificate signature.
         */
        cert_cn: string;
        [k: string]: any;
      };
      /**
       * Manage the checks that should be run on a machine by I(Sensu).
       * Most options do not have a default and will not be added to the check definition unless specified.
       * All defaults except I(path), I(state), I(backup) and I(metric) are not managed by this module,
       * they are simply specified for your convenience.
       */
      sensu_check?: {
        /**
         * Whether the check is a metric
         */
        metric?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * When to disable handling of check failures
         */
        subdue_begin?: string;
        /**
         * Default: 1
         *
         * Number of event occurrences before the handler should take action
         */
        occurrences?: number | string;
        /**
         * The low threshhold for flap detection
         */
        low_flap_threshold?: number | string;
        /**
         * List of handlers to notify when the check fails
         */
        handlers?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: True
         *
         * Whether the check should be scheduled at all.
         * You can still issue it via the sensu api
         */
        publish?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A hash/dictionary of custom parameters for mixing to the configuration.
         * You can't rewrite others module parameters using this
         */
        custom?: {
          [k: string]: any;
        };
        /**
         * The check source, used to create a JIT Sensu client for an external resource (e.g. a network switch).
         */
        source?: string;
        /**
         * Default: present
         *
         * Whether the check should be present or not
         */
        state?: "present" | "absent";
        /**
         * When to enable handling of check failures
         */
        subdue_end?: string;
        /**
         * Default: True
         *
         * Whether the check should be handled or not
         */
        handle?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Other checks this check depends on, if dependencies fail,
         * handling of this check will be disabled
         */
        dependencies?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * List of subscribers/channels this check should run for
         * See sensu_subscribers to subscribe a machine to a channel
         */
        subscribers?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Classifies the check as an aggregate check,
         * making it available via the aggregate API
         */
        aggregate?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: /etc/sensu/conf.d/checks.json
         *
         * Path to the json file of the check to be added/removed.
         * Will be created if it does not exist (unless I(state=absent)).
         * The parent folders need to exist when I(state=present), otherwise an error will be thrown
         */
        path?: string;
        /**
         * The name of the check
         * This is the key that is used to determine whether a check exists
         */
        name: string;
        /**
         * Whether the check should be scheduled by the sensu client or server
         * This option obviates the need for specifying the I(subscribers) option
         */
        standalone?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Check interval in seconds
         */
        interval?: number | string;
        /**
         * Number of seconds handlers should wait before taking second action
         */
        refresh?: number | string;
        /**
         * Path to the sensu check to run (not required when I(state=absent))
         */
        command?: string;
        /**
         * The high threshhold for flap detection
         */
        high_flap_threshold?: number | string;
        /**
         * Default: 10
         *
         * Timeout for the check
         */
        timeout?: number | string;
        /**
         * Create a backup file (if yes), including the timestamp information so
         * you can get the original file back if you somehow clobbered it incorrectly.
         */
        backup?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Add and remove domain from the list of permissive domain.
       */
      selinux_permissive?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manage OpenStack Identity users. Users can be created, updated or deleted using this module. A user will be updated if I(name) matches an existing user and I(state) is present. The value for I(name) cannot be updated without deleting and re-creating the user.
       */
      os_user?: {
        /**
         * Default: always
         *
         * C(always) will attempt to update password.  C(on_create) will only set the password for newly created users.
         */
        update_password?: string;
        /**
         * Description about the user
         */
        description?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        /**
         * Default: True
         *
         * Is the user enabled
         */
        enabled?: string;
        /**
         * Default: None
         *
         * Project name or ID that the user should be associated with by default
         */
        default_project?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: None
         *
         * Domain to create the user in if the cloud supports domains
         */
        domain?: string;
        /**
         * Default: None
         *
         * Password for the user
         */
        password?: string;
        /**
         * Default: None
         *
         * Email address for the user
         */
        email?: string;
        /**
         * Username for the user
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * If behind NAT and need to know the public IP of your internet gateway.
       */
      ipify_facts?: {
        /**
         * Default: https://api.ipify.org
         *
         * URL of the ipify.org API service.
         * C(?format=json) will be appended per default.
         */
        api_url?: string;
        [k: string]: any;
      };
      /**
       * Create/modify/remove networking bandwidth and associated resources for a type of traffic on a particular link.
       */
      flowadm?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manages NetStream template configuration on HUAWEI CloudEngine switches.
       */
      ce_netstream_template?: {
        username?: string;
        /**
         * Configure the name of netstream record. The value is a string of 1 to 32 case-insensitive characters.
         */
        record_name?: string;
        /**
         * Configure the description of netstream record. The value is a string of 1 to 80 case-insensitive characters.
         */
        description?: string;
        /**
         * Configure the type of netstream record.
         */
        type: "ip" | "vxlan";
        /**
         * Configure the number of packets and bytes that are included in the flexible flow statistics sent to NSC.
         */
        collect_counter?: "bytes" | "packets";
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        host?: string;
        /**
         * Configure the input or output interface that are included in the flexible flow statistics sent to NSC.
         */
        collect_interface?: "input" | "output";
        /**
         * Configure flexible flow statistics template keywords.
         */
        match?: "destination-address" | "destination-port" | "tos" | "protocol" | "source-address" | "source-port";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Add or Remove a Stack to an OpenStack Heat
       */
      os_stack?: {
        /**
         * Rollback stack creation
         */
        rollback?: string;
        /**
         * Name of the stack that should be created, name could be char and digit, no space
         */
        name?: string;
        /**
         * Default: None
         *
         * Dictionary of parameters for the stack creation
         */
        parameters?: string;
        /**
         * Default: None
         *
         * List of environment files that should be used for the stack creation
         */
        environment?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: string;
        /**
         * Default: 3600
         *
         * Maximum number of seconds to wait for the stack creation
         */
        timeout?: string;
        /**
         * Default: None
         *
         * Path of the template file to use for the stack creation
         */
        template?: string;
        [k: string]: any;
      };
      /**
       * Retrieve facts about server instances from OpenStack.
       */
      os_server_facts?: {
        /**
         * when true, return additional detail about servers at the expense of additional API calls.
         */
        detailed?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        /**
         * Default: None
         *
         * restrict results to servers with names or UUID matching this glob expression (e.g., C<web*>).
         */
        server?: string;
        [k: string]: any;
      };
      /**
       * Bind Bridge Domain to L3 Out on Cisco ACI fabrics.
       * More information from the internal APIC class I(fv:RsBDToOut) at U(https://developer.cisco.com/media/mim-ref/MO-fvRsBDToOut.html).
       */
      aci_bd_to_l3out?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Security policies allow you to enforce rules and take action, and can be as general or specific as needed. The policy rules are compared against the incoming traffic in sequence, and because the first rule that matches the traffic is applied, the more specific rules must precede the more general ones.
       */
      panos_security_policy?: {
        /**
         * Default: None
         *
         * Name of the already defined wildfire_analysis profile.
         */
        wildfire_analysis?: string;
        /**
         * Default: None
         *
         * Name of the already defined spyware profile.
         */
        spyware?: string;
        /**
         * Default: any
         *
         * If you are using GlobalProtect with host information profile (HIP) enabled, you can also base the policy on information collected by GlobalProtect. For example, the user access level can be determined HIP that notifies the firewall about the user's local configuration.
         *
         */
        hip_profiles?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * Name of the already defined file_blocking profile.
         */
        file_blocking?: string;
        /**
         * Default: None
         *
         * Administrative tags that can be added to the rule. Note, tags must be already defined.
         */
        tag?: string;
        /**
         * Whether to log at session start.
         */
        log_start?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * Name of the already defined data_filtering profile.
         */
        data_filtering?: string;
        category?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: any
         *
         * List of destination zones.
         */
        to_zone?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: application-default
         *
         * List of services.
         */
        service?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: any
         *
         * List of applications.
         */
        application?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: any
         *
         * List of destination addresses.
         */
        destination?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: any
         *
         * List of source zones.
         */
        from_zone?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: any
         *
         * Use users to enforce policy for individual users or a group of users.
         */
        source_user?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * Name of the already defined url_filtering profile.
         */
        url_filtering?: string;
        /**
         * Default: None
         *
         * Security profile group that is already defined in the system. This property supersedes antivirus, vulnerability, spyware, url_filtering, file_blocking, data_filtering, and wildfire_analysis properties.
         *
         */
        group_profile?: string;
        /**
         * API key that can be used instead of I(username)/I(password) credentials.
         */
        api_key?: string;
        /**
         * Default: admin
         *
         * Username credentials to use for auth unless I(api_key) is set.
         */
        username?: string;
        /**
         * Default: None
         *
         * Device groups are used for the Panorama interaction with Firewall(s). The group must exists on Panorama. If device group is not define we assume that we are contacting Firewall.
         *
         */
        devicegroup?: string;
        /**
         * Default: None
         *
         * Description for the security rule.
         */
        description?: string;
        /**
         * Default: None
         *
         * Name of the already defined antivirus profile.
         */
        antivirus?: string;
        /**
         * Name of the security rule.
         */
        rule_name: string;
        /**
         * Password credentials to use for auth unless I(api_key) is set.
         */
        password?: string;
        /**
         * IP address (or hostname) of PAN-OS device being configured.
         */
        ip_address: string;
        /**
         * Default: universal
         *
         * Type of security rule (version 6.1 of PanOS and above).
         */
        rule_type?: string;
        /**
         * Default: None
         *
         * Name of the already defined vulnerability profile.
         */
        vulnerability?: string;
        /**
         * Default: any
         *
         * List of source addresses.
         */
        source?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: allow
         *
         * Action to apply once rules maches.
         */
        action?: string;
        /**
         * Default: True
         *
         * Commit configuration if changed.
         */
        commit?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * Whether to log at session end.
         */
        log_end?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Adds or removes Vertica database user and, optionally, assigns roles.
       * A user will not be removed until all the dependencies have been dropped.
       * In such a situation, if the module tries to remove the user it will fail and only remove roles granted to the user.
       */
      vertica_user?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Create, update, or destroy Ansible Tower credentials. See U(https://www.ansible.com/tower) for an overview.
       */
      tower_credential?: {
        /**
         * Should use authroize for net type.
         */
        authorize?: string;
        /**
         * Domain for openstack type.
         */
        domain?: string;
        /**
         * Valut password. Use ASK for prompting.
         */
        vault_password?: string;
        /**
         * Username for your Tower instance.
         */
        tower_username?: string;
        /**
         * Become username. Use ASK for prompting.
         */
        become_username?: string;
        /**
         * Default: None
         *
         * Become method to Use for privledge escalation.
         */
        become_method?: string;
        /**
         * Default: present
         *
         * Desired state of the resource.
         */
        state?: string;
        /**
         * Secret token for azure_rm type.
         */
        secret?: string;
        /**
         * Unlock password for ssh_key. Use ASK for prompting.
         */
        ssh_key_unlock?: string;
        /**
         * Password for net credentials that require authroize.
         */
        authorize_password?: string;
        /**
         * Username for this credential. access_key for AWS.
         */
        username?: string;
        /**
         * The description to use for the credential.
         */
        description?: string;
        /**
         * URL to your Tower instance.
         */
        tower_host?: string;
        /**
         * Host for this credential.
         */
        host?: string;
        /**
         * User that should own this credential.
         */
        user?: string;
        /**
         * Become password. Use ASK for prompting.
         */
        become_password?: string;
        /**
         * Password for your Tower instance.
         */
        tower_password?: string;
        /**
         * Path to the Tower config file. See notes.
         */
        tower_config_file?: string;
        /**
         * Password for this credential. Use ASK for prompting. secret_key for AWS. api_key for RAX.
         */
        password?: string;
        /**
         * Tenant ID for azure_rm type.
         */
        tenant?: string;
        /**
         * Subscription ID for azure_rm type.
         */
        subscription?: string;
        /**
         * Type of credential being added.
         */
        kind?: string;
        /**
         * The name to use for the credential.
         */
        name?: string;
        /**
         * Default: True
         *
         * Dis/allow insecure connections to Tower. If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        tower_verify_ssl?: string;
        /**
         * Project that should for this credential.
         */
        project?: string;
        /**
         * Client or application ID for azure_rm type.
         */
        client?: string;
        /**
         * Path to SSH private key.
         */
        ssh_key_data?: string;
        /**
         * Team that should own this credential.
         */
        team?: string;
        /**
         * Organization that should own the credential.
         */
        organization?: string;
        [k: string]: any;
      };
      /**
       * Module to manage groups in oVirt/RHV
       */
      ovirt_group?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Retrieve facts about one or more oVirt scheduling policies.
       */
      ovirt_scheduling_policies_facts?: {
        /**
         * ID of the scheduling policy.
         */
        id?: string;
        /**
         * Name of the scheduling policy, can be used as glob expression.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Perform server actions on an existing compute instance from OpenStack. This module does not return any data other than changed true/false.
       */
      os_server_actions?: {
        /**
         * Default: present
         *
         * Perform the given action. The lock and unlock actions always return changed as the servers API does not provide lock status.
         */
        action?: string;
        /**
         * Default: yes
         *
         * If the module should wait for the instance action to be performed.
         */
        wait?: string;
        /**
         * Default: 180
         *
         * The amount of time the module should wait for the instance to perform the requested action.
         */
        timeout?: string;
        /**
         * Name or ID of the instance
         */
        server?: string;
        [k: string]: any;
      };
      /**
       * Set the location settings of a Windows Server.
       * Set the format settings of a Windows Server.
       * Set the unicode language settings of a Windows Server.
       * Copy across these settings to the default profile.
       */
      win_region?: {
        /**
         * The unicode language format to set for all users, see U(https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.aspx) for a list of culture names to use. This needs to be set if C(location) or C(format) is not set. After setting this value a reboot is required for it to take effect.
         */
        unicode_language?: string;
        /**
         * This will copy the current format and location values to new user profiles and the welcome screen. This will only run if C(location), C(format) or C(unicode_language) has resulted in a change. If this process runs then it will always result in a change.
         */
        copy_settings?: string;
        /**
         * The location to set for the current user, see U(https://msdn.microsoft.com/en-us/library/dd374073.aspx) for a list of GeoIDs you can use and what location it relates to. This needs to be set if C(format) or C(unicode_language) is not set.
         */
        location?: string;
        /**
         * The language format to set for the current user, see U(https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.aspx) for a list of culture names to use. This needs to be set if C(location) or C(unicode_language) is not set.
         */
        format?: string;
        [k: string]: any;
      };
      /**
       * Creates or terminates azure instances. When created optionally waits for it to be 'running'.
       */
      azure?: {
        /**
         * Default: 22
         *
         * a comma-separated list of TCP ports to expose on the virtual machine (e.g., "22,80")
         */
        endpoints?: string;
        /**
         * Default: Small
         *
         * azure role size for the new virtual machine (e.g., Small, ExtraLarge, A6). You have to pay attention to the fact that instances of type G and DS are not available in all regions (locations). Make sure if you selected the size and type of instance available in your chosen location.
         */
        role_size?:
          | "ExtraSmall"
          | "Small"
          | "Medium"
          | "Large"
          | "ExtraLarge"
          | "A5"
          | "A6"
          | "A7"
          | "A8"
          | "A9"
          | "Basic_A0"
          | "Basic_A1"
          | "Basic_A2"
          | "Basic_A3"
          | "Basic_A4"
          | "Standard_D1"
          | "Standard_D2"
          | "Standard_D3"
          | "Standard_D4"
          | "Standard_D11"
          | "Standard_D12"
          | "Standard_D13"
          | "Standard_D14"
          | "Standard_D1_v2"
          | "Standard_D2_v2"
          | "Standard_D3_v2"
          | "Standard_D4_v2"
          | "Standard_D5_v2"
          | "Standard_D11_v2"
          | "Standard_D12_v2"
          | "Standard_D13_v2"
          | "Standard_D14_v2"
          | "Standard_DS1"
          | "Standard_DS2"
          | "Standard_DS3"
          | "Standard_DS4"
          | "Standard_DS11"
          | "Standard_DS12"
          | "Standard_DS13"
          | "Standard_DS14"
          | "Standard_G1"
          | "Standard_G2"
          | "Standard_G3"
          | "Standard_G4"
          | "Standard_G5";
        /**
         * name of the virtual machine and associated cloud service.
         */
        name?: string;
        /**
         * the azure location to use (e.g. 'East US')
         *
         * Possible choices:
         * South Central US
         * Central US
         * East US 2
         * East US
         * West US
         * North Central US
         * North Europe
         * West Europe
         * East Asia
         * Southeast Asia
         * Japan West
         * Japan East
         * Brazil South
         */
        location?: string;
        /**
         * Name of virtual network.
         */
        virtual_network_name?: string;
        /**
         * system image for creating the virtual machine (e.g., b39f27a8b8c64d52b05eac6a62ebad85__Ubuntu_DAILY_BUILD-precise-12_04_3-LTS-amd64-server-20131205-en-us-30GB)
         */
        image?: string;
        /**
         * hostname to write /etc/hostname. Defaults to <name>.cloudapp.net.
         */
        hostname?: string;
        /**
         * Default: yes
         *
         * Enable winrm on Windows Machines
         */
        enable_winrm?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * create or terminate instances
         */
        state?: string;
        /**
         * Default: 300
         *
         * how long before wait gives up for redirects, in seconds
         */
        wait_timeout_redirects?: string;
        /**
         * path to an azure management certificate associated with the subscription id. Overrides the AZURE_CERT_PATH environment variable.
         */
        management_cert_path?: string;
        /**
         * path to an X509 certificate containing the public ssh key to install in the virtual machine. See http://www.windowsazure.com/en-us/manage/linux/tutorials/intro-to-linux/ for more details.
         * if this option is specified, password-based ssh authentication will be disabled.
         */
        ssh_cert_path?: string;
        /**
         * Default: 600
         *
         * how long before wait gives up, in seconds
         */
        wait_timeout?: string;
        /**
         * the unix username for the new virtual machine.
         */
        user?: string;
        /**
         * Default: no
         *
         * Enable Auto Updates on Windows Machines
         */
        auto_updates?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * the azure storage account in which to store the data disks.
         */
        storage_account?: string;
        /**
         * Default: linux
         *
         * The type of the os that is gettings provisioned
         */
        os_type?: "windows" | "linux";
        /**
         * the unix password for the new virtual machine.
         */
        password?: string;
        /**
         * azure subscription id. Overrides the AZURE_SUBSCRIPTION_ID environment variable.
         */
        subscription_id?: string;
        /**
         * Default: no
         *
         * wait for the instance to be in state 'running' before returning
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Creates or deletes instances of task definitions.
       */
      ecs_task?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Will install, upgrade and remove packages with swdepot package manager (HP-UX)
       */
      swdepot?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Allows creating and removing managed IAM policies
       */
      iam_managed_policy?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage DNS records on Rackspace Cloud DNS
       */
      rax_dns_record?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Get facts for one Azure Function App or all Function Apps within a resource group
       */
      azure_rm_functionapp_facts?: {
        [k: string]: any;
      };
      /**
       * Manages F5 BIG-IP LTM tcp monitors via iControl SOAP API.
       */
      bigip_monitor_tcp_half_open?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manage users,tenants, roles from OpenStack.
       */
      keystone_user?: {
        /**
         * Default: None
         *
         * A description for the tenant
         */
        tenant_description?: string;
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone url for authentication
         */
        endpoint?: string;
        region_name?: string;
        availability_zone?: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_user?: string;
        /**
         * Default: None
         *
         * The token to be uses in case the password is not specified
         */
        token?: string;
        /**
         * Default: None
         *
         * The tenant login_user belongs to
         */
        login_tenant_name?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: None
         *
         * The name of the role to be assigned or created
         */
        role?: string;
        /**
         * Default: None
         *
         * The name of the user that has to added/removed from OpenStack
         */
        user?: string;
        /**
         * Default: yes
         *
         * Password of login user
         */
        login_password?: string;
        login_username?: string;
        /**
         * Default: None
         *
         * The password to be assigned to the user
         */
        password?: string;
        /**
         * Default: None
         *
         * An email address for the user
         */
        email?: string;
        /**
         * Default: None
         *
         * The tenant name that has be added/removed
         */
        tenant?: string;
        [k: string]: any;
      };
      /**
       * This module can create and destroy unformatted GCE persistent disks U(https://developers.google.com/compute/docs/disks#persistentdisks). It also supports attaching and detaching disks from running instances. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.
       */
      gce_pd?: {
        /**
         * If yes, deletes the volume when instance is terminated
         */
        delete_on_termination?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 10
         *
         * whole integer size of disk (in GB) to create, default is 10 GB
         */
        size_gb?: string;
        /**
         * your GCE project ID
         */
        project_id?: string;
        /**
         * name of the disk
         */
        name: string;
        /**
         * Default: us-central1-b
         *
         * zone in which to create the disk
         */
        zone?: string;
        /**
         * service account email
         */
        service_account_email?: string;
        image_family?: string;
        /**
         * path to the pem file associated with the service account email This option is deprecated. Use 'credentials_file'.
         */
        pem_file?: string;
        /**
         * instance name if you wish to attach or detach the disk
         */
        instance_name?: string;
        /**
         * Default: present
         *
         * desired state of the persistent disk
         */
        state?: string;
        external_projects?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: no
         *
         * do not destroy the disk, merely detach it from an instance
         */
        detach_only?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * path to the JSON file associated with the service account email
         */
        credentials_file?: string;
        /**
         * the source snapshot to use for the disk
         */
        snapshot?: string;
        /**
         * Default: pd-standard
         *
         * type of disk provisioned
         */
        disk_type?: string;
        /**
         * the source image to use for the disk
         */
        image?: string;
        /**
         * Default: READ_ONLY
         *
         * GCE mount mode of disk, READ_ONLY (default) or READ_WRITE
         */
        mode?: "READ_WRITE" | "READ_ONLY";
        [k: string]: any;
      };
      /**
       * Create, update, or destroy Ansible Tower users. See U(https://www.ansible.com/tower) for an overview.
       */
      tower_user?: {
        /**
         * The username of the user.
         */
        username: string;
        /**
         * User is a system wide administator.
         */
        superuser?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * First name of the user.
         */
        first_name?: string;
        /**
         * Last name of the user.
         */
        last_name?: string;
        /**
         * URL to your Tower instance.
         */
        tower_host?: string;
        /**
         * Email address of the user.
         */
        email: string;
        /**
         * Username for your Tower instance.
         */
        tower_username?: string;
        /**
         * Default: present
         *
         * Desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * User is a system wide auditor.
         */
        auditor?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Password for your Tower instance.
         */
        tower_password?: string;
        /**
         * Path to the Tower config file. See notes.
         */
        tower_config_file?: string;
        /**
         * Password of the user.
         */
        password?: string;
        /**
         * Default: True
         *
         * Dis/allow insecure connections to Tower. If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        tower_verify_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Copies AMI from a source region to a destination region. This module has a dependency on python-boto >= 2.5
       */
      ec2_ami_copy?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create new virtual machines (from templates or not).
       * Power on/power off/restart a virtual machine.
       * Modify, rename or remove a virtual machine.
       */
      vmware_guest?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * This module works like M(fetch). It is used for fetching a base64- encoded blob containing the data in a remote file.
       * This module is also supported for Windows targets.
       */
      slurp?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Toggles SELinux booleans.
       */
      seboolean?: {
        /**
         * Desired boolean value
         */
        state:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Set to C(yes) if the boolean setting should survive a reboot
         */
        persistent?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the boolean to configure
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Reboot a network device.
       */
      nxos_reboot?: {
        username?: string;
        ssh_keyfile?: string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Create/remove Docker volumes.
       * Performs largely the same function as the "docker volume" CLI subcommand.
       */
      docker_volume?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Add a VMware Standard Switch to an ESXi host
       */
      vmware_vswitch?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Gather facts about Network ACLs in an AWS VPC
       */
      ec2_vpc_nacl_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * CyberArk User Management using PAS Web Services SDK. It currently supports the following actions Get User Details, Add User, Update User, Delete User.
       */
      cyberark_user?: {
        /**
         * The name of the user who will be queried (for details), added, updated or deleted.
         */
        username: string;
        /**
         * The user first name.
         */
        first_name?: string;
        /**
         * The user last name.
         */
        last_name?: string;
        /**
         * The password that the new user will use to log on the first time. This password must meet the password policy requirements. this parameter is required when state is present -- Add User.
         */
        initial_password?: string;
        /**
         * Default: EPVUser
         *
         * The type of user.
         */
        user_type_name?: string;
        /**
         * The user updated password. Make sure that this password meets the password policy requirements.
         */
        new_password?: string;
        /**
         * Dictionary set by a CyberArk authentication containing the different values to perform actions on a logged-on CyberArk session, please see M(cyberark_authentication) module for an example of cyberark_session.
         */
        cyberark_session: {
          [k: string]: any;
        };
        /**
         * The name of the group the user will be added to.
         */
        group_name?: string;
        /**
         * Default: no
         *
         * Whether or not the user will be disabled. Valid values = true/false.
         */
        disabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: no
         *
         * Whether or not the user must change their password in their next logon. Valid values = true/false.
         */
        change_password_on_the_next_logon?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * Specifies the state needed for the user present for create user, absent for delete user.
         */
        state?: "present" | "absent";
        /**
         * The date and time when the user account will expire and become disabled.
         */
        expiry_date?: string;
        /**
         * The Vault Location for the user.
         */
        location?: string;
        /**
         * The user email address.
         */
        email?: string;
        [k: string]: any;
      };
      /**
       * Create, update, or destroy Ansible Tower groups. See U(https://www.ansible.com/tower) for an overview.
       */
      tower_group?: {
        /**
         * Credential to use for the group.
         */
        credential?: string;
        /**
         * Override variables from source with variables from this field.
         */
        source_vars?: string;
        /**
         * Inventory script to be used when group type is "custom".
         */
        source_script?: string;
        /**
         * The description to use for the group.
         */
        description?: string;
        /**
         * Override vars in child groups and hosts with those from external source.
         */
        overwrite_vars?: string;
        /**
         * Regions for cloud provider.
         */
        source_regions?: string;
        /**
         * Inventory the group should be made a member of.
         */
        inventory: string;
        /**
         * URL to your Tower instance.
         */
        tower_host?: string;
        /**
         * Comma-separated list of filter expressions for matching hosts.
         */
        instance_filters?: string;
        /**
         * Limit groups automatically created from inventory source.
         */
        group_by?: string;
        /**
         * Username for your Tower instance.
         */
        tower_username?: string;
        /**
         * Default: present
         *
         * Desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Refresh inventory data from its source each time a job is run.
         */
        update_on_launch?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: null,
         *
         * The source to use for this group.
         */
        source?:
          | "manual"
          | "file"
          | "ec2"
          | "rax"
          | "vmware"
          | "gce"
          | "azure"
          | "azure_rm"
          | "openstack"
          | "satellite6"
          | "cloudforms"
          | "custom";
        /**
         * Password for your Tower instance.
         */
        tower_password?: string;
        /**
         * Path to the Tower config file. See notes.
         */
        tower_config_file?: string;
        /**
         * Variables to use for the group, use '@' for a file.
         */
        variables?: string;
        /**
         * Default: True
         *
         * Dis/allow insecure connections to Tower. If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        tower_verify_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Delete child roups and hosts not found in source.
         */
        overwrite?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The name to use for the group.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Locates and consolidates fragmented files on local volumes to improve system performance.
       * More information regarding C(win_defrag) is available from: U(https://technet.microsoft.com/en-us/library/cc731650(v=ws.11).aspx)
       */
      win_defrag?: {
        /**
         * Default: low
         *
         * Run the operation at low or normal priority.
         */
        priority?: string;
        /**
         * A list of drive letters or mount point paths to exclude from defragmentation.
         */
        excluded_volumes?: string;
        /**
         * A list of drive letters or mount point paths of the volumes to be defragmented.
         * If this parameter is omitted, all volumes (not excluded) will be fragmented.
         */
        included_volumes?: string;
        /**
         * Perform free space consolidation on the specified volumes.
         */
        freespace_consolidation?: string;
        /**
         * Default: no
         *
         * Run the operation on each volume in parallel in the background.
         */
        parallel?: string;
        [k: string]: any;
      };
      /**
       * Add and remove local groups.
       * For non-Windows targets, please use the M(group) module instead.
       */
      win_group?: {
        /**
         * Default: present
         *
         * Create or remove the group
         */
        state?: string;
        /**
         * Name of the group
         */
        name?: string;
        /**
         * Description of the group
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * This module creates, deletes or modifies hosts on Infinibox.
       */
      infini_host?: {
        /**
         * Volume name to map to the host
         */
        volume?: string;
        /**
         * Default: present
         *
         * Creates/Modifies Host when present or removes when absent
         */
        state?: string;
        /**
         * Host Name
         */
        name?: string;
        /**
         * List of wwns of the host
         */
        wwns?: string;
        [k: string]: any;
      };
      /**
       * This module allows the management of AWS Lambda function event source mappings such as DynamoDB and Kinesis stream events via the Ansible framework. These event source mappings are relevant only in the AWS Lambda pull model, where AWS Lambda invokes the function. It is idempotent and supports "Check" mode.  Use module M(lambda) to manage the lambda function itself and M(lambda_alias) to manage function aliases.
       */
      lambda_event?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manage LTM virtual addresses on a BIG-IP.
       */
      bigip_virtual_address?: {
        /**
         * Specifies how the systems sends responses to (ICMP) echo requests on a per-virtual address basis for enabling route advertisement. When C(enabled), the BIG-IP system intercepts ICMP echo request packets and responds to them directly. When C(disabled), the BIG-IP system passes ICMP echo requests through to the backend servers. When (selective), causes the BIG-IP system to internally enable or disable responses based on virtual server state; C(when_any_available), C(when_all_available, or C(always), regardless of the state of any virtual servers.
         */
        icmp_echo?: string;
        /**
         * Specifies whether the system automatically deletes the virtual address with the deletion of the last associated virtual server. When C(disabled), specifies that the system leaves the virtual address even when all associated virtual servers have been deleted. When creating the virtual address, the default value is C(enabled).
         */
        auto_delete?: string;
        /**
         * Specifies the number of concurrent connections that the system allows on this virtual address.
         */
        connection_limit?: string;
        /**
         * Default: present
         *
         * The virtual address state. If C(absent), an attempt to delete the virtual address will be made. This will only succeed if this virtual address is not in use by a virtual server. C(present) creates the virtual address and enables it. If C(enabled), enable the virtual address if it exists. If C(disabled), create the virtual address if needed, and set state to C(disabled).
         */
        state?: string;
        /**
         * Default: 255.255.255.255
         *
         * Netmask of the provided virtual address. This value cannot be modified after it is set.
         */
        netmask?: string;
        /**
         * Specifies whether the system accepts ARP requests. When (disabled), specifies that the system does not accept ARP requests. Note that both ARP and ICMP Echo must be disabled in order for forwarding virtual servers using that virtual address to forward ICMP packets. If (enabled), then the packets are dropped.
         */
        arp_state?: string;
        /**
         * Virtual address. This value cannot be modified after it is set.
         */
        address?: string;
        /**
         * Specifies whether the system uses route advertisement for this virtual address. When disabled, the system does not advertise routes for this virtual address.
         */
        use_route_advertisement?: string;
        /**
         * Specifies what routes of the virtual address the system advertises. When C(when_any_available), advertises the route when any virtual server is available. When C(when_all_available), advertises the route when all virtual servers are available. When (always), always advertises the route regardless of the virtual servers available.
         */
        advertise_route?: string;
        [k: string]: any;
      };
      /**
       * Creates and removes firewall rules.
       */
      cs_firewall?: {
        [k: string]: any;
      };
      /**
       * Add or remove LDAP attribute values.
       */
      ldap_attr?: {
        /**
         * The DN of the entry to modify.
         */
        dn: string;
        /**
         * The name of the attribute to modify.
         */
        name: string;
        /**
         * Default: ldapi:///
         *
         * A URI to the LDAP server. The default value lets the underlying LDAP client library look for a UNIX domain socket in its default location.
         */
        server_uri?: string;
        /**
         * Default: no
         *
         * If true, we'll use the START_TLS LDAP extension.
         */
        start_tls?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A DN to bind with. If this is omitted, we'll try a SASL bind with the EXTERNAL mechanism. If this is blank, we'll use an anonymous bind.
         */
        bind_dn?: string;
        /**
         * Default: present
         *
         * The state of the attribute values. If C(present), all given values will be added if they're missing. If C(absent), all given values will be removed if present. If C(exact), the set of values will be forced to exactly those provided and no others. If I(state=exact) and I(value) is empty, all values for this attribute will be removed.
         */
        state?: "present" | "absent" | "exact";
        params?: {
          [k: string]: any;
        };
        /**
         * The password to use with I(bind_dn).
         */
        bind_pw?: string;
        /**
         * The value(s) to add or remove. This can be a string or a list of strings. The complex argument format is required in order to pass a list of strings (see examples).
         */
        values: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Sends arbitrary commands to an aireos node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.
       * This module does not support running commands in configuration mode. Please use M(aireos_config) to configure WLC devices.
       */
      aireos_command?: {
        [k: string]: any;
      };
      /**
       * This module allows for addition or deletion of services and ports either tcp or udp in either running or permanent firewalld rules.
       */
      firewalld?: {
        /**
         * Default: system-default(public)
         *
         * The firewalld zone to add/remove to/from (NOTE: default zone can be configured per system but "public" is default from upstream. Available choices can be extended based on per-system configs, listed here are "out of the box" defaults).
         */
        zone?: string;
        /**
         * Name of a service to add/remove to/from firewalld - service must be listed in /etc/services.
         */
        service?: string;
        /**
         * The masquerade setting you would like to enable/disable to/from zones within firewalld
         */
        masquerade?: string;
        /**
         * Should this configuration be applied immediately, if set as permanent
         */
        immediate?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The source/network you would like to add/remove to/from firewalld
         */
        source?: string;
        /**
         * Should this port accept(enabled) or reject(disabled) connections.
         */
        state: "enabled" | "disabled";
        /**
         * Should this configuration be in the running firewalld configuration or persist across reboots.
         */
        permanent?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The amount of time the rule should be in effect for when non-permanent.
         */
        timeout?: number | string;
        /**
         * The interface you would like to add/remove to/from a zone in firewalld
         */
        interface?: string;
        /**
         * Name of a port or port range to add/remove to/from firewalld. Must be in the form PORT/PROTOCOL or PORT-PORT/PROTOCOL for port ranges.
         */
        port?: string;
        /**
         * Rich rule to add/remove to/from firewalld.
         */
        rich_rule?: string;
        [k: string]: any;
      };
      /**
       * Module to manage logical networks in oVirt/RHV
       */
      ovirt_networks?: {
        /**
         * Comment of the network.
         */
        comment?: string;
        timeout?: number | string;
        /**
         * Description of the network.
         */
        description?: string;
        poll_interval?: number | string;
        fetch_nested?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nested_attributes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Maximum transmission unit (MTU) of the network.
         */
        mtu?: number | string;
        /**
         * Default: present
         *
         * Should the network be present or absent
         */
        state?: "present" | "absent";
        auth: {
          [k: string]: any;
        };
        /**
         * If I(True) network will be marked as network for VM.
         * VM network carries traffic relevant to the virtual machine.
         */
        vm_network?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Datacenter name where network reside.
         */
        data_center: string;
        /**
         * List of dictionaries describing how the network is managed in specific cluster.
         * C(name) - Cluster name.
         * C(assigned) - I(true) if the network should be assigned to cluster. Default is I(true).
         * C(required) - I(true) if the network must remain operational for all hosts associated with this network.
         * C(display) - I(true) if the network should marked as display network.
         * C(migration) - I(true) if the network should marked as migration network.
         * C(gluster) - I(true) if the network should marked as gluster network.
         */
        clusters?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Specify VLAN tag.
         */
        vlan_tag?: number | string;
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the network to manage.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Adds or removes a user from a MongoDB database.
       */
      mongodb_user?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        };
      /**
       * Return canonical (NAA) from an ESXi host based on SCSI target ID
       */
      vmware_target_canonical_facts?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manage Open vSwitch ports
       */
      openvswitch_port?: {
        /**
         * Name of bridge to manage
         */
        bridge: string;
        /**
         * Default: None
         *
         * Set a single property on a port.
         */
        set?: string;
        /**
         * Default: present
         *
         * Whether the port should exist
         */
        state?: "present" | "absent";
        /**
         * VLAN tag for this port
         */
        tag?: string;
        /**
         * Default: 5
         *
         * How long to wait for ovs-vswitchd to respond
         */
        timeout?: number | string;
        /**
         * Dictionary of external_ids applied to a port.
         */
        external_ids?: {
          [k: string]: any;
        };
        /**
         * Name of port to manage on the bridge
         */
        port: string;
        [k: string]: any;
      };
      /**
       * Create and remove a bigmon out-of-band policy.
       */
      bigmon_policy?: {
        /**
         * Description of policy.
         */
        policy_description?: string;
        /**
         * The name of the policy.
         */
        name: string;
        /**
         * Bigmon access token. If this isn't set, the environment variable C(BIGSWITCH_ACCESS_TOKEN) is used.
         */
        access_token?: string;
        /**
         * Default: ansible_date_time.iso8601
         *
         * Date the policy becomes active
         */
        start_time?: string;
        /**
         * The controller address.
         */
        controller: string;
        /**
         * Default: 100
         *
         * A priority associated with this policy. The higher priority policy takes precedence over a lower priority.
         */
        priority?: number | string;
        /**
         * Default: forward
         *
         * Forward matching packets to delivery interfaces, Drop is for measure rate of matching packets, but do not forward to delivery interfaces, capture packets and write to a PCAP file, or enable NetFlow generation.
         */
        action?: "forward" | "drop" | "capture" | "flow-gen";
        /**
         * Default: present
         *
         * Whether the policy should be present or absent.
         */
        state?: "present" | "absent";
        /**
         * Run policy for duration duration or until delivery_packet_count packets are delivered, whichever comes first.
         */
        duration?: number | string;
        /**
         * Default: True
         *
         * If C(false), SSL certificates will not be validated. This should only be used on personally controlled devices using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Run policy until delivery_packet_count packets are delivered.
         */
        delivery_packet_count?: number | string;
        [k: string]: any;
      };
      /**
       * This module configures the timezone setting, both of the system clock and of the hardware clock. I(Currently only Linux platform is supported.) It is recommended to restart C(crond) after changing the timezone, otherwise the jobs may run at the wrong time. It uses the C(timedatectl) command if available. Otherwise, it edits C(/etc/sysconfig/clock) or C(/etc/timezone) for the system clock, and uses the C(hwclock) command for the hardware clock. If you want to set up the NTP, use M(service) module.
       */
      timezone?: {
        [k: string]: any;
      };
      /**
       * Cisco IOS configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with IOS configuration sections in a deterministic way.
       */
      ios_config?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Packs an archive. It is the opposite of M(unarchive). By default, it assumes the compression source exists on the target. It will not copy the source file from the local system to the target before archiving. Source files can be deleted after archival by specifying I(remove=True).
       */
      archive?: {
        /**
         * The file name of the destination archive. This is required when C(path) refers to multiple files by either specifying a glob, a directory or multiple paths in a list.
         */
        dest?: string;
        /**
         * Remote absolute path, glob, or list of paths or globs for the file or files to compress or archive.
         */
        path:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Remote absolute path, glob, or list of paths or globs for the file or files to exclude from the archive
         */
        exclude_path?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Remove any added source files and trees after adding to archive.
         */
        remove?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: gz
         *
         * The type of compression to use.
         */
        format?: "gz" | "bz2" | "zip" | "tar";
        [k: string]: any;
      };
      /**
       * Get facts for a specific network interface or all network interfaces within a resource group.
       */
      azure_rm_networkinterface_facts?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Only show results for a specific network interface.
         */
        name?: string;
        /**
         * Name of the resource group containing the network interface(s). Required when searching by name.
         */
        resource_group?: string;
        /**
         * Limit results by providing a list of tags. Format tags as 'key' or 'key:value'.
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        ad_user?: string;
        cloud_environment?: string;
        secret?: string;
        client_id?: string;
        subscription_id?: string;
        password?: string;
        tenant?: string;
        [k: string]: any;
      };
      /**
       * Adds service hooks and removes service hooks that have an error status.
       */
      github_hooks?: {
        /**
         * The oauth key provided by github. It can be found/generated on github under "Edit Your Profile" >> "Applications" >> "Personal Access Tokens"
         */
        oauthkey: string;
        /**
         * When creating a new hook, this is the url that you want github to post to. It is only required when creating a new hook.
         */
        hookurl?: string;
        /**
         * This is the API url for the repository you want to manage hooks for. It should be in the form of: https://api.github.com/repos/user:/repo:. Note this is different than the normal repo url.
         */
        repo: string;
        /**
         * Github username.
         */
        user: string;
        /**
         * Default: json
         *
         * Content type to use for requests made to the webhook
         */
        content_type?: "json" | "form";
        /**
         * This tells the githooks module what you want it to do.
         */
        action: "create" | "cleanall" | "list" | "clean504";
        /**
         * Default: yes
         *
         * If C(no), SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module is used to configure ApplicationProfile object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_applicationprofile?: {
        username?: string;
        /**
         * Specifies the tcp application proxy profile parameters.
         */
        tcp_app_profile?: {
          [k: string]: any;
        };
        /**
         * Uuid of the application profile.
         */
        uuid?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * Specifies which application layer proxy is enabled for the virtual service.
         * Enum options - APPLICATION_PROFILE_TYPE_L4, APPLICATION_PROFILE_TYPE_HTTP, APPLICATION_PROFILE_TYPE_SYSLOG, APPLICATION_PROFILE_TYPE_DNS,
         * APPLICATION_PROFILE_TYPE_SSL.
         */
        type: string;
        /**
         * User defined description for the object.
         */
        description?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Specifies the http application proxy profile parameters.
         */
        http_profile?: {
          [k: string]: any;
        };
        /**
         * Specifies various dns service related controls for virtual service.
         */
        dns_service_profile?: {
          [k: string]: any;
        };
        controller?: string;
        tenant?: string;
        /**
         * Specifies various security related controls for virtual service.
         */
        dos_rl_profile?: {
          [k: string]: any;
        };
        password?: string;
        /**
         * Specifies if client ip needs to be preserved for backend connection.
         * Not compatible with connection multiplexing.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        preserve_client_ip?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        tenant_uuid?: string;
        api_version?: string;
        /**
         * The name of the application profile.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module will search a file for a line, and ensure that it is present or absent.
       * This is primarily useful when you want to change a single line in a file only.
       */
      win_lineinfile?: {
        /**
         * Used with C(state=present). If specified, the line will be inserted before the last match of specified regular expression. A value is available; C(BOF) for inserting the line at the beginning of the file.
         * If specified regular expression has no matches, the line will be inserted at the end of the file. May not be used with C(backrefs).
         */
        insertbefore?: string;
        /**
         * Default: auto
         *
         * Specifies the encoding of the source text file to operate on (and thus what the output encoding will be). The default of C(auto) will cause the module to auto-detect the encoding of the source file and ensure that the modified file is written with the same encoding.
         * An explicit encoding can be passed as a string that is a valid value to pass to the .NET framework System.Text.Encoding.GetEncoding() method - see U(https://msdn.microsoft.com/en-us/library/system.text.encoding%28v=vs.110%29.aspx).
         *
         * This is mostly useful with C(create=yes) if you want to create a new file with a specific encoding. If C(create=yes) is specified without a specific encoding, the default encoding (UTF-8, no BOM) will be used.
         */
        encoding?: string;
        /**
         * Default: no
         *
         * Used with C(state=present). If specified, the file will be created if it does not already exist. By default it will fail if the file is missing.
         */
        create?: string;
        /**
         * Default: windows
         *
         * Specifies the line separator style to use for the modified file. This defaults to the windows line separator (C(\r\n)). Note that the indicated line separator will be used for file output regardless of the original line separator that appears in the input file.
         *
         */
        newline?: string;
        /**
         * Default: no
         *
         * Used with C(state=present). If set, line can contain backreferences (both positional and named) that will get populated if the C(regexp) matches. This flag changes the operation of the module slightly; C(insertbefore) and C(insertafter) will be ignored, and if the C(regexp) doesn't match anywhere in the file, the file will be left unchanged.
         * If the C(regexp) does match, the last matching line will be replaced by the expanded line parameter.
         */
        backrefs?: string;
        /**
         * Default: present
         *
         * Whether the line should be there or not.
         */
        state?: string;
        /**
         * The regular expression to look for in every line of the file. For C(state=present), the pattern to replace if found; only the last line found will be replaced. For C(state=absent), the pattern of the line to remove. Uses .NET compatible regular expressions; see U(https://msdn.microsoft.com/en-us/library/hs600312%28v=vs.110%29.aspx).
         *
         */
        regexp?: string;
        /**
         * Default: EOF
         *
         * Used with C(state=present). If specified, the line will be inserted after the last match of specified regular expression. A special value is available; C(EOF) for inserting the line at the end of the file.
         * If specified regular expression has no matches, EOF will be used instead. May not be used with C(backrefs).
         */
        insertafter?: string;
        /**
         * The path of the file to modify.
         * Note that the Windows path delimiter C(\) must be escaped as C(\\) when the line is double quoted.
         * Before 2.3 this option was only usable as I(dest), I(destfile) and I(name).
         */
        path?: string;
        /**
         * Required for C(state=present). The line to insert/replace into the file. If C(backrefs) is set, may contain backreferences that will get expanded with the C(regexp) capture groups if the regexp matches.
         */
        line?: string;
        /**
         * Default: no
         *
         * Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
         */
        backup?: string;
        /**
         * Default: None
         *
         * Validation to run before copying into place. Use %s in the command to indicate the current file to validate.
         * The command is passed securely so shell features like expansion and pipes won't work.
         */
        validate?: string;
        [k: string]: any;
      };
      /**
       * Adds, modifies and removes nodes from a Rackspace Cloud Load Balancer
       */
      rax_clb_nodes?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages global VRF configuration.
       */
      nxos_vrf?: {
        username?: string;
        save?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        /**
         * Description of the VRF.
         */
        description?: string;
        config?: string;
        /**
         * Default: present
         *
         * Manages desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Specify virtual network identifier. Valid values are Integer or keyword 'default'.
         */
        vni?: string;
        rd?: string;
        include_defaults?: string;
        host?: string;
        /**
         * Default: up
         *
         * Administrative state of the VRF.
         */
        admin_state?: "up" | "down";
        /**
         * Name of VRF to be managed.
         */
        vrf: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Manages VRF AF
       */
      nxos_vrf_af?: {
        username?: string;
        m_facts?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        /**
         * Address-Family Identifier (AFI).
         */
        afi: "ipv4" | "ipv6";
        /**
         * Sub Address-Family Identifier (SAFI).
         * Deprecated in 2.4
         */
        safi?: "unicast" | "multicast";
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        host?: string;
        /**
         * Enable/Disable the EVPN route-target 'auto' setting for both import and export target communities.
         */
        route_target_both_auto_evpn?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the VRF.
         */
        vrf: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Retrieve facts about one or more oVirt/RHV virtual machines.
       */
      ovirt_vms_facts?: {
        /**
         * If I(true) all the attributes of the virtual machines should be included in the response.
         */
        all_content?: string;
        /**
         * Search term which is accepted by oVirt/RHV search backend.
         * For example to search VM X from cluster Y use following pattern: name=X and cluster=Y
         */
        pattern?: string;
        /**
         * The maximum number of results to return.
         */
        max?: string;
        /**
         * If I(true) performed search will take case into account.
         */
        case_sensitive?: string;
        [k: string]: any;
      };
      /**
       * Create or Remove compute instances from OpenStack.
       */
      os_server?: {
        /**
         * Availability zone in which to create the server.
         */
        availability_zone?: string;
        /**
         * The name or id of the base image to boot.
         */
        image?: string;
        /**
         * Text to use to filter image names, for the case, such as HP, where there are multiple image names matching the common identifying portions. image_exclude is a negative match filter - it is text that may not exist in the image name. Defaults to "(deprecated)"
         */
        image_exclude?: string;
        /**
         * Text to use to filter flavor names, for the case, such as Rackspace, where there are multiple flavors that have the same ram count. flavor_include is a positive match filter - it must exist in the flavor name.
         */
        flavor_include?: string;
        /**
         * Default: None
         *
         * A list of key value pairs that should be provided as a metadata to the new instance or a string containing a list of key-value pairs. Eg:  meta: "key1=value1,key2=value2"
         */
        meta?: string;
        /**
         * Default: 1
         *
         * The name or id of the flavor in which the new instance has to be created. Mutually exclusive with flavor_ram
         */
        flavor?: string;
        /**
         * Default: None
         *
         * Names of the security groups to which the instance should be added. This may be a YAML list or a comma separated string.
         */
        security_groups?: string;
        /**
         * Default: None
         *
         * Arbitrary key/value pairs to the scheduler for custom use
         */
        scheduler_hints?: string;
        /**
         * Should the instance boot from a persistent volume created based on the image given. Mututally exclusive with boot_volume.
         */
        boot_from_volume?: string;
        /**
         * Default: None
         *
         * Opaque blob of data which is made available to the instance
         */
        userdata?: string;
        /**
         * Default: None
         *
         * Name or ID of a network to attach this instance to. A simpler version of the nics parameter, only one of network or nics should be supplied.
         */
        network?: string;
        /**
         * Default: None
         *
         * A list of networks to which the instance's interface should be attached. Networks may be referenced by net-id/net-name/port-id or port-name.
         * Also this accepts a string containing a list of (net/port)-(id/name) Eg: nics: "net-id=uuid-1,port-name=myport" Only one of network or nics should be supplied.
         */
        nics?: string;
        /**
         * Default: None
         *
         * list of valid floating IPs that pre-exist to assign to this node
         */
        floating_ips?: string;
        /**
         * Default: 1
         *
         * The minimum amount of ram in MB that the flavor in which the new instance has to be created must have. Mutually exclusive with flavor.
         */
        flavor_ram?: string;
        /**
         * The size of the volume to create in GB if booting from volume based on an image.
         */
        volume_size?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: yes
         *
         * Ensure instance has public ip however the cloud wants to do that
         */
        auto_ip?: string;
        /**
         * Default: no
         *
         * Whether to boot the server with config drive enabled
         */
        config_drive?: string;
        /**
         * If true, delete volume when deleting instance (if booted from volume)
         */
        terminate_volume?: string;
        /**
         * Default: None
         *
         * The key pair name to be used when creating a instance
         */
        key_name?: string;
        /**
         * Default: None
         *
         * Volume name or id to use as the volume to boot from. Implies boot_from_volume. Mutually exclusive with image and boot_from_volume.
         */
        boot_volume?: string;
        /**
         * Default: yes
         *
         * If the module should wait for the instance to be created.
         */
        wait?: string;
        /**
         * Name that has to be given to the instance
         */
        name?: string;
        /**
         * Default: 180
         *
         * The amount of time the module should wait for the instance to get into active state.
         */
        timeout?: string;
        /**
         * When I(state) is absent and this option is true, any floating IP associated with the instance will be deleted along with the instance.
         */
        delete_fip?: string;
        /**
         * A list of preexisting volumes names or ids to attach to the instance
         */
        volumes?: string;
        /**
         * Default: None
         *
         * Name of floating IP pool from which to choose a floating IP
         */
        floating_ip_pools?: string;
        /**
         * Default: True
         *
         * When I(auto_ip) is true and this option is true, the I(auto_ip) code will attempt to re-use unassigned floating ips in the project before creating a new one. It is important to note that it is impossible to safely do this concurrently, so if your use case involves concurrent server creation, it is highly recommended to set this to false and to delete the floating ip associated with a server when the server is deleted using I(delete_fip).
         */
        reuse_ips?: string;
        [k: string]: any;
      };
      /**
       * Ensure that the domain named by C(dns_domain_name) exists and is reachable. If the domain is not reachable, the domain is created in a new forest on the target Windows Server 2012R2+ host. This module may require subsequent use of the M(win_reboot) action if changes are made.
       */
      win_domain?: {
        /**
         * the DNS name of the domain which should exist and be reachable or reside on the target Windows host
         */
        dns_domain_name?: string;
        /**
         * safe mode password for the domain controller
         */
        safe_mode_password?: string;
        [k: string]: any;
      };
      /**
       * Provides support for managing Serverless Framework (https://serverless.com/) project deployments and stacks.
       */
      serverless?: {
        /**
         * A list of specific functions to deploy. If this is not provided, all functions in the service will be deployed.
         */
        functions?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: True
         *
         * Whether or not to deploy artifacts after building them. When this option is `false` all the functions will be built, but no stack update will be run to send them out. This is mostly useful for generating artifacts to be stored/deployed elsewhere.
         */
        deploy?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: us-east-1
         *
         * AWS region to deploy the service to
         */
        region?: string;
        /**
         * Default: present
         *
         * Goal state of given stage/project
         */
        state?: "present" | "absent";
        /**
         * The path of a serverless framework binary relative to the 'service_path' eg. node_module/.bin/serverless
         */
        serverless_bin_path?: string;
        /**
         * The path to the root of the Serverless Service to be operated on.
         */
        service_path: string;
        /**
         * The name of the serverless framework project stage to deploy to. This uses the serverless framework default "dev".
         */
        stage?: string;
        [k: string]: any;
      };
      /**
       * Manages "spells" on Source Mage GNU/Linux using I(sorcery) toolchain
       */
      sorcery?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add, Edit, or Remove Registry Keys and Values using ItemProperties Cmdlets
       */
      win_regedit?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * This module provides declarative management of logging on Cisco Ios devices.
       */
      ios_logging?: {
        username?: string;
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        /**
         * If value of C(dest) is I(file) it indicates file-name, for I(user) it indicates username and for I(host) indicates the host name to be notified.
         */
        name?: string;
        /**
         * Set logging facility.
         */
        facility?: string;
        /**
         * Destination of the logs.
         */
        dest?: "on" | "host" | "console" | "monitor" | "buffered";
        auth_pass?: string;
        /**
         * Set logging severity levels.
         */
        level?: string;
        /**
         * Default: present
         *
         * State of the logging configuration.
         */
        state?: "present" | "absent";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of logging definitions.
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        port?: number | string;
        /**
         * Default: 4096
         *
         * Size of buffer. The acceptable value is in range from 4096 to 4294967295 bytes.
         */
        size?: number | string;
        [k: string]: any;
      };
      /**
       * Tests reachability using ping from network device to a remote destination.
       */
      net_ping?: {
        username?: string;
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        auth_pass?: string;
        host?: string;
        gather_subset?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of node system attributes on Cisco IOS devices.  It provides an option to configure host system parameters or remove those parameters from the device active configuration.
       */
      ios_system?: {
        username?: string;
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        /**
         * Provides one or more source interfaces to use for performing DNS lookups.  The interface provided in C(lookup_source) must be a valid interface configured on the device.
         */
        lookup_source?: string;
        /**
         * Provides the list of domain suffixes to append to the hostname for the purpose of doing name resolution. This argument accepts a list of names and will be reconciled with the current active configuration on the running node.
         */
        domain_search?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        auth_pass?: string;
        /**
         * Configure the IP domain name on the remote device to the provided value. Value should be in the dotted name form and will be appended to the C(hostname) to create a fully-qualified domain name.
         */
        domain_name?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        host?: string;
        /**
         * Default: present
         *
         * State of the configuration values in the device's current active configuration.  When set to I(present), the values should be configured in the device active configuration and when set to I(absent) the values should not be in the device active configuration
         */
        state?: "present" | "absent";
        /**
         * Configure the device hostname parameter. This option takes an ASCII string value.
         */
        hostname?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of DNS name servers by IP address to use to perform name resolution lookups.  This argument accepts either a list of DNS servers See examples.
         */
        name_servers?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        port?: number | string;
        /**
         * Administrative control for enabling or disabling DNS lookups.  When this argument is set to True, lookups are performed and when it is set to False, lookups are not performed.
         */
        lookup_enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage RabbitMQ plugins.
       */
      win_rabbitmq_plugin?: {
        /**
         * Default: enabled
         *
         * Specify if plugins are to be enabled or disabled.
         */
        state?: string;
        /**
         * Comma-separated list of plugin names.
         */
        names?: string;
        /**
         * Specify a custom install prefix to a Rabbit.
         */
        prefix?: string;
        /**
         * Default: no
         *
         * Only enable missing plugins.
         * Does not disable plugins that are not in the names list.
         */
        new_only?: string;
        [k: string]: any;
      };
      /**
       * This module offers the ability to be output to the log buffer, log file, console, terminal, or log host on HUAWEI CloudEngine switches.
       */
      ce_info_center_global?: {
        /**
         * Log record tool.
         */
        facility?: "local0" | "local1" | "local2" | "local3" | "local4" | "local5" | "local6" | "local7";
        /**
         * Transport mode. The value is of the enumerated type and case-sensitive.
         */
        transport_mode?: "tcp" | "udp";
        /**
         * Default: console
         *
         * Channel name.The value is a string of 1 to 30 case-sensitive characters. The default value is console.
         */
        channel_cfg_name?: string;
        /**
         * Whether a device is enabled to suppress duplicate statistics. The value is of the Boolean type.
         */
        suppress_enable?: "true" | "false";
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        /**
         * Channel name. The value is a string of 1 to 30 case-sensitive characters.
         */
        channel_name?: string;
        /**
         * Set the priority of the syslog packet.The value is an integer ranging from 0 to 7. The default value is 0.
         */
        packet_priority?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Default: 32
         *
         * Maximum size (in MB) of a log file. The default value is 32.
         * The value range for log files is [4, 8, 16, 32], for security files is [1, 4],
         * and for operation files is [1, 4].
         */
        logfile_max_size?: "4" | "8" | "16" | "32";
        /**
         * Number of a port sending logs.The value is an integer ranging from 1 to 65535. For UDP, the default value is 514. For TCP, the default value is 601. For TSL, the default value is 6514.
         */
        server_port?: string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Whether the info-center function is enabled. The value is of the Boolean type.
         */
        info_center_enable?: "true" | "false";
        /**
         * Log server address type, IPv4 or IPv6.
         */
        ip_type?: "ipv4" | "ipv6";
        /**
         * Maximum number of log files of the same type. The default value is 200.
         * The value range for log files is[3, 500], for security files is [1, 3],and for operation files is [1, 7].
         */
        logfile_max_num?: string;
        username?: string;
        /**
         * Log server address, IPv4 or IPv6 type. The value is a string of 0 to 255 characters. The value can be an valid IPv4 or IPv6 address.
         */
        server_ip?: string;
        /**
         * Name of the filtered log. The value is a string of 1 to 63 case-sensitive characters.
         */
        filter_log_name?: string;
        /**
         * SSL policy name. The value is a string of 1 to 23 case-sensitive characters.
         */
        ssl_policy_name?: string;
        /**
         * Log server timestamp. The value is of the enumerated type and case-sensitive.
         */
        timestamp?: "UTC" | "localtime";
        /**
         * Direction of information output.
         */
        channel_out_direct?: "console" | "monitor" | "trapbuffer" | "logbuffer" | "snmp" | "logfile";
        host?: string;
        /**
         * Feature name of the filtered log. The value is a string of 1 to 31 case-insensitive characters.
         */
        filter_feature_name?: string;
        password?: string;
        /**
         * Use the default VPN or not.
         */
        is_default_vpn?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Server name. The value is a string of 1 to 255 case-sensitive characters.
         */
        server_domain?: string;
        /**
         * Level of logs saved on a log server.
         */
        level?:
          | "emergencies"
          | "alert"
          | "critical"
          | "error"
          | "warning"
          | "notification"
          | "informational"
          | "debugging";
        /**
         * Log source ip address, IPv4 or IPv6 type. The value is a string of 0 to 255. The value can be an valid IPv4 or IPv6 address.
         */
        source_ip?: string;
        /**
         * Number for channel. The value is an integer ranging from 0 to 9. The default value is 0.
         */
        channel_id?: string;
        /**
         * VPN name on a log server. The value is a string of 1 to 31 case-sensitive characters. The default value is _public_.
         */
        vrf_name?: string;
        timeout?: number | string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manages MacPorts packages
       */
      macports?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * This module manage affinity groups in oVirt/RHV. It can also manage assignments of those groups to VMs.
       */
      ovirt_affinity_group?: {
        /**
         * If I(true) VM cannot start if it does not satisfy the C(vm_rule).
         */
        vm_enforcing?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Description of the affinity group.
         */
        description?: string;
        /**
         * If I(positive) I(all) VMs in this group should run on the this host.
         * If I(negative) I(no) VMs in this group should run on the this host.
         * C(This parameter is support since oVirt/RHV 4.1 version.)
         */
        host_rule?: "positive" | "negative";
        poll_interval?: number | string;
        /**
         * Default: present
         *
         * Should the affinity group be present or absent.
         */
        state?: "present" | "absent";
        auth: {
          [k: string]: any;
        };
        /**
         * Name of the affinity group to manage.
         */
        name: string;
        /**
         * Name of the cluster of the affinity group.
         */
        cluster: string;
        fetch_nested?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * List of the hosts names, which should have assigned this affinity group.
         * C(This parameter is support since oVirt/RHV 4.1 version.)
         */
        hosts?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        nested_attributes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        timeout?: number | string;
        /**
         * If I(positive) I(all) VMs in this group should run on the host defined by C(host_rule).
         * If I(negative) I(no) VMs in this group should run on the host defined by C(host_rule).
         * If I(disabled) this affinity group doesn't take effect.
         */
        vm_rule?: "positive" | "negative" | "disabled";
        /**
         * If I(true) VM cannot start on host if it does not satisfy the C(host_rule).
         * C(This parameter is support since oVirt/RHV 4.1 version.)
         */
        host_enforcing?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * List of the VMs names, which should have assigned this affinity group.
         */
        vms?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This will configure both login and motd banners on network devices. It allows playbooks to add or remote banner text from the active running configuration.
       */
      net_banner?: {
        username?: string;
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        auth_pass?: string;
        host?: string;
        gather_subset?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Add and remove users from groups
       */
      os_user_group?: {
        /**
         * Default: present
         *
         * Should the user be present or absent in the group
         */
        state?: string;
        /**
         * Name or id for the group.
         */
        group?: string;
        /**
         * Name or id for the user
         */
        user?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure ControllerProperties object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_controllerproperties?: {
        /**
         * Number of vs_se_ping_fail.
         * Default value when not specified in API or module is interpreted by Avi Controller as 60.
         */
        vs_se_ping_fail?: number | string;
        /**
         * Token used for uploading tech-support to portal.
         * Field introduced in 16.4.6,17.1.2.
         */
        portal_token?: string;
        /**
         * Number of cluster_ip_gratuitous_arp_period.
         * Default value when not specified in API or module is interpreted by Avi Controller as 60.
         */
        cluster_ip_gratuitous_arp_period?: number | string;
        /**
         * Allowed values are 1-1051200.
         * Special values are 0 - 'disabled'.
         * Default value when not specified in API or module is interpreted by Avi Controller as 60.
         */
        persistence_key_rotate_period?: number | string;
        /**
         * Number of unresponsive_se_reboot.
         * Default value when not specified in API or module is interpreted by Avi Controller as 300.
         */
        unresponsive_se_reboot?: number | string;
        /**
         * Number of attach_ip_retry_interval.
         * Default value when not specified in API or module is interpreted by Avi Controller as 360.
         */
        attach_ip_retry_interval?: number | string;
        /**
         * Number of vs_se_vnic_fail.
         * Default value when not specified in API or module is interpreted by Avi Controller as 300.
         */
        vs_se_vnic_fail?: number | string;
        /**
         * Number of secure_channel_se_token_timeout.
         * Default value when not specified in API or module is interpreted by Avi Controller as 60.
         */
        secure_channel_se_token_timeout?: number | string;
        /**
         * Number of attach_ip_retry_limit.
         * Default value when not specified in API or module is interpreted by Avi Controller as 4.
         */
        attach_ip_retry_limit?: number | string;
        /**
         * Number of se_vnic_cooldown.
         * Default value when not specified in API or module is interpreted by Avi Controller as 120.
         */
        se_vnic_cooldown?: number | string;
        /**
         * Number of vnic_op_fail_time.
         * Default value when not specified in API or module is interpreted by Avi Controller as 180.
         */
        vnic_op_fail_time?: number | string;
        /**
         * Maximum number of pcap files stored per tenant.
         * Default value when not specified in API or module is interpreted by Avi Controller as 4.
         */
        max_pcap_per_tenant?: number | string;
        /**
         * Number of vs_se_bootup_fail.
         * Default value when not specified in API or module is interpreted by Avi Controller as 300.
         */
        vs_se_bootup_fail?: number | string;
        /**
         * Pool size used for all fabric commands during se upgrade.
         * Default value when not specified in API or module is interpreted by Avi Controller as 20.
         */
        seupgrade_fabric_pool_size?: number | string;
        /**
         * Allowed values are 1-1051200.
         * Special values are 0 - 'disabled'.
         * Default value when not specified in API or module is interpreted by Avi Controller as 60.
         */
        vs_key_rotate_period?: number | string;
        /**
         * Time to wait before marking segroup upgrade as stuck.
         * Default value when not specified in API or module is interpreted by Avi Controller as 360.
         */
        seupgrade_segroup_min_dead_timeout?: number | string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * Number of upgrade_lease_time.
         * Default value when not specified in API or module is interpreted by Avi Controller as 360.
         */
        upgrade_lease_time?: number | string;
        /**
         * Number of se_create_timeout.
         * Default value when not specified in API or module is interpreted by Avi Controller as 900.
         */
        se_create_timeout?: number | string;
        /**
         * Number of query_host_fail.
         * Default value when not specified in API or module is interpreted by Avi Controller as 180.
         */
        query_host_fail?: number | string;
        /**
         * Time to wait for the scaled out se to become ready before marking the scaleout done, applies to apic configuration only.
         * Default value when not specified in API or module is interpreted by Avi Controller as 360.
         */
        vs_apic_scaleout_timeout?: number | string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Number of se_offline_del.
         * Default value when not specified in API or module is interpreted by Avi Controller as 172000.
         */
        se_offline_del?: number | string;
        /**
         * Number of max_dead_se_in_grp.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1.
         */
        max_dead_se_in_grp?: number | string;
        /**
         * Time to account for dns ttl during upgrade.
         * This is in addition to vs_scalein_timeout_for_upgrade in se_group.
         * Field introduced in 17.1.1.
         * Default value when not specified in API or module is interpreted by Avi Controller as 5.
         */
        upgrade_dns_ttl?: number | string;
        /**
         * Number of fatal_error_lease_time.
         * Default value when not specified in API or module is interpreted by Avi Controller as 120.
         */
        fatal_error_lease_time?: number | string;
        api_version?: string;
        username?: string;
        /**
         * Field introduced in 17.1.1.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        allow_ip_forwarding?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Number of max_seq_vnic_failures.
         * Default value when not specified in API or module is interpreted by Avi Controller as 3.
         */
        max_seq_vnic_failures?: number | string;
        /**
         * Boolean flag to set allow_unauthenticated_nodes.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        allow_unauthenticated_nodes?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Allow unauthenticated access for special apis.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        allow_unauthenticated_apis?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        controller?: string;
        /**
         * Number of vs_awaiting_se_timeout.
         * Default value when not specified in API or module is interpreted by Avi Controller as 60.
         */
        vs_awaiting_se_timeout?: number | string;
        /**
         * Number of warmstart_se_reconnect_wait_time.
         * Default value when not specified in API or module is interpreted by Avi Controller as 300.
         */
        warmstart_se_reconnect_wait_time?: number | string;
        password?: string;
        tenant?: string;
        /**
         * Number of dns_refresh_period.
         * Default value when not specified in API or module is interpreted by Avi Controller as 60.
         */
        dns_refresh_period?: number | string;
        /**
         * Number of dummy.
         */
        dummy?: number | string;
        /**
         * Number of secure_channel_cleanup_timeout.
         * Default value when not specified in API or module is interpreted by Avi Controller as 60.
         */
        secure_channel_cleanup_timeout?: number | string;
        /**
         * Number of days for ssl certificate expiry warning.
         */
        ssl_certificate_expiry_warning_days?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Number of vs_se_vnic_ip_fail.
         * Default value when not specified in API or module is interpreted by Avi Controller as 120.
         */
        vs_se_vnic_ip_fail?: number | string;
        /**
         * Number of secure_channel_controller_token_timeout.
         * Default value when not specified in API or module is interpreted by Avi Controller as 60.
         */
        secure_channel_controller_token_timeout?: number | string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * Number of vs_se_create_fail.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1500.
         */
        vs_se_create_fail?: number | string;
        /**
         * Allowed values are 0-1440.
         * Default value when not specified in API or module is interpreted by Avi Controller as 15.
         */
        api_idle_timeout?: number | string;
        /**
         * Number of crashed_se_reboot.
         * Default value when not specified in API or module is interpreted by Avi Controller as 900.
         */
        crashed_se_reboot?: number | string;
        /**
         * Export configuration in appviewx compatibility mode.
         * Field introduced in 17.1.1.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        appviewx_compat_mode?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Interval between attempting failovers to an se.
         * Default value when not specified in API or module is interpreted by Avi Controller as 300.
         */
        se_failover_attempt_interval?: number | string;
        /**
         * Number of dead_se_detection_timer.
         * Default value when not specified in API or module is interpreted by Avi Controller as 360.
         */
        dead_se_detection_timer?: number | string;
        tenant_uuid?: string;
        [k: string]: any;
      };
      /**
       * Manages VXLAN Virtual access point on HUAWEI CloudEngine Devices.
       */
      ce_vxlan_vap?: {
        username?: string;
        timeout?: number | string;
        /**
         * When I(encapsulation) is 'qinq', specifies an inner VLAN ID for double-tagged packets to be received by a Layer 2 sub-interface. The value is an integer ranging from 1 to 4094.
         */
        pe_vid?: string;
        /**
         * Specifies an Sub-Interface full name, i.e. "10GE1/0/41.1". The value is a string of 1 to 63 case-insensitive characters, spaces supported.
         */
        l2_sub_interface?: string;
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        provider?: {
          [k: string]: any;
        };
        /**
         * Specifies the VLAN binding to a BD(Bridge Domain). The value is an integer ranging ranging from 1 to 4094.
         */
        bind_vlan_id?: string;
        /**
         * Specifies a bridge domain ID. The value is an integer ranging from 1 to 16777215.
         */
        bridge_domain_id?: string;
        host?: string;
        /**
         * When I(encapsulation) is 'dot1q', specifies a VLAN ID in the outer VLAN tag. When I(encapsulation) is 'qinq', specifies an outer VLAN ID for double-tagged packets to be received by a Layer 2 sub-interface. The value is an integer ranging from 1 to 4094.
         */
        ce_vid?: string;
        /**
         * Specifies an encapsulation type of packets allowed to pass through a Layer 2 sub-interface.
         */
        encapsulation?: "dot1q" | "default" | "untag" | "qinq" | "none";
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * An Ansible module to Create, Delete and Restore server snapshots in CenturyLink Cloud.
       */
      clc_server_snapshot?: {
        /**
         * Default: 7
         *
         * The number of days to keep the server snapshot before it expires.
         */
        expiration_days?: string;
        /**
         * The list of CLC server Ids.
         */
        server_ids:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * The state to insure that the provided resources are in.
         */
        state?: "present" | "absent" | "restore";
        /**
         * Default: True
         *
         * Whether to wait for the provisioning tasks to finish before returning.
         */
        wait?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of Layer-2 interface on network devices.
       */
      net_l2_interface?: {
        pn_scope?: "fabric" | "local";
        pn_clipassword?: string;
        pn_cliusername?: string;
        pn_vlanid: number | string;
        /**
         * Default: present
         *
         * State of the Layer-2 Interface configuration.
         */
        state: "present" | "absent";
        pn_ports?: string;
        pn_untagged_ports?: string;
        pn_cliswitch?: string;
        pn_stats?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        pn_description?: string;
        [k: string]: any;
      };
      /**
       * Registers services and checks for an agent with a consul cluster. A service is some process running on the agent node that should be advertised by consul's discovery mechanism. It may optionally supply a check definition, a periodic service test to notify the consul cluster of service's health.
       * Checks may also be registered per node e.g. disk usage, or cpu usage and notify the health of the entire node to the cluster. Service level checks do not require a check name or id as these are derived by Consul from the Service name and id respectively by appending 'service:' Node level checks require a check_name and optionally a check_id.
       * Currently, there is no complete way to retrieve the script, interval or ttl metadata for a registered check. Without this metadata it is  not possible to tell if the data supplied with ansible represents a change to a check. As a result this does not attempt to determine changes and will always report a changed occurred. An api method is planned to supply this metadata so at that stage change management will be added.
       * See http://consul.io for more details.
       */
      consul?: {
        /**
         * Default: None
         *
         * the address to advertise that the service will be listening on. This value will be passed as the I(Address) parameter to Consul's U(/v1/agent/service/register) API method, so refer to the Consul API documentation for further details.
         */
        service_address?: string;
        /**
         * Default: None
         *
         * checks can be registered with an http endpoint. This means that consul will check that the http endpoint returns a successful http status. Interval must also be provided with this option.
         */
        http?: string;
        check_node?: string;
        /**
         * Default: None
         *
         * a list of tags that will be attached to the service registration.
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * a name for the service check, defaults to the check id. required if standalone, ignored if part of service definition.
         */
        check_name?: string;
        /**
         * Unique name for the service on a node, must be unique per node, required if registering a service. May be ommitted if registering a node level check
         */
        service_name?: string;
        /**
         * Default: None
         *
         * Notes to attach to check when registering it.
         */
        notes?: string;
        /**
         * Default: None
         *
         * the script/command that will be run periodically to check the health of the service. Scripts require an interval and vise versa
         */
        script?: string;
        /**
         * Default: None
         *
         * the token key indentifying an ACL rule set. May be required to register services.
         */
        token?: string;
        /**
         * Default: None
         *
         * the interval at which the service check will be run. This is a number with a s or m suffix to signify the units of seconds or minutes e.g 15s or 1m. If no suffix is supplied, m will be used by default e.g. 1 will be 1m. Required if the script param is specified.
         */
        interval?: string;
        /**
         * Default: None
         *
         * an ID for the service check, defaults to the check name, ignored if part of a service definition.
         */
        check_id?: string;
        /**
         * Default: localhost
         *
         * host of the consul agent defaults to localhost
         */
        host?: string;
        /**
         * register or deregister the consul service, defaults to present
         */
        state?: "present" | "absent";
        /**
         * the port on which the service is listening required for registration of a service, i.e. if service_name or service_id is set
         */
        service_port?: number | string;
        /**
         * Default: None
         *
         * A custom HTTP check timeout. The consul default is 10 seconds. Similar to the interval this is a number with a s or m suffix to signify the units of seconds or minutes, e.g. 15s or 1m.
         */
        timeout?: string;
        /**
         * Default: None
         *
         * checks can be registered with a ttl instead of a script and interval this means that the service will check in with the agent before the ttl expires. If it doesn't the check will be considered failed. Required if registering a check and the script an interval are missing Similar to the interval this is a number with a s or m suffix to signify the units of seconds or minutes e.g 15s or 1m. If no suffix is supplied, m will be used by default e.g. 1 will be 1m
         */
        ttl?: string;
        /**
         * Default: service_name if supplied
         *
         * the ID for the service, must be unique per node, defaults to the service name if the service name is supplied
         */
        service_id?: string;
        /**
         * Default: http
         *
         * the protocol scheme on which the consul agent is running
         */
        scheme?: string;
        /**
         * Default: True
         *
         * whether to verify the tls certificate of the consul agent
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 8500
         *
         * the port on which the consul agent is running
         */
        port?: number | string;
        check_host?: string;
        [k: string]: any;
      };
      /**
       * Manages symbolic links using the 'update-alternatives' tool
       * Useful when multiple programs are installed but provide similar functionality (e.g. different editors).
       */
      alternatives?: {
        /**
         * Default: 50
         *
         * The priority of the alternative
         */
        priority?: number | string;
        /**
         * The path to the real executable that the link should point to.
         */
        path: string;
        /**
         * The path to the symbolic link that should point to the real executable.
         * This option is required on RHEL-based distributions
         */
        link?: string;
        /**
         * The generic name of the link.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module can add or remove tags U(https://cloud.google.com/compute/docs/instances/#tags) to/from GCE instance.
       */
      gce_tag?: {
        /**
         * Default: us-central1-a
         *
         * the zone of the disk specified by source
         */
        zone?: string;
        /**
         * comma-separated list of tags to add or remove
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * service account email
         */
        service_account_email?: string;
        /**
         * path to the pem file associated with the service account email
         */
        pem_file?: string;
        /**
         * the name of the GCE instance to add/remove tags
         */
        instance_name: string;
        /**
         * Default: present
         *
         * desired state of the tags
         */
        state?: "present" | "absent";
        /**
         * your GCE project ID
         */
        project_id?: string;
        [k: string]: any;
      };
      /**
       * This module to creates, deletes or modifies pools on Infinibox.
       */
      infini_pool?: {
        /**
         * Default: True
         *
         * Enable/Disable SSD Cache on Pool
         */
        ssd_cache?: string;
        /**
         * Default: present
         *
         * Creates/Modifies Pool when present or removes when absent
         */
        state?: string;
        /**
         * Pool Virtual Capacity in MB, GB or TB units. If pool vsize is not set on pool creation, Virtual Capacity will be equal to Physical Capacity. See examples.
         */
        vsize?: string;
        /**
         * Pool Name
         */
        name?: string;
        /**
         * Pool Physical Capacity in MB, GB or TB units. If pool size is not set on pool creation, size will be equal to 1TB. See examples.
         */
        size?: string;
        [k: string]: any;
      };
      /**
       * Manages core NTP configuration.
       */
      nxos_ntp?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Local source address from which NTP messages are sent.
         */
        source_addr?: string;
        /**
         * Authentication key identifier to use with given NTP server or peer.
         */
        key_id?: string;
        /**
         * Makes given NTP server or peer the preferred NTP server or peer for the device.
         */
        prefer?: "enabled" | "disabled";
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Network address of NTP server.
         */
        server?: string;
        /**
         * Local source interface from which NTP messages are sent. Must be fully qualified interface name.
         */
        source_int?: string;
        host?: string;
        /**
         * Makes the device communicate with the given NTP server or peer over a specific VRF.
         */
        vrf_name?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Network address of NTP peer.
         */
        peer?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Allows for the initialization, suspension and resumption of an asynchronous mirror group's synchronization for NetApp E-series storage arrays.
       */
      netapp_e_amg_sync?: {
        /**
         * The ID of the storage array containing the AMG you wish to target
         */
        ssid: string;
        /**
         * The url to the SANtricity WebServices Proxy or embedded REST API.
         */
        api_url: string;
        /**
         * The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_password: string;
        /**
         * The synchronization action you'd like to take.
         * If C(running) then it will begin syncing if there is no active sync or will resume a suspended sync. If there is already a sync in progress, it will return with an OK status.
         * If C(suspended) it will suspend any ongoing sync action, but return OK if there is no active sync or if the sync is already suspended
         */
        state: "running" | "suspended";
        /**
         * The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_username: string;
        /**
         * Indicates whether the failures point can be deleted on the secondary if necessary to achieve the synchronization.
         * If true, and if the amount of unsynchronized data exceeds the CoW repository capacity on the secondary for any member volume, the last failures point will be deleted and synchronization will continue.
         * If false, the synchronization will be suspended if the amount of unsynchronized data exceeds the CoW Repository capacity on the secondary and the failures point will be preserved.
         * NOTE: This only has impact for newly launched syncs.
         */
        delete_recovery_point?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * Should https certificates be validated?
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The name of the async mirror group you wish to target
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Retrieve facts about one or more oVirt/RHV virtual machines relate to a storage domain.
       */
      ovirt_storage_vms_facts?: {
        /**
         * Flag which indicates whether to get unregistered virtual machines which contain one or more disks which reside on a storage domain or diskless virtual machines.
         */
        unregistered?: string;
        [k: string]: any;
      };
      /**
       * Gather facts about application ELBs in AWS
       */
      elb_application_lb_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module provides declarative management of VRFs on Arista EOS network devices.
       */
      eos_vrf?: {
        username?: string;
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        /**
         * Name of the VRF.
         */
        name?: string;
        /**
         * List of interfaces to check the VRF has been configured correctly.
         */
        interfaces?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        auth_pass?: string;
        /**
         * Default: present
         *
         * State of the VRF configuration.
         */
        state?: "present" | "absent";
        /**
         * Route distinguisher of the VRF
         */
        rd?: string;
        /**
         * Purge VRFs not defined in the I(aggregate) parameter.
         */
        purge?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        host?: string;
        /**
         * Default: 10
         *
         * Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state arguments.
         */
        delay?: number | string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of VRFs definitions
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "eapi";
        [k: string]: any;
      };
      /**
       * Create and remove network ACLs.
       */
      cs_network_acl?: {
        /**
         * Account the network ACL rule is related to.
         */
        account?: string;
        api_key?: string;
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        /**
         * Description of the network ACL.
         * If not set, identical to C(name).
         */
        description?: string;
        api_timeout?: number | string;
        api_region?: string;
        /**
         * Name of the project the network ACL is related to.
         */
        project?: string;
        /**
         * Default: present
         *
         * State of the network ACL.
         */
        state?: "present" | "absent";
        /**
         * Domain the network ACL rule is related to.
         */
        domain?: string;
        /**
         * Name of the zone the VPC is related to.
         * If not set, default zone is used.
         */
        zone?: string;
        /**
         * VPC the network ACL is related to.
         */
        vpc: string;
        /**
         * Name of the network ACL.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Gather facts about dhcp options sets in AWS
       */
      ec2_vpc_dhcp_option_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Verifies Rackspace Cloud credentials and returns identity information
       */
      rax_identity?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create, update and remove port forwarding rules.
       */
      cs_portforward?: {
        /**
         * Whether the firewall rule for public port should be created, while creating the new rule.
         * Use M(cs_firewall) for managing firewall rules.
         */
        open_firewall?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * VM guest NIC secondary IP address for the port forwarding rule.
         */
        vm_guest_ip?: string;
        /**
         * Domain the C(vm) is related to.
         */
        domain?: string;
        api_key?: string;
        /**
         * Default: tcp
         *
         * Protocol of the port forwarding rule.
         */
        protocol?: "tcp" | "udp";
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        /**
         * Start public port for this rule.
         */
        public_port: number | string;
        /**
         * Name of virtual machine which we make the port forwarding rule for.
         * Required if C(state=present).
         */
        vm?: string;
        /**
         * End public port for this rule.
         * If not specified equal C(public_port).
         */
        public_end_port?: number | string;
        api_region?: string;
        /**
         * Name of the project the C(vm) is located in.
         */
        project?: string;
        /**
         * Start private port for this rule.
         */
        private_port: number | string;
        /**
         * Default: present
         *
         * State of the port forwarding rule.
         */
        state?: "present" | "absent";
        /**
         * End private port for this rule.
         * If not specified equal C(private_port).
         */
        private_end_port?: number | string;
        /**
         * Account the C(vm) is related to.
         */
        account?: string;
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the zone in which the virtual machine is in.
         * If not set, default zone is used.
         */
        zone?: string;
        /**
         * Public IP address the rule is assigned to.
         */
        ip_address: string;
        [k: string]: any;
      };
      /**
       * Manages a BIG-IP configuration by allowing TMSH commands that modify running configuration, or merge SCF formatted files into the running configuration. Additionally, this module is of significant importance because it allows you to save your running configuration to disk. Since the F5 module only manipulate running configuration, it is important that you utilize this module to save that running config.
       */
      bigip_config?: {
        /**
         * Loads the default configuration on the device. If this option is specified, the default configuration will be loaded before any commands or other provided configuration is run.
         */
        reset?: string;
        /**
         * Default: True
         *
         * Validates the specified configuration to see whether they are valid to replace the running configuration. The running configuration will not be changed.
         */
        verify?: string;
        /**
         * The C(save) argument instructs the module to save the running-config to startup-config. This operation is performed after any changes are made to the current running config. If no changes are made, the configuration is still saved to the startup config. This option will always cause the module to return changed.
         */
        save?: string;
        /**
         * Loads the specified configuration that you want to merge into the running configuration. This is equivalent to using the C(tmsh) command C(load sys config from-terminal merge). If you need to read configuration from a file or template, use Ansible's C(file) or C(template) lookup plugins respectively.
         */
        merge_content?: string;
        [k: string]: any;
      };
      /**
       * Upload, download, and delete objects in Rackspace Cloud Files
       */
      rax_files_objects?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add or remove rights/permissions for a given user or group for the specified src file or folder.
       */
      win_acl?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * This module creates, deletes or modifies volume on Infinibox.
       */
      infini_vol?: {
        /**
         * Default: present
         *
         * Creates/Modifies volume when present or removes when absent
         */
        state?: string;
        /**
         * Volume Name
         */
        name?: string;
        /**
         * Pool that volume will reside on
         */
        pool?: string;
        /**
         * Volume size in MB, GB or TB units. See examples.
         */
        size?: string;
        [k: string]: any;
      };
      /**
       * Manages the static routes on HUAWEI CloudEngine switches.
       */
      ce_static_route?: {
        username?: string;
        /**
         * Destination ip address of static route.
         */
        prefix: string;
        /**
         * Destination ip address family type of static route.
         */
        aftype: "v4" | "v6";
        /**
         * Name of the route. Used with the name parameter on the CLI.
         */
        description?: string;
        /**
         * Route tag value (numeric).
         */
        tag?: string;
        /**
         * Preference or administrative difference of route (range 1-255).
         */
        pref?: string;
        /**
         * Destination ip mask of static route.
         */
        mask: string;
        /**
         * VPN instance of next hop ip address.
         */
        destvrf?: string;
        /**
         * Next hop interface full name of static route.
         */
        nhp_interface?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Next hop address of static route.
         */
        next_hop?: string;
        /**
         * VPN instance of destination ip address.
         */
        vrf?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        host?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * This module allows you to work with switch configurations. It provides a way to roll back configurations of a switch from a remote server. This is achieved by using startup or running configurations of the target device that were previously backed up to a remote server using FTP, SFTP, TFTP, or SCP. The first step is to create a directory from where the remote server can be reached. The next step is to provide the full file path of the backup configuration's location. Authentication details required by the remote server must be provided as well. By default, this method overwrites the switch's configuration file with the newly downloaded file. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run. For more information about this module from Lenovo and customizing it usage for your use cases, please visit U(http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_rollback.html)
       */
      cnos_rollback?: {
        /**
         * Specify the password for the server relating to the protocol used.
         */
        serverpassword?: string;
        /**
         * This refers to the protocol used by the network device to interact with the remote server from where to download the backup configuration. The choices are FTP, SFTP, TFTP, or SCP. Any other protocols will result in error. If this parameter is not specified, there is no default value to be used.
         */
        protocol?: string;
        /**
         * This refers to the type of configuration which will be used for the rolling back process. The choices are the running or startup configurations. There is no default value, so it will result in an error if the input is incorrect.
         */
        configType?: string;
        /**
         * Specify the username for the server relating to the protocol used.
         */
        serverusername?: string;
        /**
         * This specifies the IP Address of the remote server from where the backup configuration will be downloaded.
         */
        rcserverip?: string;
        /**
         * This specifies the full file path of the configuration file located on the remote server. In case the relative path is used as the variable value, the root folder for the user of the server needs to be specified.
         */
        rcpath?: string;
        [k: string]: any;
      };
      /**
       * Returns information about the load balancer.
       * Will be marked changed when called only if state is changed.
       */
      ec2_elb_lb?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module provides declarative management of VLANs on Arista EOS network devices.
       */
      eos_vlan?: {
        username?: string;
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        /**
         * Name of the VLAN.
         */
        name?: string;
        /**
         * List of interfaces that should be associated to the VLAN.
         */
        interfaces?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        auth_pass?: string;
        /**
         * Default: present
         *
         * State of the VLAN configuration.
         */
        state?: "present" | "absent" | "active" | "suspend";
        /**
         * Default: 10
         *
         * Delay the play should wait to check for declarative intent params values.
         */
        delay?: number | string;
        /**
         * Purge VLANs not defined in the I(aggregate) parameter.
         */
        purge?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        host?: string;
        transport?: "cli" | "eapi";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of VLANs definitions.
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        /**
         * ID of the VLAN.
         */
        vlan_id?: number | string;
        [k: string]: any;
      };
      /**
       * This module is used to configure NetworkSecurityPolicy object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_networksecuritypolicy?: {
        username?: string;
        /**
         * User defined description for the object.
         */
        description?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        controller?: string;
        /**
         * Creator name.
         */
        created_by?: string;
        /**
         * Name of the object.
         */
        name?: string;
        /**
         * List of networksecurityrule.
         */
        rules?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Checksum of cloud configuration for network sec policy.
         * Internally set by cloud connector.
         */
        cloud_config_cksum?: string;
        tenant?: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        [k: string]: any;
      };
      /**
       * Creates or instances in AWS Lightsail and optionally wait for it to be 'running'.
       */
      lightsail?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage the arrays accessible via a NetApp Web Services Proxy for NetApp E-series storage arrays.
       */
      netapp_e_storage_system?: {
        /**
         * The ID of the array to manage. This value must be unique for each array.
         */
        ssid: string;
        /**
         * Default: None
         *
         * Optional meta tags to associate to this storage system
         */
        meta_tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The url to the SANtricity WebServices Proxy or embedded REST API.
         */
        api_url?: string;
        /**
         * The WWN of the array to manage. Only necessary if in-band managing multiple arrays on the same agent host.  Mutually exclusive of controller_addresses parameter.
         */
        array_wwn?: string;
        /**
         * The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_password?: string;
        array_status_timeout_sec?: number | string;
        /**
         * The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_username?: string;
        /**
         * Whether the specified array should be configured on the Web Services Proxy or not.
         */
        state: "present" | "absent";
        /**
         * The management password of the array to manage, if set.
         */
        array_password?: string;
        /**
         * Enable trace logging for SYMbol calls to the storage system.
         */
        enable_trace?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * Should https certificates be validated?
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The list addresses for the out-of-band management adapter or the agent host. Mutually exclusive of array_wwn parameter.
         */
        controller_addresses?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        [k: string]: any;
      };
      /**
       * Manage SPAN destination groups on Cisco ACI fabrics.
       * More information from the internal APIC class I(span:DestGrp) at U(https://developer.cisco.com/media/mim-ref/MO-spanDestGrp.html).
       */
      aci_tenant_span_dst_group?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Manages global DLDP configuration on HUAWEI CloudEngine switches.
       */
      ce_dldp?: {
        /**
         * Specify whether reset DLDP state of disabled interfaces.
         */
        reset?: "enable" | "disable";
        time_interval?: string;
        /**
         * Set global DLDP enable state.
         */
        enable?: "enable" | "disable";
        /**
         * Set global DLDP work-mode.
         */
        work_mode?: "enhance" | "normal";
        /**
         * Specifies authentication password. The value is a string of 1 to 16 case-sensitive plaintexts or 24/32/48/108/128 case-sensitive encrypted characters. The string excludes a question mark (?).
         */
        auth_pwd?: string;
        /**
         * Specifies authentication algorithm of DLDP.
         */
        auth_mode?: "md5" | "simple" | "sha" | "hmac-sha256" | "none";
        username?: string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * This module has two possible ways of operation.
       * If 7zip is installed on the system, this module extracts files from an ISO into a temporary directory and copies files to a given destination, if needed.
       * If the user has mount-capabilities (CAP_SYS_ADMIN on Linux) this module mounts the ISO image to a temporary location, and copies files to a given destination, if needed.
       */
      iso_extract?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Module to manage power management of hosts in oVirt/RHV.
       */
      ovirt_host_pm?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Templates are processed by the Jinja2 templating language (U(http://jinja.pocoo.org/docs/)) - documentation on the template formatting can be found in the Template Designer Documentation (U(http://jinja.pocoo.org/docs/templates/)).
       * Six additional variables can be used in templates: C(ansible_managed) (configurable via the C(defaults) section of C(ansible.cfg)) contains a string which can be used to describe the template name, host, modification time of the template file and the owner uid. C(template_host) contains the node name of the template's machine. C(template_uid) the numeric user id of the owner. C(template_path) the path of the template. C(template_fullpath) is the absolute path of the template. C(template_run_date) is the date that the template was rendered.
       */
      template?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Create, update, or destroy Ansible Tower inventories. See U(https://www.ansible.com/tower) for an overview.
       */
      tower_inventory?: {
        /**
         * Inventory variables. Use '@' to get from file.
         */
        variables?: string;
        /**
         * The description to use for the inventory.
         */
        description?: string;
        /**
         * URL to your Tower instance.
         */
        tower_host?: string;
        /**
         * Username for your Tower instance.
         */
        tower_username?: string;
        /**
         * Default: present
         *
         * Desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Password for your Tower instance.
         */
        tower_password?: string;
        /**
         * Path to the Tower config file. See notes.
         */
        tower_config_file?: string;
        /**
         * Organization the inventory belongs to.
         */
        organization: string;
        /**
         * Default: True
         *
         * Dis/allow insecure connections to Tower. If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        tower_verify_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The name to use for the inventory.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Wait for Ansible Tower job to finish and report success or failure. See U(https://www.ansible.com/tower) for an overview.
       */
      tower_job_wait?: {
        /**
         * Default: 1
         *
         * Minimum interval in seconds, to request an update from Tower.
         */
        min_interval?: string;
        /**
         * Default: 30
         *
         * Maximum interval in seconds, to request an update from Tower.
         */
        max_interval?: string;
        /**
         * ID of the job to monitor.
         */
        job_id?: string;
        /**
         * Maximum time in seconds to wait for a job to finish.
         */
        timeout?: string;
        [k: string]: any;
      };
      /**
       * This module manage tags in oVirt/RHV. It can also manage assignments of those tags to entities.
       */
      ovirt_tags?: {
        /**
         * Name of the tag to manage.
         */
        name: string;
        /**
         * Name of the parent tag.
         */
        parent?: string;
        poll_interval?: number | string;
        fetch_nested?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nested_attributes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * Should the tag be present/absent/attached/detached.
         * C(Note): I(attached) and I(detached) states are supported since version 2.4.
         */
        state?: "present" | "absent" | "attached" | "detached";
        /**
         * List of the hosts names, which should have assigned this tag.
         */
        hosts?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        auth: {
          [k: string]: any;
        };
        timeout?: number | string;
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * List of the VMs names, which should have assigned this tag.
         */
        vms?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Description of the tag to manage.
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * Retrieve facts about one or more oVirt/RHV clusters.
       */
      ovirt_cluster_facts?: {
        /**
         * Search term which is accepted by oVirt/RHV search backend.
         * For example to search cluster X from datacenter Y use following pattern: name=X and datacenter=Y
         */
        pattern?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of LLDP interfaces configuration on VyOS network devices.
       */
      vyos_lldp_interface?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Name of the interface LLDP should be configured on.
         */
        name?: string;
        /**
         * Default: present
         *
         * State of the LLDP configuration.
         */
        state?: "present" | "absent" | "enabled" | "disabled";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of interfaces LLDP should be configured on.
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Creates, modifies, and deletes Elasticache subnet groups. This module has a dependency on python-boto >= 2.5.
       */
      elasticache_subnet_group?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module can be used to add/remove an ESXi host to/from vCenter
       */
      vmware_host?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manages SNMP location configurations on HUAWEI CloudEngine switches.
       */
      ce_snmp_location?: {
        username?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        host?: string;
        /**
         * Location information.
         */
        location: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Add or remove domains or subdomains on a Webfaction host. Further documentation at http://github.com/quentinsf/ansible-webfaction.
       */
      webfaction_domain?: {
        /**
         * Default: present
         *
         * Whether the domain should exist
         */
        state?: "present" | "absent";
        /**
         * Any subdomains to create.
         */
        subdomains?: string;
        /**
         * The webfaction account to use
         */
        login_name: string;
        /**
         * The name of the domain
         */
        name: string;
        /**
         * The webfaction password to use
         */
        login_password: string;
        [k: string]: any;
      };
      /**
       * Add or remove mailboxes on a Webfaction account. Further documentation at http://github.com/quentinsf/ansible-webfaction.
       */
      webfaction_mailbox?: {
        /**
         * The password for the mailbox
         */
        mailbox_password: string;
        /**
         * Default: present
         *
         * Whether the mailbox should exist
         */
        state?: "present" | "absent";
        /**
         * The webfaction account to use
         */
        login_name: string;
        /**
         * The name of the mailbox
         */
        mailbox_name: string;
        /**
         * The webfaction password to use
         */
        login_password: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure VSDataScriptSet object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_vsdatascriptset?: {
        username?: string;
        /**
         * Datascripts to execute.
         */
        datascript?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Uuid of the virtual service datascript collection.
         */
        uuid?: string;
        /**
         * Uuid of pools that could be referred by vsdatascriptset objects.
         * It is a reference to an object of type pool.
         */
        pool_refs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * User defined description for the object.
         */
        description?: string;
        controller?: string;
        /**
         * Uuid of pool groups that could be referred by vsdatascriptset objects.
         * It is a reference to an object of type poolgroup.
         */
        pool_group_refs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Uuid of string groups that could be referred by vsdatascriptset objects.
         * It is a reference to an object of type stringgroup.
         */
        string_group_refs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Uuid of ip groups that could be referred by vsdatascriptset objects.
         * It is a reference to an object of type ipaddrgroup.
         */
        ipgroup_refs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        tenant?: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Name for the virtual service datascript collection.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * The M(sns_topic) module allows you to create, delete, and manage subscriptions for AWS SNS topics.
       */
      sns_topic?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Creates, Removes and configures a IIS Web site
       */
      win_iis_website?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * After .NET framework is installed/updated, Windows will probably want to recompile things to optimise for the host.
       * This happens via scheduled task, usually at some inopportune time.
       * This module allows you to run this task on your own schedule, so you incur the CPU hit at some more convenient and controlled time.
       * http://blogs.msdn.com/b/dotnet/archive/2013/08/06/wondering-why-mscorsvw-exe-has-high-cpu-usage-you-can-speed-it-up.aspx
       */
      win_dotnet_ngen?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Create, delete, enable or disable IP interfaces on Solaris/illumos systems.
       */
      ipadm_if?: {
        /**
         * Default: present
         *
         * Create or delete Solaris/illumos IP interfaces.
         */
        state?: "present" | "absent" | "enabled" | "disabled";
        /**
         * Specifies that the IP interface is temporary. Temporary IP interfaces do not persist across reboots.
         */
        temporary?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * IP interface name.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Adds or removes (rpm --import) a gpg key to your rpm database.
       */
      rpm_key?: {
        /**
         * Default: present
         *
         * If the key will be imported or removed from the rpm db.
         */
        state?: "present" | "absent";
        /**
         * Default: yes
         *
         * If C(no) and the C(key) is a url starting with https, SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Key that will be modified. Can be a url, a file, or a keyid if the key already exists in the database.
         */
        key: string;
        [k: string]: any;
      };
      /**
       * Synchronizes the contents of two directories on the remote machine. Under the hood this just calls out to RoboCopy, since that should be available on most modern Windows Systems.
       */
      win_robocopy?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * View GitHub issue for a given repository.
       */
      github_issue?: {
        /**
         * Default: get_status
         *
         * Get various details about issue depending upon action specified.
         */
        action?: string;
        /**
         * Default: none
         *
         * Name of repository from which issue needs to be retrieved.
         */
        repo: string;
        /**
         * Default: none
         *
         * Issue number for which information is required.
         */
        issue: string;
        /**
         * Default: none
         *
         * Name of the GitHub organization in which the repository is hosted.
         */
        organization: string;
        [k: string]: any;
      };
      /**
       * Module to manage hosts in oVirt/RHV
       */
      ovirt_hosts?: {
        [k: string]: any;
      };
      /**
       * Copies an EC2 Snapshot from a source region to a destination region.
       */
      ec2_snapshot_copy?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages BGP Address-family configurations on NX-OS switches.
       */
      nxos_bgp_af?: {
        /**
         * Filters routes rejected by the route-map and does not download them to the RIB.
         */
        table_map_filter?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify max suppress time for route-flap dampening stable route. Valid values are integer and keyword 'default'.
         */
        dampening_max_suppress_time?: string;
        /**
         * Enables the send capability of additional paths for all of the neighbors under this address family for which the capability has not been disabled.
         */
        additional_paths_send?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Install a backup path into the forwarding table and provide prefix independent convergence (PIC) in case of a PE-CE link failure.
         */
        additional_paths_install?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enable/disable route-flap dampening.
         */
        dampening_state?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enables the receive capability of additional paths for all of the neighbors under this address family for which the capability has not been disabled.
         */
        additional_paths_receive?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Advertises only active routes to peers.
         */
        suppress_inactive?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify route-map for route-flap dampening. Valid values are a string defining the name of the route-map.
         */
        dampening_routemap?: string;
        port?: number | string;
        transport?: "cli" | "nxapi";
        /**
         * Sets the administrative distance for local BGP routes. Valid values are Integer or keyword 'default'.
         */
        distance_local?: string;
        /**
         * Advertise evpn routes.
         */
        advertise_l2vpn_evpn?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Address Family Identifier.
         */
        afi: "ipv4" | "ipv6" | "vpnv4" | "vpnv6" | "l2vpn";
        /**
         * Default information originate.
         */
        default_information_originate?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Networks to configure. Valid value is a list of network prefixes to advertise. The list must be in the form of an array. Each entry in the array must include a prefix address and an optional route-map. For example [['10.0.0.0/16', 'routemap_LA'], ['192.168.1.1', 'Chicago'], ['192.168.2.0/24'], ['192.168.3.0/24', 'routemap_NYC']].
         */
        networks?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        /**
         * Configure a route-map for valid nexthops. Valid values are a string defining the name of the route-map.
         */
        next_hop_route_map?: string;
        provider?: {
          [k: string]: any;
        };
        username?: string;
        /**
         * Apply table-map to filter routes downloaded into URIB. Valid values are a string.
         */
        table_map?: string;
        /**
         * Sub Address Family Identifier.
         */
        safi: "unicast" | "multicast" | "evpn";
        /**
         * Sets default metrics for routes redistributed into BGP. Valid values are Integer or keyword 'default'
         */
        default_metric?: string;
        /**
         * Configure client-to-client route reflection.
         */
        client_to_client?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify dampen value for IGP metric-related changes, in seconds. Valid values are integer and keyword 'default'.
         */
        dampen_igp_metric?: string;
        /**
         * Sets the administrative distance for iBGP routes. Valid values are Integer or keyword 'default'.
         */
        distance_ibgp?: string;
        host?: string;
        /**
         * Configures the capability of selecting additional paths for a prefix. Valid values are a string defining the name of the route-map.
         */
        additional_paths_selection?: string;
        /**
         * Configures the maximum number of ibgp equal-cost paths for load sharing. Valid value is an integer in the range 1-64.
         */
        maximum_paths_ibgp?: string;
        /**
         * Name of the VRF. The name 'default' is a valid VRF representing the global bgp.
         */
        vrf?: string;
        /**
         * Sets the administrative distance for eBGP routes. Valid values are Integer or keyword 'default'.
         */
        distance_ebgp?: string;
        password?: string;
        /**
         * BGP autonomous system number. Valid values are String, Integer in ASPLAIN or ASDOT notation.
         */
        asn: string;
        /**
         * A list of redistribute directives. Multiple redistribute entries are allowed. The list must be in the form of a nested array. the first entry of each array defines the source-protocol to redistribute from; the second entry defines a route-map name. A route-map is highly advised but may be optional on some platforms, in which case it may be omitted from the array list. For example [['direct', 'rm_direct'], ['lisp', 'rm_lisp']].
         */
        redistribute?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        ssh_keyfile?: string;
        /**
         * Specify route suppress time for route-flap dampening. Valid values are integer and keyword 'default'.
         */
        dampening_suppress_time?: string;
        /**
         * Configures the maximum number of equal-cost paths for load sharing. Valid value is an integer in the range 1-64.
         */
        maximum_paths?: string;
        /**
         * An array of route-map names which will specify prefixes to inject. Each array entry must first specify the inject-map name, secondly an exist-map name, and optionally the copy-attributes keyword which indicates that attributes should be copied from the aggregate. For example [['lax_inject_map', 'lax_exist_map'], ['nyc_inject_map', 'nyc_exist_map', 'copy-attributes'], ['fsd_inject_map', 'fsd_exist_map']].
         */
        inject_map?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Specify route reuse time for route-flap dampening. Valid values are integer and keyword 'default'.
         */
        dampening_reuse_time?: string;
        timeout?: number | string;
        /**
         * Specify decay half-life in minutes for route-flap dampening. Valid values are integer and keyword 'default'.
         */
        dampening_half_time?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * When the user does not exists in Gitlab, it will be created.
       * When the user does exists and state=absent, the user will be deleted.
       * When changes are made to user, the user will be updated.
       */
      gitlab_user?: {
        [k: string]: any;
      };
      /**
       * Get facts for a specific DNS Record Set in a Zone, or a specific type in all Zones or in one Zone etc.
       */
      azure_rm_dnsrecordset_facts?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Limit results by resource group. Required when filtering by name or type.
         */
        resource_group?: string;
        tags?: {
          [k: string]: any;
        };
        ad_user?: string;
        /**
         * Default: 100
         *
         * Limit the maximum number of record sets to return
         */
        top?: string;
        append_tags?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        cloud_environment?: string;
        /**
         * Only show results for a Record Set.
         */
        relative_name?: string;
        /**
         * Limit record sets by record type.
         */
        record_type?: string;
        secret?: string;
        client_id?: string;
        /**
         * Limit results by zones. Required when filtering by name or type.
         */
        zone_name?: string;
        subscription_id?: string;
        password?: string;
        tenant?: string;
        [k: string]: any;
      };
      /**
       * Deploy, start, update, scale, restart, restore, stop and destroy instances.
       */
      cs_instance?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages TCL iApp services on a BIG-IP.
       */
      bigip_iapp_service?: {
        /**
         * Default: present
         *
         * When C(present), ensures that the iApp service is created and running. When C(absent), ensures that the iApp service has been removed.
         */
        state?: string;
        /**
         * Forces the updating of an iApp service even if the parameters to the service have not changed. This option is of particular importance if the iApp template that underlies the service has been updated in-place. This option is equivalent to re-configuring the iApp if that template has changed.
         */
        force?: string;
        /**
         * The name of the iApp service that you want to deploy.
         */
        name?: string;
        /**
         * A hash of all the required template variables for the iApp template. If your parameters are stored in a file (the more common scenario) it is recommended you use either the `file` or `template` lookups to supply the expected parameters.
         */
        parameters?: string;
        /**
         * The iApp template from which to instantiate a new service. This template must exist on your BIG-IP before you can successfully create a service. This parameter is required if the C(state) parameter is C(present).
         */
        template?: string;
        [k: string]: any;
      };
      /**
       * Manages domain membership or workgroup membership for a Windows host. Also supports hostname changes. This module may require subsequent use of the M(win_reboot) action if changes are made.
       */
      win_domain_membership?: {
        /**
         * when C(state) is C(workgroup), the name of the workgroup that the Windows host should be in
         */
        workgroup_name?: string;
        /**
         * username of a domain admin for the target domain (required to join or leave the domain)
         */
        domain_admin_user?: string;
        /**
         * The desired OU path for adding the computer object.
         * This is only used when adding the target host to a domain, if it is already a member then it is ignored.
         */
        domain_ou_path?: string;
        /**
         * the desired hostname for the Windows host
         */
        hostname?: string;
        /**
         * password for the specified C(domain_admin_user)
         */
        domain_admin_password?: string;
        /**
         * whether the target host should be a member of a domain or workgroup
         */
        state?: string;
        /**
         * when C(state) is C(domain), the DNS name of the domain to which the targeted Windows host should be joined
         */
        dns_domain_name?: string;
        [k: string]: any;
      };
      /**
       * This module sends push notifications via Pushbullet to channels or devices.
       */
      pushbullet?: {
        /**
         * Body of the notification, e.g. Details of the fault you're alerting.
         */
        body?: string;
        /**
         * Title of the notification.
         */
        title: string;
        url?: string;
        /**
         * Default: note
         *
         * Thing you wish to push.
         */
        push_type?: "note" | "link";
        /**
         * The device NAME you wish to send a push notification, as seen on the Pushbullet main page.
         */
        device?: string;
        /**
         * Push bullet API token
         */
        api_key: string;
        /**
         * The channel TAG you wish to broadcast a push notification, as seen on the "My Channels" > "Edit your channel" at Pushbullet page.
         */
        channel?: string;
        [k: string]: any;
      };
      /**
       * Creates or deletes ec2 images.
       */
      ec2_ami?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Check if PAN-OS device is ready for being configured (no pending jobs).
       * The check could be done once or multiple times until the device is ready.
       */
      panos_check?: {
        /**
         * Default: admin
         *
         * username for authentication
         */
        username?: string;
        /**
         * password for authentication
         */
        password: string;
        /**
         * IP address (or hostname) of PAN-OS device
         */
        ip_address: string;
        /**
         * Default: 0
         *
         * timeout of API calls
         */
        timeout?: number | string;
        /**
         * Default: 0
         *
         * time waited between checks
         */
        interval?: number | string;
        [k: string]: any;
      };
      /**
       * Create or Remove Ironic nodes from OpenStack.
       */
      os_ironic?: {
        /**
         * Default: None
         *
         * globally unique identifier (UUID) to be given to the resource. Will be auto-generated if not specified, and name is specified.
         * Definition of a UUID will always take precedence to a name value.
         */
        uuid?: string;
        /**
         * Information for this server's driver. Will vary based on which driver is in use. Any sub-field which is populated will be validated during creation.
         */
        driver_info?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        /**
         * A list of network interface cards, eg, " - mac: aa:bb:cc:aa:bb:cc"
         */
        nics?: string;
        /**
         * Default: None
         *
         * The name of the Ironic Driver to use with this node.
         */
        driver?: string;
        /**
         * Default: None
         *
         * If noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API.  Use with "auth" and "auth_type" settings set to None.
         */
        ironic_url?: string;
        /**
         * Default: present
         *
         * Indicates desired state of the resource
         */
        state?: string;
        /**
         * Default: None
         *
         * Associate the node with a pre-defined chassis.
         */
        chassis_uuid?: string;
        /**
         * Allows the code that would assert changes to nodes to skip the update if the change is a single line consisting of the password field.  As of Kilo, by default, passwords are always masked to API requests, which means the logic as a result always attempts to re-assert the password field.
         */
        skip_update_of_driver_password?: string;
        /**
         * Definition of the physical characteristics of this server, used for scheduling purposes
         */
        properties?: string;
        /**
         * Default: None
         *
         * unique name identifier to be given to the resource.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Manages packages with I(apt-rpm). Both low-level (I(rpm)) and high-level (I(apt-get)) package manager binaries required.
       */
      apt_rpm?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Manages VRRP configuration on NX-OS switches.
       */
      nxos_vrrp?: {
        username?: string;
        save?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        /**
         * VRRP group number.
         */
        group: string;
        preempt?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        config?: string;
        /**
         * VRRP virtual IP address.
         */
        vip?: string;
        host?: string;
        /**
         * Clear text authentication string.
         */
        authentication?: string;
        /**
         * VRRP priority.
         */
        priority?: string;
        include_defaults?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Default: no shutdown
         *
         * Used to enable or disable the VRRP process.
         *
         * Possible choices:
         * shutdown
         * no shutdown
         */
        admin_state?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Full name of interface that is being managed for VRRP.
         */
        interface: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Sends arbitrary commands to a Dell OS10 node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.
       * This module does not support running commands in configuration mode. Please use M(dellos10_config) to configure Dell OS10 devices.
       */
      dellos10_command?: {
        [k: string]: any;
      };
      /**
       * This module allows the user to manage S3 buckets and the objects within them. Includes support for creating and deleting both objects and buckets, retrieving objects as files or strings and generating download links. This module has a dependency on python-boto.
       */
      s3?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * A trivial test module, this module always returns C(pong) on successful contact. It does not make sense in playbooks, but it is useful from C(/usr/bin/ansible) to verify the ability to login and that a usable python is configured.
       * This is NOT ICMP ping, this is just a trivial test module.
       */
      ping?: {
        data?: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure Cloud object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_cloud?: {
        /**
         * Vcloudairconfiguration settings for cloud.
         */
        vca_configuration?: {
          [k: string]: any;
        };
        /**
         * Proxyconfiguration settings for cloud.
         */
        proxy_configuration?: {
          [k: string]: any;
        };
        /**
         * Dockerconfiguration settings for cloud.
         */
        docker_configuration?: {
          [k: string]: any;
        };
        /**
         * Oshiftk8sconfiguration settings for cloud.
         */
        oshiftk8s_configuration?: {
          [k: string]: any;
        };
        /**
         * Select the ip address management scheme.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        dhcp_enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Rancherconfiguration settings for cloud.
         */
        rancher_configuration?: {
          [k: string]: any;
        };
        /**
         * Cloud type.
         * Enum options - CLOUD_NONE, CLOUD_VCENTER, CLOUD_OPENSTACK, CLOUD_AWS, CLOUD_VCA, CLOUD_APIC, CLOUD_MESOS, CLOUD_LINUXSERVER, CLOUD_DOCKER_UCP,
         * CLOUD_RANCHER, CLOUD_OSHIFT_K8S.
         * Default value when not specified in API or module is interpreted by Avi Controller as CLOUD_NONE.
         */
        vtype: string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * Linuxserverconfiguration settings for cloud.
         */
        linuxserver_configuration?: {
          [k: string]: any;
        };
        /**
         * Configuration parameters for nsx manager.
         * Field introduced in 17.1.1.
         */
        nsx_configuration?: {
          [k: string]: any;
        };
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Boolean flag to set apic_mode.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        apic_mode?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Dns profile for the cloud.
         * It is a reference to an object of type ipamdnsproviderprofile.
         */
        dns_provider_ref?: string;
        api_version?: string;
        username?: string;
        /**
         * Mesosconfiguration settings for cloud.
         */
        mesos_configuration?: {
          [k: string]: any;
        };
        /**
         * Openstackconfiguration settings for cloud.
         */
        openstack_configuration?: {
          [k: string]: any;
        };
        /**
         * Use static routes for vip side network resolution during virtualservice placement.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        enable_vip_static_routes?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        controller?: string;
        /**
         * Dns profile for east-west services.
         * It is a reference to an object of type ipamdnsproviderprofile.
         */
        east_west_dns_provider_ref?: string;
        /**
         * Cloudstackconfiguration settings for cloud.
         */
        cloudstack_configuration?: {
          [k: string]: any;
        };
        password?: string;
        tenant?: string;
        /**
         * Ipam profile for the cloud.
         * It is a reference to an object of type ipamdnsproviderprofile.
         */
        ipam_provider_ref?: string;
        /**
         * Name of the object.
         */
        name: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Mtu setting for the cloud.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1500.
         */
        mtu?: number | string;
        /**
         * Ipam profile for east-west services.
         * Warning - please use virtual subnets in this ipam profile that do not conflict with the underlay networks or any overlay networks in the cluster.
         * For example in aws and gcp, 169.254.0.0/16 is used for storing instance metadata.
         * Hence, it should not be used in this profile.
         * It is a reference to an object of type ipamdnsproviderprofile.
         */
        east_west_ipam_provider_ref?: string;
        /**
         * Default prefix for all automatically created objects in this cloud.
         * This prefix can be overridden by the se-group template.
         */
        obj_name_prefix?: string;
        /**
         * Apicconfiguration settings for cloud.
         */
        apic_configuration?: {
          [k: string]: any;
        };
        /**
         * Prefer static routes over interface routes during virtualservice placement.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        prefer_static_routes?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * If no license type is specified then default license enforcement for the cloud type is chosen.
         * The default mappings are container cloud is max ses, openstack and vmware is cores and linux it is sockets.
         * Enum options - LIC_BACKEND_SERVERS, LIC_SOCKETS, LIC_CORES, LIC_HOSTS.
         */
        license_type?: string;
        /**
         * Vcenterconfiguration settings for cloud.
         */
        vcenter_configuration?: {
          [k: string]: any;
        };
        tenant_uuid?: string;
        /**
         * Awsconfiguration settings for cloud.
         */
        aws_configuration?: {
          [k: string]: any;
        };
        [k: string]: any;
      };
      /**
       * Collect facts from F5 BIG-IP devices via iControl SOAP API
       */
      bigip_facts?: {
        /**
         * Shell-style glob matching string used to filter fact keys. Not applicable for software, provision, and system_info fact categories.
         */
        filter?: string;
        /**
         * Fact category or list of categories to collect
         */
        include?: string;
        /**
         * Default: True
         *
         * BIG-IP session support; may be useful to avoid concurrency issues in certain circumstances.
         */
        session?: string;
        [k: string]: any;
      };
      /**
       * Create or Remove cinder block storage volumes
       */
      os_volume?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages Eth-Trunk specific configuration parameters on HUAWEI CloudEngine switches.
       */
      ce_eth_trunk?: {
        username?: string;
        /**
         * When true it forces Eth-Trunk members to match what is declared in the members param. This can be used to remove members.
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Hash algorithm used for load balancing among Eth-Trunk member interfaces.
         */
        hash_type?: "src-dst-ip" | "src-dst-mac" | "enhanced" | "dst-ip" | "dst-mac" | "src-ip" | "src-mac";
        host?: string;
        /**
         * Specifies the working mode of an Eth-Trunk interface.
         */
        mode?: "manual" | "lacp-dynamic" | "lacp-static";
        /**
         * List of interfaces that will be managed in a given Eth-Trunk. The interface name must be full name.
         */
        members?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Specifies the minimum number of Eth-Trunk member links in the Up state. The value is an integer ranging from 1 to the maximum number of interfaces that can be added to a Eth-Trunk interface.
         */
        min_links?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Eth-Trunk interface number. The value is an integer. The value range depends on the assign forward eth-trunk mode command. When 256 is specified, the value ranges from 0 to 255. When 512 is specified, the value ranges from 0 to 511. When 1024 is specified, the value ranges from 0 to 1023.
         */
        trunk_id: string;
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Manage SLB (Server Load Balancer) server objects on A10 Networks devices via aXAPIv3.
       */
      a10_server_axapi3?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * This module allows setting new variables.  Variables are set on a host-by-host basis just like facts discovered by the setup module.
       * These variables will be available to subsequent plays during an ansible-playbook run, but will not be saved across executions even if you use a fact cache.
       * Per the standard Ansible variable precedence rules, many other types of variables have a higher priority, so this value may be overridden. See U(http://docs.ansible.com/ansible/playbooks_variables.html#variable-precedence-where-should-i-put-a-variable) for more information.
       * This module is also supported for Windows targets.
       */
      set_fact?: {
        /**
         * The C(set_fact) module takes key=value pairs as variables to set in the playbook scope. Or alternatively, accepts complex arguments using the C(args:) statement.
         */
        key_value?: string;
        /**
         * This boolean indicates if the facts set will also be added to the fact cache, if fact caching is enabled.
         */
        cacheable?: string;
        [k: string]: any;
      };
      /**
       * Gather facts about ec2 ENI interfaces in AWS
       */
      ec2_eni_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages core NTP configuration on HUAWEI CloudEngine switches.
       */
      ce_ntp?: {
        username?: string;
        /**
         * Authentication key identifier to use with given NTP server or peer.
         */
        key_id?: string;
        /**
         * Makes given NTP server or peer the preferred NTP server or peer for the device.
         */
        is_preferred?: "enable" | "disable";
        /**
         * Default: _public_
         *
         * Makes the device communicate with the given NTP server or peer over a specific vpn.
         */
        vpn_name?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Network address of NTP server.
         */
        server?: string;
        /**
         * Local source interface from which NTP messages are sent. Must be fully qualified interface name, i.e. C(40GE1/0/22), C(vlanif10). Interface types, such as C(10GE), C(40GE), C(100GE), C(Eth-Trunk), C(LoopBack), C(MEth), C(NULL), C(Tunnel), C(Vlanif).
         */
        source_int?: string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Network address of NTP peer.
         */
        peer?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * This module provides declarative management of logging on Vyatta Vyos devices.
       */
      vyos_logging?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * If value of C(dest) is I(file) it indicates file-name, for I(user) it indicates username and for I(host) indicates the host name to be notified.
         */
        name?: string;
        /**
         * Set logging facility.
         */
        facility?: string;
        /**
         * Destination of the logs.
         */
        dest?: "console" | "file" | "global" | "host" | "user";
        /**
         * Set logging severity levels.
         */
        level?: string;
        /**
         * Default: present
         *
         * State of the logging configuration.
         */
        state?: "present" | "absent";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of logging definitions.
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * The M(sns) module sends notifications to a topic on your Amazon SNS account
       */
      sns?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * This module will import/delete SSL certificates on BIG-IP LTM. Certificates can be imported from certificate and key files on the local disk, in PEM format.
       */
      bigip_ssl_certificate?: {
        /**
         * SSL Certificate Name.  This is the cert/key pair name used when importing a certificate/key into the F5. It also determines the filenames of the objects on the LTM (:Partition:name.cer_11111_1 and :Partition_name.key_11111_1).
         */
        name?: string;
        /**
         * When used instead of 'cert_src', sets the contents of a certificate directly to the specified value. This is used with lookup plugins or for anything with formatting or templating. Either one of C(key_src), C(key_content), C(cert_src) or C(cert_content) must be provided when C(state) is C(present).
         */
        cert_content?: string;
        /**
         * Default: Common
         *
         * BIG-IP partition to use when adding/deleting certificate.
         */
        partition?: string;
        /**
         * This is the local filename of the certificate. Either one of C(key_src), C(key_content), C(cert_src) or C(cert_content) must be provided when C(state) is C(present).
         */
        cert_src?: string;
        /**
         * Default: present
         *
         * Certificate and key state. This determines if the provided certificate and key is to be made C(present) on the device or C(absent).
         */
        state?: string;
        /**
         * Passphrase on certificate private key
         */
        passphrase?: string;
        /**
         * When used instead of 'key_src', sets the contents of a certificate key directly to the specified value. This is used with lookup plugins or for anything with formatting or templating. Either one of C(key_src), C(key_content), C(cert_src) or C(cert_content) must be provided when C(state) is C(present).
         */
        key_content?: string;
        /**
         * This is the local filename of the private key. Either one of C(key_src), C(key_content), C(cert_src) or C(cert_content) must be provided when C(state) is C(present).
         */
        key_src?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of VRF definitions on Juniper JUNOS devices.  It allows playbooks to manage individual or the entire VRF collection.
       */
      junos_vrf?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * It configures VRF target community configuration. The target value takes the form of C(target:A:B) where C(A) and C(B) are both numeric values.
         */
        target?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Identifies the set of interfaces that should be configured in the VRF. Interfaces must be routed interfaces in order to be placed into a VRF.
         */
        interfaces?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Provides a short description of the VRF definition in the current active configuration.  The VRF definition value accepts alphanumeric characters used to provide additional information about the VRF.
         */
        description?: string;
        /**
         * Default: present
         *
         * Configures the state of the VRF definition as it relates to the device operational configuration.  When set to I(present), the VRF should be configured in the device active configuration and when set to I(absent) the VRF should not be in the device active configuration
         */
        state?: "present" | "absent";
        /**
         * The router-distinguisher value uniquely identifies the VRF to routing processes on the remote IOS system.  The RD value takes the form of C(A:B) where C(A) and C(B) are both numeric values.
         */
        rd?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The set of VRF definition objects to be configured on the remote JUNOS device.  Ths list entries can either be the VRF name or a hash of VRF definitions and attributes.  This argument is mutually exclusive with the C(name) argument.
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Causes JUNOS to allocate a VPN label per VRF rather than per VPN FEC. This allows for forwarding of traffic to directly connected subnets, COS Egress filtering etc.
         */
        table_label?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        /**
         * Default: True
         *
         * Specifies whether or not the configuration is active or deactivated
         */
        active?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: string;
        /**
         * The name of the VRF definition to be managed on the remote IOS device.  The VRF definition name is an ASCII string name used to uniquely identify the VRF.  This argument is mutually exclusive with the C(aggregate) argument
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Create, delete or extend the capacity of a volume on Pure Storage FlashArray.
       */
      purefa_volume?: {
        /**
         * The name of the target volume, if copying.
         */
        target?: string;
        /**
         * The name of the volume.
         */
        name?: string;
        /**
         * Default: present
         *
         * Define whether the volume should exist or not.
         */
        state?: string;
        /**
         * Volume size in M, G, T or P units.
         */
        size?: string;
        /**
         * Default: no
         *
         * Define whether to overwrite a target volume if it already exisits.
         */
        overwrite?: string;
        /**
         * Default: no
         *
         * Define whether to eradicate the volume on delete or leave in trash.
         */
        eradicate?: string;
        [k: string]: any;
      };
      /**
       * Modern SSH clients support ControlPersist which is just as fast as fireball was.  Please enable that in ansible.cfg as a replacement for fireball.
       * Removed in ansible 2.0.
       */
      fireball?: {
        key?: string;
        keyserver?: string;
        url?: string;
        data?: string;
        keyring?: string;
        state?: "present" | "absent";
        file?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        id?: string;
        [k: string]: any;
      };
      /**
       * Manage End Point (EP) retention protocol policies on Cisco ACI fabrics.
       * More information from the internal APIC class I(fv:EpRetPol) at U(https://developer.cisco.com/media/mim-ref/MO-fvEpRetPol.html).
       */
      aci_tenant_ep_retention_policy?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Manages BGP address-family's neighbors configurations on NX-OS switches.
       */
      nxos_bgp_neighbor_af?: {
        /**
         * Activate the default-originate feature.
         */
        default_originate?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * suppress-inactive feature.
         */
        suppress_inactive?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Weight value. Valid values are an integer value or 'default'.
         */
        weight?: string;
        /**
         * Site-of-origin. Valid values are a string defining a VPN extcommunity or 'default'.
         */
        soo?: string;
        /**
         * Activate the next-hop-third-party feature.
         */
        next_hop_third_party?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Router reflector client.
         */
        route_reflector_client?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * unsuppress-map. Valid values are a string defining a route-map name or 'default'.
         */
        unsuppress_map?: string;
        /**
         * Valid values are a string defining a prefix-list name, or 'default'.
         */
        prefix_list_out?: string;
        /**
         * Activate the as-override feature.
         */
        as_override?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        /**
         * Valid values are a string defining a filter-list name, or 'default'.
         */
        filter_list_out?: string;
        /**
         * Valid values are enable for basic command enablement; disable for disabling the command at the neighbor af level (it adds the disable keyword to the basic command); and inherit to remove the command at this level (the command value is inherited from a higher BGP layer).
         */
        additional_paths_send?: "enable" | "disable" | "inherit";
        /**
         * Activate allowas-in property
         */
        allowas_in?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Optional warning-only keyword. Requires max_prefix_limit. May not be combined with max_prefix_interval.
         */
        max_prefix_warning?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * BGP autonomous system number. Valid values are String, Integer in ASPLAIN or ASDOT notation.
         */
        asn: string;
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        provider?: {
          [k: string]: any;
        };
        /**
         * Conditional route advertisement. This property requires two route maps, an advertise-map and an exist-map. Valid values are an array specifying both the advertise-map name and the non-exist-map name, or simply 'default' e.g. ['my_advertise_map', 'my_non_exist_map']. This command is mutually exclusive with the advertise_map_exist property.
         */
        advertise_map_non_exist?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        username?: string;
        /**
         * Optional route-map for the default_originate property. Can be used independently or in conjunction with C(default_originate). Valid values are a string defining a route-map name, or 'default'.
         */
        default_originate_route_map?: string;
        /**
         * Neighbor Identifier. Valid values are string. Neighbors may use IPv4 or IPv6 notation, with or without prefix length.
         */
        neighbor: string;
        /**
         * Sub Address Family Identifier.
         */
        safi: string;
        /**
         * Valid values are a string defining a filter-list name, or 'default'.
         */
        filter_list_in?: string;
        host?: string;
        /**
         * Valid values are 'enable' for basic command enablement; 'always' to add the always keyword to the basic command; and 'inherit' to remove the command at this level (the command value is inherited from a higher BGP layer).
         */
        soft_reconfiguration_in?: "enable" | "always" | "inherit";
        /**
         * Default: default
         *
         * Name of the VRF. The name 'default' is a valid VRF representing the global bgp.
         */
        vrf?: string;
        /**
         * Activate the next-hop-self feature.
         */
        next_hop_self?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * maximum-prefix limit value. Valid values are an integer value or 'default'.
         */
        max_prefix_limit?: string;
        password?: string;
        /**
         * Optional threshold percentage at which to generate a warning. Valid values are an integer value. Requires max_prefix_limit.
         */
        max_prefix_threshold?: string;
        /**
         * Valid values are a string defining a route-map name, or 'default'.
         */
        route_map_in?: string;
        /**
         * Address Family Identifier.
         */
        afi: string;
        ssh_keyfile?: string;
        /**
         * Optional restart interval. Valid values are an integer. Requires max_prefix_limit. May not be combined with max_prefix_warning.
         */
        max_prefix_interval?: string;
        /**
         * Valid values are a string defining a route-map name, or 'default'.
         */
        route_map_out?: string;
        /**
         * send-community attribute.
         */
        send_community?: "none" | "both" | "extended" | "standard" | "default";
        /**
         * Valid values are a string defining a prefix-list name, or 'default'.
         */
        prefix_list_in?: string;
        timeout?: number | string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Valid values are enable for basic command enablement; disable for disabling the command at the neighbor af level (it adds the disable keyword to the basic command); and inherit to remove the command at this level (the command value is inherited from a higher BGP layer).
         */
        additional_paths_receive?: "enable" | "disable" | "inherit";
        /**
         * Conditional route advertisement. This property requires two route maps, an advertise-map and an exist-map. Valid values are an array specifying both the advertise-map name and the exist-map name, or simply 'default' e.g. ['my_advertise_map', 'my_exist_map']. This command is mutually exclusive with the advertise_map_non_exist property.
         */
        advertise_map_exist?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Optional max-occurrences value for allowas_in. Valid values are an integer value or 'default'. Can be used independently or in conjunction with allowas_in.
         */
        allowas_in_max?: string;
        [k: string]: any;
      };
      /**
       * Configure NetStream flow statistics exporting and versions for exported packets on HUAWEI CloudEngine switches.
       */
      ce_netstream_export?: {
        username?: string;
        /**
         * Specifies NetStream feature.
         */
        type: "ip" | "vxlan";
        /**
         * Default: disable
         *
         * Configures the statistics to carry BGP next hop information. Currently, only V9 supports the exported packets carrying BGP next hop information.
         */
        bgp_nexthop?: "enable" | "disable";
        /**
         * Specifies the destination UDP port number of the exported packets. The value is an integer that ranges from 1 to 65535.
         */
        host_port?: string;
        /**
         * Specifies source address which can be IPv6 or IPv4 of the exported NetStream packet.
         */
        source_ip?: string;
        /**
         * Specifies destination address which can be IPv6 or IPv4 of the exported NetStream packet.
         */
        host_ip?: string;
        /**
         * Specifies the AS number recorded in the statistics as the original or the peer AS number.
         */
        as_option?: "origin" | "peer";
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Sets the version of exported packets.
         */
        version?: "5" | "9";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        host?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        /**
         * Specifies the VPN instance of the exported packets carrying flow statistics. Ensure the VPN instance has been created on the device.
         */
        host_vpn?: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure AlertConfig object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_alertconfig?: {
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * The object type to which the alert config is associated with.
         * Valid object types are - virtual service, pool, service engine.
         * Enum options - VIRTUALSERVICE, POOL, HEALTHMONITOR, NETWORKPROFILE, APPLICATIONPROFILE, HTTPPOLICYSET, DNSPOLICY, IPADDRGROUP, STRINGGROUP,
         * SSLPROFILE, SSLKEYANDCERTIFICATE, NETWORKSECURITYPOLICY, APPLICATIONPERSISTENCEPROFILE, ANALYTICSPROFILE, VSDATASCRIPTSET, TENANT, PKIPROFILE,
         * AUTHPROFILE, CLOUD, SERVERAUTOSCALEPOLICY, AUTOSCALELAUNCHCONFIG, MICROSERVICEGROUP, IPAMPROFILE, HARDWARESECURITYMODULEGROUP, POOLGROUP,
         * PRIORITYLABELS, POOLGROUPDEPLOYMENTPOLICY, GSLBSERVICE, GSLBSERVICERUNTIME, SCHEDULER, GSLBGEODBPROFILE, GSLBAPPLICATIONPERSISTENCEPROFILE,
         * TRAFFICCLONEPROFILE, VSVIP, SERVICEENGINE, DEBUGSERVICEENGINE, DEBUGCONTROLLER, DEBUGVIRTUALSERVICE, SERVICEENGINEGROUP, SEPROPERTIES, NETWORK,
         * CONTROLLERNODE, CONTROLLERPROPERTIES, SYSTEMCONFIGURATION, VRFCONTEXT, USER, ALERTCONFIG, ALERTSYSLOGCONFIG, ALERTEMAILCONFIG, ALERTTYPECONFIG,
         * APPLICATION, ROLE, CLOUDPROPERTIES, SNMPTRAPPROFILE, ACTIONGROUPPROFILE, MICROSERVICE, ALERTPARAMS, ACTIONGROUPCONFIG, CLOUDCONNECTORUSER, GSLB,
         * GSLBDNSUPDATE, GSLBSITEOPS, GLBMGRWARMSTART, IPAMDNSRECORD, GSLBDNSGSSTATUS, GSLBDNSGEOFILEOPS, GSLBDNSGEOUPDATE, GSLBDNSGEOCLUSTEROPS,
         * GSLBDNSCLEANUP, TCPSTATRUNTIME, UDPSTATRUNTIME, IPSTATRUNTIME, ARPSTATRUNTIME, MBSTATRUNTIME, IPSTKQSTATSRUNTIME, MALLOCSTATRUNTIME,
         * SHMALLOCSTATRUNTIME, CPUUSAGERUNTIME, L7GLOBALSTATSRUNTIME, L7VIRTUALSERVICESTATSRUNTIME, SEAGENTVNICDBRUNTIME, SEAGENTGRAPHDBRUNTIME,
         * SEAGENTSTATERUNTIME, INTERFACERUNTIME, ARPTABLERUNTIME, DISPATCHERSTATRUNTIME, DISPATCHERSTATCLEARRUNTIME, DISPATCHERTABLEDUMPRUNTIME,
         * DISPATCHERREMOTETIMERLISTDUMPRUNTIME, METRICSAGENTMESSAGE, HEALTHMONITORSTATRUNTIME, METRICSENTITYRUNTIME, PERSISTENCEINTERNAL,
         * HTTPPOLICYSETINTERNAL, DNSPOLICYINTERNAL, CONNECTIONDUMPRUNTIME, SHAREDDBSTATS, SHAREDDBSTATSCLEAR, ICMPSTATRUNTIME, ROUTETABLERUNTIME,
         * VIRTUALMACHINE, POOLSERVER, SEVSLIST, MEMINFORUNTIME, RTERINGSTATRUNTIME, ALGOSTATRUNTIME, HEALTHMONITORRUNTIME, CPUSTATRUNTIME, SEVM, HOST,
         * PORTGROUP, CLUSTER, DATACENTER, VCENTER, HTTPPOLICYSETSTATS, DNSPOLICYSTATS, METRICSSESTATS, RATELIMITERSTATRUNTIME, NETWORKSECURITYPOLICYSTATS,
         * TCPCONNRUNTIME, POOLSTATS, CONNPOOLINTERNAL, CONNPOOLSTATS, VSHASHSHOWRUNTIME, SELOGSTATSRUNTIME, NETWORKSECURITYPOLICYDETAIL, LICENSERUNTIME,
         * SERVERRUNTIME, METRICSRUNTIMESUMMARY, METRICSRUNTIMEDETAIL, DISPATCHERSEHMPROBETEMPDISABLERUNTIME, POOLDEBUG, VSLOGMGRMAP, SERUMINSERTIONSTATS,
         * HTTPCACHE, HTTPCACHESTATS, SEDOSSTATRUNTIME, VSDOSSTATRUNTIME, SERVERUPDATEREQ, VSSCALEOUTLIST, SEMEMDISTRUNTIME, TCPCONNRUNTIMEDETAIL,
         * SEUPGRADESTATUS, SEUPGRADEPREVIEW, SEFAULTINJECTEXHAUSTM, SEFAULTINJECTEXHAUSTMCL, SEFAULTINJECTEXHAUSTMCLSMALL, SEFAULTINJECTEXHAUSTCONN,
         * SEHEADLESSONLINEREQ, SEUPGRADE, SEUPGRADESTATUSDETAIL, SERESERVEDVS, SERESERVEDVSCLEAR, VSCANDIDATESEHOSTLIST, SEGROUPUPGRADE, REBALANCE,
         * SEGROUPREBALANCE, SEAUTHSTATSRUNTIME, AUTOSCALESTATE, VIRTUALSERVICEAUTHSTATS, NETWORKSECURITYPOLICYDOS, KEYVALINTERNAL, KEYVALSUMMARYINTERNAL,
         * SERVERSTATEUPDATEINFO, CLTRACKINTERNAL, CLTRACKSUMMARYINTERNAL, MICROSERVICERUNTIME, SEMICROSERVICE, VIRTUALSERVICEANALYSIS, CLIENTINTERNAL,
         * CLIENTSUMMARYINTERNAL, MICROSERVICEGROUPRUNTIME, BGPRUNTIME, REQUESTQUEUERUNTIME, MIGRATEALL, MIGRATEALLSTATUSSUMMARY, MIGRATEALLSTATUSDETAIL,
         * INTERFACESUMMARYRUNTIME, INTERFACELACPRUNTIME, DNSTABLE, GSLBSERVICEDETAIL, GSLBSERVICEINTERNAL, GSLBSERVICEHMONSTAT, SETROLESREQUEST,
         * TRAFFICCLONERUNTIME, GEOLOCATIONINFO, SEVSHBSTATRUNTIME, GEODBINTERNAL, GSLBSITEINTERNAL, SERESOURCEPROTO, SECONSUMERPROTO, SECREATEPENDINGPROTO,
         * PLACEMENTSTATS, SEVIPPROTO, RMVRFPROTO, VCENTERMAP, VIMGRVCENTERRUNTIME, INTERESTEDVMS, INTERESTEDHOSTS, VCENTERSUPPORTEDCOUNTERS, ENTITYCOUNTERS,
         * TRANSACTIONSTATS, SEVMCREATEPROGRESS, PLACEMENTSTATUS, VISUBFOLDERS, VIDATASTORE, VIHOSTRESOURCES, CLOUDCONNECTOR, VINETWORKSUBNETVMS,
         * VIDATASTORECONTENTS, VIMGRVCENTERCLOUDRUNTIME, VIVCENTERPORTGROUPS, VIVCENTERDATACENTERS, VIMGRHOSTRUNTIME, PLACEMENTGLOBALS, APICCONFIGURATION,
         * CIFTABLE, APICTRANSACTION, VIRTUALSERVICESTATEDBCACHESUMMARY, POOLSTATEDBCACHESUMMARY, SERVERSTATEDBCACHESUMMARY, APICAGENTINTERNAL,
         * APICTRANSACTIONFLAP, APICGRAPHINSTANCES, APICEPGS, APICEPGEPS, APICDEVICEPKGVER, APICTENANTS, APICVMMDOMAINS, NSXCONFIGURATION, NSXSGTABLE,
         * NSXAGENTINTERNAL, NSXSGINFO, NSXSGIPS, NSXAGENTINTERNALCLI, MAXOBJECTS.
         */
        object_type?: string;
        /**
         * Recommendation of alertconfig.
         */
        recommendation?: string;
        /**
         * An alert is created only when the number of events meets or exceeds this number within the chosen time frame.
         * Allowed values are 1-65536.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1.
         */
        threshold?: number | string;
        /**
         * Determines whether an alert is raised immediately when event occurs (realtime) or after specified number of events occurs within rolling time
         * window.
         * Enum options - REALTIME, ROLLINGWINDOW, WATERMARK.
         * Default value when not specified in API or module is interpreted by Avi Controller as REALTIME.
         */
        category: string;
        /**
         * An alert is expired and deleted after the expiry time has elapsed.
         * The original event triggering the alert remains in the event's log.
         * Allowed values are 1-31536000.
         * Default value when not specified in API or module is interpreted by Avi Controller as 86400.
         */
        expiry_time?: number | string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * Signifies system events or the type of client logsused in this alert configuration.
         * Enum options - CONN_LOGS, APP_LOGS, EVENT_LOGS, METRICS.
         */
        source: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * List of filters matching on events or client logs used for triggering alerts.
         */
        alert_rule: {
          [k: string]: any;
        };
        api_version?: string;
        username?: string;
        /**
         * A custom description field.
         */
        description?: string;
        /**
         * This alert config applies to auto scale alerts.
         */
        autoscale_alert?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        controller?: string;
        /**
         * Uuid of the resource for which alert was raised.
         */
        obj_uuid?: string;
        password?: string;
        tenant?: string;
        /**
         * Alerts are suppressed (throttled) for this duration of time since the last alert was raised for this alert config.
         * Allowed values are 0-31536000.
         * Default value when not specified in API or module is interpreted by Avi Controller as 600.
         */
        throttle?: number | string;
        /**
         * Name of the alert configuration.
         */
        name: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * Enable or disable this alert config from generating new alerts.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Summary of reason why alert is generated.
         */
        summary?: string;
        /**
         * Only if the number of events is reached or exceeded within the time window will an alert be generated.
         * Allowed values are 1-31536000.
         * Default value when not specified in API or module is interpreted by Avi Controller as 300.
         */
        rolling_window?: number | string;
        /**
         * The alert config will trigger the selected alert action, which can send notifications and execute a controlscript.
         * It is a reference to an object of type actiongroupconfig.
         */
        action_group_ref?: string;
        tenant_uuid?: string;
        [k: string]: any;
      };
      /**
       * Manage content switching vserver
       * This module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance
       */
      netscaler_cs_vserver?: {
        /**
         * Information about this virtual server.
         */
        comment?: string;
        /**
         * Oracle server version.
         */
        oracleserverversion?: "10G" | "11G";
        /**
         * Type of precedence to use for both RULE-based and URL-based policies on the content switching virtual server. With the default C(RULE) setting, incoming requests are evaluated against the rule-based content switching policies. If none of the rules match, the URL in the request is evaluated against the URL-based content switching policies.
         */
        precedence?: "RULE" | "URL";
        save_config?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the HTTP profile containing HTTP configuration settings for the virtual server. The service type of the virtual server should be either C(HTTP) or C(SSL).
         * Minimum length = 1
         * Maximum length = 127
         */
        httpprofilename?: string;
        /**
         * The version of the MSSQL server.
         */
        mssqlserverversion?: "70" | "2000" | "2000SP1" | "2005" | "2008" | "2008R2" | "2012" | "2014";
        /**
         * Default: no
         *
         * When set to C(yes) the cs vserver will be disabled.
         * When set to C(no) the cs vserver will be enabled.
         * Note that due to limitations of the underlying NITRO API a C(disabled) state change alone does not cause the module result to report a changed status.
         */
        disabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nitro_protocol?: "http" | "https";
        /**
         * The protocol version returned by the mysql vserver.
         */
        mysqlprotocolversion?: number;
        /**
         * String specifying the listen policy for the content switching virtual server. Can be either the name of an existing expression or an in-line expression.
         */
        listenpolicy?: string;
        /**
         * Can be active or passive.
         */
        icmpvsrresponse?: "PASSIVE" | "ACTIVE";
        /**
         * Enable state updates for a specific content switching virtual server. By default, the Content Switching virtual server is always UP, regardless of the state of the Load Balancing virtual servers bound to it. This parameter interacts with the global setting as follows:
         * Global Level | Vserver Level | Result
         * enabled enabled enabled
         * enabled disabled enabled
         * disabled enabled enabled
         * disabled disabled disabled
         * If you want to enable state updates for only some content switching virtual servers, be sure to disable the state update parameter.
         */
        stateupdate?: "enabled" | "disabled";
        /**
         * URL to which traffic is redirected if the virtual server becomes unavailable. The service type of the virtual server should be either C(HTTP) or C(SSL).
         * Caution: Make sure that the domain in the URL does not match the domain specified for a content switching policy. If it does, requests are continuously redirected to the unavailable virtual server.
         * Minimum length = 1
         */
        redirecturl?: string;
        /**
         * IP mask, in dotted decimal notation, for the IP Pattern parameter. Can have leading or trailing non-zero octets (for example, C(255.255.240.0) or C(0.0.255.255)). Accordingly, the mask specifies whether the first n bits or the last n bits of the destination IP address in a client request are to be matched with the corresponding bits in the IP pattern. The former is called a forward mask. The latter is called a reverse mask.
         */
        ipmask?: string;
        /**
         * Insert the virtual server's VIP address and port number in the request header. Available values function as follows:
         * C(VIPADDR) - Header contains the vserver's IP address and port number without any translation.
         * C(OFF) - The virtual IP and port header insertion option is disabled.
         * C(V6TOV4MAPPING) - Header contains the mapped IPv4 address corresponding to the IPv6 address of the vserver and the port number. An IPv6 address can be mapped to a user-specified IPv4 address using the set ns ip6 command.
         */
        insertvserveripport?: "OFF" | "VIPADDR" | "V6TOV4MAPPING";
        /**
         * State of port rewrite while performing HTTP redirect.
         */
        redirectportrewrite?: "enabled" | "disabled";
        /**
         * Port number for content switching virtual server.
         * Minimum value = 1
         * Range C(1) - C(65535)
         * * in CLI is represented as 65535 in NITRO API
         */
        port?: number | string;
        /**
         * Idle time, in seconds, after which the client connection is terminated. The default values are:
         * Minimum value = C(0)
         * Maximum value = C(31536000)
         */
        clttimeout?: number;
        /**
         * FQDN of the authentication virtual server. The service type of the virtual server should be either C(HTTP) or C(SSL).
         * Minimum length = 3
         * Maximum length = 252
         */
        authenticationhost?: string;
        /**
         * Protocol used by the virtual server.
         */
        servicetype?:
          | "HTTP"
          | "SSL"
          | "TCP"
          | "FTP"
          | "RTSP"
          | "SSL_TCP"
          | "UDP"
          | "DNS"
          | "SIP_UDP"
          | "SIP_TCP"
          | "SIP_SSL"
          | "ANY"
          | "RADIUS"
          | "RDP"
          | "MYSQL"
          | "MSSQL"
          | "DIAMETER"
          | "SSL_DIAMETER"
          | "DNS_TCP"
          | "ORACLE"
          | "SMPP";
        ssl_certkey?: string;
        /**
         * The server capabilities returned by the mysql vserver.
         */
        mysqlservercapabilities?: number;
        /**
         * The server version string returned by the mysql vserver.
         * Minimum length = 1
         * Maximum length = 31
         */
        mysqlserverversion?: string;
        /**
         * The character set returned by the mysql vserver.
         */
        mysqlcharacterset?: number;
        /**
         * Enable HTTP 401-response based authentication.
         */
        authn401?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of virtual server IP and port header, for use with the VServer IP Port Insertion parameter.
         * Minimum length = 1
         */
        vipheader?: string;
        /**
         * Name of the load balancing virtual server, of type C(PUSH) or C(SSL_PUSH), to which the server pushes updates received on the client-facing load balancing virtual server.
         * Minimum length = 1
         */
        pushvserver?: string;
        nsip: string;
        state?: "present" | "absent";
        /**
         * Name of authentication virtual server that authenticates the incoming user requests to this content switching virtual server. .
         * Minimum length = 1
         * Maximum length = 252
         */
        authnvsname?: string;
        nitro_user: string;
        /**
         * The name of the network profile.
         * Minimum length = 1
         * Maximum length = 127
         */
        netprofile?: string;
        /**
         * Allow multiple Web 2.0 connections from the same client to connect to the virtual server and expect updates.
         */
        pushmulticlients?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.
         * Minimum value = 0
         * Maximum value = 4094
         */
        td?: number;
        nitro_timeout?: number;
        /**
         * A host route is injected according to the setting on the virtual servers
         * * If set to C(PASSIVE) on all the virtual servers that share the IP address, the appliance always injects the hostroute.
         * * If set to C(ACTIVE) on all the virtual servers that share the IP address, the appliance injects even if one virtual server is UP.
         * * If set to C(ACTIVE) on some virtual servers and C(PASSIVE) on the others, the appliance, injects even if one virtual server set to C(ACTIVE) is UP.
         */
        rhistate?: "PASSIVE" | "ACTIVE";
        /**
         * Enable network address translation (NAT) for real-time streaming protocol (RTSP) connections.
         */
        rtspnat?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the authentication profile to be used when authentication is turned on.
         */
        authnprofile?: string;
        /**
         * Maintain source-IP based persistence on primary and backup virtual servers.
         */
        sopersistence?: "enabled" | "disabled";
        /**
         * Enable logging appflow flow information.
         */
        appflowlog?: "enabled" | "disabled";
        /**
         * Action to be performed if spillover is to take effect, but no backup chain to spillover is usable or exists.
         */
        sobackupaction?: "DROP" | "ACCEPT" | "REDIRECT";
        /**
         * Authenticate users who request a connection to the content switching virtual server.
         */
        authentication?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the DB profile.
         * Minimum length = 1
         * Maximum length = 127
         */
        dbprofilename?: string;
        /**
         * Use this option to specify whether a virtual server, used for load balancing or content switching, routes requests to the cache redirection virtual server before sending it to the configured servers.
         */
        cacheable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Depending on the spillover method, the maximum number of connections or the maximum total bandwidth (Kbps) that a virtual server can handle before spillover occurs.
         * Minimum value = C(1)
         * Maximum value = C(4294967287)
         */
        sothreshold?: number;
        /**
         * Use L2 Parameters to identify a connection.
         */
        l2conn?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        policybindings?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        dnsrecordtype?: "A" | "AAAA" | "CNAME" | "NAPTR";
        /**
         * IP address of the content switching virtual server.
         * Minimum length = 1
         */
        ipv46?: string;
        /**
         * Name for the content switching virtual server. Must begin with an ASCII alphanumeric or underscore C(_) character, and must contain only ASCII alphanumeric, underscore C(_), hash C(#), period C(.), space, colon C(:), at sign C(@), equal sign C(=), and hyphen C(-) characters.
         * Cannot be changed after the CS virtual server is created.
         * Minimum length = 1
         */
        name?: string;
        /**
         * IP address pattern, in dotted decimal notation, for identifying packets to be accepted by the virtual server. The IP Mask parameter specifies which part of the destination IP address is matched against the pattern. Mutually exclusive with the IP Address parameter.
         * For example, if the IP pattern assigned to the virtual server is C(198.51.100.0) and the IP mask is C(255.255.240.0) (a forward mask), the first 20 bits in the destination IP addresses are matched with the first 20 bits in the pattern. The virtual server accepts requests with IP addresses that range from 198.51.96.1 to 198.51.111.254. You can also use a pattern such as C(0.0.2.2) and a mask such as C(0.0.255.255) (a reverse mask).
         * If a destination IP address matches more than one IP pattern, the pattern with the longest match is selected, and the associated virtual server processes the request. For example, if the virtual servers, C(vs1) and C(vs2), have the same IP pattern, C(0.0.100.128), but different IP masks of C(0.0.255.255) and C(0.0.224.255), a destination IP address of 198.51.100.128 has the longest match with the IP pattern of C(vs1). If a destination IP address matches two or more virtual servers to the same extent, the request is processed by the virtual server whose port number matches the port number in the request.
         */
        ippattern?: string;
        /**
         * Continue forwarding the traffic to backup virtual server even after the primary server comes UP from the DOWN state.
         */
        disableprimaryondown?: "enabled" | "disabled";
        /**
         * Name of the TCP profile containing TCP configuration settings for the virtual server.
         * Minimum length = 1
         * Maximum length = 127
         */
        tcpprofilename?: string;
        /**
         * Flush all active transactions associated with a virtual server whose state transitions from UP to DOWN. Do not enable this option for applications that must complete their transactions.
         */
        downstateflush?: "enabled" | "disabled";
        /**
         * Expression for extracting the label from the response received from server. This string can be either an existing rule name or an inline expression. The service type of the virtual server should be either C(HTTP) or C(SSL).
         */
        pushlabel?: string;
        /**
         * Time-out value, in minutes, for spillover persistence.
         * Minimum value = C(2)
         * Maximum value = C(1440)
         */
        sopersistencetimeout?: number;
        /**
         * Consider case in URLs (for policies that use URLs instead of RULES). For example, with the C(on) setting, the URLs /a/1.html and /A/1.HTML are treated differently and can have different targets (set by content switching policies). With the C(off) setting, /a/1.html and /A/1.HTML are switched to the same target.
         */
        casesensitive?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Number of consecutive IP addresses, starting with the address specified by the IP Address parameter, to include in a range of addresses assigned to this virtual server.
         * Minimum value = C(1)
         * Maximum value = C(254)
         */
        range?: number;
        /**
         * Type of spillover used to divert traffic to the backup virtual server when the primary virtual server reaches the spillover threshold. Connection spillover is based on the number of connections. Bandwidth spillover is based on the total Kbps of incoming and outgoing traffic.
         */
        somethod?: "CONNECTION" | "DYNAMICCONNECTION" | "BANDWIDTH" | "HEALTH" | "NONE";
        /**
         * Process traffic with the push virtual server that is bound to this content switching virtual server (specified by the Push VServer parameter). The service type of the push virtual server should be either C(HTTP) or C(SSL).
         */
        push?: "enabled" | "disabled";
        nitro_pass: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the DNS profile to be associated with the VServer. DNS profile properties will applied to the transactions processed by a VServer. This parameter is valid only for DNS and DNS-TCP VServers.
         * Minimum length = 1
         * Maximum length = 127
         */
        dnsprofilename?: string;
        [k: string]: any;
      };
      /**
       * Update a storage array to become the primary or secondary instance in an asynchronous mirror group
       */
      netapp_e_amg_role?: {
        /**
         * The ID of the primary storage array for the async mirror action
         */
        ssid: string;
        /**
         * Whether to force the role reversal regardless of the online-state of the primary
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The url to the SANtricity WebServices Proxy or embedded REST API.
         */
        api_url: string;
        /**
         * The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_password?: string;
        /**
         * Whether the array should be the primary or secondary array for the AMG
         */
        role: "primary" | "secondary";
        /**
         * The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_username?: string;
        /**
         * Default: True
         *
         * Should https certificates be validated?
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Whether to avoid synchronization prior to role reversal
         */
        noSync?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        name: string;
        [k: string]: any;
      };
      /**
       * Manages SVR4 packages on Solaris 10 and 11.
       * These were the native packages on Solaris <= 10 and are available as a legacy feature in Solaris 11.
       * Note that this is a very basic packaging system. It will not enforce dependencies on install or remove.
       */
      svr4pkg?: {
        /**
         * Install/Remove category instead of a single package.
         */
        category?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specifies the location to install the package from. Required when C(state=present).
         * Can be any path acceptable to the C(pkgadd) command's C(-d) option. e.g.: C(somefile.pkg), C(/dir/with/pkgs), C(http:/server/mypkgs.pkg).
         * If using a file or directory, they must already be accessible by the host. See the M(copy) module for a way to get them there.
         */
        src?: string;
        /**
         * Package name, e.g. C(SUNWcsr)
         */
        name: string;
        /**
         * Default: all
         *
         * Whether to install the package only in the current zone, or install it into all zones.
         * The installation into all zones works only if you are working with the global zone.
         */
        zone?: "current" | "all";
        /**
         * Whether to install (C(present)), or remove (C(absent)) a package.
         * If the package is to be installed, then I(src) is required.
         * The SVR4 package system doesn't provide an upgrade operation. You need to uninstall the old, then install the new package.
         */
        state: "present" | "absent";
        /**
         * HTTP[s] proxy to be used if C(src) is a URL.
         */
        proxy?: string;
        /**
         * Specifies the location of a response file to be used if package expects input on install. (added in Ansible 1.4)
         */
        response_file?: string;
        [k: string]: any;
      };
      /**
       * Manage presence of groups on a host.
       * For Windows targets, use the M(win_group) module instead.
       */
      group?: {
        /**
         * Default: present
         *
         * Whether the group should be present or not on the remote host.
         */
        state?: "present" | "absent";
        /**
         * Optional I(GID) to set for the group.
         */
        gid?: string;
        /**
         * Default: no
         *
         * If I(yes), indicates that the group created is a system group.
         */
        system?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the group to manage.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Provides an interface to manage FCoE Network resources. Can create, update, or delete.
       */
      oneview_fcoe_network?: {
        username?: string;
        image_streamer_hostname?: string;
        hostname?: string;
        config?: string;
        validate_etag?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * Indicates the desired state for the FCoE Network resource. C(present) will ensure data properties are compliant with OneView. C(absent) will remove the resource from OneView, if it exists.
         */
        state?: "present" | "absent";
        password?: string;
        /**
         * List with FCoE Network properties.
         */
        data: {
          [k: string]: any;
        };
        api_version?: number | string;
        [k: string]: any;
      };
      /**
       * Create, update and remove zones.
       */
      cs_zone?: {
        /**
         * Domain the zone is related to.
         * Zone is a public zone if not set.
         */
        domain?: string;
        api_http_method?: "get" | "post";
        /**
         * DHCP provider for the Zone.
         */
        dhcp_provider?: string;
        /**
         * uuid of the exising zone.
         */
        id?: string;
        /**
         * First DNS for IPv6 for the zone.
         */
        dns1_ipv6?: string;
        /**
         * First internal DNS for the zone.
         * If not set C(dns1) will be used on C(state=present).
         */
        internal_dns1?: string;
        /**
         * Second internal DNS for the zone.
         */
        internal_dns2?: string;
        api_url?: string;
        /**
         * Default: present
         *
         * State of the zone.
         */
        state?: "present" | "enabled" | "disabled" | "absent";
        api_key?: string;
        api_secret?: string;
        api_timeout?: number | string;
        /**
         * Second DNS for IPv6 for the zone.
         */
        dns2_ipv6?: string;
        securitygroups_enabled?: string;
        /**
         * Name of the zone.
         */
        name: string;
        /**
         * Second DNS for the zone.
         */
        dns2?: string;
        /**
         * First DNS for the zone.
         * Required if C(state=present)
         */
        dns1?: string;
        api_region?: string;
        /**
         * Guest CIDR address for the zone.
         */
        guest_cidr_address?: string;
        /**
         * Network domain for the zone.
         */
        network_domain?: string;
        local_storage_enabled?: string;
        /**
         * Default: basic
         *
         * Network type of the zone.
         */
        network_type?: "Basic" | "basic" | "Advanced" | "advanced";
        [k: string]: any;
      };
      /**
       * Manage installation and uninstallation of Ruby gems.
       */
      gem?: {
        [k: string]: any;
      };
      /**
       * This module is useful for sending emails from playbooks.
       * One may wonder why automate sending emails?  In complex environments there are from time to time processes that cannot be automated, either because you lack the authority to make it so, or because not everyone agrees to a common approach.
       * If you cannot automate a specific step, but the step is non-blocking, sending out an email to the responsible party to make him perform his part of the bargain is an elegant way to put the responsibility in someone else's lap.
       * Of course sending out a mail can be equally useful as a way to notify one or more people in a team that a specific action has been (successfully) taken.
       */
      mail?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        };
      /**
       * Get facts for a specific public IP or all public IPs within a resource group.
       */
      azure_rm_publicip_facts?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Only show results for a specific Public IP.
         */
        name?: string;
        /**
         * Limit results by resource group. Required when using name parameter.
         */
        resource_group?: string;
        /**
         * Limit results by providing a list of tags. Format tags as 'key' or 'key:value'.
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        ad_user?: string;
        cloud_environment?: string;
        secret?: string;
        client_id?: string;
        subscription_id?: string;
        password?: string;
        tenant?: string;
        [k: string]: any;
      };
      /**
       * Retrieve facts about one or more oVirt/RHV datacenters.
       */
      ovirt_datacenter_facts?: {
        /**
         * Search term which is accepted by oVirt/RHV search backend.
         * For example to search datacenter I(X) use following pattern: I(name=X)
         */
        pattern?: string;
        [k: string]: any;
      };
      /**
       * Send notifications via pushover, to subscriber list of devices, and email addresses. Requires pushover app on devices.
       */
      pushover?: {
        /**
         * What message you wish to send.
         */
        msg: string;
        /**
         * Pushover issued authentication key for your user.
         */
        user_key: string;
        /**
         * Pushover issued token identifying your pushover app.
         */
        app_token: string;
        /**
         * Message priority (see U(https://pushover.net) for details.)
         */
        pri?: "-2" | "-1" | "0" | "1" | "2";
        [k: string]: any;
      };
      /**
       * Set / reset link properties on Solaris/illumos systems.
       */
      dladm_linkprop?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Get facts for a specific DNS zone or all DNS zones within a resource group.
       */
      azure_rm_dnszone_facts?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Only show results for a specific zone.
         */
        name?: string;
        /**
         * Limit results by resource group. Required when filtering by name.
         */
        resource_group?: string;
        /**
         * Limit results by providing a list of tags. Format tags as 'key' or 'key:value'.
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        ad_user?: string;
        append_tags?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        cloud_environment?: string;
        secret?: string;
        client_id?: string;
        subscription_id?: string;
        password?: string;
        tenant?: string;
        [k: string]: any;
      };
      /**
       * Add and remove secondary IPs to and from a NIC of an instance.
       */
      cs_instance_nic_secondaryip?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Execute vlan-create or vlan-delete command.
       * VLANs are used to isolate network traffic at Layer 2.The VLAN identifiers 0 and 4095 are reserved and cannot be used per the IEEE 802.1Q standard. The range of configurable VLAN identifiers is 2 through 4092.
       */
      pn_vlan?: {
        /**
         * Specify a scope for the VLAN.
         * Required for vlan-create.
         */
        pn_scope?: "fabric" | "local";
        /**
         * Provide login password if user is not root.
         */
        pn_clipassword?: string;
        /**
         * Provide login username if user is not root.
         */
        pn_cliusername?: string;
        /**
         * Specify a VLAN identifier for the VLAN. This is a value between 2 and 4092.
         */
        pn_vlanid: number | string;
        /**
         * State the action to perform. Use 'present' to create vlan and 'absent' to delete vlan.
         */
        state: "present" | "absent";
        /**
         * Specifies the switch network data port number, list of ports, or range of ports. Port numbers must ne in the range of 1 to 64.
         */
        pn_ports?: string;
        /**
         * Specifies the ports that should have untagged packets mapped to the VLAN. Untagged packets are packets that do not contain IEEE 802.1Q VLAN tags.
         */
        pn_untagged_ports?: string;
        /**
         * Target switch(es) to run the cli on.
         */
        pn_cliswitch?: string;
        /**
         * Specify if you want to collect statistics for a VLAN. Statistic collection is enabled by default.
         */
        pn_stats?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify a description for the VLAN.
         */
        pn_description?: string;
        [k: string]: any;
      };
      /**
       * Create, update or delete a subnet within a given virtual network. Allows setting and updating the address prefix CIDR, which must be valid within the context of the virtual network. Use the azure_rm_networkinterface module to associate interfaces with the subnet and assign specific IP addresses.
       */
      azure_rm_subnet?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Execute vlag-create/vlag-delete/vlag-modify command.
       * A virtual link aggregation group (VLAG) allows links that are physically connected to two different Pluribus Networks devices to appear as a single trunk to a third device. The third device can be a switch, server, or any Ethernet device. A VLAG can provide Layer 2 multipathing, which allows you to create redundancy by increasing bandwidth, enabling multiple parallel paths between nodes and loadbalancing traffic where alternative paths exist.
       */
      pn_vlag?: {
        /**
         * The C(pn_name) takes a valid name for vlag configuration.
         */
        pn_name: string;
        /**
         * Specify the LACP fallback mode as bundles or individual.
         */
        pn_lacp_fallback?: "individual" | "bundled";
        /**
         * Specify the LACP fallback timeout in seconds. The range is between 30 and 60 seconds with a default value of 50 seconds.
         */
        pn_lacp_fallback_timeout?: string;
        /**
         * Provide login password if user is not root.
         */
        pn_clipassword?: string;
        /**
         * Specify the LACP timeout as slow(30 seconds) or fast(4 seconds).
         */
        pn_lacp_timeout?: "slow" | "fast";
        /**
         * State the action to perform. Use 'present' to create vlag, 'absent' to delete vlag and 'update' to modify vlag.
         */
        state: "present" | "absent" | "update";
        /**
         * Provide login username if user is not root.
         */
        pn_cliusername?: string;
        /**
         * Specify the LACP mode.
         */
        pn_lacp_mode?: "off" | "passive" | "active";
        /**
         * Specify the failover action as move or ignore.
         */
        pn_failover_action?: "move" | "ignore";
        /**
         * Specify the peer VLAG port.
         * Required for vlag-create.
         */
        pn_peer_port?: string;
        /**
         * Specify the fabric-name of the peer switch.
         */
        pn_peer_switch?: string;
        /**
         * Specify the local VLAG port.
         * Required for vlag-create.
         */
        pn_port?: string;
        /**
         * Target switch(es) to run this command on.
         */
        pn_cliswitch?: string;
        /**
         * Specify the mode for the VLAG. Active-standby indicates one side is active and the other side is in standby mode. Active-active indicates that both sides of the vlag are up by default.
         */
        pn_mode?: "active-active" | "active-standby";
        [k: string]: any;
      };
      /**
       * The M(hall) module connects to the U(https://hall.com) messaging API and allows you to deliver notication messages to rooms.
       */
      hall?: {
        /**
         * The message you wish to deliver as a notifcation
         */
        msg: string;
        /**
         * The full URL to the image you wish to use for the Icon of the message. Defaults to U(http://cdn2.hubspot.net/hub/330046/file-769078210-png/Official_Logos/ansible_logo_black_square_small.png?t=1421076128627)
         */
        picture?: string;
        /**
         * Room token provided to you by setting up the Ansible room integation on U(https://hall.com)
         */
        room_token: string;
        /**
         * The title of the message
         */
        title: string;
        [k: string]: any;
      };
      name: string;
      /**
       * This module removes, or creates DHCP option sets, and can associate them to a VPC. Optionally, a new DHCP Options set can be created that converges a VPC's existing DHCP option set with values provided. When dhcp_options_id is provided, the module will 1. remove (with state='absent') 2. ensure tags are applied (if state='present' and tags are provided 3. attach it to a VPC (if state='present' and a vpc_id is provided. If any of the optional values are missing, they will either be treated as a no-op (i.e., inherit what already exists for the VPC) To remove existing options while inheriting, supply an empty value (e.g. set ntp_servers to [] if you want to remove them from the VPC's options) Most of the options should be self-explanatory.
       */
      ec2_vpc_dhcp_options?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * An Ansible module to Create, Delete, Start and Stop servers in CenturyLink Cloud.
       */
      clc_server?: {
        /**
         * Default: None
         *
         * The anti-affinity policy to assign to the server. This is mutually exclusive with 'anti_affinity_policy_id'.
         */
        anti_affinity_policy_name?: string;
        /**
         * Default: standard
         *
         * The type of storage to attach to the server.
         */
        storage_type?: "standard" | "hyperscale";
        /**
         * Default: None
         *
         * The anti-affinity policy to assign to the server. This is mutually exclusive with 'anti_affinity_policy_name'.
         */
        anti_affinity_policy_id?: string;
        /**
         * Default: None
         *
         * The time to live for the server in seconds.  The server will be deleted when this time expires.
         */
        ttl?: string;
        /**
         * Default: None
         *
         * Required when exact_count is specified.  The Server Group use to determine how many severs to deploy.
         */
        count_group?: string;
        /**
         * Default: None
         *
         * Secondary DNS used by the server.
         */
        secondary_dns?: string;
        /**
         * The list of custom fields to set on the server.
         */
        custom_fields?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * Password for the administrator / root user
         */
        password?: string;
        /**
         * The list of blue print packages to run on the server after its created.
         */
        packages?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: Default Group
         *
         * The Server Group to create servers under.
         */
        group?: string;
        /**
         * Default: None
         *
         * Run in idempotent mode.  Will insure that this exact number of servers are running in the provided group, creating and deleting them to reach that count.  Requires count_group to be set.
         */
        exact_count?: number | string;
        /**
         * Default: present
         *
         * The state to insure that the provided resources are in.
         */
        state?: "present" | "absent" | "started" | "stopped";
        /**
         * Default: None
         *
         * The autoscale policy to assign to the server.
         */
        cpu_autoscale_policy_id?: string;
        /**
         * Default: None
         *
         * The template to use for server creation.  Will search for a template if a partial string is provided. This is required when state is 'present'
         */
        template?: string;
        /**
         * Default: 1
         *
         * Memory in GB.
         */
        memory?: string;
        /**
         * Required for started, stopped, and absent states. A list of server Ids to insure are started, stopped, or absent.
         */
        server_ids?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: standard
         *
         * The type of server to create.
         */
        type?: "standard" | "hyperscale" | "bareMetal";
        /**
         * Whether to create the server as 'Managed' or not.
         */
        managed_os?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * The Datacenter to create servers in.
         */
        location?: string;
        /**
         * The list of additional disks for the server
         */
        additional_disks?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * The description to set for the server.
         */
        description?: string;
        /**
         * Whether to add a public ip to the server
         */
        add_public_ip?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * Only required for bare metal servers. Specifies the identifier for the specific configuration type of bare metal server to deploy.
         */
        configuration_id?: string;
        /**
         * Default: None
         *
         * The alert policy to assign to the server. This is mutually exclusive with 'alert_policy_id'.
         */
        alert_policy_name?: string;
        /**
         * Default: None
         *
         * The alert policy to assign to the server. This is mutually exclusive with 'alert_policy_name'.
         */
        alert_policy_id?: string;
        /**
         * A list of ports to allow on the firewall to the servers public ip, if add_public_ip is set to True.
         */
        public_ip_ports?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * The IP Address for the server. One is assigned if not provided.
         */
        ip_address?: string;
        /**
         * Default: TCP
         *
         * The protocol to use for the public ip if add_public_ip is set to True.
         */
        public_ip_protocol?: "TCP" | "UDP" | "ICMP";
        /**
         * Default: True
         *
         * Whether to wait for the provisioning tasks to finish before returning.
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 1
         *
         * The number of servers to build (mutually exclusive with exact_count)
         */
        count?: number | string;
        /**
         * Default: None
         *
         * A 1 to 6 character identifier to use for the server. This is required when state is 'present'
         */
        name?: string;
        /**
         * Default: None
         *
         * The network UUID on which to create servers.
         */
        network_id?: string;
        /**
         * Default: None
         *
         * Primary DNS used by the server.
         */
        primary_dns?: string;
        /**
         * Default: None
         *
         * The account alias to provision the servers under.
         */
        alias?: string;
        /**
         * Default: None
         *
         * The password for the source server if a clone is specified.
         */
        source_server_password?: string;
        /**
         * Default: None
         *
         * Only required for bare metal servers. Specifies the OS to provision with the bare metal server.
         */
        os_type?: "redHat6_64Bit" | "centOS6_64Bit" | "windows2012R2Standard_64Bit" | "ubuntu14_64Bit";
        /**
         * Default: 1
         *
         * How many CPUs to provision on the server
         */
        cpu?: string;
        [k: string]: any;
      };
      /**
       * C(synchronize) is a wrapper around rsync to make common tasks in your playbooks quick and easy. It is run and originates on the local host where Ansible is being run. Of course, you could just use the C(command) action to call rsync yourself, but you also have to add a fair number of boilerplate options and host facts. C(synchronize) is not intended to provide access to the full power of rsync, but does make the most common invocations easier to implement. You `still` may need to call rsync directly via C(command) or C(shell) depending on your use case.
       */
      synchronize?: {
        /**
         * Tells rsync to keep the partial file which should make a subsequent transfer of the rest of the file much faster.
         */
        partial?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: the value of the archive option
         *
         * Copy symlinks as symlinks.
         */
        links?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: no
         *
         * Copy symlinks as the item that they point to (the referent) is copied, rather than the symlink.
         */
        copy_links?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: the value of the archive option
         *
         * Preserve permissions.
         */
        perms?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: the value of the archive option
         *
         * Preserve owner (super user only)
         */
        owner?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: yes
         *
         * Mirrors the rsync archive flag, enables recursive, links, perms, times, owner, group flags and -D.
         */
        archive?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: Value of ansible_ssh_port for this host, remote_port config setting, or the value from ssh client configuration if none of those are set
         *
         * Port number for ssh on the destination host. Prior to ansible 2.0, the ansible_ssh_port inventory var took precedence over this value.
         */
        dest_port?: number | string;
        _local_rsync_path?: string;
        /**
         * Default: the value of the archive option
         *
         * Preserve group
         */
        group?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: no
         *
         * Skip creating new files on receiver.
         */
        existing_only?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify the rsync command to run on the remote host. See C(--rsync-path) on the rsync man page.
         */
        rsync_path?: string;
        /**
         * Path on the destination host that will be synchronized from the source; The path can be absolute or relative.
         */
        dest: string;
        /**
         * Verify destination host key.
         */
        verify_host?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: no
         *
         * Transfer directories without recursing
         */
        dirs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        private_key?: string;
        _substitute_controller?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: yes
         *
         * Compress file data during the transfer. In most cases, leave this enabled unless it causes problems.
         */
        compress?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify a --timeout for the rsync command in seconds.
         */
        rsync_timeout?: number | string;
        /**
         * Specify additional rsync options by passing in an array.
         */
        rsync_opts?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: True
         *
         * put user@ for the remote paths. If you have a custom ssh config to define the remote user for a host that does not match the inventory user, you should set this parameter to "no".
         */
        set_remote_user?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: the value of the archive option
         *
         * Recurse into directories.
         */
        recursive?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Path on the source host that will be synchronized to the destination; The path can be absolute or relative.
         */
        src: string;
        /**
         * Default: no
         *
         * Skip based on checksum, rather than mod-time & size; Note that that "archive" option is still enabled by default - the "checksum" option will not disable it.
         */
        checksum?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: the value of the archive option
         *
         * Preserve modification times
         */
        times?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: push
         *
         * Specify the direction of the synchronization. In push mode the localhost or delegate is the source; In pull mode the remote host in context is the source.
         */
        mode?: "push" | "pull";
        ssh_args?: string;
        /**
         * Default: no
         *
         * Delete files in C(dest) that don't exist (after transfer, not before) in the C(src) path. This option requires C(recursive=yes).
         */
        delete?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage route tables for AWS virtual private clouds
       */
      ec2_vpc_route_table?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module is used to configure Tenant object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_tenant?: {
        username?: string;
        /**
         * User defined description for the object.
         */
        description?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Creator of this tenant.
         */
        created_by?: string;
        /**
         * Name of the object.
         */
        name: string;
        controller?: string;
        /**
         * Tenantconfiguration settings for tenant.
         */
        config_settings?: {
          [k: string]: any;
        };
        tenant?: string;
        password?: string;
        /**
         * Boolean flag to set local.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        local?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        [k: string]: any;
      };
      /**
       * Runs the I(facter) discovery program (U(https://github.com/puppetlabs/facter)) on the remote system, returning JSON data that can be useful for inventory purposes.
       */
      facter?: {
        [k: string]: any;
      };
      /**
       * Adds, removes or changes procedural languages with a PostgreSQL database.
       * This module allows you to add a language, remote a language or change the trust relationship with a PostgreSQL database. The module can be used on the machine where executed or on a remote host.
       * When removing a language from a database, it is possible that dependencies prevent the database from being removed. In that case, you can specify casade to automatically drop objects that depend on the language (such as functions in the language). In case the language can't be deleted because it is required by the database system, you can specify fail_on_drop=no to ignore the error.
       * Be carefull when marking a language as trusted since this could be a potential security breach. Untrusted languages allow only users with the PostgreSQL superuser privilege to use this language to create new functions.
       */
      postgresql_lang?: {
        /**
         * name of the procedural language to add, remove or change
         */
        lang: string;
        /**
         * marks the language as trusted, even if it's marked as untrusted in pg_pltemplate.
         * use with care!
         */
        force_trust?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: postgres
         *
         * User used to authenticate with PostgreSQL
         */
        login_user?: string;
        /**
         * Default: localhost
         *
         * Host running PostgreSQL where you want to execute the actions.
         */
        login_host?: string;
        /**
         * name of database where the language will be added, removed or changed
         */
        db: string;
        /**
         * when dropping a language, also delete object that depend on this language.
         * only used when C(state=absent).
         */
        cascade?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * The state of the language for the selected database
         */
        state?: "present" | "absent";
        /**
         * Password used to authenticate with PostgreSQL (must match C(login_user))
         */
        login_password?: string;
        /**
         * make this language trusted for the selected db
         */
        trust?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: yes
         *
         * if C(yes), fail when removing a language. Otherwise just log and continue
         * in some cases, it is not possible to remove a language (used by the db-system). When         dependencies block the removal, consider using C(cascade).
         */
        fail_on_drop?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 5432
         *
         * Database port to connect to.
         */
        port?: string;
        [k: string]: any;
      };
      /**
       * Add and remove load balancer rule members.
       */
      cs_loadbalancer_rule_member?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Create, Update or Destroy a Forwarding_Rule. See U(https://cloud.google.com/compute/docs/load-balancing/http/target-proxies) for an overview. More details on the Global Forwarding_Rule API can be found at U(https://cloud.google.com/compute/docs/reference/latest/globalForwardingRules) More details on the Forwarding Rules API can be found at U(https://cloud.google.com/compute/docs/reference/latest/forwardingRules)
       */
      gcp_forwarding_rule?: {
        load_balancing_scheme?: "EXTERNAL";
        /**
         * For global forwarding rules, TCP, UDP, ESP, AH, SCTP or ICMP. Default is TCP.
         */
        protocol?: "TCP";
        /**
         * Target resource for forwarding rule. For global proxy, this is a Global TargetProxy resource. Required for external load balancing (including Global load balancing)
         */
        target?: string;
        service_account_email?: string;
        /**
         * The region for this forwarding rule. Currently, only 'global' is supported.
         */
        region: string;
        service_account_permissions?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        pem_file?: string;
        /**
         * Name of the Forwarding_Rule.
         */
        forwarding_rule_name: string;
        /**
         * For global forwarding rules, must be set to 80 or 8080 for TargetHttpProxy, and 443 for TargetHttpsProxy or TargetSslProxy.
         */
        port_range?: string;
        /**
         * The state of the Forwarding Rule. 'present' or 'absent'
         */
        state: "present" | "absent";
        credentials_file?: string;
        project_id?: string;
        /**
         * IPv4 or named IP address. Must be of the same scope (regional, global). Reserved addresses can (and probably should) be used for global forwarding rules. You may reserve IPs from the console or via the gce_eip module.
         */
        address?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of node system attributes on Arista EOS devices.  It provides an option to configure host system parameters or remove those parameters from the device active configuration.
       */
      eos_system?: {
        [k: string]: any;
      };
      /**
       * Manage slb virtual server objects on A10 Networks devices via aXAPI
       */
      a10_virtual_server?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * This module is used to configure Role object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_role?: {
        username?: string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * List of permission.
         */
        privileges?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        controller?: string;
        tenant?: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Name of the object.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Manage an AWS VPC Internet gateway
       */
      ec2_vpc_igw?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage OVH (French European hosting provider) LoadBalancing IP backends
       */
      ovh_ip_loadbalancing_backend?: {
        /**
         * The endpoint to use ( for instance ovh-eu)
         */
        endpoint: string;
        /**
         * Name of the LoadBalancing internal name (ip-X.X.X.X)
         */
        name: string;
        /**
         * Default: 8
         *
         * Determines the weight for this backend
         */
        weight?: number | string;
        /**
         * Default: none
         *
         * Determines the type of probe to use for this backend
         */
        probe?: "none" | "http" | "icmp" | "oco";
        /**
         * The applicationKey to use
         */
        application_key: string;
        /**
         * Default: present
         *
         * Determines wether the backend is to be created/modified or deleted
         */
        state?: "present" | "absent";
        /**
         * The application secret to use
         */
        application_secret: string;
        /**
         * Default: 120
         *
         * The timeout in seconds used to wait for a task to be completed. Default is 120 seconds.
         */
        timeout?: number | string;
        /**
         * The consumer key to use
         */
        consumer_key: string;
        /**
         * The IP address of the backend to update / modify / delete
         */
        backend: string;
        [k: string]: any;
      };
      /**
       * Allows element-based ordering, addition, and removal of Windows path environment variables.
       */
      win_path?: {
        /**
         * Default: machine
         *
         * The level at which the environment variable specified by C(name) should be managed (either for the current user or global machine scope).
         */
        scope?: string;
        /**
         * Whether the path elements specified in C(elements) should be present or absent.
         */
        state?: string;
        /**
         * A single path element, or a list of path elements (ie, directories) to add or remove.
         * When multiple elements are included in the list (and C(state) is C(present)), the elements are guaranteed to appear in the same relative order in the resultant path value.
         * Variable expansions (eg, C(%VARNAME%)) are allowed, and are stored unexpanded in the target path element.
         * Any existing path elements not mentioned in C(elements) are always preserved in their current order.
         * New path elements are appended to the path, and existing path elements may be moved closer to the end to satisfy the requested ordering.
         * Paths are compared in a case-insensitive fashion, and trailing backslashes are ignored for comparison purposes. However, note that trailing backslashes in YAML require quotes.
         */
        elements?: string;
        /**
         * Default: PATH
         *
         * Target path environment variable name
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of static IP routes on Cisco IOS network devices.
       */
      ios_static_route?: {
        username?: string;
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        /**
         * Default: present
         *
         * State of the static route configuration.
         */
        state?: "present" | "absent";
        auth_pass?: string;
        /**
         * Network prefix mask of the static route.
         */
        mask?: string;
        host?: string;
        /**
         * Default: 1
         *
         * Admin distance of the static route.
         */
        admin_distance?: number | string;
        /**
         * Network prefix of the static route.
         */
        prefix?: string;
        /**
         * Next hop IP of the static route.
         */
        next_hop?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of static route definitions.
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Collects a base set of device facts from a remote device that is running OS9.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module always collects  a base set of facts from the device and can enable or disable collection of additional facts.
       */
      dellos9_facts?: {
        username?: string;
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        auth_pass?: string;
        host?: string;
        /**
         * Default: !config
         *
         * When supplied, this argument restricts the facts collected to a given subset.  Possible values for this argument include all, hardware, config, and interfaces.  You can specify a list of values to include a larger subset.  You can also use values with an initial M(!) to specify that a specific subset should not be collected.
         */
        gather_subset?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Manages SNMP user configurations on CloudEngine switches.
       */
      ce_snmp_user?: {
        username?: string;
        /**
         * The encryption password. Password length 8-255 characters.
         */
        priv_key?: string;
        /**
         * Unique name to identify the local user.
         */
        aaa_local_user?: string;
        /**
         * The authentication password. Password length, 8-255 characters.
         */
        auth_key?: string;
        /**
         * Name of the group where user belongs to.
         */
        user_group?: string;
        /**
         * Unique name to identify the USM user.
         */
        usm_user_name?: string;
        state?: "present" | "absent";
        /**
         * Access control list number.
         */
        acl_number?: string;
        /**
         * Authentication protocol.
         */
        auth_protocol?: "noAuth" | "md5" | "sha";
        /**
         * Remote engine id of the USM user.
         */
        remote_engine_id?: string;
        host?: string;
        /**
         * Encryption protocol.
         */
        priv_protocol?: "noPriv" | "des56" | "3des168" | "aes128" | "aes192" | "aes256";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Create and manage AWS Datapipelines. Creation is not idempotent in AWS, so the uniqueId is created by hashing the options (minus objects) given to the datapipeline.
       * The pipeline definition must be in the format given here U(http://docs.aws.amazon.com/datapipeline/latest/APIReference/API_PutPipelineDefinition.html#API_PutPipelineDefinition_RequestSyntax).
       * Also operations will wait for a configurable amount of time to ensure the pipeline is in the requested state.
       */
      data_pipeline?: {
        /**
         * The name of the Datapipeline to create/modify/delete.
         */
        name?: string;
        /**
         * A list of parameter objects (dicts) in the pipeline definition.
         */
        parameters?: string;
        /**
         * A dict of key:value pair(s) to add to the pipeline.
         */
        tags?: string;
        /**
         * Default: present
         *
         * The requested state of the pipeline.
         */
        state?: string;
        /**
         * A list of pipeline object definitions, each of which is a dict that takes the keys C(id), C(name) and C(fields).
         */
        objects?: string;
        /**
         * A list of parameter values (dicts) in the pipeline definition. Each dict takes the keys C(id) and C(stringValue) both of which are strings.
         */
        values?: string;
        /**
         * Default: 300
         *
         * Time in seconds to wait for the pipeline to transition to the requested state, fail otherwise.
         */
        timeout?: string;
        /**
         * An optional description for the pipeline being created.
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * Create/delete static/dynamic IP addresses on network interfaces on Solaris/illumos systems.
       * Up/down static/dynamic IP addresses on network interfaces on Solaris/illumos systems.
       * Manage IPv6 link-local addresses on network interfaces on Solaris/illumos systems.
       */
      ipadm_addr?: {
        [k: string]: any;
      };
      /**
       * Manages VTP domain configuration.
       */
      nxos_vtp_domain?: {
        username?: string;
        /**
         * VTP domain name.
         */
        domain: string;
        ssh_keyfile?: string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Manage I(git) checkouts of repositories to deploy files or software.
       */
      git?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * OS10 configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with OS10 configuration sections in a deterministic way.
       */
      dellos10_config?: {
        [k: string]: any;
      };
      /**
       * The Deploy Helper manages some of the steps common in deploying software. It creates a folder structure, manages a symlink for the current release and cleans up old releases.
       * Running it with the C(state=query) or C(state=present) will return the C(deploy_helper) fact. C(project_path), whatever you set in the path parameter, C(current_path), the path to the symlink that points to the active release, C(releases_path), the path to the folder to keep releases in, C(shared_path), the path to the folder to keep shared resources in, C(unfinished_filename), the file to check for to recognize unfinished builds, C(previous_release), the release the 'current' symlink is pointing to, C(previous_release_path), the full path to the 'current' symlink target, C(new_release), either the 'release' parameter or a generated timestamp, C(new_release_path), the path to the new release folder (not created by the module).
       */
      deploy_helper?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manipulate Rackspace Cloud Autoscale Scaling Policy
       */
      rax_scaling_policy?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Gathering facts from the API of an instance.
       */
      cs_instance_facts?: {
        /**
         * Account the instance is related to.
         */
        account?: string;
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        /**
         * Domain the instance is related to.
         */
        domain?: string;
        api_region?: string;
        /**
         * Project the instance is related to.
         */
        project?: string;
        api_key?: string;
        /**
         * Name or display name of the instance.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Create and remove a bigmon inline service chain.
       */
      bigmon_chain?: {
        /**
         * Bigmon access token. If this isn't set, the environment variable C(BIGSWITCH_ACCESS_TOKEN) is used.
         */
        access_token?: string;
        /**
         * Default: present
         *
         * Whether the service chain should be present or absent.
         */
        state?: "present" | "absent";
        /**
         * Default: True
         *
         * If C(false), SSL certificates will not be validated. This should only be used on personally controlled devices using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The controller IP address.
         */
        controller: string;
        /**
         * The name of the chain.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Tap external Homebrew repositories.
       */
      homebrew_tap?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Add or remove licenses on NetApp ONTAP.
       */
      na_cdot_license?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Installs Python libraries, optionally in a I(virtualenv)
       */
      easy_install?: {
        /**
         * an optional I(virtualenv) directory path to install into. If the I(virtualenv) does not exist, it is created automatically
         */
        virtualenv?: string;
        /**
         * The explicit executable or a pathname to the executable to be used to run easy_install for a specific version of Python installed in the system. For example C(easy_install-3.3), if there are both Python 2.7 and 3.3 installations in the system and you want to run easy_install for the Python 3.3 installation.
         */
        executable?: string;
        /**
         * A Python library name
         */
        name: string;
        /**
         * Default: virtualenv
         *
         * The command to create the virtual environment with. For example C(pyvenv), C(virtualenv), C(virtualenv2).
         */
        virtualenv_command?: string;
        /**
         * Default: no
         *
         * Whether the virtual environment will inherit packages from the global site-packages directory.  Note that if this setting is changed on an already existing virtual environment it will not have any effect, the environment must be deleted and newly created.
         */
        virtualenv_site_packages?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * The desired state of the library. C(latest) ensures that the latest version is installed.
         */
        state?: "present" | "latest";
        [k: string]: any;
      };
      /**
       * Installs, upgrade, downgrades, removes, and lists packages and groups with the I(yum) package manager.
       * This module only works on Python 2. If you require Python 3 support see the M(dnf) module.
       */
      yum?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Set owner of files or directories
       */
      win_owner?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Allows for the management of Lambda functions.
       */
      lambda?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Creates and deletes DNS Health checks in Amazons Route53 service
       * Only the port, resource_path, string_match and request_interval are considered when updating existing health-checks.
       */
      route53_health_check?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module provides declarative management of Interfaces on Cisco IOS network devices.
       */
      ios_interface?: {
        /**
         * Check the operational state of given interface C(name) for LLDP neighbor.
         * The following suboptions are available.
         */
        neighbors?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        username?: string;
        ssh_keyfile?: string;
        /**
         * Description of Interface.
         */
        description?: string;
        /**
         * Default: auto
         *
         * Interface link status
         */
        duplex?: "full" | "half" | "auto";
        auth_pass?: string;
        /**
         * Interface link status.
         */
        enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * State of the Interface configuration, C(up) means present and operationally up and C(down) means present and operationally C(down)
         */
        state?: "present" | "absent" | "up" | "down";
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Maximum size of transmit packet.
         */
        mtu?: string;
        /**
         * Receiver rate in bits per second (bps).
         */
        rx_rate?: string;
        host?: string;
        /**
         * Default: 10
         *
         * Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state argument which are I(state) with values C(up)/C(down), I(tx_rate) and I(rx_rate).
         */
        delay?: number | string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of Interfaces definitions.
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        /**
         * Interface link speed.
         */
        speed?: string;
        port?: number | string;
        /**
         * Transmit rate in bits per second (bps).
         */
        tx_rate?: string;
        /**
         * Name of the Interface.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Manage route tag policies on Cisco ACI fabrics.
       * More information from the internal APIC class I(l3ext:RouteTagPol) at U(https://developer.cisco.com/media/mim-ref/MO-l3extRouteTagPol.html).
       */
      aci_l3out_route_tag_policy?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Collects a base set of device facts from a remote device that is running VyOS.  This module prepends all of the base network fact keys with U(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.
       */
      vyos_facts?: {
        username?: string;
        ssh_keyfile?: string;
        host?: string;
        /**
         * Default: !config
         *
         * When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, default, config, and neighbors.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(M(!)) to specify that a specific subset should not be collected.
         */
        gather_subset?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Retrieve the facts about one or more of the FCoE Networks from OneView.
       */
      oneview_fcoe_network_facts?: {
        username?: string;
        image_streamer_hostname?: string;
        /**
         * FCoE Network name.
         */
        name?: string;
        hostname?: string;
        params?: {
          [k: string]: any;
        };
        password?: string;
        config?: string;
        api_version?: number | string;
        [k: string]: any;
      };
      /**
       * Allows for the management of IAM users, user API keys, groups, roles.
       */
      iam?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Get I(openstack) client config data from clouds.yaml or environment
       */
      os_client_config?: {
        /**
         * List of clouds to limit the return list to. No value means return information on all configured clouds
         */
        clouds?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        [k: string]: any;
      };
      /**
       * This will configure both login and motd banners on remote devices running Cisco IOS.  It allows playbooks to add or remote banner text from the active running configuration.
       */
      ios_banner?: {
        username?: string;
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        /**
         * The banner text that should be present in the remote device running configuration.  This argument accepts a multiline string, with no empty lines. Requires I(state=present).
         */
        text?: string;
        auth_pass?: string;
        /**
         * Default: present
         *
         * Specifies whether or not the configuration is present in the current devices active running configuration.
         */
        state?: "present" | "absent";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        /**
         * Specifies which banner that should be configured on the remote device.
         */
        banner: "login" | "motd";
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Create, update and delete Azure availability set. An availability set cannot be updated, you will have to recreate one instead. The only update operation will be for the tags.
       */
      azure_rm_availabilityset?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the availability set.
         */
        name: string;
        /**
         * Name of a resource group where the availability set exists or will be created.
         */
        resource_group: string;
        tags?: {
          [k: string]: any;
        };
        ad_user?: string;
        append_tags?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        cloud_environment?: string;
        secret?: string;
        /**
         * Default: 5
         *
         * Update domains indicate groups of virtual machines and underlying physical hardware that can be rebooted at the same time. Default is 5.
         */
        platform_update_domain_count?: number | string;
        /**
         * Default: 3
         *
         * Fault domains define the group of virtual machines that share a common power source and network switch. Should be between 1 and 3. Default is 3
         */
        platform_fault_domain_count?: number | string;
        /**
         * Default: present
         *
         * Assert the state of the availability set. Use 'present' to create or update a availability set and 'absent' to delete a availability set.
         */
        state?: "absent" | "present";
        /**
         * Default: resource_group location
         *
         * Valid azure location. Defaults to location of the resource group.
         */
        location?: string;
        client_id?: string;
        /**
         * Default: Classic
         *
         * Define if the availability set supports managed disks.
         */
        sku?: "Classic" | "Aligned";
        subscription_id?: string;
        password?: string;
        tenant?: string;
        [k: string]: any;
      };
      /**
       * Retrieve facts about the Network Sets from OneView.
       */
      oneview_network_set_facts?: {
        username?: string;
        image_streamer_hostname?: string;
        /**
         * Network Set name.
         */
        name?: string;
        hostname?: string;
        params?: {
          [k: string]: any;
        };
        password?: string;
        config?: string;
        /**
         * List with options to gather facts about Network Set. Option allowed: C(withoutEthernet). The option C(withoutEthernet) retrieves the list of network_sets excluding Ethernet networks.
         */
        options?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        api_version?: number | string;
        [k: string]: any;
      };
      /**
       * Manages MLAG configuration on HUAWEI CloudEngine switches.
       */
      ce_mlag_config?: {
        username?: string;
        /**
         * Name of the peer-link interface. The value is in the range from 0 to 511.
         */
        eth_trunk_id?: string;
        /**
         * The nickname bound to a DFS group. The value is an integer that ranges from 1 to 65471.
         */
        nickname?: string;
        provider?: {
          [k: string]: any;
        };
        /**
         * The priority of a pseudo nickname. The value is an integer that ranges from 128 to 255. The default value is 192. A larger value indicates a higher priority.
         */
        pseudo_priority?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Priority of a DFS group. The value is an integer that ranges from 1 to 254. The default value is 100.
         */
        priority_id?: string;
        /**
         * Number of the peer-link interface. The value is 1.
         */
        peer_link_id?: string;
        /**
         * Name of the VPN instance bound to the DFS group. The value is a string of 1 to 31 case-sensitive characters without spaces. If the character string is quoted by double quotation marks, the character string can contain spaces. The value _public_ is reserved and cannot be used as the VPN instance name.
         */
        vpn_instance_name?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * A pseudo nickname of a DFS group. The value is an integer that ranges from 1 to 65471.
         */
        pseudo_nickname?: string;
        timeout?: number | string;
        /**
         * Default: present
         *
         * ID of a DFS group. The value is 1.
         */
        dfs_group_id?: string;
        host?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        /**
         * IP address bound to the DFS group. The value is in dotted decimal notation.
         */
        ip_address?: string;
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Create or remove volumes (standard and thin) for NetApp E/EF-series storage arrays.
       */
      netapp_e_volume?: {
        /**
         * Default: 512
         *
         * The segment size of the new volume
         */
        segment_size_kb?: number | string;
        /**
         * Default: None (ignores existing SSD cache setting)
         *
         * Whether an existing SSD cache should be enabled on the volume (fails if no SSD cache defined)
         */
        ssd_cache_enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The ID of the array to manage (as configured on the web services proxy).
         */
        ssid: string;
        /**
         * If data assurance should be enabled for the volume
         */
        data_assurance_enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Whether the volume should be thin provisioned.  Thin volumes can only be created on disk pools (raidDiskPool).
         */
        thin_provision?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        log_path?: string;
        /**
         * The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_password?: string;
        /**
         * Default: gb
         *
         * The unit used to interpret the size parameter
         */
        size_unit?: "bytes" | "b" | "kb" | "mb" | "gb" | "tb" | "pb" | "eb" | "zb" | "yb";
        /**
         * The name of the volume to manage
         */
        name: string;
        /**
         * Whether the specified volume should exist or not.
         */
        state: "present" | "absent";
        /**
         * Required only when requested state is 'present'.  The name of the storage pool the volume should exist on.
         */
        storage_pool_name?: string;
        /**
         * Default: same as size (in size_unit)
         *
         * Maximum size that the thin volume repository volume will automatically expand to
         */
        thin_volume_max_repo_size?: number | string;
        /**
         * The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_username?: string;
        /**
         * Initial size of the thin volume repository volume (in size_unit)
         */
        thin_volume_repo_size?: number | string;
        /**
         * Required only when state = 'present'.  The size of the volume in (size_unit).
         */
        size?: number | string;
        /**
         * Default: True
         *
         * Should https certificates be validated?
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The url to the SANtricity WebServices Proxy or embedded REST API.
         */
        api_url?: string;
        [k: string]: any;
      };
      /**
       * Manages NTP options, e.g. authoritative server and logging.
       */
      nxos_ntp_options?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Sets whether NTP logging is enabled on the device.
         */
        logging?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * If C(master=true), an optional stratum can be supplied (1-15). The device default is 8.
         */
        stratum?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        host?: string;
        /**
         * Sets whether the device is an authoritative NTP server.
         */
        master?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Add or Remove key pair from nova .
       */
      nova_keypair?: {
        /**
         * Default: None
         *
         * The public key that would be uploaded to nova and injected to vm's upon creation
         */
        public_key?: string;
        /**
         * Default: None
         *
         * Name of the region
         */
        region_name?: string;
        availability_zone?: string;
        /**
         * Default: yes
         *
         * The tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone url for authentication
         */
        auth_url?: string;
        /**
         * Default: yes
         *
         * Password of login user
         */
        login_password: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Default: None
         *
         * Name that has to be given to the key pair
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Netconf is a network management protocol developed and standardized by the IETF. It is documented in RFC 6241.
       * This module allows the user to send a configuration XML file to a netconf device, and detects if there was a configuration change.
       */
      netconf_config?: {
        /**
         * the XML content to send to the device
         */
        xml: string;
        /**
         * the username to authenticate with
         */
        username: string;
        /**
         * the hostname or ip address of the netconf device
         */
        host: string;
        /**
         * Default: True
         *
         * if true, the ssh host key of the device must match a ssh key present on the host
         * if false, the ssh host key of the device is not checked
         */
        hostkey_verify?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * password of the user to authenticate with
         */
        password: string;
        /**
         * Default: 830
         *
         * the netconf port
         */
        port?: number | string;
        [k: string]: any;
      };
      /**
       * The C(copy) module copies a file from the local or remote machine to a location on the remote machine. Use the M(fetch) module to copy files from remote locations to the local box. If you need variable interpolation in copied files, use the M(template) module.
       * For Windows targets, use the M(win_copy) module instead.
       */
      copy?: {
        [k: string]: any;
      };
      /**
       * The M(pam_limits) module modify PAM limits, default in /etc/security/limits.conf. For the full documentation, see man limits.conf(5).
       */
      pam_limits?: {
        /**
         * Comment associated with the limit.
         */
        comment?: string;
        /**
         * Default: no
         *
         * If set to C(yes), the maximal value will be used or conserved. If the specified value is superior to the value in the file, file content is replaced with the new value, else content is not modified.
         */
        use_max?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A username, @groupname, wildcard, uid/gid range.
         */
        domain: string;
        /**
         * Default: /etc/security/limits.conf
         *
         * Modify the limits.conf path.
         */
        dest?: string;
        /**
         * The value of the limit.
         */
        value: string;
        /**
         * Default: no
         *
         * If set to C(yes), the minimal value will be used or conserved. If the specified value is inferior to the value in the file, file content is replaced with the new value, else content is not modified.
         */
        use_min?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The limit to be set
         */
        limit_item:
          | "core"
          | "data"
          | "fsize"
          | "memlock"
          | "nofile"
          | "rss"
          | "stack"
          | "cpu"
          | "nproc"
          | "as"
          | "maxlogins"
          | "maxsyslogins"
          | "priority"
          | "locks"
          | "sigpending"
          | "msgqueue"
          | "nice"
          | "rtprio"
          | "chroot";
        /**
         * Limit type, see C(man limits) for an explanation
         */
        limit_type: "hard" | "soft" | "-";
        /**
         * Default: no
         *
         * Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
         */
        backup?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Templates are processed by the Jinja2 templating language (U(http://jinja.pocoo.org/docs/)) - documentation on the template formatting can be found in the Template Designer Documentation (U(http://jinja.pocoo.org/docs/templates/)).
       * Six additional variables can be used in templates: C(ansible_managed) (configurable via the C(defaults) section of C(ansible.cfg)) contains a string which can be used to describe the template name, host, modification time of the template file and the owner uid, C(template_host) contains the node name of the template's machine, C(template_uid) the owner, C(template_path) the absolute path of the template, C(template_fullpath) is the absolute path of the template, and C(template_run_date) is the date that the template was rendered. Note that including a string that uses a date in the template will result in the template being marked 'changed' each time.
       */
      win_template?: {
        /**
         * Path of a Jinja2 formatted template on the local server. This can be a relative or absolute path.
         */
        src?: string;
        /**
         * Default: yes
         *
         * the default is C(yes), which will replace the remote file when contents are different than the source.  If C(no), the file will only be transferred if the destination does not exist.
         */
        force?: string;
        /**
         * Default: no
         *
         * If this is set to True the first newline after a block is removed (block, not variable tag!).
         */
        trim_blocks?: string;
        /**
         * Location to render the template to on the remote machine.
         */
        dest?: string;
        /**
         * Default: %}
         *
         * The string marking the end of a block.
         */
        block_end_string?: string;
        /**
         * Default: {{
         *
         * The string marking the beginning of a print statement.
         */
        variable_start_string?: string;
        /**
         * Default: \r\n
         *
         * Specify the newline sequence to use for templating files.
         */
        newline_sequence?: string;
        /**
         * Default: }}
         *
         * The string marking the end of a print statement.
         */
        variable_end_string?: string;
        /**
         * Default: {%
         *
         * The string marking the beginning of a block.
         */
        block_start_string?: string;
        [k: string]: any;
      };
      /**
       * Manages global, zone, account, storage and cluster configurations.
       */
      cs_configuration?: {
        /**
         * Default: ROOT
         *
         * Domain the account is related to.
         * Only considered if C(account) is used.
         */
        domain?: string;
        api_key?: string;
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        /**
         * Ensure the value for corresponding storage pool.
         */
        storage?: string;
        api_region?: string;
        /**
         * Value of the configuration.
         */
        value: string;
        /**
         * Ensure the value for corresponding cluster.
         */
        cluster?: string;
        /**
         * Ensure the value for corresponding account.
         */
        account?: string;
        /**
         * Ensure the value for corresponding zone.
         */
        zone?: string;
        /**
         * Name of the configuration.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Can create or delete scaling policies for autoscaling groups
       * Referenced autoscaling groups must already exist
       */
      ec2_scaling_policy?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Apstra AOS Logical Device Map module let you manage your Logical Device Map easily. You can create create and delete Logical Device Map by Name, ID or by using a JSON File. This module is idempotent and support the I(check) mode. It's using the AOS REST API.
       */
      aos_logical_device_map?: {
        /**
         * Datastructure of the Logical Device Map to manage. The data can be in YAML / JSON or directly a variable. It's the same datastructure that is returned on success in I(value). Only one of I(name), I(id) or I(content) can be set.
         */
        content?: string;
        /**
         * Default: present
         *
         * Indicate what is the expected state of the Logical Device Map (present or not).
         */
        state?: "present" | "absent";
        /**
         * An existing AOS session as obtained by M(aos_login) module.
         */
        session: {
          [k: string]: any;
        };
        /**
         * AOS Id of the Logical Device Map to manage (can't be used to create a new Logical Device Map), Only one of I(name), I(id) or I(content) can be set.
         */
        id?: string;
        /**
         * Name of the Logical Device Map to manage. Only one of I(name), I(id) or I(content) can be set.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * creates / deletes a Rackspace Public Cloud load balancer.
       */
      rax_clb?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage InfluxDB databases
       */
      influxdb_database?: {
        /**
         * Default: root
         *
         * Username that will be used to authenticate against InfluxDB server
         */
        username?: string;
        /**
         * Name of the database that will be created/destroyed
         */
        database_name: string;
        /**
         * The hostname or IP address on which InfluxDB server is listening
         */
        hostname: string;
        /**
         * Default: present
         *
         * Determines if the database should be created or destroyed
         */
        state?: "present" | "absent";
        /**
         * Default: root
         *
         * Password that will be used to authenticate against InfluxDB server
         */
        password?: string;
        /**
         * Default: 8086
         *
         * The port on which InfluxDB server is listening
         */
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Manages F5 BIG-IP LTM tcp monitors via iControl SOAP API
       */
      bigip_monitor_tcp?: {
        /**
         * Default: none
         *
         * The interval specifying how frequently the monitor instance of this template will run. By default, this interval is used for up and down states. The default API setting is 5.
         */
        interval?: string;
        /**
         * Monitor name
         */
        name?: string;
        /**
         * Default: tcp
         *
         * The parent template of this monitor template
         */
        parent?: string;
        /**
         * Default: none
         *
         * The receive string for the monitor call
         */
        receive?: string;
        /**
         * Default: none
         *
         * IP address part of the ipport definition. The default API setting is "0.0.0.0".
         */
        ip?: string;
        /**
         * Default: Common
         *
         * Partition for the monitor
         */
        partition?: string;
        /**
         * Default: none
         *
         * The send string for the monitor call
         */
        send?: string;
        /**
         * Default: present
         *
         * Monitor state
         */
        state?: string;
        /**
         * Default: none
         *
         * Specifies the amount of time in seconds after the first successful response before a node will be marked up. A value of 0 will cause a node to be marked up immediately after a valid response is received from the node. The default API setting is 0.
         */
        time_until_up?: string;
        /**
         * Default: none
         *
         * The number of seconds in which the node or service must respond to the monitor request. If the target responds within the set time period, it is considered up. If the target does not respond within the set time period, it is considered down. You can change this number to any number you want, however, it should be 3 times the interval number of seconds plus 1 second. The default API setting is 16.
         */
        timeout?: string;
        /**
         * Default: Common
         *
         * Partition for the parent monitor
         */
        parent_partition?: string;
        /**
         * Default: tcp
         *
         * The template type of this monitor template
         */
        type?: string;
        /**
         * Default: none
         *
         * Port address part op the ipport definition. The default API setting is 0.
         */
        port?: string;
        [k: string]: any;
      };
      /**
       * Create, update and remove static NATs.
       */
      cs_staticnat?: {
        /**
         * VM guest NIC secondary IP address for the static NAT.
         */
        vm_guest_ip?: string;
        /**
         * Domain the static NAT is related to.
         */
        domain?: string;
        api_key?: string;
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Network the IP address is related to.
         */
        network?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        /**
         * Name of virtual machine which we make the static NAT for.
         * Required if C(state=present).
         */
        vm?: string;
        api_region?: string;
        /**
         * Name of the project the static NAT is related to.
         */
        project?: string;
        /**
         * Default: present
         *
         * State of the static NAT.
         */
        state?: "present" | "absent";
        /**
         * Account the static NAT is related to.
         */
        account?: string;
        /**
         * Name of the zone in which the virtual machine is in.
         * If not set, default zone is used.
         */
        zone?: string;
        /**
         * Public IP address the static NAT is assigned to.
         */
        ip_address: string;
        api_url?: string;
        [k: string]: any;
      };
      /**
       * Collects a base set of device facts from a remote device that is running OS6.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module always collects a base set of facts from the device and can enable or disable collection of additional facts.
       */
      dellos6_facts?: {
        username?: string;
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        auth_pass?: string;
        host?: string;
        /**
         * Default: !config
         *
         * When specified, this argument restricts the facts collected to a given subset.  Possible values for this argument include all, hardware, config, and interfaces.  You can specify a list of values to include a larger subset.  You can also use values with an initial M(!) to specify that a specific subset should not be collected.
         */
        gather_subset?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * This module allows modifications and reading of dconf database. The module is implemented as a wrapper around dconf tool. Please see the dconf(1) man page for more details.
       * Since C(dconf) requires a running D-Bus session to change values, the module will try to detect an existing session and reuse it, or run the tool via C(dbus-run-session).
       */
      dconf?: {
        /**
         * Default: present
         *
         * The action to take upon the key/value.
         */
        state?: "read" | "present" | "absent";
        /**
         * A dconf key to modify or read from the dconf database.
         */
        key: string;
        /**
         * Value to set for the specified dconf key. Value should be specified in GVariant format. Due to complexity of this format, it is best to have a look at existing values in the dconf database. Required for C(state=present).
         */
        value?: string;
        [k: string]: any;
      };
      /**
       * Build, load or pull an image, making the image available for creating containers. Also supports tagging an image into a repository and archiving an image to a .tar file.
       */
      docker_image?: {
        /**
         * Use with state C(present) to archive an image to a .tar file.
         */
        archive_path?: string;
        /**
         * Default: True
         *
         * When building an image downloads any updates to the FROM image in Dockerfile.
         */
        pull?: string;
        /**
         * Use with state I(absent) to un-tag and remove all images matching the specified name. Use with state C(present) to build, load or pull an image when the image already exists.
         */
        force?: string;
        /**
         * Image name. Name format will be one of: name, repository/name, registry_server:port/name. When pushing or pulling an image the name can optionally include the tag by appending ':tag_name'.
         */
        name?: string;
        /**
         * Full path to a repository. Use with state C(present) to tag the image into the repository. Expects format I(repository:tag). If no tag is provided, will use the value of the C(tag) parameter or I(latest).
         */
        repository?: string;
        /**
         * A dictionary of limits applied to each container created by the build process.
         */
        container_limits?: string;
        /**
         * Default: Dockerfile
         *
         * Use with state C(present) to provide an alternate name for the Dockerfile to use when building an image.
         */
        dockerfile?: string;
        /**
         * Do not use cache when building an image.
         */
        nocache?: string;
        /**
         * Use with state C(present) to load an image from a .tar file.
         */
        load_path?: string;
        /**
         * DEPRECATED. Whether to use tls to connect to the docker server. Set to C(no) when TLS will not be used. Set to C(encrypt) to use TLS. And set to C(verify) to use TLS and verify that the server's certificate is valid for the server. NOTE: If you specify this option, it will set the value of the tls or tls_verify parameters.
         */
        use_tls?: string;
        /**
         * Default: present
         *
         * Make assertions about the state of an image.
         * When C(absent) an image will be removed. Use the force option to un-tag and remove all images matching the provided name.
         * When C(present) check if an image exists using the provided name and tag. If the image is not found or the force option is used, the image will either be pulled, built or loaded. By default the image will be pulled from Docker Hub. To build the image, provide a path value set to a directory containing a context and Dockerfile. To load an image, specify load_path to provide a path to an archive file. To tag an image to a repository, provide a repository path. If the name contains a repository path, it will be pushed.
         * NOTE: C(build) is DEPRECATED and will be removed in release 2.3. Specifying C(build) will behave the same as C(present).
         */
        state?: string;
        /**
         * Default: latest
         *
         * Used to select an image when pulling. Will be added to the image when pushing, tagging or building. Defaults to I(latest).
         * If C(name) parameter format is I(name:tag), then tag value from C(name) will take precedence.
         */
        tag?: string;
        /**
         * Provide a dictionary of C(key:value) build arguments that map to Dockerfile ARG directive.
         * Docker expects the value to be a string. For convenience any non-string values will be converted to strings.
         * Requires Docker API >= 1.21 and docker-py >= 1.7.0.
         */
        buildargs?: string;
        /**
         * Default: True
         *
         * Remove intermediate containers after build.
         */
        rm?: string;
        /**
         * Push the image to the registry. Specify the registry as part of the I(name) or I(repository) parameter.
         */
        push?: string;
        /**
         * Use with state 'present' to build an image. Will be the path to a directory containing the context and Dockerfile for building an image.
         */
        path?: string;
        /**
         * Timeout for HTTP requests during the image build operation. Provide a positive integer value for the number of seconds.
         */
        http_timeout?: string;
        [k: string]: any;
      };
      /**
       * Manage End Point Groups (EPG) on Cisco ACI fabrics.
       * More information from the internal APIC class I(fv:AEPg) at U(https://developer.cisco.com/media/mim-ref/MO-fvAEPg.html).
       */
      aci_epg?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Returns information about the load balancer.
       * Will be marked changed when called only if state is changed.
       */
      elb_classic_lb?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage SmartOS virtual machines through vmadm(1M).
       */
      vmadm?: {
        [k: string]: any;
      };
      /**
       * Create or terminate AWS virtual private clouds.  This module has a dependency on python-boto.
       */
      ec2_vpc_net?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create a keypair for use with Rackspace Cloud Servers
       */
      rax_keypair?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Bind EPGs to Physical and Virtual Domains on Cisco ACI fabrics.
       * More information from the internal APIC class I(fv:RsDomAtt) at U(https://developer.cisco.com/media/mim-ref/MO-fvRsDomAtt.html).
       */
      aci_epg_to_domain?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Manage role/user access to a KMS key. Not designed for encrypting/decrypting.
       */
      aws_kms?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages SNMP traps configurations.
       */
      nxos_snmp_traps?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Case sensitive group.
         */
        group:
          | "aaa"
          | "bridge"
          | "callhome"
          | "cfs"
          | "config"
          | "entity"
          | "feature-control"
          | "hsrp"
          | "license"
          | "link"
          | "lldp"
          | "ospf"
          | "pim"
          | "rf"
          | "rmon"
          | "snmp"
          | "storm-control"
          | "stpx"
          | "sysmgr"
          | "system"
          | "upgrade"
          | "vtp"
          | "all";
        /**
         * Default: enabled
         *
         * Manage the state of the resource.
         */
        state?: "enabled" | "disabled";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Sets machine time to the specified timezone, the module will check if the provided timezone is supported on the machine.
       */
      win_timezone?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manage NTP servers on a BIG-IP
       */
      bigip_device_ntp?: {
        /**
         * A list of NTP servers to set on the device. At least one of C(ntp_servers) or C(timezone) is required.
         */
        ntp_servers?: string;
        /**
         * Default: UTC
         *
         * The timezone to set for NTP lookups. At least one of C(ntp_servers) or C(timezone) is required.
         */
        timezone?: string;
        /**
         * Default: present
         *
         * The state of the NTP servers on the system. When C(present), guarantees that the NTP servers are set on the system. When C(absent), removes the specified NTP servers from the device configuration.
         */
        state?: string;
        [k: string]: any;
      };
      /**
       * Create and optionally attach an Elastic Network Interface (ENI) to an instance. If an ENI ID or private_ip is       provided, the existing ENI (if any) will be modified. The 'attached' parameter controls the attachment status       of the network interface.
       */
      ec2_eni?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Send a message to a Cisco Spark Room or Individual with options to control the formatting.
       */
      cisco_spark?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Manages information center debug configurations on HUAWEI CloudEngine switches.
       */
      ce_info_center_debug?: {
        username?: string;
        /**
         * Default: no_use
         *
         * Whether a device is enabled to output debugging information.
         */
        debug_enable?: "no_use" | "true" | "false";
        /**
         * Number of a channel. The value is an integer ranging from 0 to 9. The default value is 0.
         */
        channel_id?: string;
        /**
         * Timestamp type of debugging information.
         */
        debug_time_stamp?:
          | "date_boot"
          | "date_second"
          | "date_tenthsecond"
          | "date_millisecond"
          | "shortdate_second"
          | "shortdate_tenthsecond"
          | "shortdate_millisecond"
          | "formatdate_second"
          | "formatdate_tenthsecond"
          | "formatdate_millisecond";
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Debug level permitted to output.
         */
        debug_level?:
          | "emergencies"
          | "alert"
          | "critical"
          | "error"
          | "warning"
          | "notification"
          | "informational"
          | "debugging";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Module name of the rule. The value is a string of 1 to 31 case-insensitive characters. The default value is default. Please use lower-case letter, such as [aaa, acl, arp, bfd].
         */
        module_name?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Gather facts about ec2 volume snapshots in AWS
       */
      ec2_snapshot_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Use this module for power management
       */
      ipmi_power?: {
        /**
         * Hostname or ip address of the BMC.
         */
        name: string;
        /**
         * Whether to ensure that the machine in desired state.
         */
        state: "on" | "off" | "shutdown" | "reset" | "boot";
        /**
         * Username to use to connect to the BMC.
         */
        user: string;
        /**
         * Default: 300
         *
         * Maximum number of seconds before interrupt request.
         */
        timeout?: number | string;
        /**
         * Password to connect to the BMC.
         */
        password: string;
        /**
         * Default: 623
         *
         * Remote RMCP port.
         */
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Add, update and remove load balancer rules.
       */
      cs_loadbalancer_rule?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Create or remove a distributed vSwitch
       */
      vmware_dvswitch?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manage subnets in AWS virtual private clouds
       */
      ec2_vpc_subnet?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create and remove a Big Cloud Fabric switch.
       */
      bcf_switch?: {
        /**
         * The name of the switch.
         */
        name: string;
        /**
         * Big Cloud Fabric access token. If this isn't set then the environment variable C(BIGSWITCH_ACCESS_TOKEN) is used.
         */
        access_token?: string;
        /**
         * The controller IP address.
         */
        controller: string;
        /**
         * The MAC address of the switch.
         */
        mac: string;
        /**
         * Default: present
         *
         * Whether the switch should be present or absent.
         */
        state?: "present" | "absent";
        /**
         * The leaf group of the switch if the switch is a leaf.
         */
        leaf_group?: string;
        /**
         * Default: True
         *
         * If C(false), SSL certificates will not be validated. This should only be used on personally controlled devices using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Fabric role of the switch.
         */
        fabric_role: "spine" | "leaf";
        [k: string]: any;
      };
      /**
       * This module is used to configure HTTPPolicySet object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_httppolicyset?: {
        username?: string;
        /**
         * Http response policy for the virtual service.
         */
        http_response_policy?: {
          [k: string]: any;
        };
        tenant?: string;
        /**
         * Uuid of the http policy set.
         */
        uuid?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * User defined description for the object.
         */
        description?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Http security policy for the virtual service.
         */
        http_security_policy?: {
          [k: string]: any;
        };
        /**
         * Name of the http policy set.
         */
        name: string;
        controller?: string;
        /**
         * Checksum of cloud configuration for pool.
         * Internally set by cloud connector.
         */
        cloud_config_cksum?: string;
        /**
         * Creator name.
         */
        created_by?: string;
        /**
         * Http request policy for the virtual service.
         */
        http_request_policy?: {
          [k: string]: any;
        };
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Boolean flag to set is_internal_policy.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        is_internal_policy?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Add or remove MySQL databases from a remote host.
       */
      mysql_db?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Retrieve facts about one or more oVirt/RHV virtual machine snapshots.
       */
      ovirt_snapshots_facts?: {
        /**
         * Id of the snaphost we want to retrieve facts about.
         */
        snapshot_id?: string;
        /**
         * Description of the snapshot, can be used as glob expression.
         */
        description?: string;
        /**
         * Name of the VM with snapshot.
         */
        vm?: string;
        [k: string]: any;
      };
      /**
       * Manages F5 BIG-IP LTM monitors via iControl SOAP API
       */
      bigip_monitor_http?: {
        /**
         * Default: none
         *
         * The interval specifying how frequently the monitor instance of this template will run. By default, this interval is used for up and down states. The default API setting is 5.
         */
        interval?: string;
        /**
         * Monitor name
         */
        name?: string;
        /**
         * Default: http
         *
         * The parent template of this monitor template
         */
        parent?: string;
        /**
         * Default: none
         *
         * The receive string for the monitor call
         */
        receive?: string;
        /**
         * Default: none
         *
         * IP address part of the ipport definition. The default API setting is "0.0.0.0".
         */
        ip?: string;
        /**
         * Default: Common
         *
         * Partition for the monitor
         */
        partition?: string;
        /**
         * Default: none
         *
         * The send string for the monitor call
         */
        send?: string;
        /**
         * Default: present
         *
         * Monitor state
         */
        state?: string;
        /**
         * Default: none
         *
         * Specifies the amount of time in seconds after the first successful response before a node will be marked up. A value of 0 will cause a node to be marked up immediately after a valid response is received from the node. The default API setting is 0.
         */
        time_until_up?: string;
        /**
         * Default: none
         *
         * The number of seconds in which the node or service must respond to the monitor request. If the target responds within the set time period, it is considered up. If the target does not respond within the set time period, it is considered down. You can change this number to any number you want, however, it should be 3 times the interval number of seconds plus 1 second. The default API setting is 16.
         */
        timeout?: string;
        /**
         * Default: Common
         *
         * Partition for the parent monitor
         */
        parent_partition?: string;
        /**
         * Default: none
         *
         * Port address part of the ip/port definition. The default API setting is 0.
         */
        port?: string;
        /**
         * Default: none
         *
         * The receive disable string for the monitor call
         */
        receive_disable?: string;
        [k: string]: any;
      };
      /**
       * Create, Update or Destroy a Managed Instance Group (MIG).  See U(https://cloud.google.com/compute/docs/instance-groups) for an overview. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.
       */
      gce_mig?: {
        service_account_permissions?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Name of the Managed Instance Group.
         */
        name: string;
        /**
         * The GCE zone to use for this Managed Instance Group.
         */
        zone: string;
        /**
         * service account email
         */
        service_account_email?: string;
        /**
         * A dictionary of configuration for the autoscaler. 'enabled (bool)', 'name (str)' and policy.max_instances (int) are required fields if autoscaling is used. See U(https://cloud.google.com/compute/docs/reference/beta/autoscalers) for more information on Autoscaling.
         */
        autoscaling?: {
          [k: string]: any;
        };
        recreate_instances?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        pem_file?: string;
        /**
         * Define named ports that backend services can forward data to.  Format is a a list of name:port dictionaries.
         */
        named_ports?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * desired state of the resource
         */
        state?: "absent" | "present";
        /**
         * Instance Template to be used in creating the VMs.  See U(https://cloud.google.com/compute/docs/instance-templates) to learn more about Instance Templates.  Required for creating MIGs.
         */
        template?: string;
        /**
         * Path to the JSON file associated with the service account email
         */
        credentials_file?: string;
        /**
         * GCE project ID
         */
        project_id?: string;
        /**
         * Size of Managed Instance Group.  If MIG already exists, it will be resized to the number provided here.  Required for creating MIGs.
         */
        size?: number | string;
        [k: string]: any;
      };
      /**
       * This module is used to configure ServiceEngineGroup object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_serviceenginegroup?: {
        /**
         * Value of a (key, value) pair identifying a label for a set of nodes usually in container clouds.
         * Needs to be specified together with host_attribute_key.
         */
        host_attribute_value?: string;
        /**
         * Ssl handshakes will be handled by dedicated ssl threads.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        async_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Instance/flavor type for se instance.
         */
        instance_flavor?: string;
        /**
         * Redistribution of virtual services from the takeover se to the replacement se can cause momentary traffic loss.
         * If the auto-redistribute load option is left in its default off state, any desired rebalancing requires calls to rest api.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        auto_redistribute_active_standby_load?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * Time to wait for the scaled in se to drain existing flows before marking the scalein done.
         * Default value when not specified in API or module is interpreted by Avi Controller as 30.
         */
        vs_scalein_timeout?: number | string;
        /**
         * Determines if se-se ipc messages are encapsulated in an udp header.
         * 0  automatically determine based on hypervisor type.
         * 1  use udp encap unconditionally.
         * ~[0,1]  don't use udp encap.
         * Field introduced in 17.1.2.
         * Default value when not specified in API or module is interpreted by Avi Controller as 0.
         */
        se_udp_encap_ipc?: number | string;
        /**
         * When cpu usage on an se falls below the minimum threshold, virtual services hosted on the se may be consolidated onto other underutilized ses.
         * After consolidation, unused service engines may then be eligible for deletion.
         * Allowed values are 20-60.
         * Default value when not specified in API or module is interpreted by Avi Controller as 30.
         */
        min_cpu_usage?: number | string;
        /**
         * Custom security groups to be associated with data vnics for se instances in openstack and aws clouds.
         * Field introduced in 17.1.3.
         */
        custom_securitygroups_data?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Vcenterclusters settings for serviceenginegroup.
         */
        vcenter_clusters?: {
          [k: string]: any;
        };
        /**
         * Iptable rules.
         */
        iptables?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Percentage of memory for connection state.
         * This will come at the expense of memory used for http in-memory cache.
         * Allowed values are 10-90.
         * Default value when not specified in API or module is interpreted by Avi Controller as 50.
         */
        connection_memory_percentage?: number | string;
        /**
         * Subnets assigned to the se group.
         * Required for vs group placement.
         * Field introduced in 17.1.1.
         */
        service_ip_subnets?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * If placement mode is 'auto', virtual services are automatically placed on service engines.
         * Enum options - PLACEMENT_MODE_AUTO.
         * Default value when not specified in API or module is interpreted by Avi Controller as PLACEMENT_MODE_AUTO.
         */
        placement_mode?: string;
        /**
         * Maximum number of active service engines for the virtual service.
         * Allowed values are 1-64.
         * Default value when not specified in API or module is interpreted by Avi Controller as 4.
         */
        max_scaleout_per_vs?: number | string;
        /**
         * Enable routing for this serviceenginegroup .
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        enable_routing?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Per-app se mode is designed for deploying dedicated load balancers per app (vs).
         * In this mode, each se is limited to a max of 2 vss.
         * Vcpus in per-app ses count towards licensing usage at 25% rate.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        per_app?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Boolean flag to set vcenter_datastores_include.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        vcenter_datastores_include?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        /**
         * Name of the object.
         */
        name: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Maximum number of services engines in this group.
         * Allowed values are 0-1000.
         * Default value when not specified in API or module is interpreted by Avi Controller as 10.
         */
        max_se?: number | string;
        /**
         * Dosthresholdprofile settings for serviceenginegroup.
         */
        se_dos_profile?: {
          [k: string]: any;
        };
        tenant_uuid?: string;
        /**
         * This setting limits the number of udf logs generated per second per core on this se.
         * Udf logs are generated due to the configured client log filters or the rules with logging enabled.
         * Default is 100 logs per second.
         * Set it to zero (0) to disable throttling.
         * Field introduced in 17.1.3.
         * Default value when not specified in API or module is interpreted by Avi Controller as 100.
         */
        udf_log_throttle?: number | string;
        /**
         * Vcenterhosts settings for serviceenginegroup.
         */
        vcenter_hosts?: {
          [k: string]: any;
        };
        /**
         * Udp port for se_dp ipc in docker bridge mode.
         * Field introduced in 17.1.2.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1500.
         */
        se_ipc_udp_port?: number | string;
        /**
         * Number of vcpus for each of the service engine virtual machines.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1.
         */
        vcpus_per_se?: number | string;
        /**
         * Allocate all the cpu cores for the service engine virtual machines  on the same cpu socket.
         * Applicable only for vcenter cloud.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        cpu_socket_affinity?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enable or disable real time se metrics.
         */
        realtime_se_metrics?: {
          [k: string]: any;
        };
        /**
         * Custom tag will be used to create the tags for se instance in aws.
         * Note this is not the same as the prefix for se name.
         */
        custom_tag?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * This setting limits the number of non-significant logs generated per second per core on this se.
         * Default is 100 logs per second.
         * Set it to zero (0) to disable throttling.
         * Field introduced in 17.1.3.
         * Default value when not specified in API or module is interpreted by Avi Controller as 100.
         */
        non_significant_log_throttle?: number | string;
        /**
         * Extra config memory to support large geo db configuration.
         * Field introduced in 17.1.1.
         * Default value when not specified in API or module is interpreted by Avi Controller as 0.
         */
        extra_shared_config_memory?: number | string;
        /**
         * List of vcenterdatastore.
         */
        vcenter_datastores?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Service engines in active/standby mode for ha failover.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        active_standby?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_version?: string;
        /**
         * Multiplier for extra config to support large vs/pool config.
         * Default value when not specified in API or module is interpreted by Avi Controller as 0.0.
         */
        extra_config_multiplier?: number;
        /**
         * Number of async ssl threads per se_dp.
         * Allowed values are 1-4.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1.
         */
        async_ssl_threads?: number | string;
        /**
         * Folder to place all the service engine virtual machines in vcenter.
         * Default value when not specified in API or module is interpreted by Avi Controller as AviSeFolder.
         */
        vcenter_folder?: string;
        /**
         * If serviceenginegroup is configured for legacy 1+1 active standby ha mode, floating ip's will be advertised only by the active se in the pair.
         * Virtual services in this group must be disabled/enabled for any changes to the floating ip's to take effect.
         * Only active se hosting vs tagged with active standby se 1 tag will advertise this floating ip when manual load distribution is enabled.
         */
        floating_intf_ip?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Advertise reach-ability of backend server networks via adc through bgp for default gateway feature.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        advertise_backend_networks?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        tenant?: string;
        /**
         * When cpu usage on an se exceeds this threshold, virtual services hosted on this se may be rebalanced to other ses to reduce load.
         * A new se may be created as part of this process.
         * Allowed values are 40-90.
         * Default value when not specified in API or module is interpreted by Avi Controller as 80.
         */
        max_cpu_usage?: number | string;
        /**
         * Minimum number of active service engines for the virtual service.
         * Allowed values are 1-64.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1.
         */
        min_scaleout_per_vs?: number | string;
        /**
         * Excess service engine capacity provisioned for ha failover.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1.
         */
        buffer_se?: number | string;
        /**
         * Override default hypervisor.
         * Enum options - DEFAULT, VMWARE_ESX, KVM, VMWARE_VSAN, XEN.
         */
        hypervisor?: string;
        /**
         * Enum options - vcenter_datastore_any, vcenter_datastore_local, vcenter_datastore_shared.
         * Default value when not specified in API or module is interpreted by Avi Controller as VCENTER_DATASTORE_ANY.
         */
        vcenter_datastore_mode?: string;
        /**
         * Select core with least load for new flow.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        least_load_core_selection?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enable aggressive failover configuration for ha.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        aggressive_failure_detection?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * This setting limits the number of significant logs generated per second per core on this se.
         * Default is 100 logs per second.
         * Set it to zero (0) to disable throttling.
         * Field introduced in 17.1.3.
         * Default value when not specified in API or module is interpreted by Avi Controller as 100.
         */
        significant_log_throttle?: number | string;
        /**
         * Enable vip on all interfaces of se.
         * Field introduced in 17.1.1.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        enable_vip_on_all_interfaces?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * If set, virtual services will be automatically migrated when load on an se is less than minimum or more than maximum thresholds.
         * Only alerts are generated when the auto_rebalance is not set.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        auto_rebalance?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Determines if dsr from secondary se is active or not.
         * 0  automatically determine based on hypervisor type.
         * 1  disable dsr unconditionally.
         * ~[0,1]  enable dsr unconditionally.
         * Field introduced in 17.1.1.
         * Default value when not specified in API or module is interpreted by Avi Controller as 0.
         */
        se_tunnel_mode?: number | string;
        /**
         * Amount of memory for each of the service engine virtual machines.
         * Default value when not specified in API or module is interpreted by Avi Controller as 2048.
         */
        memory_per_se?: number | string;
        /**
         * Udp port for tunneled packets from secondary to primary se in docker bridge mode.
         * Field introduced in 17.1.3.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1550.
         */
        se_tunnel_udp_port?: number | string;
        /**
         * Time to wait for the scaled out se to become ready before marking the scaleout done.
         * Default value when not specified in API or module is interpreted by Avi Controller as 30.
         */
        vs_scaleout_timeout?: number | string;
        /**
         * Management subnet to use for avi service engines.
         */
        mgmt_subnet?: {
          [k: string]: any;
        };
        /**
         * Udp port for punted packets in docker bridge mode.
         * Field introduced in 17.1.2.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1501.
         */
        se_remote_punt_udp_port?: number | string;
        /**
         * Amount of se memory in gb until which shared memory is collected in core archive.
         * Field introduced in 17.1.3.
         * Default value when not specified in API or module is interpreted by Avi Controller as 8.
         */
        archive_shm_limit?: number | string;
        /**
         * Maximum number of virtual services that can be placed on a single service engine.
         * East west virtual services are excluded from this limit.
         * Allowed values are 1-1000.
         * Default value when not specified in API or module is interpreted by Avi Controller as 10.
         */
        max_vs_per_se?: number | string;
        /**
         * Amount of extra memory to be reserved for use by the operating system on a service engine.
         * Default value when not specified in API or module is interpreted by Avi Controller as 0.
         */
        os_reserved_memory?: number | string;
        /**
         * Management network uuid.
         */
        openstack_mgmt_network_uuid?: string;
        controller?: string;
        /**
         * Maximum number of aggregated vs heartbeat packets to send in a batch.
         * Allowed values are 1-256.
         * Field introduced in 17.1.1.
         * Default value when not specified in API or module is interpreted by Avi Controller as 8.
         */
        se_vs_hb_max_pkts_in_batch?: number | string;
        /**
         * Key of a (key, value) pair identifying a label for a set of nodes usually in container clouds.
         * Needs to be specified together with host_attribute_value.
         * Ses can be configured differently including ha modes across different se groups.
         * May also be used for isolation between different classes of virtualservices.
         * Virtualservices' se group may be specified via annotations/labels.
         * A openshift/kubernetes namespace maybe annotated with a matching se group label as openshift.io/node-selector  apptype=prod.
         * When multiple se groups are used in a cloud with host attributes specified,just a single se group can exist as a match-all se group without a
         * host_attribute_key.
         */
        host_attribute_key?: string;
        username?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * Boolean flag to set mem_reserve.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        mem_reserve?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Boolean flag to set cpu_reserve.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        cpu_reserve?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Use virtual mac address for interfaces on which floating interface ips are placed.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        enable_vmac?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Avi management network name.
         */
        openstack_mgmt_network_name?: string;
        /**
         * Field deprecated in 17.1.1.
         */
        openstack_availability_zone?: string;
        /**
         * Enable active health monitoring from the standby se for all placed virtual services.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        hm_on_standby?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Amount of disk space for each of the service engine virtual machines.
         * Default value when not specified in API or module is interpreted by Avi Controller as 10.
         */
        disk_per_se?: number | string;
        /**
         * It is a reference to an object of type hardwaresecuritymodulegroup.
         */
        hardwaresecuritymodulegroup_ref?: string;
        /**
         * Custom security groups to be associated with management vnic for se instances in openstack and aws clouds.
         * Field introduced in 17.1.3.
         */
        custom_securitygroups_mgmt?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * If serviceenginegroup is configured for legacy 1+1 active standby ha mode, floating ip's will be advertised only by the active se in the pair.
         * Virtual services in this group must be disabled/enabled for any changes to the floating ip's to take effect.
         * Only active se hosting vs tagged with active standby se 2 tag will advertise this floating ip when manual load distribution is enabled.
         */
        floating_intf_ip_se_2?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Maximum disk capacity (in mb) to be allocated to an se.
         * This is exclusively used for debug and log data.
         * Default value when not specified in API or module is interpreted by Avi Controller as 10000.
         */
        log_disksz?: number | string;
        /**
         * It is a reference to an object of type cloud.
         */
        cloud_ref?: string;
        /**
         * Frequency of rebalance, if 'auto rebalance' is enabled.
         * Default value when not specified in API or module is interpreted by Avi Controller as 300.
         */
        auto_rebalance_interval?: number | string;
        /**
         * Field introduced in 17.1.1.
         */
        openstack_availability_zones?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Number of changes in num flow cores sum to ignore.
         * Default value when not specified in API or module is interpreted by Avi Controller as 8.
         */
        num_flow_cores_sum_changes_to_ignore?: number | string;
        /**
         * Multiplier for se threads based on vcpu.
         * Allowed values are 1-10.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1.
         */
        se_thread_multiplier?: number | string;
        /**
         * User defined description for the object.
         */
        description?: string;
        /**
         * During se upgrade, time to wait for the scaled-in se to drain existing flows before marking the scalein done.
         * Default value when not specified in API or module is interpreted by Avi Controller as 30.
         */
        vs_scalein_timeout_for_upgrade?: number | string;
        /**
         * Duration to preserve unused service engine virtual machines before deleting them.
         * If traffic to a virtual service were to spike up abruptly, this se would still be available to be utilized again rather than creating a new se.
         * If this value is set to 0, controller will never delete any ses and administrator has to manually cleanup unused ses.
         * Allowed values are 0-525600.
         * Default value when not specified in API or module is interpreted by Avi Controller as 120.
         */
        se_deprovision_delay?: number | string;
        /**
         * Maximum number of virtualservices for which heartbeat messages are aggregated in one packet.
         * Allowed values are 1-1024.
         * Field introduced in 17.1.1.
         * Default value when not specified in API or module is interpreted by Avi Controller as 256.
         */
        se_vs_hb_max_vs_in_pkt?: number | string;
        /**
         * Management network to use for avi service engines.
         * It is a reference to an object of type network.
         */
        mgmt_network_ref?: string;
        /**
         * Prefix to use for virtual machine name of service engines.
         * Default value when not specified in API or module is interpreted by Avi Controller as Avi.
         */
        se_name_prefix?: string;
        /**
         * High availability mode for all the virtual services using this service engine group.
         * Enum options - HA_MODE_SHARED_PAIR, HA_MODE_SHARED, HA_MODE_LEGACY_ACTIVE_STANDBY.
         * Default value when not specified in API or module is interpreted by Avi Controller as HA_MODE_SHARED.
         */
        ha_mode?: string;
        /**
         * Use both the active and standby service engines for virtual service placement in the legacy active standby ha mode.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        distribute_load_active_standby?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * In compact placement, virtual services are placed on existing ses until max_vs_per_se limit is reached.
         * Enum options - PLACEMENT_ALGO_PACKED, PLACEMENT_ALGO_DISTRIBUTED.
         * Default value when not specified in API or module is interpreted by Avi Controller as PLACEMENT_ALGO_PACKED.
         */
        algo?: string;
        /**
         * Dedicate the core that handles packet receive/transmit from the network to just the dispatching function.
         * Don't use it for tcp/ip and ssl functions.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        dedicated_dispatcher_core?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Ensure primary and secondary service engines are deployed on different physical hosts.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        vs_host_redundancy?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * The M(rocketchat) module sends notifications to Rocket Chat via the Incoming WebHook integration
       */
      rocketchat?: {
        /**
         * Default: Ansible
         *
         * This is the sender of the message.
         */
        username?: string;
        /**
         * The domain for your environment without protocol. (i.e. C(subdomain.domain.com or chat.domain.tld))
         */
        domain: string;
        /**
         * Default: https
         *
         * Specify the protocol used to send notification messages before the webhook url. (i.e. http or https)
         */
        protocol?: "http" | "https";
        /**
         * Default: None
         *
         * Define a list of attachments.
         */
        attachments?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: normal
         *
         * Allow text to use default colors - use the default of 'normal' to not send a custom color bar at the start of the message
         */
        color?: "normal" | "good" | "warning" | "danger";
        /**
         * Default: https://www.ansible.com/favicon.ico
         *
         * URL for the message sender's icon.
         */
        icon_url?: string;
        /**
         * Rocket Chat Incoming Webhook integration token.  This provides authentication to Rocket Chat's Incoming webhook for posting messages.
         */
        token: string;
        /**
         * Default: None
         *
         * Emoji for the message sender. The representation for the available emojis can be got from Rocket Chat. (for example :thumbsup:) (if I(icon_emoji) is set, I(icon_url) will not be used)
         */
        icon_emoji?: string;
        /**
         * Default: 1
         *
         * Automatically create links for channels and usernames in I(msg).
         */
        link_names?: number | string;
        /**
         * Default: None
         *
         * Message to be sent.
         */
        msg?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * Channel to send the message to. If absent, the message goes to the channel selected for the I(token) specifed during the creation of webhook.
         */
        channel?: string;
        [k: string]: any;
      };
      /**
       * This will configure both pre-login and post-login banners on remote devices running VyOS. It allows playbooks to add or remote banner text from the active running configuration.
       */
      vyos_banner?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * The banner text that should be present in the remote device running configuration. This argument accepts a multiline string, with no empty lines. Requires I(state=present).
         */
        text?: string;
        /**
         * Default: present
         *
         * Specifies whether or not the configuration is present in the current devices active running configuration.
         */
        state?: "present" | "absent";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        /**
         * Specifies which banner that should be configured on the remote device.
         */
        banner: "pre-login" | "post-login";
        port?: number | string;
        [k: string]: any;
      };
      /**
       * A CRUD-like interface to managing bits of XML files.
       * You might also be interested in a brief tutorial from U(http://www.w3schools.com/xpath/) and U(https://developer.mozilla.org/en-US/docs/Web/XPath).
       */
      xml?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create, update, or destroy Ansible Tower teams. See U(https://www.ansible.com/tower) for an overview.
       */
      tower_team?: {
        description?: string;
        /**
         * URL to your Tower instance.
         */
        tower_host?: string;
        /**
         * Username for your Tower instance.
         */
        tower_username?: string;
        /**
         * Default: present
         *
         * Desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Password for your Tower instance.
         */
        tower_password?: string;
        /**
         * Path to the Tower config file. See notes.
         */
        tower_config_file?: string;
        /**
         * Organization the team should be made a member of.
         */
        organization: string;
        /**
         * Default: True
         *
         * Dis/allow insecure connections to Tower. If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        tower_verify_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name to use for the team.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Creates, Removes and configures a IIS Web Application Pool
       */
      win_iis_webapppool?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Creates a Virtual Network Identifier member (VNI) for an NVE overlay interface.
       */
      nxos_vxlan_vtep_vni?: {
        username?: string;
        /**
         * This attribute is used to identify and separate processing VNIs that are associated with a VRF and used for routing. The VRF and VNI specified with this command must match the configuration of the VNI under the VRF.
         */
        assoc_vrf?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Set the ingress-replication static peer list. Valid values are an array, a space-separated string of ip addresses, or the keyword 'default'.
         */
        peer_list?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Suppress arp under layer 2 VNI.
         */
        suppress_arp?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        /**
         * ID of the Virtual Network Identifier.
         */
        vni: string;
        port?: number | string;
        /**
         * The multicast group (range) of the VNI. Valid values are string and keyword 'default'.
         */
        multicast_group?: string;
        host?: string;
        ssh_keyfile?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Interface name for the VXLAN Network Virtualization Endpoint.
         */
        interface: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specifies mechanism for host reachability advertisement.
         */
        ingress_replication?: "bgp" | "static" | "default";
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Manages SNMP location configuration.
       */
      nxos_snmp_location?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        host?: string;
        /**
         * Location information.
         */
        location: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Manipulate Rackspace Cloud Autoscale Groups
       */
      rax_scaling_group?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage port security on Cisco ACI fabrics.
       * More information from the internal APIC class I(l2:PortSecurityPol) at U(https://developer.cisco.com/media/mim-ref/MO-l2PortSecurityPol.html).
       */
      aci_intf_policy_port_security?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Notify newrelic about app deployments (see https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/deployment-notifications#api)
       */
      newrelic_deployment?: {
        /**
         * (one of app_name or application_id are required) The application id, found in the URL when viewing the application in RPM
         */
        application_id?: string;
        /**
         * Text annotation for the deployment - notes for you
         */
        description?: string;
        /**
         * A list of changes for this deployment
         */
        changelog?: string;
        /**
         * Name of the application
         */
        appname?: string;
        /**
         * The environment for this deployment
         */
        environment?: string;
        /**
         * API token, to place in the x-api-key header.
         */
        token: string;
        /**
         * The name of the user/process that triggered this deployment
         */
        user?: string;
        /**
         * (one of app_name or application_id are required) The value of app_name in the newrelic.yml file used by the application
         */
        app_name?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A revision number (e.g., git commit SHA)
         */
        revision?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of the local usernames configured on network devices. It allows playbooks to manage either individual usernames or the aggregate of usernames in the current running config. It also supports purging usernames from the configuration that are not explicitly defined.
       */
      net_user?: {
        username?: string;
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        auth_pass?: string;
        host?: string;
        gather_subset?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Create, update and delete Azure Virtual Machine Extension
       */
      azure_rm_virtualmachine_extension?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The type of the extension handler.
         */
        virtual_machine_extension_type?: string;
        /**
         * Name of the vm extension
         */
        name: string;
        /**
         * Name of a resource group where the vm extension exists or will be created.
         */
        resource_group: string;
        /**
         * Whether the extension handler should be automatically upgraded across minor versions.
         */
        auto_upgrade_minor_version?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ad_user?: string;
        /**
         * Json formatted public settings for the extension.
         */
        settings?: {
          [k: string]: any;
        };
        /**
         * The name of the extension handler publisher.
         */
        publisher?: string;
        cloud_environment?: string;
        secret?: string;
        /**
         * Default: present
         *
         * Assert the state of the vm extension. Use 'present' to create or update a vm extension and 'absent' to delete a vm extension.
         */
        state?: "absent" | "present";
        /**
         * Default: resource_group location
         *
         * Valid azure location. Defaults to location of the resource group.
         */
        location?: string;
        client_id?: string;
        /**
         * Json formatted protected settings for the extension.
         */
        protected_settings?: {
          [k: string]: any;
        };
        subscription_id?: string;
        password?: string;
        /**
         * The type version of the extension handler.
         */
        type_handler_version?: string;
        tenant?: string;
        /**
         * The name of the virtual machine where the extension should be create or updated.
         */
        virtual_machine_name?: string;
        [k: string]: any;
      };
      /**
       * Configures anycast gateway MAC of the switch.
       */
      nxos_overlay_global?: {
        username?: string;
        ssh_keyfile?: string;
        provider?: {
          [k: string]: any;
        };
        host?: string;
        timeout?: number | string;
        /**
         * Anycast gateway mac of the switch.
         */
        anycast_gateway_mac: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * This module is used to configure ServerAutoScalePolicy object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_serverautoscalepolicy?: {
        /**
         * Use avi intelligent autoscale algorithm where autoscale is performed by comparing load on the pool against estimated capacity of all the servers.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        intelligent_autoscale?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Minimum extra capacity as percentage of load used by the intelligent scheme.
         * Scaleout is triggered when available capacity is less than this margin.
         * Allowed values are 1-99.
         * Default value when not specified in API or module is interpreted by Avi Controller as 20.
         */
        intelligent_scaleout_margin?: number | string;
        /**
         * Cooldown period during which no new scalein is triggered to allow previous scalein to successfully complete.
         * Default value when not specified in API or module is interpreted by Avi Controller as 300.
         */
        scalein_cooldown?: number | string;
        /**
         * Cooldown period during which no new scaleout is triggered to allow previous scaleout to successfully complete.
         * Default value when not specified in API or module is interpreted by Avi Controller as 300.
         */
        scaleout_cooldown?: number | string;
        /**
         * Maximum extra capacity as percentage of load used by the intelligent scheme.
         * Scalein is triggered when available capacity is more than this margin.
         * Allowed values are 1-99.
         * Default value when not specified in API or module is interpreted by Avi Controller as 40.
         */
        intelligent_scalein_margin?: number | string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Maximum number of servers after scaleout.
         * Allowed values are 0-400.
         */
        max_size?: number | string;
        /**
         * Maximum number of servers to scaleout simultaneously.
         * The actual number of servers to scaleout is chosen such that target number of servers is always less than or equal to the max_size.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1.
         */
        max_scaleout_adjustment_step?: number | string;
        api_version?: string;
        username?: string;
        /**
         * Use predicted load rather than current load.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        use_predicted_load?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * User defined description for the object.
         */
        description?: string;
        /**
         * Trigger scaleout when alerts due to any of these alert configurations are raised.
         * It is a reference to an object of type alertconfig.
         */
        scaleout_alertconfig_refs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * No scale-in happens once number of operationally up servers reach min_servers.
         * Allowed values are 0-400.
         */
        min_size?: number | string;
        controller?: string;
        password?: string;
        tenant?: string;
        /**
         * Name of the object.
         */
        name: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Maximum number of servers to scalein simultaneously.
         * The actual number of servers to scalein is chosen such that target number of servers is always more than or equal to the min_size.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1.
         */
        max_scalein_adjustment_step?: number | string;
        /**
         * Trigger scalein when alerts due to any of these alert configurations are raised.
         * It is a reference to an object of type alertconfig.
         */
        scalein_alertconfig_refs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        tenant_uuid?: string;
        [k: string]: any;
      };
      /**
       * Create (reserve) or Destroy (release) Regional or Global IP Addresses. See U(https://cloud.google.com/compute/docs/configure-instance-ip-addresses#reserve_new_static) for more on reserving static addresses.
       */
      gce_eip?: {
        /**
         * Name of Address.
         */
        name: string;
        service_account_email?: string;
        /**
         * Region to create the address in. Set to 'global' to create a global address.
         */
        region: string;
        service_account_permissions?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        pem_file?: string;
        /**
         * Default: present
         *
         * The state the address should be in. C(present) or C(absent) are the only valid options.
         */
        state?: "present" | "absent";
        credentials_file?: string;
        project_id?: string;
        [k: string]: any;
      };
      /**
       * Create or Delete routers from OpenStack
       */
      quantum_router?: {
        /**
         * Default: None
         *
         * Name of the region
         */
        region_name?: string;
        /**
         * Default: True
         *
         * desired admin state of the created router .
         */
        admin_state_up?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * Name of the tenant for which the router has to be created, if none router would be created for the login tenant.
         */
        tenant_name?: string;
        availability_zone?: string;
        /**
         * Default: yes
         *
         * The tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone url for authentication
         */
        auth_url?: string;
        /**
         * Default: yes
         *
         * Password of login user
         */
        login_password: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Default: None
         *
         * Name to be give to the router
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Creates AWS VPC endpoints.
       * Deletes AWS VPC endpoints.
       * This module support check mode.
       */
      ec2_vpc_endpoint?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * OS9 configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with OS9 configuration sections in a deterministic way.
       */
      dellos9_config?: {
        [k: string]: any;
      };
      /**
       * Manage AWS IAM groups
       */
      iam_group?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage top level Application Profile (AP) objects on Cisco ACI fabrics
       * More information from the internal APIC class I(fv:Ap) at U(https://developer.cisco.com/media/mim-ref/MO-fvAp.html).
       */
      aci_ap?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * This module can create and delete GCE private images from gzipped compressed tarball containing raw disk data or from existing detached disks in any zone. U(https://cloud.google.com/compute/docs/images)
       */
      gce_img?: {
        /**
         * an optional description
         */
        description?: string;
        /**
         * an optional family name
         */
        family?: string;
        /**
         * service account email
         */
        service_account_email?: string;
        /**
         * path to the pem file associated with the service account email
         */
        pem_file?: string;
        /**
         * the source disk or the Google Cloud Storage URI to create the image from
         */
        source?: string;
        /**
         * Default: present
         *
         * desired state of the image
         */
        state?: "present" | "absent";
        /**
         * Default: us-central1-a
         *
         * the zone of the disk specified by source
         */
        zone?: string;
        /**
         * Default: 180
         *
         * timeout for the operation
         */
        timeout?: number | string;
        /**
         * your GCE project ID
         */
        project_id?: string;
        /**
         * the name of the image to create or delete
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Set up, reconfigure, or remove SSL termination for an existing load balancer.
       */
      rax_clb_ssl?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module will let you pause/unpause Pingdom alerts
       */
      pingdom?: {
        /**
         * Pingdom user password.
         */
        passwd: string;
        /**
         * Pingdom ID of the check.
         */
        checkid: string;
        /**
         * Define whether or not the check should be running or paused.
         */
        state: "running" | "paused" | "started" | "stopped";
        /**
         * Pingdom user ID.
         */
        uid: string;
        /**
         * Pingdom API key.
         */
        key: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of L3 interfaces on VyOS network devices.
       */
      vyos_l3_interface?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Name of the L3 interface.
         */
        name?: string;
        /**
         * IPv6 of the L3 interface.
         */
        ipv6?: string;
        /**
         * Default: present
         *
         * State of the L3 interface configuration.
         */
        state?: "present" | "absent";
        host?: string;
        /**
         * IPv4 of the L3 interface.
         */
        ipv4?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of L3 interfaces definitions
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * This module allows to manage samba shares on a univention corporate server (UCS). It uses the python API of the UCS to create a new object or edit it.
       */
      udm_share?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages domains and records via the DNSimple API, see the docs: U(http://developer.dnsimple.com/)
       */
      dnsimple?: {
        /**
         * Whether the record should be the only one for that record type and record name. Only use with state=present on a record
         */
        solo?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Domain to work with. Can be the domain name (e.g. "mydomain.com") or the numeric ID of the domain in DNSimple. If omitted, a list of domains will be returned.
         * If domain is present but the domain doesn't exist, it will be created.
         */
        domain?: string;
        /**
         * Account email. If omitted, the env variables DNSIMPLE_EMAIL and DNSIMPLE_API_TOKEN will be looked for. If those aren't found, a C(.dnsimple) file will be looked for, see: U(https://github.com/mikemaccana/dnsimple-python#getting-started)
         */
        account_email?: string;
        /**
         * List of records to ensure they either exist or don't exist
         */
        record_ids?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Record value
         * Must be specified when trying to ensure a record exists
         */
        value?: string;
        /**
         * Record priority
         */
        priority?: number | string;
        /**
         * Record to add, if blank a record for the domain will be created, supports the wildcard (*)
         */
        record?: string;
        /**
         * whether the record should exist or not
         */
        state?: "present" | "absent";
        /**
         * Default: 3600 (one hour)
         *
         * The TTL to give the new record
         */
        ttl?: number | string;
        /**
         * The type of DNS record to create
         */
        type?:
          | "A"
          | "ALIAS"
          | "CNAME"
          | "MX"
          | "SPF"
          | "URL"
          | "TXT"
          | "NS"
          | "SRV"
          | "NAPTR"
          | "PTR"
          | "AAAA"
          | "SSHFP"
          | "HINFO"
          | "POOL";
        /**
         * Account API token. See I(account_email) for info.
         */
        account_api_token?: string;
        [k: string]: any;
      };
      /**
       * Add, remove or set User Rights for a group or users or groups.
       * You can set user rights for both local and domain accounts.
       */
      win_user_right?: {
        /**
         * Default: set
         *
         * C(add) will add the users/groups to the existing right.
         * C(remove) will remove the users/groups from the existing right.
         * C(set) will replace the users/groups of the existing right.
         */
        action?: string;
        /**
         * The name of the User Right as shown by the C(Constant Name) value from U(https://technet.microsoft.com/en-us/library/dd349804.aspx).
         * The module will return an error if the right is invalid.
         */
        name?: string;
        /**
         * A list of users or groups to add/remove on the User Right.
         * These can be in the form DOMAIN\user-group, user-group@DOMAIN.COM for domain users/groups.
         * For local users/groups it can be in the form user-group, .\user-group, SERVERNAME\user-group where SERVERNAME is the name of the remote server.
         * You can also add special local accounts like SYSTEM and others.
         */
        users?: string;
        [k: string]: any;
      };
      /**
       * Manage Self-IPs on a BIG-IP system
       */
      bigip_selfip?: {
        /**
         * Default: Value of C(address)
         *
         * The self IP to create.
         */
        name?: string;
        /**
         * The VLAN that the new self IPs will be on.
         */
        vlan?: string;
        /**
         * The netmasks for the self IP.
         */
        netmask?: string;
        /**
         * Configure port lockdown for the Self IP. By default, the Self IP has a "default deny" policy. This can be changed to allow TCP and UDP ports as well as specific protocols. This list should contain C(protocol):C(port) values.
         */
        allow_service?: string;
        /**
         * Default: present
         *
         * The state of the variable on the system. When C(present), guarantees that the Self-IP exists with the provided attributes. When C(absent), removes the Self-IP from the system.
         */
        state?: string;
        /**
         * The IP addresses for the new self IP. This value is ignored upon update as addresses themselves cannot be changed after they are created.
         */
        address?: string;
        /**
         * The traffic group for the self IP addresses in an active-active, redundant load balancer configuration.
         */
        traffic_group?: string;
        [k: string]: any;
      };
      /**
       * Manages BGP neighbors configurations on NX-OS switches.
       */
      nxos_bgp_neighbor?: {
        username?: string;
        /**
         * Configure whether or not to negotiate capability with this neighbor.
         */
        capability_negotiation?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify the encryption type the password will use. Valid values are '3des' or 'cisco_type_7' encryption.
         */
        pwd_type?: "cleartext" | "3des" | "cisco_type_7" | "default";
        /**
         * Configure whether or not to enable dynamic capability.
         */
        dynamic_capability?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Configure to administratively shutdown this neighbor.
         */
        shutdown?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify whether or not to shut down this neighbor under memory pressure.
         */
        low_memory_exempt?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify the config to remove private AS number from outbound updates. Valid values are 'enable' to enable this config, 'disable' to disable this config, 'all' to remove all private AS number, or 'replace-as', to replace the private AS number.
         */
        remove_private_as?: "enable" | "disable" | "all" | "replace-as";
        /**
         * Configure to suppress 4-byte AS Capability.
         */
        suppress_4_byte_as?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        transport?: "cli" | "nxapi";
        /**
         * Configure whether or not to check for directly connected peer.
         */
        connected_check?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify Autonomous System Number of the neighbor. Valid values are String or Integer in ASPLAIN or ASDOT notation, or 'default', which means not to configure it.
         */
        remote_as?: string;
        /**
         * Specify multihop TTL for a remote peer. Valid values are integers between 2 and 255, or keyword 'default' to disable this property.
         */
        ebgp_multihop?: string;
        /**
         * BGP autonomous system number. Valid values are string, Integer in ASPLAIN or ASDOT notation.
         */
        asn: string;
        port?: number | string;
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        /**
         * Specify holdtime timer value. Valid values are integers between 0 and 3600 in terms of seconds, or 'default', which is 180.
         */
        timers_holdtime?: string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Specify source interface of BGP session and updates.
         */
        update_source?: string;
        m_facts?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Description of the neighbor.
         */
        description?: string;
        /**
         * Specify the local-as number for the eBGP neighbor. Valid values are String or Integer in ASPLAIN or ASDOT notation, or 'default', which means not to configure it.
         */
        local_as?: string;
        /**
         * Specify keepalive timer value. Valid values are integers between 0 and 3600 in terms of seconds, or 'default', which is 60.
         */
        timers_keepalive?: string;
        host?: string;
        /**
         * Default: default
         *
         * Name of the VRF. The name 'default' is a valid VRF representing the global bgp.
         */
        vrf?: string;
        /**
         * Specify whether or not to enable log messages for neighbor up/down event.
         */
        log_neighbor_changes?: "enable" | "disable" | "inherit";
        password?: string;
        /**
         * Specify Maximum number of peers for this neighbor prefix Valid values are between 1 and 1000, or 'default', which does not impose the limit.
         */
        maximum_peers?: string;
        ssh_keyfile?: string;
        /**
         * Specify the password for neighbor. Valid value is string.
         */
        pwd?: string;
        /**
         * Specify whether or not to only allow passive connection setup. Valid values are 'true', 'false', and 'default', which defaults to 'false'. This property can only be configured when the neighbor is in 'ip' address format without prefix length. This property and the transport_passive_mode property are mutually exclusive.
         */
        transport_passive_only?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        timeout?: number | string;
        /**
         * Neighbor Identifier. Valid values are string. Neighbors may use IPv4 or IPv6 notation, with or without prefix length.
         */
        neighbor: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Get facts for a specific load balancer or all load balancers.
       */
      azure_rm_loadbalancer_facts?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Limit results to a specific resource group.
         */
        name?: string;
        /**
         * The resource group to search for the desired load balancer
         */
        resource_group?: string;
        /**
         * Limit results by providing a list of tags. Format tags as 'key' or 'key:value'.
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        ad_user?: string;
        cloud_environment?: string;
        secret?: string;
        client_id?: string;
        subscription_id?: string;
        password?: string;
        tenant?: string;
        [k: string]: any;
      };
      /**
       * Install, uninstall a Windows hotfix.
       */
      win_hotfix?: {
        /**
         * The name of the hotfix as shown in DISM, see examples for details.
         * This or C(hotfix_kb) MUST be set when C(state=absent).
         * If C(state=present) then the hotfix at C(source) will be validated against this value, if it does not match an error will occur.
         * You can get the identifier by running 'Get-WindowsPackage -Online -PackagePath path-to-cab-in-msu' after expanding the msu file.
         */
        hotfix_identifier?: string;
        /**
         * Default: present
         *
         * Whether to install or uninstall the hotfix.
         * When C(present), C(source) MUST be set.
         * When C(absent), C(hotfix_identifier) or C(hotfix_kb) MUST be set.
         */
        state?: string;
        /**
         * The name of the KB the hotfix relates to, see examples for details.
         * This of C(hotfix_identifier) MUST be set when C(state=absent).
         * If C(state=present) then the hotfix at C(source) will be validated against this value, if it does not match an error will occur.
         * Because DISM uses the identifier as a key and doesn't refer to a KB in all cases it is recommended to use C(hotfix_identifier) instead.
         */
        hotfix_kb?: string;
        /**
         * The path to the downloaded hotfix .msu file.
         * This MUST be set if C(state=present) and MUST be a .msu hotfix file.
         */
        source?: string;
        [k: string]: any;
      };
      /**
       * Execute show command in the nodes and returns the results read from the device.
       */
      pn_show?: {
        /**
         * Provide login password if user is not root.
         */
        pn_clipassword: string;
        /**
         * The C(pn_command) takes a CLI show command as value.
         */
        pn_command: string;
        /**
         * Provide login username if user is not root.
         */
        pn_cliusername: string;
        /**
         * Display output using a specific parameter. Use 'all' to display possible output. List of comma separated parameters.
         */
        pn_parameters?: string;
        /**
         * Specify formatting options.
         */
        pn_options?: string;
        /**
         * Target switch(es) to run the cli on.
         */
        pn_cliswitch?: string;
        [k: string]: any;
      };
      /**
       * Create, destroy, update, start, stop, and reboot a ProfitBricks virtual machine. When the virtual machine is created it can optionally wait for it to be 'running' before returning. This module has a dependency on profitbricks >= 1.0.0
       */
      profitbricks?: {
        /**
         * The system image ID for creating the virtual machine, e.g. a3eae284-a2fe-11e4-b187-5f1f641608c8.
         */
        image?: string;
        /**
         * Default: 2048
         *
         * The amount of memory to allocate to the virtual machine.
         */
        ram?: number | string;
        /**
         * THe ProfitBricks password. Overrides the PB_PASSWORD environement variable.
         */
        subscription_password?: string;
        /**
         * Public SSH keys allowing access to the virtual machine.
         */
        ssh_keys?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environement variable.
         */
        subscription_user?: string;
        /**
         * Default: 10
         *
         * The size in GB of the boot volume.
         */
        volume_size?: number | string;
        /**
         * Default: present
         *
         * create or terminate instances
         */
        state?: string;
        /**
         * Default: us/las
         *
         * The datacenter location. Use only if you want to create the Datacenter or else this value is ignored.
         */
        location?: "us/las" | "de/fra" | "de/fkb";
        /**
         * This will assign the machine to the public LAN. If no LAN exists with public Internet access it is created.
         */
        assign_public_ip?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * Whether or not to increment a single number in the name for created virtual machines.
         */
        auto_increment?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 1
         *
         * The ID of the LAN you wish to add the servers to.
         */
        lan?: number | string;
        /**
         * Password set for the administrative user.
         */
        image_password?: string;
        /**
         * Default: VIRTIO
         *
         * The bus type for the volume.
         */
        bus?: "IDE" | "VIRTIO";
        /**
         * list of instance ids, currently only used when state='absent' to remove instances.
         */
        instance_ids?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: 600
         *
         * how long before wait gives up, in seconds
         */
        wait_timeout?: number | string;
        /**
         * Default: AMD_OPTERON
         *
         * The CPU family type to allocate to the virtual machine.
         */
        cpu_family?: "AMD_OPTERON" | "INTEL_XEON";
        disk_type?: "HDD" | "SSD";
        /**
         * Default: yes
         *
         * wait for the instance to be in state 'running' before returning
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 1
         *
         * The number of virtual machines to create.
         */
        count?: number | string;
        /**
         * The datacenter to provision this virtual machine.
         */
        datacenter?: string;
        /**
         * Default: yes
         *
         * remove the bootVolume of the virtual machine you're destroying.
         */
        remove_boot_volume?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The name of the virtual machine.
         */
        name?: string;
        /**
         * Default: 2
         *
         * The number of CPU cores to allocate to the virtual machine.
         */
        cores?: number | string;
        [k: string]: any;
      };
      /**
       * Create, update, remove hosts on NetApp E-series storage arrays
       */
      netapp_e_host?: {
        /**
         * the id of the storage array you wish to act against
         */
        ssid: string;
        /**
         * the group you want the host to be a member of
         */
        group?: string;
        /**
         * The url to the SANtricity WebServices Proxy or embedded REST API.
         */
        api_url: string;
        /**
         * The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_password: string;
        force_port?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        state: "absent" | "present";
        /**
         * The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_username: string;
        /**
         * The index that maps to host type you wish to create. It is recommended to use the M(netapp_e_facts) module to gather this information. Alternatively you can use the WSP portal to retrieve the information.
         */
        host_type_index: number | string;
        /**
         * Default: True
         *
         * Should https certificates be validated?
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * a list of of dictionaries of host ports you wish to associate with the newly created host
         */
        ports?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * If the host doesnt yet exist, the label to assign at creation time.
         * If the hosts already exists, this is what is used to identify the host to apply any desired changes
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Add or remove server groups from OpenStack.
       */
      os_server_group?: {
        /**
         * Default: present
         *
         * Indicate desired state of the resource. When I(state) is 'present', then I(policies) is required.
         */
        state?: string;
        /**
         * Server group name.
         */
        name?: string;
        /**
         * A list of one or more policy names to associate with the server group. The list must contain at least one policy name. The current valid policy names are anti-affinity, affinity, soft-anti-affinity and soft-affinity.
         */
        policies?: string;
        [k: string]: any;
      };
      /**
       * Add or remove PostgreSQL users (roles) from a remote host and, optionally, grant the users access to an existing database or tables.
       * The fundamental function of the module is to create, or delete, roles from a PostgreSQL cluster. Privilege assignment, or removal, is an optional step, which works on one database at a time. This allows for the module to be called several times in the same module to modify the permissions on different databases, or to grant permissions to already existing users.
       * A user cannot be removed until all the privileges have been stripped from the user. In such situation, if the module tries to remove the user it will fail. To avoid this from happening the fail_on_user option signals the module to try to remove the user, but if not possible keep going; the module will report if changes happened and separately if the user was removed or not.
       */
      postgresql_user?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * This module can install new and updated packages on remote devices running Junos.  The module will compare the specified package with the one running on the remote device and install the specified version if there is a mismatch
       */
      junos_package?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Create and remove affinity groups.
       */
      cs_affinitygroup?: {
        /**
         * Account the affinity group is related to.
         */
        account?: string;
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        /**
         * Description of the affinity group.
         */
        description?: string;
        api_timeout?: number | string;
        /**
         * Type of the affinity group. If not specified, first found affinity type is used.
         */
        affinty_type?: string;
        api_region?: string;
        /**
         * Name of the project the affinity group is related to.
         */
        project?: string;
        /**
         * Default: present
         *
         * State of the affinity group.
         */
        state?: "present" | "absent";
        /**
         * Domain the affinity group is related to.
         */
        domain?: string;
        api_key?: string;
        /**
         * Name of the affinity group.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Ensure the state of AWS VPC NAT Gateways based on their id, allocation and subnet ids.
       */
      ec2_vpc_nat_gateway?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Creates or removes managed zones in Google Cloud DNS.
       */
      gcdns_zone?: {
        /**
         * An arbitrary text string to use for the zone description.
         */
        description?: string;
        /**
         * The DNS domain name of the zone.
         * This is NOT the Google Cloud DNS zone ID (e.g., example-com). If you attempt to specify a zone ID, this module will attempt to create a TLD and will fail.
         */
        zone?: string;
        /**
         * The e-mail address for a service account with access to Google Cloud DNS.
         */
        service_account_email?: string;
        /**
         * The path to the PEM file associated with the service account email.
         * This option is deprecated and may be removed in a future release. Use I(credentials_file) instead.
         */
        pem_file?: string;
        /**
         * Default: present
         *
         * Whether the given zone should or should not be present.
         */
        state?: string;
        /**
         * The path to the JSON file associated with the service account email.
         */
        credentials_file?: string;
        /**
         * The Google Cloud Platform project ID to use.
         */
        project_id?: string;
        [k: string]: any;
      };
      /**
       * Manage the state of a virtual host in RabbitMQ
       */
      rabbitmq_vhost?: {
        /**
         * Default: rabbit
         *
         * erlang node name of the rabbit we wish to configure
         */
        node?: string;
        /**
         * Default: no
         *
         * Enable/disable tracing for a vhost
         */
        tracing?: string;
        /**
         * Default: present
         *
         * The state of vhost
         */
        state?: string;
        /**
         * The name of the vhost to manage
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Manage cache snapshots in Amazon Elasticache.
       * Returns information about the specified snapshot.
       */
      elasticache_snapshot?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add, modify or remove Windows share and set share permissions.
       */
      win_share?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manage I(libvirt) networks.
       */
      virt_net?: {
        [k: string]: any;
      };
      /**
       * This module is used to configure CloudProperties object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_cloudproperties?: {
        /**
         * Properties specific to a cloud type.
         */
        info?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Hypervisor properties.
         */
        hyp_props?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Cloud types supported by cloudconnector.
         * Enum options - CLOUD_NONE, CLOUD_VCENTER, CLOUD_OPENSTACK, CLOUD_AWS, CLOUD_VCA, CLOUD_APIC, CLOUD_MESOS, CLOUD_LINUXSERVER, CLOUD_DOCKER_UCP,
         * CLOUD_RANCHER, CLOUD_OSHIFT_K8S.
         */
        cc_vtypes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        username?: string;
        controller?: string;
        /**
         * Cloudconnector properties.
         */
        cc_props?: {
          [k: string]: any;
        };
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        tenant?: string;
        [k: string]: any;
      };
      /**
       * Module to manage storage connections in oVirt
       */
      ovirt_storage_connections?: {
        /**
         * This parameter is releven only when updating a connection.
         * If I(true) the storage domain don't have to be in I(MAINTENANCE) state, so the storage connection is updated.
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        fetch_nested?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Option which will be passed when mounting storage.
         */
        mount_options?: string;
        /**
         * Id of the storage connection to manage.
         */
        id?: string;
        /**
         * Name of the storage domain to be used with storage connection.
         */
        storage?: string;
        /**
         * Port of the iSCSI storage server.
         */
        port?: number | string;
        /**
         * Default: present
         *
         * Should the storage connection be present or absent.
         */
        state?: "present" | "absent";
        /**
         * Storage type. For example: I(nfs), I(iscsi), etc.
         */
        type?: string;
        /**
         * A CHAP username for logging into a target.
         */
        username?: string;
        auth: {
          [k: string]: any;
        };
        nested_attributes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Address of the storage server. E.g.: myserver.mydomain.com
         */
        address?: string;
        /**
         * The time in tenths of a second to wait for a response before retrying NFS requests. Range 0 to 65535.
         */
        nfs_timeout?: number | string;
        /**
         * Path of the mount point of the storage. E.g.: /path/to/my/data
         */
        path?: string;
        /**
         * A CHAP password for logging into a target.
         */
        password?: string;
        /**
         * NFS version. One of: I(auto), I(v3), I(v4) or I(v4_1).
         */
        nfs_version?: string;
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The target IQN for the storage device.
         */
        target?: string;
        poll_interval?: number | string;
        /**
         * The number of times to retry a request before attempting further recovery actions. Range 0 to 65535.
         */
        nfs_retrans?: number | string;
        timeout?: number | string;
        /**
         * Virtual File System type.
         */
        vfs_type?: string;
        [k: string]: any;
      };
      /**
       * Manages ARP attributes of VXLAN on HUAWEI CloudEngine devices.
       */
      ce_vxlan_arp?: {
        username?: string;
        /**
         * Configures the local device as the router reflector (RR) on the EVN network.
         */
        evn_server?: "enable" | "disable";
        /**
         * Enables ARP broadcast suppression in a BD.
         */
        arp_suppress?: "enable" | "disable";
        /**
         * Enables EVN BGP.
         */
        evn_bgp?: "enable" | "disable";
        /**
         * Full name of VBDIF interface, i.e. Vbdif100.
         */
        vbdif_name?: string;
        /**
         * Enables EVN BGP or BGP EVPN to collect host information.
         */
        arp_collect_host?: "enable" | "disable";
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        /**
         * Specifies a BD(bridge domain) ID. The value is an integer ranging from 1 to 16777215.
         */
        bridge_domain_id?: string;
        /**
         * Configures the local device as the route reflector (RR) and its peer as the client.
         */
        evn_reflect_client?: "enable" | "disable";
        host?: string;
        /**
         * Specifies the IP address of an EVN BGP peer. The value is in dotted decimal notation.
         */
        evn_peer_ip?: string;
        /**
         * Enables EVN BGP or BGP EVPN to advertise host information.
         */
        host_collect_protocol?: "bgp" | "none";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Specifies the source address of an EVN BGP peer. The value is in dotted decimal notation.
         */
        evn_source_ip?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Create, Update or Destroy a Healthcheck. Currently only HTTP and HTTPS Healthchecks are supported. Healthchecks are used to monitor individual instances, managed instance groups and/or backend services. Healtchecks are reusable.
       * Visit U(https://cloud.google.com/compute/docs/load-balancing/health-checks) for an overview of Healthchecks on GCP.
       * See U(https://cloud.google.com/compute/docs/reference/latest/httpHealthChecks) for API details on HTTP Healthchecks.
       * See U(https://cloud.google.com/compute/docs/reference/latest/httpsHealthChecks) for more details on the HTTPS Healtcheck API.
       */
      gcp_healthcheck?: {
        /**
         * Name of the Healthcheck.
         */
        healthcheck_name: string;
        /**
         * Type of Healthcheck.
         */
        healthcheck_type: "HTTP" | "HTTPS";
        /**
         * Default: 5
         *
         * How often (in seconds) to send a health check.
         */
        check_interval?: number | string;
        /**
         * service account email
         */
        service_account_email?: string;
        /**
         * Default: 2
         *
         * A so-far unhealthy instance will be marked healthy after this many consecutive successes.
         */
        healthy_threshold?: number | string;
        /**
         * service account permissions (see U(https://cloud.google.com/sdk/gcloud/reference/compute/instances/create), --scopes section for detailed information)
         */
        service_account_permissions?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: 2
         *
         * A so-far healthy instance will be marked unhealthy after this many consecutive failures.
         */
        unhealthy_threshold?: number | string;
        /**
         * The value of the host header in the health check request. If left empty, the public IP on behalf of which this health check is performed will be used.
         */
        host_header?: string;
        /**
         * State of the Healthcheck.
         */
        state?: "present" | "absent";
        /**
         * Default: 5
         *
         * How long (in seconds) to wait for a response before claiming failure. It is invalid for timeout to have a greater value than check_interval.
         */
        timeout?: number | string;
        /**
         * Path to the JSON file associated with the service account email
         */
        credentials_file?: string;
        /**
         * Your GCP project ID
         */
        project_id?: string;
        /**
         * The TCP port number for the health check request. The default value is 443 for HTTPS and 80 for HTTP.
         */
        port?: number | string;
        /**
         * Default: /
         *
         * The request path of the HTTPS health check request.
         */
        request_path?: string;
        [k: string]: any;
      };
      /**
       * Manage (add, remove, change) individual interface options in an interfaces-style file without having to manage the file as a whole with, say, M(template) or M(assemble). Interface has to be presented in a file.
       * Read information about interfaces from interfaces-styled files
       */
      interfaces_file?: {
        /**
         * Name of the interface, required for value changes or option remove
         */
        iface?: string;
        /**
         * Name of the option, required for value changes or option remove
         */
        option?: string;
        /**
         * Default: /etc/network/interfaces
         *
         * Path to the interfaces file
         */
        dest?: string;
        /**
         * If I(option) is not presented for the I(interface) and I(state) is C(present) option will be added. If I(option) already exists and is not C(pre-up), C(up), C(post-up) or C(down), it's value will be updated. C(pre-up), C(up), C(post-up) and C(down) options can't be updated, only adding new options, removing existing ones or cleaning the whole option set are supported
         */
        value?: string;
        /**
         * Default: present
         *
         * If set to C(absent) the option or section will be removed if present instead of created.
         */
        state?: "present" | "absent";
        /**
         * Default: no
         *
         * Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
         */
        backup?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage the life cycle of docker containers.
       * Supports check mode. Run with --check and --diff to view config difference and list of actions to be taken.
       */
      docker_container?: {
        /**
         * Allocate a pseudo-TTY.
         */
        tty?: string;
        /**
         * List of custom DNS servers.
         */
        dns_servers?: string;
        /**
         * List of name aliases for linked containers in the format C(container_name:alias)
         */
        links?: string;
        /**
         * An integer value containing the score given to the container in order to tune OOM killer preferences.
         */
        oom_score_adj?: string;
        /**
         * enable auto-removal of the container on daemon side when the container's process exits
         */
        auto_remove?: string;
        /**
         * Repository path and tag used to create the container. If an image is not found or pull is true, the image will be pulled from the registry. If no tag is included, 'latest' will be used.
         */
        image?: string;
        /**
         * Use with present and started states to force the re-creation of an existing container.
         */
        recreate?: string;
        /**
         * Command to execute when the container starts. A command may be either a string or a list. Prior to version 2.4, strings were split on commas.
         */
        command?: string;
        /**
         * Memory soft limit (format: <number>[<unit>]). Number is a positive integer. Unit can be one of b, k, m, or g
         */
        memory_reservation?: string;
        /**
         * Use with the started state to pause running processes inside the container.
         */
        paused?: string;
        /**
         * If true, skip image verification.
         */
        trust_image_content?: string;
        /**
         * CPUs in which to allow execution C(1,3) or C(1-3).
         */
        cpuset_cpus?: string;
        /**
         * Number of seconds to wait for the container to stop before sending SIGKILL.
         */
        stop_timeout?: string;
        /**
         * List of security options in the form of C("label:user:User")
         */
        security_opts?: string;
        /**
         * Use the kill command when stopping a running container.
         */
        force_kill?: string;
        /**
         * Set the PID namespace mode for the container. Currently only supports 'host'.
         */
        pid_mode?: string;
        /**
         * Path to a file containing environment variables I(FOO=BAR).
         * If variable also present in C(env), then C(env) value will override.
         * Requires docker-py >= 1.4.0.
         */
        env_file?: string;
        /**
         * List of networks the container belongs to.
         * Each network is a dict with keys C(name), C(ipv4_address), C(ipv6_address), C(links), C(aliases).
         * For each network C(name) is required, all other keys are optional.
         * If included, C(links) or C(aliases) are lists.
         * For examples of the data structure and usage see EXAMPLES below.
         * To remove a container from one or more networks, use the C(purge_networks) option.
         */
        networks?: string;
        /**
         * Limit CPU CFS (Completely Fair Scheduler) quota
         */
        cpu_quota?: string;
        /**
         * Specify the logging driver. Docker uses json-file by default.
         */
        log_driver?: string;
        /**
         * Limit CPU CFS (Completely Fair Scheduler) period
         */
        cpu_period?: string;
        /**
         * Default: True
         *
         * Enable detached mode to leave the container running in background. If disabled, the task will reflect the status of the container run (failed if the command failed).
         */
        detach?: string;
        /**
         * Memory nodes (MEMs) in which to allow execution C(0-3) or C(0,1)
         */
        cpuset_mems?: string;
        /**
         * Container hostname.
         */
        hostname?: string;
        /**
         * Use with restart policy to control maximum number of restart attempts.
         */
        restart_retries?: string;
        /**
         * Path to the working directory.
         */
        working_dir?: string;
        /**
         * List of capabilities to add to the container.
         */
        capabilities?: string;
        /**
         * Default: started
         *
         * I(absent) - A container matching the specified name will be stopped and removed. Use force_kill to kill the container rather than stopping it. Use keep_volumes to retain volumes associated with the removed container.
         * I(present) - Asserts the existence of a container matching the name and any provided configuration parameters. If no container matches the name, a container will be created. If a container matches the name but the provided configuration does not match, the container will be updated, if it can be. If it cannot be updated, it will be removed and re-created with the requested config. Image version will be taken into account when comparing configuration. To ignore image version use the ignore_image option. Use the recreate option to force the re-creation of the matching container. Use force_kill to kill the container rather than stopping it. Use keep_volumes to retain volumes associated with a removed container.
         * I(started) - Asserts there is a running container matching the name and any provided configuration. If no container matches the name, a container will be created and started. If a container matching the name is found but the configuration does not match, the container will be updated, if it can be. If it cannot be updated, it will be removed and a new container will be created with the requested configuration and started. Image version will be taken into account when comparing configuration. To ignore image version use the ignore_image option. Use recreate to always re-create a matching container, even if it is running. Use restart to force a matching container to be stopped and restarted. Use force_kill to kill a container rather than stopping it. Use keep_volumes to retain volumes associated with a removed container.
         * I(stopped) - Asserts that the container is first I(present), and then if the container is running moves it to a stopped state. Use force_kill to kill a container rather than stopping it.
         */
        state?: string;
        /**
         * Use with I(detach) to remove the container after successful execution.
         */
        cleanup?: string;
        /**
         * Command that overwrites the default ENTRYPOINT of the image.
         */
        entrypoint?: string;
        /**
         * Use with started state to force a matching container to be stopped and restarted.
         */
        restart?: string;
        /**
         * Dictionary of key,value pairs.
         */
        env?: string;
        /**
         * Memory limit (format: <number>[<unit>]). Number is a positive integer. Unit can be one of b, k, m, or g
         */
        memory?: string;
        /**
         * List of container names or Ids to get volumes from.
         */
        volumes_from?: string;
        /**
         * Block IO (relative weight), between 10 and 1000.
         */
        blkio_weight?: string;
        /**
         * Dictionary of options specific to the chosen log_driver. See https://docs.docker.com/engine/admin/logging/overview/ for details.
         */
        log_options?: string;
        /**
         * Give extended privileges to the container.
         */
        privileged?: string;
        /**
         * List of additional container ports which informs Docker that the container listens on the specified network ports at runtime. If the port is already exposed using EXPOSE in a Dockerfile, it does not need to be exposed again.
         */
        exposed_ports?: string;
        /**
         * Mount the container's root file system as read-only.
         */
        read_only?: string;
        /**
         * Dictionary of key value pairs.
         */
        labels?: string;
        /**
         * Set the IPC mode for the container. Can be one of 'container:<name|id>' to reuse another container's IPC namespace or 'host' to use the host's IPC namespace within the container.
         */
        ipc_mode?: string;
        /**
         * Whether or not to disable OOM Killer for the container.
         */
        oom_killer?: string;
        /**
         * Size of `/dev/shm`. The format is `<number><unit>`. `number` must be greater than `0`. Unit is optional and can be `b` (bytes), `k` (kilobytes), `m` (megabytes), or `g` (gigabytes).
         * Omitting the unit defaults to bytes. If you omit the size entirely, the system uses `64m`.
         */
        shm_size?: string;
        /**
         * Container MAC address (e.g. 92:d0:c6:0a:29:33)
         */
        mac_address?: string;
        /**
         * Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.
         */
        memory_swappiness?: string;
        /**
         * Override default signal used to kill a running container.
         */
        kill_signal?: string;
        /**
         * Connect the container to a network.
         */
        network_mode?: string;
        /**
         * Default: none
         *
         * The container volume driver.
         */
        volume_driver?: string;
        /**
         * Kernel memory limit (format: <number>[<unit>]). Number is a positive integer. Unit can be one of b, k, m, or g. Minimum is 4M.
         */
        kernel_memory?: string;
        /**
         * Sets the username or UID used and optionally the groupname or GID for the specified command.
         * Can be [ user | user:group | uid | uid:gid | user:gid | uid:group ]
         */
        user?: string;
        /**
         * List of additional group names and/or IDs that the container process will run as.
         */
        groups?: string;
        /**
         * Mount a tmpfs directory
         */
        tmpfs?: string;
        /**
         * Default: on-failure
         *
         * Container restart policy. Place quotes around I(no) option.
         */
        restart_policy?: string;
        /**
         * Total memory limit (memory + swap, format:<number>[<unit>]). Number is a positive integer. Unit can be one of b, k, m, or g.
         */
        memory_swap?: string;
        /**
         * If true, always pull the latest version of an image. Otherwise, will only pull an image when missing.
         */
        pull?: string;
        /**
         * Assign a name to a new container or match an existing container.
         * When identifying an existing container name may be a name or a long or short container ID.
         */
        name?: string;
        /**
         * Override default signal used to stop the container.
         */
        stop_signal?: string;
        /**
         * Default: True
         *
         * Retain volumes associated with a removed container.
         */
        keep_volumes?: string;
        /**
         * When C(state) is I(present) or I(started) the module compares the configuration of an existing container to requested configuration. The evaluation includes the image version. If the image version in the registry does not match the container, the container will be recreated. Stop this behavior by setting C(ignore_image) to I(True).
         */
        ignore_image?: string;
        /**
         * List of host device bindings to add to the container. Each binding is a mapping expressed in the format: <path_on_host>:<path_in_container>:<cgroup_permissions>
         */
        devices?: string;
        /**
         * Dict of host-to-IP mappings, where each host name is a key in the dictionary. Each host name will be added to the container's /etc/hosts file.
         */
        etc_hosts?: string;
        /**
         * Set the UTS namespace mode for the container.
         */
        uts?: string;
        /**
         * Dictionary of key,value pairs.
         */
        sysctls?: string;
        /**
         * List of ports to publish from the container to the host.
         * Use docker CLI syntax: C(8000), C(9000:8000), or C(0.0.0.0:9000:8000), where 8000 is a container port, 9000 is a host port, and 0.0.0.0 is a host interface.
         * Container ports must be exposed either in the Dockerfile or via the C(expose) option.
         * A value of all will publish all exposed container ports to random host ports, ignoring any other mappings.
         * If C(networks) parameter is provided, will inspect each network to see if there exists a bridge network with optional parameter com.docker.network.bridge.host_binding_ipv4. If such a network is found, then published ports where no host IP address is specified will be bound to the host IP pointed to by com.docker.network.bridge.host_binding_ipv4. Note that the first bridge network with a com.docker.network.bridge.host_binding_ipv4 value encountered in the list of C(networks) is the one that will be used.
         */
        published_ports?: string;
        /**
         * List of volumes to mount within the container.
         * Use docker CLI-style syntax: C(/host:/container[:mode])
         * You can specify a read mode for the mount with either C(ro) or C(rw).
         * SELinux hosts can additionally use C(z) or C(Z) to use a shared or private label for the volume.
         */
        volumes?: string;
        /**
         * List of custom DNS search domains.
         */
        dns_search_domains?: string;
        /**
         * Remove the container from ALL networks not included in C(networks) parameter.
         * Any default networks such as I(bridge), if not found in C(networks), will be removed as well.
         */
        purge_networks?: string;
        /**
         * CPU shares (relative weight).
         */
        cpu_shares?: string;
        /**
         * List of ulimit options. A ulimit is specified as C(nofile:262144:262144)
         */
        ulimits?: string;
        /**
         * Keep stdin open after a container is launched, even if not attached.
         */
        interactive?: string;
        [k: string]: any;
      };
      /**
       * This module allows the management of AWS Lambda policy statements. It is idempotent and supports "Check" mode.  Use module M(lambda) to manage the lambda function itself, M(lambda_alias) to manage function aliases, M(lambda_event) to manage event source mappings such as Kinesis streams, M(lambda_invoke) to execute a lambda function and M(lambda_facts) to gather facts relating to one or more lambda functions.
       */
      lambda_policy?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * This will configure both login and motd banners on network devices. It allows playbooks to add or remote banner text from the active running configuration.
       */
      junos_banner?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * The banner text that should be present in the remote device running configuration.  This argument accepts a multiline string, with no empty lines. Requires I(state=present).
         */
        text?: string;
        /**
         * Default: present
         *
         * Specifies whether or not the configuration is present in the current devices active running configuration.
         */
        state?: "present" | "absent";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Default: True
         *
         * Specifies whether or not the configuration is active or deactivated
         */
        active?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        /**
         * Specifies which banner that should be configured on the remote device. Value C(login) indicates system login message prior to authenticating, C(motd) is login announcement after successful authentication.
         */
        banner: "login" | "motd";
        port?: number | string;
        transport?: string;
        [k: string]: any;
      };
      /**
       * Gather facts about AWS Autoscaling Launch Configurations
       */
      ec2_lc_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create an annotation event with a given category, title and description. Optionally start, end or durations can be provided
       */
      circonus_annotation?: {
        /**
         * Annotation Category
         */
        category: string;
        /**
         * Description of annotation
         */
        description: string;
        /**
         * Title of annotation
         */
        title: string;
        /**
         * Unix timestamp of event end, defaults to now + duration
         */
        stop?: number | string;
        /**
         * Unix timestamp of event start, defaults to now
         */
        start?: number | string;
        /**
         * Duration in seconds of annotation, defaults to 0
         */
        duration?: number | string;
        /**
         * Circonus API key
         */
        api_key: string;
        [k: string]: any;
      };
      /**
       * Manage service configuration in Netscaler.
       * This module allows the creation, deletion and modification of Netscaler services.
       * This module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.
       * This module supports check mode.
       */
      netscaler_service?: {
        /**
         * Any information about the service.
         */
        comment?: string;
        /**
         * Enable TCP buffering for the service.
         */
        tcpb?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Cache type supported by the cache server.
         */
        cachetype?: "TRANSPARENT" | "REVERSE" | "FORWARD";
        /**
         * Default: None
         *
         * Unique identifier for the service. Used when the persistency type for the virtual server is set to Custom Server ID.
         */
        customserverid?: string;
        /**
         * Name of the server that hosts the service.
         * Minimum length = 1
         */
        servername?: string;
        save_config?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * When set to C(yes) the service state will be set to DISABLED.
         * When set to C(no) the service state will be set to ENABLED.
         * Note that due to limitations of the underlying NITRO API a C(disabled) state change alone does not cause the module result to report a changed status.
         */
        disabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nitro_protocol?: "http" | "https";
        /**
         * Maximum number of requests that can be sent on a persistent connection to the service.
         * Note: Connection requests beyond this value are rejected.
         * Minimum value = 0
         * Maximum value = 65535
         */
        maxreq?: number;
        /**
         * Shut down gracefully, not accepting any new connections, and disabling the service when all of its connections are closed.
         */
        graceful?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Maximum bandwidth, in Kbps, allocated to the service.
         * Minimum value = 0
         * Maximum value = 4294967287
         */
        maxbandwidth?: number;
        /**
         * Time, in seconds, after which to terminate an idle server connection.
         * Minimum value = 0
         * Maximum value = 31536000
         */
        svrtimeout?: number;
        /**
         * Port number of the service.
         * Range 1 - 65535
         * * in CLI is represented as 65535 in NITRO API
         */
        port?: number | string;
        /**
         * Time, in seconds, after which to terminate an idle client connection.
         * Minimum value = 0
         * Maximum value = 31536000
         */
        clttimeout?: number;
        /**
         * Protocol in which data is exchanged with the service.
         */
        servicetype?:
          | "HTTP"
          | "FTP"
          | "TCP"
          | "UDP"
          | "SSL"
          | "SSL_BRIDGE"
          | "SSL_TCP"
          | "DTLS"
          | "NNTP"
          | "RPCSVR"
          | "DNS"
          | "ADNS"
          | "SNMP"
          | "RTSP"
          | "DHCPRA"
          | "ANY"
          | "SIP_UDP"
          | "SIP_TCP"
          | "SIP_SSL"
          | "DNS_TCP"
          | "ADNS_TCP"
          | "MYSQL"
          | "MSSQL"
          | "ORACLE"
          | "RADIUS"
          | "RADIUSListener"
          | "RDP"
          | "DIAMETER"
          | "SSL_DIAMETER"
          | "TFTP"
          | "SMPP"
          | "PPTP"
          | "GRE"
          | "SYSLOGTCP"
          | "SYSLOGUDP"
          | "FIX"
          | "SSL_FIX";
        /**
         * Minimum sum of weights of the monitors that are bound to this service. Used to determine whether to mark a service as UP or DOWN.
         * Minimum value = 0
         * Maximum value = 65535
         */
        monthreshold?: number;
        /**
         * Maximum number of simultaneous open connections to the service.
         * Minimum value = 0
         * Maximum value = 4294967294
         */
        maxclient?: number;
        /**
         * The new IP address of the service.
         */
        ipaddress?: string;
        state?: "present" | "absent";
        /**
         * Use the client's IP address as the source IP address when initiating a connection to the server. When creating a service, if you do not set this parameter, the service inherits the global Use Source IP setting (available in the enable ns mode and disable ns mode CLI commands, or in the System > Settings > Configure modes > Configure Modes dialog box). However, you can override this setting after you create the service.
         */
        usip?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nitro_user: string;
        /**
         * Network profile to use for the service.
         * Minimum length = 1
         * Maximum length = 127
         */
        netprofile?: string;
        /**
         * Enable RTSP session ID mapping for the service.
         */
        rtspsessionidremap?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nitro_timeout?: number;
        /**
         * IP to assign to the service.
         * Minimum length = 1
         */
        ip?: string;
        /**
         * Port to which clear text data must be sent after the appliance decrypts incoming SSL traffic. Applicable to transparent SSL services.
         * Minimum value = 1
         */
        cleartextport?: number | string;
        /**
         * Enable logging of AppFlow information.
         */
        appflowlog?: "enabled" | "disabled";
        /**
         * Use the transparent cache redirection virtual server to forward requests to the cache server.
         * Note: Do not specify this parameter if you set the Cache Type parameter.
         */
        cacheable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A list of load balancing monitors to bind to this service.
         * Each monitor entry is a dictionary which may contain the following options.
         * Note that if not using the built in monitors they must first be setup.
         */
        monitor_bindings?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * A numerical identifier that can be used by hash based load balancing methods. Must be unique for each service.
         * Minimum value = 1
         */
        hashid?: number;
        /**
         * By turning on this option packets destined to a service in a cluster will not under go any steering. Turn this option for single packet request response mode or when the upstream device is performing a proper RSS for connection based distribution.
         */
        processlocal?: "enabled" | "disabled";
        /**
         * Use Layer 2 mode to bridge the packets sent to this service if it is marked as DOWN. If the service is DOWN, and this parameter is disabled, the packets are dropped.
         */
        accessdown?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name for the service. Must begin with an ASCII alphabetic or underscore C(_) character, and must contain only ASCII alphanumeric, underscore C(_), hash C(#), period C(.), space C( ), colon C(:), at C(@), equals C(=), and hyphen C(-) characters. Cannot be changed after the service has been created.
         * Minimum length = 1
         */
        name?: string;
        /**
         * Name of the TCP profile that contains TCP configuration settings for the service.
         * Minimum length = 1
         * Maximum length = 127
         */
        tcpprofilename?: string;
        /**
         * Enable surge protection for the service.
         */
        sp?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Flush all active transactions associated with a service whose state transitions from UP to DOWN. Do not enable this option for applications that must complete their transactions.
         */
        downstateflush?: "enabled" | "disabled";
        /**
         * Name for the HTTP header whose value must be set to the IP address of the client. Used with the Client IP parameter. If you set the Client IP parameter, and you do not specify a name for the header, the appliance uses the header name specified for the global Client IP Header parameter (the cipHeader parameter in the set ns param CLI command or the Client IP Header parameter in the Configure HTTP Parameters dialog box at System > Settings > Change HTTP parameters). If the global Client IP Header parameter is not specified, the appliance inserts a header with the name "client-ip.".
         * Minimum length = 1
         */
        cipheader?: string;
        /**
         * Name of the HTTP profile that contains HTTP configuration settings for the service.
         * Minimum length = 1
         * Maximum length = 127
         */
        httpprofilename?: string;
        nsip: string;
        /**
         * Before forwarding a request to the service, insert an HTTP header with the client's IPv4 or IPv6 address as its value. Used if the server needs the client's IP address for security, accounting, or other purposes, and setting the Use Source IP parameter is not a viable option.
         */
        cip?: "enabled" | "disabled";
        /**
         * Default: True
         *
         * Monitor the health of this service
         */
        healthmonitor?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Use the proxy port as the source port when initiating connections with the server. With the NO setting, the client-side connection port is used as the source port for the server-side connection.
         * Note: This parameter is available only when the Use Source IP (USIP) parameter is set to YES.
         */
        useproxyport?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enable client keep-alive for the service.
         */
        cka?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nitro_pass: string;
        /**
         * Enable compression for the service.
         */
        cmp?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the DNS profile to be associated with the service. DNS profile properties will applied to the transactions processed by a service. This parameter is valid only for ADNS and ADNS-TCP services.
         * Minimum length = 1
         * Maximum length = 127
         */
        dnsprofilename?: string;
        [k: string]: any;
      };
      /**
       * This module controls active and configured mount points in C(/etc/fstab).
       */
      mount?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Provides an interface to manage Fibre Channel Network resources. Can create, update, and delete.
       */
      oneview_fc_network?: {
        username?: string;
        image_streamer_hostname?: string;
        hostname?: string;
        config?: string;
        validate_etag?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Indicates the desired state for the Fibre Channel Network resource. C(present) will ensure data properties are compliant with OneView. C(absent) will remove the resource from OneView, if it exists.
         */
        state: "present" | "absent";
        password?: string;
        /**
         * List with the Fibre Channel Network properties.
         */
        data: {
          [k: string]: any;
        };
        api_version?: number | string;
        [k: string]: any;
      };
      /**
       * This module allows one to (re)generate OpenSSL public keys from their private keys. It uses the pyOpenSSL python library to interact with openssl. Keys are generated in PEM format. This module works only if the version of PyOpenSSL is recent enough (> 16.0.0). This module uses file common arguments to specify generated file permissions.
       */
      openssl_publickey?: {
        /**
         * The passphrase for the privatekey.
         */
        privatekey_passphrase?: string;
        /**
         * Should the key be regenerated even it it already exists
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: PEM
         *
         * The format of the public key.
         */
        format?: "PEM" | "OpenSSH";
        /**
         * Path to the TLS/SSL private key from which to generate the public key.
         */
        privatekey_path?: string;
        /**
         * Default: present
         *
         * Whether the public key should exist or not, taking action if the state is different from what is stated.
         */
        state?: "present" | "absent";
        /**
         * Name of the file in which the generated TLS/SSL public key will be written.
         */
        path: string;
        [k: string]: any;
      };
      /**
       * Manage a bare metal server in the Packet Host (a "device" in the API terms).
       * When the machine is created it can optionally wait for public IP address, or for active state.
       * This module has a dependency on packet >= 1.0.
       * API is documented at U(https://www.packet.net/developers/api/devices).
       */
      packet_device?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Use this module to manage crontab variables. This module allows you to create, update, or delete cron variable definitions.
       */
      cronvar?: {
        /**
         * Name of the crontab variable.
         */
        name: string;
        /**
         * Used with C(state=present). If specified, the variable will be inserted just before the variable specified.
         */
        insertbefore?: string;
        /**
         * If specified, uses this file instead of an individual user's crontab. Without a leading /, this is assumed to be in /etc/cron.d.  With a leading /, this is taken as absolute.
         */
        cron_file?: string;
        /**
         * The value to set this variable to.  Required if state=present.
         */
        value?: string;
        /**
         * Default: present
         *
         * Whether to ensure that the variable is present or absent.
         */
        state?: "present" | "absent";
        /**
         * Default: root
         *
         * The specific user whose crontab should be modified.
         */
        user?: string;
        /**
         * Used with C(state=present). If specified, the variable will be inserted after the variable specified.
         */
        insertafter?: string;
        /**
         * If set, create a backup of the crontab before it is modified. The location of the backup is returned in the C(backup) variable by this module.
         */
        backup?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Create, update, or destroy Ansible Tower roles. See U(https://www.ansible.com/tower) for an overview.
       */
      tower_role?: {
        /**
         * Credential the role acts on.
         */
        credential?: string;
        /**
         * The job_template the role acts on.
         */
        job_template?: string;
        /**
         * URL to your Tower instance.
         */
        tower_host?: string;
        /**
         * Team that receives the permissions specified by the role.
         */
        team?: string;
        /**
         * Project the role acts on.
         */
        project?: string;
        /**
         * Username for your Tower instance.
         */
        tower_username?: string;
        /**
         * Default: present
         *
         * Desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * The role type to grant/revoke.
         */
        role?: "admin" | "read" | "member" | "execute" | "adhoc" | "update" | "use" | "auditor";
        /**
         * Inventory the role acts on.
         */
        inventory?: string;
        /**
         * Password for your Tower instance.
         */
        tower_password?: string;
        /**
         * Path to the Tower config file. See notes.
         */
        tower_config_file?: string;
        /**
         * Organiation the role acts on.
         */
        organization?: string;
        /**
         * Team that the role acts on.
         */
        target_team?: string;
        /**
         * Default: True
         *
         * Dis/allow insecure connections to Tower. If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        tower_verify_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * User that receives the permissions specified by the role.
         */
        user?: string;
        [k: string]: any;
      };
      /**
       * Apstra AOS External Router module let you manage your External Router easily. You can create create and delete External Router by Name, ID or by using a JSON File. This module is idempotent and support the I(check) mode. It's using the AOS REST API.
       */
      aos_external_router?: {
        /**
         * Name of the External Router to manage. Only one of I(name), I(id) or I(content) can be set.
         */
        name?: string;
        /**
         * IP address of the Loopback interface of the external_router.
         */
        loopback?: string;
        /**
         * AOS Id of the External Router to manage (can't be used to create a new External Router), Only one of I(name), I(id) or I(content) can be set.
         */
        id?: string;
        /**
         * Datastructure of the External Router to create. The format is defined by the I(content_format) parameter. It's the same datastructure that is returned on success in I(value).
         */
        content?: string;
        /**
         * Default: present
         *
         * Indicate what is the expected state of the External Router (present or not).
         */
        state?: "present" | "absent";
        /**
         * An existing AOS session as obtained by M(aos_login) module.
         */
        session: {
          [k: string]: any;
        };
        /**
         * ASN id of the external_router.
         */
        asn?: string;
        [k: string]: any;
      };
      /**
       * Manages BFD global configuration on HUAWEI CloudEngine devices.
       */
      ce_bfd_global?: {
        username?: string;
        /**
         * Specifies a maximum flapping suppression time for a BFD session. The value is an integer ranging from 1 to 3600000, in milliseconds. The default value is 15000.
         */
        damp_max_wait_time?: number | string;
        /**
         * Indicates the priority of BFD control packets for static BFD sessions. The value is an integer ranging from 0 to 7. The default priority is 7, which is the highest priority of BFD control packets.
         */
        tos_exp_static?: number | string;
        /**
         * Specifies the default multicast IP address. The value ranges from 224.0.0.107 to 224.0.0.250.
         */
        default_ip?: string;
        /**
         * Specifies the delay before a BFD session becomes Up. The value is an integer ranging from 1 to 600, in seconds. The default value is 0, indicating that a BFD session immediately becomes Up.
         */
        delay_up_time?: number | string;
        /**
         * Enables the global Bidirectional Forwarding Detection (BFD) function.
         */
        bfd_enable?: "enable" | "disable";
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        /**
         * Specifies an initial flapping suppression time for a BFD session. The value is an integer ranging from 1 to 3600000, in milliseconds. The default value is 2000.
         */
        damp_init_wait_time?: number | string;
        host?: string;
        /**
         * Indicates the priority of BFD control packets for dynamic BFD sessions. The value is an integer ranging from 0 to 7. The default priority is 7, which is the highest priority of BFD control packets.
         */
        tos_exp_dynamic?: number | string;
        /**
         * Specifies a secondary flapping suppression time for a BFD session. The value is an integer ranging from 1 to 3600000, in milliseconds. The default value is 5000.
         */
        damp_second_wait_time?: number | string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Set system's hostname, supports most OSs/Distributions, including those using systemd.
       * Note, this module does *NOT* modify C(/etc/hosts). You need to modify it yourself using other modules like template or replace.
       * Windows, HP-UX and AIX are not currently supported.
       */
      hostname?: {
        /**
         * Name of the host
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure DnsPolicy object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_dnspolicy?: {
        username?: string;
        /**
         * Field introduced in 17.1.1.
         */
        description?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         * Field introduced in 17.1.1.
         */
        tenant_ref?: string;
        controller?: string;
        /**
         * Dns rules.
         * Field introduced in 17.1.1.
         */
        rule?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Name of the dns policy.
         * Field introduced in 17.1.1.
         */
        name?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Creator name.
         * Field introduced in 17.1.1.
         */
        created_by?: string;
        tenant?: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Uuid of the dns policy.
         * Field introduced in 17.1.1.
         */
        uuid?: string;
        [k: string]: any;
      };
      /**
       * Register and remove ISO images.
       */
      cs_iso?: {
        /**
         * Register the ISO to be featured. Only used if C(state) is present.
         */
        is_featured?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_key?: string;
        /**
         * Name of the ISO.
         */
        name: string;
        api_http_method?: "get" | "post";
        /**
         * Default: present
         *
         * State of the ISO.
         */
        state?: "present" | "absent";
        /**
         * Default: True
         *
         * Register the ISO to be bootable. Only used if C(state) is present.
         */
        bootable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_secret?: string;
        api_timeout?: number | string;
        /**
         * Domain the ISO is related to.
         */
        domain?: string;
        /**
         * Register the ISO having XS/VMWare tools installed inorder to support dynamic scaling of VM cpu/memory. Only used if C(state) is present.
         */
        is_dynamically_scalable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the project the ISO to be registered in.
         */
        project?: string;
        /**
         * URL where the ISO can be downloaded from. Required if C(state) is present.
         */
        url?: string;
        /**
         * Default: self
         *
         * Name of the filter used to search for the ISO.
         */
        iso_filter?: "featured" | "self" | "selfexecutable" | "sharedexecutable" | "executable" | "community";
        api_region?: string;
        /**
         * This flag is used for searching existing ISOs. If set to C(true), it will only list ISO ready for deployment e.g. successfully downloaded and installed. Recommended to set it to C(false).
         */
        is_ready?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The MD5 checksum value of this ISO. If set, we search by checksum instead of name.
         */
        checksum?: string;
        /**
         * Account the ISO is related to.
         */
        account?: string;
        /**
         * Name of the OS that best represents the OS of this ISO. If the iso is bootable this parameter needs to be passed. Required if C(state) is present.
         */
        os_type?: string;
        /**
         * Name of the zone you wish the ISO to be registered or deleted from. If not specified, first zone found will be used.
         */
        zone?: string;
        api_url?: string;
        [k: string]: any;
      };
      /**
       * Aruba configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with Aruba configuration sections in a deterministic way.
       */
      aruba_config?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages timeout mode of NetStream on HUAWEI CloudEngine switches.
       */
      ce_netstream_aging?: {
        username?: string;
        /**
         * Netstream timeout type.
         */
        timeout_type?: "active" | "inactive" | "tcp-session" | "manual";
        /**
         * Specifies the packet type of netstream timeout active interval.
         */
        type?: "ip" | "vxlan";
        /**
         * Default: 30
         *
         * Netstream timeout interval. If is active type the interval is 1-60. If is inactive ,the interval is 5-600.
         */
        timeout_interval?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Specifies the slot number of netstream manual timeout.
         */
        manual_slot?: string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Manages F5 BIG-IP LTM nodes via iControl SOAP API
       */
      bigip_node?: {
        /**
         * Set new session availability status for node
         */
        session_state?: string;
        /**
         * Node name
         */
        name?: string;
        /**
         * Set monitor availability status for node
         */
        monitor_state?: string;
        /**
         * Node description.
         */
        description?: string;
        /**
         * Default: Common
         *
         * Partition
         */
        partition?: string;
        /**
         * Node IP. Required when state=present and node does not exist. Error when state=absent.
         */
        host?: string;
        /**
         * Monitor template name list. Always use the full path to the monitor.
         */
        monitors?: string;
        /**
         * Default: present
         *
         * Pool member state
         */
        state?: string;
        /**
         * Monitor rule type when monitors > 1
         */
        monitor_type?: string;
        /**
         * Monitor quorum value when monitor_type is m_of_n
         */
        quorum?: string;
        [k: string]: any;
      };
      /**
       * The manageiq_provider module supports adding, updating, and deleting provider in ManageIQ.
       */
      manageiq_provider?: {
        /**
         * The provider's name.
         */
        name: string;
        /**
         * Default: default
         *
         * The ManageIQ zone name that will manage the provider.
         */
        zone?: string;
        /**
         * Alerts endpoint connection information.
         */
        alerts?: {
          [k: string]: any;
        };
        /**
         * Default endpoint connection information, required if state is true.
         */
        provider?: {
          [k: string]: any;
        };
        /**
         * Metrics endpoint connection information.
         */
        metrics?: {
          [k: string]: any;
        };
        /**
         * Default: present
         *
         * absent - provider should not exist, present - provider should be, valid - provider authentication should be valid.
         */
        state?: "absent" | "present";
        manageiq_connection: {
          [k: string]: any;
        };
        /**
         * The provider region name to connect to (e.g. AWS region for Amazon).
         */
        provider_region?: string;
        /**
         * The provider's type.
         */
        type?: "Openshift" | "Amazon";
        [k: string]: any;
      };
      /**
       * Change dpkg package selection state via --get-selections and --set-selections.
       */
      dpkg_selections?: {
        /**
         * The selection state to set the package to.
         */
        selection?: "install" | "hold" | "deinstall" | "purge";
        /**
         * Name of the package
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Manage Layer 2 interface policies on Cisco ACI fabrics.
       * More information from the internal APIC class I(l2:IfPol) at U(https://developer.cisco.com/media/mim-ref/MO-l2IfPol.html).
       */
      aci_intf_policy_l2?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * This module removes, or creates DHCP option sets, and can associate them to a VPC. Optionally, a new DHCP Options set can be created that converges a VPC's existing DHCP option set with values provided. When dhcp_options_id is provided, the module will 1. remove (with state='absent') 2. ensure tags are applied (if state='present' and tags are provided 3. attach it to a VPC (if state='present' and a vpc_id is provided. If any of the optional values are missing, they will either be treated as a no-op (i.e., inherit what already exists for the VPC) To remove existing options while inheriting, supply an empty value (e.g. set ntp_servers to [] if you want to remove them from the VPC's options) Most of the options should be self-explanatory.
       */
      ec2_vpc_dhcp_option?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Change the admin password of PAN-OS via SSH using a SSH key for authentication.
       * Useful for AWS instances where the first login should be done via SSH.
       */
      panos_admpwd?: {
        /**
         * Default: admin
         *
         * username for initial authentication
         */
        username?: string;
        /**
         * password to configure for admin on the PAN-OS device
         */
        newpassword: string;
        /**
         * filename of the SSH Key to use for authentication
         */
        key_filename: string;
        /**
         * IP address (or hostname) of PAN-OS device
         */
        ip_address: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure PoolGroup object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_poolgroup?: {
        username?: string;
        /**
         * Uuid of the priority labels.
         * If not provided, pool group member priority label will be interpreted as a number with a larger number considered higher priority.
         * It is a reference to an object of type prioritylabels.
         */
        priority_labels_ref?: string;
        /**
         * Uuid of the pool group.
         */
        uuid?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * Description of pool group.
         */
        description?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Name of the user who created the object.
         */
        created_by?: string;
        /**
         * When setup autoscale manager will automatically promote new pools into production when deployment goals are met.
         * It is a reference to an object of type poolgroupdeploymentpolicy.
         */
        deployment_policy_ref?: string;
        /**
         * List of pool group members object of type poolgroupmember.
         */
        members?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * It is a reference to an object of type cloud.
         */
        cloud_ref?: string;
        controller?: string;
        /**
         * Checksum of cloud configuration for poolgroup.
         * Internally set by cloud connector.
         */
        cloud_config_cksum?: string;
        tenant?: string;
        /**
         * The minimum number of servers to distribute traffic to.
         * Allowed values are 1-65535.
         * Special values are 0 - 'disable'.
         * Default value when not specified in API or module is interpreted by Avi Controller as 0.
         */
        min_servers?: number | string;
        /**
         * Enable an action - close connection, http redirect, or local http response - when a pool group failure happens.
         * By default, a connection will be closed, in case the pool group experiences a failure.
         */
        fail_action?: {
          [k: string]: any;
        };
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * The name of the pool group.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Creates, deletes, and updates DNS records sets and records within an existing Azure DNS Zone.
       */
      azure_rm_dnsrecordset?: {
        /**
         * name of resource group
         */
        resource_group?: string;
        /**
         * list of records to be created depending on the type of record (set)
         */
        records?: string;
        /**
         * Default: purge
         *
         * whether existing record values not sent to the module should be purged
         */
        record_mode?: string;
        /**
         * Default: 3600
         *
         * time to live of the record set in seconds
         */
        time_to_live?: string;
        /**
         * relative name of the record set
         */
        relative_name?: string;
        /**
         * the type of record set to create or delete
         */
        record_type?: string;
        /**
         * Default: present
         *
         * Assert the state of the record set. Use 'present' to create or update and 'absent' to delete.
         */
        state?: string;
        /**
         * name of the existing DNS zone in which to manage the record set
         */
        zone_name?: string;
        [k: string]: any;
      };
      /**
       * Deploy given repository URL / revision to dest. If dest exists, update to the specified revision, otherwise perform a checkout.
       */
      subversion?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Create a policy nat rule. Keep in mind that we can either end up configuring source NAT, destination NAT, or both. Instead of splitting it into two we will make a fair attempt to determine which one the user wants.
       */
      panos_nat_rule?: {
        /**
         * Default: false
         *
         * bidirectional flag
         */
        snat_bidirectional?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * snat interface address
         */
        snat_interface_address?: string;
        /**
         * The action to be taken.  Supported values are I(add)/I(update)/I(find)/I(delete).
         */
        operation: "add" | "update" | "delete" | "find";
        to_interface?: string;
        /**
         * Default: None
         *
         * dnat translated address
         */
        dnat_address?: string;
        /**
         * Default: any
         *
         * service
         */
        service?: string;
        /**
         * Default: None
         *
         * Source NAT translated address. Used with Static-IP translation.
         */
        snat_static_address?: string;
        /**
         * destination zone
         */
        destination_zone?: string;
        /**
         * API key that can be used instead of I(username)/I(password) credentials.
         */
        api_key?: string;
        /**
         * Default: None
         *
         * snat interface
         */
        snat_interface?: string;
        /**
         * Default: admin
         *
         * Username credentials to use for auth unless I(api_key) is set.
         */
        username?: string;
        /**
         * Default: ['any']
         *
         * list of destination addresses
         */
        destination_ip?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        devicegroup?: string;
        description?: string;
        /**
         * Default: None
         *
         * dnat translated port
         */
        dnat_port?: string;
        /**
         * name of the SNAT rule
         */
        rule_name: string;
        /**
         * Default: translated-address
         *
         * type of source translation. Supported values are I(translated-address)/I(translated-address).
         */
        snat_address_type?: "interface-address" | "translated-address";
        /**
         * Password credentials to use for auth unless I(api_key) is set.
         */
        password: string;
        /**
         * IP address (or hostname) of PAN-OS device being configured.
         */
        ip_address: string;
        /**
         * Default: None
         *
         * type of source translation
         */
        snat_type?: "static-ip" | "dynamic-ip-and-port" | "dynamic-ip";
        /**
         * list of source zones
         */
        source_zone?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: ['any']
         *
         * list of source addresses
         */
        source_ip?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * Source NAT translated address. Used with Dynamic-IP and Dynamic-IP-and-Port.
         */
        snat_dynamic_address?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        tag_name?: string;
        /**
         * Default: True
         *
         * Commit configuration if changed.
         */
        commit?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module provides an implementation for working with the active configuration running on Juniper JUNOS devices.  It provides a set of arguments for loading configuration, performing rollback operations and zeroing the active configuration on the device.
       */
      junos_config?: {
        /**
         * Default: configured by junos_config
         *
         * The C(comment) argument specifies a text string to be used when committing the configuration.  If the C(confirm) argument is set to False, this argument is silently ignored.
         */
        comment?: string;
        /**
         * The I(src) argument provides a path to the configuration file to load into the remote system. The path can either be a full system path to the configuration file if the value starts with / or relative to the root of the implemented role or playbook. This argument is mutually exclusive with the I(lines) argument.
         */
        src?: string;
        ssh_keyfile?: string;
        /**
         * The C(rollback) argument instructs the module to rollback the current configuration to the identifier specified in the argument.  If the specified rollback identifier does not exist on the remote device, the module will fail.  To rollback to the most recent commit, set the C(rollback) argument to 0.
         */
        rollback?: number | string;
        /**
         * The I(src_format) argument specifies the format of the configuration found int I(src).  If the I(src_format) argument is not provided, the module will attempt to determine the format of the configuration file specified in I(src).
         */
        src_format?: "xml" | "set" | "text" | "json";
        /**
         * The C(confirm) argument will configure a time out value for the commit to be confirmed before it is automatically rolled back.  If the C(confirm) argument is set to False, this argument is silently ignored.  If the value for this argument is set to 0, the commit is confirmed immediately.
         */
        confirm?: number | string;
        /**
         * This argument takes a list of C(set) or C(delete) configuration lines to push into the remote device.  Each line must start with either C(set) or C(delete).  This argument is mutually exclusive with the I(src) argument.
         */
        lines?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: merge
         *
         * This argument will decide how to load the configuration data particulary when the candidate configuration and loaded configuration contain conflicting statements. Following are accepted values. C(merge) combines the data in the loaded configuration with the candidate configuration. If statements in the loaded configuration conflict with statements in the candidate configuration, the loaded statements replace the candidate ones. C(override) discards the entire candidate configuration and replaces it with the loaded configuration. C(replace) substitutes each hierarchy level in the loaded configuration for the corresponding level.
         */
        update?: "merge" | "override" | "replace" | "update";
        /**
         * The C(replace) argument will instruct the remote device to replace the current configuration hierarchy with the one specified in the corresponding hierarchy of the source configuration loaded from this module.
         * Note this argument should be considered deprecated.  To achieve the equivalent, set the I(update) argument to C(replace). This argument will be removed in a future release. The C(replace) and C(update) argument is mutually exclusive.
         */
        replace?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        username?: string;
        /**
         * This argument will execute commit operation on remote device. It can be used to confirm a previous commit.
         */
        confirm_commit?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The C(zeroize) argument is used to completely sanitize the remote device configuration back to initial defaults.  This argument will effectively remove all current configuration statements on the remote device.
         */
        zeroize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        host?: string;
        password?: string;
        /**
         * This argument will cause the module to create a full backup of the current C(running-config) from the remote device before any changes are made.  The backup file is written to the C(backup) folder in the playbook root directory.  If the directory does not exist, it is created.
         */
        backup?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: string;
        [k: string]: any;
      };
      /**
       * Sends notifications to U(http://your.mattermost.url) via the Incoming WebHook integration.
       */
      mattermost?: {
        /**
         * Default: Ansible
         *
         * This is the sender of the message (Username Override need to be enabled by mattermost admin, see mattermost doc.
         */
        username?: string;
        /**
         * Mattermost url (i.e. http://mattermost.yourcompany.com).
         */
        url: string;
        /**
         * Text to send. Note that the module does not handle escaping characters.
         */
        text: string;
        /**
         * Default: https://www.ansible.com/favicon.ico
         *
         * Url for the message sender's icon.
         */
        icon_url?: string;
        /**
         * Mattermost webhook api key. Log into your mattermost site, go to Menu -> Integration -> Incoming Webhook -> Add Incoming Webhook. This will give you full URL. api_key is the last part. http://mattermost.example.com/hooks/C(API_KEY)
         */
        api_key: string;
        /**
         * Default: True
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Channel to send the message to. If absent, the message goes to the channel selected for the I(api_key).
         */
        channel?: string;
        [k: string]: any;
      };
      /**
       * Manages AAA server host-specific configuration.
       */
      nxos_aaa_server_host?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Shared secret for the specified host.
         */
        key?: string;
        /**
         * The server type is either radius or tacacs.
         */
        server_type: "radius" | "tacacs";
        /**
         * The state of encryption applied to the entered key. O for clear text, 7 for encrypted. Type-6 encryption is not supported.
         */
        encrypt_type?: "0" | "7";
        /**
         * Address or name of the radius or tacacs host.
         */
        address: string;
        /**
         * Alternate UDP port for RADIUS authentication.
         */
        auth_port?: string;
        /**
         * Timeout period for specified host, in seconds. Range is 1-60.
         */
        host_timeout?: string;
        /**
         * Alternate TCP port TACACS Server.
         */
        tacacs_port?: string;
        host?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Alternate UDP port for RADIUS accounting.
         */
        acct_port?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Manages top level filter objects on Cisco ACI fabrics.
       * More information from the internal APIC class I(vz:Filter) at U(https://developer.cisco.com/media/mim-ref/MO-vzFilter.html).
       * This modules does not manage filter entries, see M(aci_filter_entry) for this functionality.
       */
      aci_filter?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Manages configuration of a Protocol Independent Multicast (PIM) instance.
       */
      nxos_pim?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Configure group ranges for Source Specific Multicast (SSM). Valid values are multicast addresses or the keyword 'none'.
         */
        ssm_range: string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * The OpenSwitch platform provides a library for pushing JSON structured configuration files into the current running-config.  This module will read the current configuration from OpenSwitch and compare it against a provided candidate configuration. If there are changes, the candidate configuration is merged with the current configuration and pushed into OpenSwitch
       */
      ops_template?: {
        /**
         * The path to the config source.  The source can be either a file with config or a template that will be merged during runtime.  By default the task will search for the source file in role or playbook root folder in templates directory.
         */
        src?: string;
        /**
         * The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task in a playbook.  The I(config) argument allows the implementer to pass in the configuration to use as the base config for comparison.
         */
        config?: string;
        /**
         * The force argument instructs the module to not consider the current devices running-config.  When set to true, this will cause the module to push the contents of I(src) into the device without first checking if already configured.
         */
        force?: string;
        /**
         * When this argument is configured true, the module will backup the running-config from the node prior to making any changes. The backup file will be written to backups/ in the root of the playbook directory.
         */
        backup?: string;
        [k: string]: any;
      };
      /**
       * Create, update, or destroy Ansible Tower hosts. See U(https://www.ansible.com/tower) for an overview.
       */
      tower_host?: {
        /**
         * The description to use for the host.
         */
        description?: string;
        /**
         * URL to your Tower instance.
         */
        tower_host?: string;
        /**
         * Default: True
         *
         * If the host should be enabled.
         */
        enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Username for your Tower instance.
         */
        tower_username?: string;
        /**
         * Default: present
         *
         * Desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Inventory the host should be made a member of.
         */
        inventory: string;
        /**
         * Password for your Tower instance.
         */
        tower_password?: string;
        /**
         * Path to the Tower config file. See notes.
         */
        tower_config_file?: string;
        /**
         * Variables to use for the host. Use '@' for a file.
         */
        variables?: string;
        /**
         * Default: True
         *
         * Dis/allow insecure connections to Tower. If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        tower_verify_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The name to use for the host.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Perform software maintenance upgrades (SMUs) on Cisco NX-OS devices.
       */
      nxos_smu?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * The remote file system of the device. If omitted, devices that support a file_system parameter will use their default values.
         */
        file_system?: string;
        host?: string;
        /**
         * Name of the remote package.
         */
        pkg: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Requests Ironic to set a node into inspect state in order to collect metadata regarding the node. This command may be out of band or in-band depending on the ironic driver configuration. This is only possible on nodes in 'manageable' and 'available' state.
       */
      os_ironic_inspect?: {
        /**
         * Default: None
         *
         * unique mac address that is used to attempt to identify the host.
         */
        mac?: string;
        /**
         * Default: None
         *
         * If noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API. Use with "auth" and "auth_type" settings set to None.
         */
        ironic_url?: string;
        /**
         * Default: None
         *
         * unique name identifier to identify the host in Ironic.
         */
        name?: string;
        /**
         * Default: 1200
         *
         * A timeout in seconds to tell the role to wait for the node to complete introspection if wait is set to True.
         */
        timeout?: string;
        /**
         * Default: None
         *
         * globally unique identifier (UUID) to identify the host.
         */
        uuid?: string;
        [k: string]: any;
      };
      /**
       * Gather facts about ec2 instances in AWS
       */
      ec2_instance_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage tenants on Cisco ACI fabrics.
       * More information from the internal APIC class I(fv:Tenant) at U(https://developer.cisco.com/media/mim-ref/MO-fvTenant.html).
       */
      aci_tenant?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * OS6 configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with OS6 configuration sections in a deterministic way.
       */
      dellos6_config?: {
        [k: string]: any;
      };
      /**
       * Add or Remove security groups from an OpenStack cloud.
       */
      os_security_group?: {
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        /**
         * Default: None
         *
         * Long description of the purpose of the security group
         */
        description?: string;
        /**
         * Name that has to be given to the security group. This module requires that security group names be unique.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Cisco IOS XR configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with IOS XR configuration sections in a deterministic way.
       */
      iosxr_config?: {
        [k: string]: any;
      };
      /**
       * Wait for VMware tools to become available on the VM and return facts.
       */
      vmware_guest_tools_wait?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Apstra AOS Blueprint Virtual Network module let you manage your Virtual Network easily. You can create access, define and delete Virtual Network by name or by using a JSON / Yaml file. This module is idempotent and support the I(check) mode. It's using the AOS REST API.
       */
      aos_blueprint_virtnet?: {
        /**
         * Datastructure of the Virtual Network to manage. The data can be in YAML / JSON or directly a variable. It's the same datastructure that is returned on success in I(value).
         */
        content?: string;
        /**
         * Blueprint Name or Id as defined in AOS.
         */
        blueprint: string;
        /**
         * Default: present
         *
         * Indicate what is the expected state of the Virtual Network (present or not).
         */
        state?: "present" | "absent";
        /**
         * An existing AOS session as obtained by M(aos_login) module.
         */
        session: {
          [k: string]: any;
        };
        /**
         * Name of Virtual Network as part of the Blueprint.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Manages SNMP traps configurations on HUAWEI CloudEngine switches.
       */
      ce_snmp_traps?: {
        username?: string;
        /**
         * Source port number.
         */
        port_number?: string;
        /**
         * Interface number.
         */
        interface_number?: string;
        /**
         * Alarm trap name.
         */
        trap_name?: string;
        /**
         * Interface type.
         */
        interface_type?:
          | "Ethernet"
          | "Eth-Trunk"
          | "Tunnel"
          | "NULL"
          | "LoopBack"
          | "Vlanif"
          | "100GE"
          | "40GE"
          | "MTunnel"
          | "10GE"
          | "GE"
          | "MEth"
          | "Vbdif"
          | "Nve";
        host?: string;
        state?: "present" | "absent";
        /**
         * Alarm feature name.
         */
        feature_name?:
          | "aaa"
          | "arp"
          | "bfd"
          | "bgp"
          | "cfg"
          | "configuration"
          | "dad"
          | "devm"
          | "dhcpsnp"
          | "dldp"
          | "driver"
          | "efm"
          | "erps"
          | "error-down"
          | "fcoe"
          | "fei"
          | "fei_comm"
          | "fm"
          | "ifnet"
          | "info"
          | "ipsg"
          | "ipv6"
          | "isis"
          | "l3vpn"
          | "lacp"
          | "lcs"
          | "ldm"
          | "ldp"
          | "ldt"
          | "lldp"
          | "mpls_lspm"
          | "msdp"
          | "mstp"
          | "nd"
          | "netconf"
          | "nqa"
          | "nvo3"
          | "openflow"
          | "ospf"
          | "ospfv3"
          | "pim"
          | "pim-std"
          | "qos"
          | "radius"
          | "rm"
          | "rmon"
          | "securitytrap"
          | "smlktrap"
          | "snmp"
          | "ssh"
          | "stackmng"
          | "sysclock"
          | "sysom"
          | "system"
          | "tcp"
          | "telnet"
          | "trill"
          | "trunk"
          | "tty"
          | "vbst"
          | "vfs"
          | "virtual-perception"
          | "vrrp"
          | "vstm"
          | "all";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Manage gslb service entities in Netscaler.
       */
      netscaler_gslb_service?: {
        /**
         * Any comments that you might want to associate with the GSLB service.
         */
        comment?: string;
        /**
         * Canonical name of the GSLB service. Used in CNAME-based GSLB.
         * Minimum length = 1
         */
        cnameentry?: string;
        /**
         * Name of the server hosting the GSLB service.
         * Minimum length = 1
         */
        servername?: string;
        save_config?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nitro_protocol?: "http" | "https";
        /**
         * Name for the GSLB service. Must begin with an ASCII alphanumeric or underscore C(_) character, and must contain only ASCII alphanumeric, underscore C(_), hash C(#), period C(.), space, colon C(:), at C(@), equals C(=), and hyphen C(-) characters. Can be changed after the GSLB service is created.
         *
         * Minimum length = 1
         */
        servicename?: string;
        /**
         * Use cookie-based site persistence. Applicable only to C(HTTP) and C(SSL) GSLB services.
         */
        sitepersistence?: "ConnectionProxy" | "HTTPRedirect" | "NONE";
        /**
         * Bind monitors to this gslb service
         */
        monitor_bindings?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Integer specifying the maximum bandwidth allowed for the service. A GSLB service whose bandwidth reaches the maximum is not considered when a GSLB decision is made, until its bandwidth consumption drops below the maximum.
         */
        maxbandwidth?: number;
        /**
         * The public port associated with the GSLB service's public IP address. The port is mapped to the service's private port number. Applicable to the local GSLB service. Optional.
         */
        publicport?: number | string;
        /**
         * Port on which the load balancing entity represented by this GSLB service listens.
         * Minimum value = 1
         * Range 1 - 65535
         * * in CLI is represented as 65535 in NITRO API
         */
        port?: number | string;
        /**
         * Idle time, in seconds, after which a client connection is terminated. Applicable if connection proxy based site persistence is used.
         * Minimum value = 0
         * Maximum value = 31536000
         */
        clttimeout?: number;
        /**
         * Type of service to create.
         */
        servicetype?:
          | "HTTP"
          | "FTP"
          | "TCP"
          | "UDP"
          | "SSL"
          | "SSL_BRIDGE"
          | "SSL_TCP"
          | "NNTP"
          | "ANY"
          | "SIP_UDP"
          | "SIP_TCP"
          | "SIP_SSL"
          | "RADIUS"
          | "RDP"
          | "RTSP"
          | "MYSQL"
          | "MSSQL"
          | "ORACLE";
        /**
         * Monitoring threshold value for the GSLB service. If the sum of the weights of the monitors that are bound to this GSLB service and are in the UP state is not equal to or greater than this threshold value, the service is marked as DOWN.
         * Minimum value = C(0)
         * Maximum value = C(65535)
         */
        monthreshold?: number;
        /**
         * Maximum number of SSL VPN users that can be logged on concurrently to the VPN virtual server that is represented by this GSLB service. A GSLB service whose user count reaches the maximum is not considered when a GSLB decision is made, until the count drops below the maximum.
         * Minimum value = C(0)
         * Maximum value = C(65535)
         */
        maxaaausers?: number;
        /**
         * The maximum number of open connections that the service can support at any given time. A GSLB service whose connection count reaches the maximum is not considered when a GSLB decision is made, until the connection count drops below the maximum.
         * Minimum value = C(0)
         * Maximum value = C(4294967294)
         */
        maxclient?: number;
        /**
         * Name of the GSLB site to which the service belongs.
         * Minimum length = 1
         */
        sitename?: string;
        /**
         * The public IP address that a NAT device translates to the GSLB service's private IP address. Optional.
         */
        publicip?: string;
        state?: "present" | "absent";
        nitro_user: string;
        nitro_timeout?: number;
        /**
         * Enable logging appflow flow information.
         */
        appflowlog?: "enabled" | "disabled";
        /**
         * Unique hash identifier for the GSLB service, used by hash based load balancing methods.
         * Minimum value = C(1)
         */
        hashid?: number;
        /**
         * IP address for the GSLB service. Should represent a load balancing, content switching, or VPN virtual server on the NetScaler appliance, or the IP address of another load balancing device.
         */
        ipaddress?: string;
        /**
         * Flush all active transactions associated with the GSLB service when its state transitions from UP to DOWN. Do not enable this option for services that must complete their transactions. Applicable if connection proxy based site persistence is used.
         */
        downstateflush?: "enabled" | "disabled";
        /**
         * Name for the HTTP header that stores the client's IP address. Used with the Client IP option. If client IP header insertion is enabled on the service and a name is not specified for the header, the NetScaler appliance uses the name specified by the cipHeader parameter in the set ns param command or, in the GUI, the Client IP Header parameter in the Configure HTTP Parameters dialog box.
         * Minimum length = 1
         */
        cipheader?: string;
        /**
         * The site's prefix string. When the service is bound to a GSLB virtual server, a GSLB site domain is generated internally for each bound service-domain pair by concatenating the site prefix of the service and the name of the domain. If the special string NONE is specified, the site-prefix string is unset. When implementing HTTP redirect site persistence, the NetScaler appliance redirects GSLB requests to GSLB services by using their site domains.
         */
        siteprefix?: string;
        nsip: string;
        /**
         * In the request that is forwarded to the GSLB service, insert a header that stores the client's IP address. Client IP header insertion is used in connection-proxy based site persistence.
         */
        cip?: "enabled" | "disabled";
        /**
         * Monitor the health of the GSLB service.
         */
        healthmonitor?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nitro_pass: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage Perl library dependencies.
       */
      cpanm?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create or Delete routers from OpenStack. Although Neutron allows routers to share the same name, this module enforces name uniqueness to be more user friendly.
       */
      os_router?: {
        /**
         * Default: True
         *
         * Enable Source NAT (SNAT) attribute.
         */
        enable_snat?: string;
        /**
         * Default: None
         *
         * Unique name or ID of the external gateway network.
         * required I(interfaces) or I(enable_snat) are provided.
         */
        network?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        /**
         * Default: None
         *
         * List of subnets to attach to the router internal interface.
         */
        interfaces?: string;
        /**
         * Default: True
         *
         * Desired admin state of the created or existing router.
         */
        admin_state_up?: string;
        /**
         * Default: None
         *
         * Unique name or ID of the project.
         */
        project?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: string;
        /**
         * Default: None
         *
         * The IP address parameters for the external gateway network. Each is a dictionary with the subnet name or ID (subnet) and the IP address to assign on the subnet (ip). If no IP is specified, one is automatically assigned from that subnet.
         */
        external_fixed_ips?: string;
        /**
         * Name to be give to the router
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * The M(bearychat) module sends notifications to U(https://bearychat.com) via the Incoming Robot integration.
       */
      bearychat?: {
        /**
         * BearyChat WebHook URL. This authenticates you to the bearychat service. It looks like C(https://hook.bearychat.com/=ae2CF/incoming/e61bd5c57b164e04b11ac02e66f47f60).
         */
        url: string;
        /**
         * Message to send.
         */
        text?: string;
        /**
         * Default: yes
         *
         * If C(yes), text will be parsed as markdown.
         */
        markdown?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Define a list of attachments. For more information, see https://github.com/bearyinnovative/bearychat-tutorial/blob/master/robots/incoming.md#attachments
         */
        attachments?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Channel to send the message to. If absent, the message goes to the default channel selected by the I(url).
         */
        channel?: string;
        [k: string]: any;
      };
      /**
       * This module de-registers or registers an AWS EC2 instance from the ELBs that it belongs to.
       * Returns fact "ec2_elbs" which is a list of elbs attached to the instance if state=absent is passed as an argument.
       * Will be marked changed when called only if there are ELBs found to operate on.
       */
      elb_instance?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Unified utility to interact with redis instances. 'slave' sets a redis instance in slave or master mode. 'flush' flushes all the instance or a specified db. 'config' (new in 1.6), ensures a configuration setting on an instance.
       */
      redis?: {
        /**
         * Default: 6379
         *
         * The port to connect to
         */
        login_port?: number | string;
        /**
         * The password used to authenticate with (usually not used)
         */
        login_password?: string;
        /**
         * A redis config key.
         */
        name?: string;
        /**
         * Default: all
         *
         * Type of flush (all the dbs in a redis instance or a specific one) [flush command]
         */
        flush_mode?: "all" | "db";
        /**
         * The host of the master instance [slave command]
         */
        master_host?: string;
        /**
         * Default: localhost
         *
         * The host running the database
         */
        login_host?: string;
        /**
         * The port of the master instance [slave command]
         */
        master_port?: number | string;
        /**
         * The database to flush (used in db mode) [flush command]
         */
        db?: number | string;
        /**
         * A redis config value.
         */
        value?: string;
        /**
         * The selected redis command
         */
        command?: "slave" | "flush" | "config";
        /**
         * Default: slave
         *
         * the mode of the redis instance [slave command]
         */
        slave_mode?: "master" | "slave";
        [k: string]: any;
      };
      /**
       * This module allows you to modify the running configuration of a switch. It provides a way to execute a single CNOS command on a network device by evaluating the current running configuration and executing the command only if the specific settings have not been already configured. The CNOS command is passed as an argument of the method. This module functions the same as the cnos_command module. The only exception is that the following inventory variable can be specified ["condition = <flag string>"] When this inventory variable is specified as the variable of a task, the command is executed for the network element that matches the flag string. Usually, commands are executed across a group of network devices. When there is a requirement to skip the execution of the command on one or more devices, it is recommended to use this module. This module uses SSH to manage network device configuration. For more information about this module from Lenovo and customizing it usage for your use cases, please visit U(http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_conditional_command.html)
       */
      cnos_conditional_command?: {
        /**
         * If a task needs to be executed, you have to set the flag the same as it is specified in the inventory for that device.
         */
        flag?: string;
        /**
         * This specifies the CLI command as an attribute to this method. The command is passed using double quotes. The variables can be placed directly on to the CLI commands or can be invoked from the vars directory.
         */
        clicommand?: string;
        /**
         * If you specify condition=false in the inventory file against any device, the command execution is skipped for that device.
         */
        condition?: string;
        [k: string]: any;
      };
      /**
       * Manages information center trap configurations on HUAWEI CloudEngine switches.
       */
      ce_info_center_trap?: {
        /**
         * Timestamp format of alarm information.
         */
        trap_time_stamp?:
          | "date_boot"
          | "date_second"
          | "date_tenthsecond"
          | "date_millisecond"
          | "shortdate_second"
          | "shortdate_tenthsecond"
          | "shortdate_millisecond"
          | "formatdate_second"
          | "formatdate_tenthsecond"
          | "formatdate_millisecond";
        username?: string;
        /**
         * Size of a trap buffer. The value is an integer ranging from 0 to 1024. The default value is 256.
         */
        trap_buff_size?: string;
        /**
         * Module name of the rule. The value is a string of 1 to 31 case-insensitive characters. The default value is default. Please use lower-case letter, such as [aaa, acl, arp, bfd].
         */
        module_name?: string;
        /**
         * Default: no_use
         *
         * Whether a trap buffer is enabled to output information.
         */
        trap_buff_enable?: "no_use" | "true" | "false";
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Number of a channel. The value is an integer ranging from 0 to 9. The default value is 0.
         */
        channel_id?: string;
        host?: string;
        /**
         * Trap level permitted to output.
         */
        trap_level?:
          | "emergencies"
          | "alert"
          | "critical"
          | "error"
          | "warning"
          | "notification"
          | "informational"
          | "debugging";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: no_use
         *
         * Whether a device is enabled to output alarms.
         */
        trap_enable?: "no_use" | "true" | "false";
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * This modules configures the HP iLO interface using hponcfg.
       */
      hponcfg?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * This module creates, removes or resizes logical volumes.
       */
      lvol?: {
        /**
         * Comma separated list of physical volumes e.g. /dev/sda,/dev/sdb
         */
        pvs?: string;
        /**
         * Default: no
         *
         * Shrink or remove operations of volumes requires this switch. Ensures that that filesystems get never corrupted/destroyed by mistake.
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The volume group this logical volume is part of.
         */
        vg: string;
        /**
         * The name of the logical volume.
         */
        lv: string;
        /**
         * Default: present
         *
         * Control if the logical volume exists. If C(present) and the volume does not already exist then the C(size) option is required.
         */
        state?: "present" | "absent";
        /**
         * The name of the snapshot volume
         */
        snapshot?: string;
        /**
         * Default: yes
         *
         * Whether the volume is activate and visible to the host.
         */
        active?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * shrink if current size is higher than size requested
         */
        shrink?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Free-form options to be passed to the lvcreate command
         */
        opts?: string;
        /**
         * The size of the logical volume, according to lvcreate(8) --size, by default in megabytes or optionally with one of [bBsSkKmMgGtTpPeE] units; or according to lvcreate(8) --extents as a percentage of [VG|PVS|FREE]; Float values must begin with a digit. Resizing using percentage values was not supported prior to 2.1.
         */
        size?: string;
        [k: string]: any;
      };
      /**
       * Configures a front panel, sub-interface, SVI, management or loopback port on a Cumulus Linux switch. For bridge ports use the cl_bridge module. For bond ports use the cl_bond module. When configuring bridge related features like the "vid" option, please follow the guidelines for configuring "vlan aware" bridging. For more details review the Layer2 Interface Guide at U(http://docs.cumulusnetworks.com)
       */
      cl_interface?: {
        /**
         * Clagd system mac address. Recommended to use the range starting with 44:38:39:ff. Needs to be the same between 2 Clag switches.
         */
        clagd_sys_mac?: string;
        /**
         * Name of the interface.
         */
        name: string;
        /**
         * Enables the clagd daemon. This command should only be applied to the clag peerlink interface.
         */
        clagd_enable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enables bridge assurance in vlan-aware mode.
         */
        mstpctl_portnetwork?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enables BPDU Guard on a port in vlan-aware mode.
         */
        mstpctl_bpduguard?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * List of IPv6 addresses to configure on the interface. In the form I(X:X:X::X/YYY).
         */
        ipv6?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Integer that changes the role the switch has in the clag domain. The lower priority switch will assume the primary role. The number can be between 0 and 65535.
         */
        clagd_priority?: string;
        /**
         * Enables admin edge port.
         */
        mstpctl_portadminedge?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Set MTU. Configure Jumbo Frame by setting MTU to I(9000).
         */
        mtu?: string;
        /**
         * In vlan-aware mode, defines vlan that is the untagged vlan.
         */
        pvid?: string;
        /**
         * In vlan-aware mode, lists VLANs defined under the interface.
         */
        vids?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Define IPv4 virtual IP used by the Cumulus Linux VRR feature.
         */
        virtual_ip?: string;
        /**
         * IP address of the directly connected peer switch interface.
         */
        clagd_peer_ip?: string;
        /**
         * Define Ethernet mac associated with Cumulus Linux VRR feature.
         */
        virtual_mac?: string;
        /**
         * Address method.
         */
        addr_method?: "" | "loopback" | "dhcp";
        clagd_args?: string;
        /**
         * Description of the port.
         */
        alias_name?: string;
        /**
         * List of IPv4 addresses to configure on the interface. In the form I(X.X.X.X/YY).
         */
        ipv4?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Set speed of the swp(front panel) or management(eth0) interface. speed is in MB.
         */
        speed?: string;
        /**
         * Default: ['/etc/network/interfaces.d']
         *
         * Interface directory location
         */
        location?: string;
        [k: string]: any;
      };
      /**
       * Assembles a configuration file from fragments. Often a particular program will take a single configuration file and does not support a C(conf.d) style structure where it is easy to build up the configuration from multiple sources. C(assemble) will take a directory of files that can be local or have already been transferred to the system, and concatenate them together to produce a destination file. Files are assembled in string sorting order. Puppet calls this idea I(fragments).
       */
      assemble?: {
        /**
         * A boolean that controls if files that start with a '.' will be included or not.
         */
        ignore_hidden?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * An already existing directory full of source files.
         */
        src: string;
        /**
         * Default: True
         *
         * If False, it will search for src at originating/master machine, if True it will go to the remote/target machine for the src. Default is True.
         */
        remote_src?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A file to create using the concatenation of all of the source files.
         */
        dest: string;
        /**
         * A delimiter to separate the file contents.
         */
        delimiter?: string;
        /**
         * Assemble files only if C(regex) matches the filename. If not set, all files are assembled. All "\" (backslash) must be escaped as "\\" to comply yaml syntax. Uses Python regular expressions; see U(http://docs.python.org/2/library/re.html).
         */
        regexp?: string;
        /**
         * The validation command to run before copying into place.  The path to the file to validate is passed in via '%s' which must be present as in the sshd example below. The command is passed securely so shell features like expansion and pipes won't work.
         */
        validate?: string;
        /**
         * Default: no
         *
         * Create a backup file (if C(yes)), including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
         */
        backup?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module provides declarative management of the local usernames configured on network devices. It allows playbooks to manage either individual usernames or the aggregate of usernames in the current running config. It also supports purging usernames from the configuration that are not explicitly defined.
       */
      iosxr_user?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Installs, upgrade and removes packages using the underlying OS package manager.
       * For Windows targets, use the M(win_package) module instead.
       */
      package?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Downloads files from HTTP, HTTPS, or FTP to the remote server. The remote server I(must) have direct access to the remote resource.
       * By default, if an environment variable C(<protocol>_proxy) is set on the target host, requests will be sent through that proxy. This behaviour can be overridden by setting a variable for this task (see `setting the environment <http://docs.ansible.com/playbooks_environment.html>`_), or by using the use_proxy option.
       * HTTP redirects can redirect from HTTP to HTTPS so you should be sure that your proxy environment for both protocols is correct.
       * From Ansible 2.4 when run with C(--check), it will do a HEAD request to validate the URL but will not download the entire file or verify it against hashes.
       * For Windows targets, use the M(win_get_url) module instead.
       */
      get_url?: {
        [k: string]: any;
      };
      /**
       * This module allows management of resources in an OpenShift cluster. The inventory host can be any host with network connectivity to the OpenShift cluster; the default port being 8443/TCP.
       * This module relies on a token to authenticate to OpenShift. This can either be a user or a service account.
       */
      oc?: {
        [k: string]: any;
      };
      /**
       * Module to manage virtual machine templates in oVirt/RHV.
       */
      ovirt_templates?: {
        [k: string]: any;
      };
      /**
       * Sets and retrieves file ACL information.
       */
      acl?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * When the project does not exists in Gitlab, it will be created.
       * When the project does exists and state=absent, the project will be deleted.
       * When changes are made to the project, the project will be updated.
       */
      gitlab_project?: {
        [k: string]: any;
      };
      /**
       * Module to manage host networks in oVirt/RHV.
       */
      ovirt_host_networks?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Provides an interface to manage Ethernet Network resources. Can create, update, or delete.
       */
      oneview_ethernet_network?: {
        username?: string;
        image_streamer_hostname?: string;
        hostname?: string;
        config?: string;
        validate_etag?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * Indicates the desired state for the Ethernet Network resource. - C(present) will ensure data properties are compliant with OneView. - C(absent) will remove the resource from OneView, if it exists. - C(default_bandwidth_reset) will reset the network connection template to the default.
         */
        state?: "present" | "absent" | "default_bandwidth_reset";
        password?: string;
        /**
         * List with Ethernet Network properties.
         */
        data: {
          [k: string]: any;
        };
        api_version?: number | string;
        [k: string]: any;
      };
      /**
       * Creates, deletes, or modifies amazon Redshift cluster instances.
       */
      redshift?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module allows you to work with switch firmware images. It provides a way to download a firmware image to a network device from a remote server using FTP, SFTP, TFTP, or SCP. The first step is to create a directory from where the remote server can be reached. The next step is to provide the full file path of the image's location. Authentication details required by the remote server must be provided as well. By default, this method makes the newly downloaded firmware image the active image, which will be used by the switch during the next restart. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run. For more information about this module from Lenovo and customizing it usage for your use cases, please visit U(http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_image.html)
       */
      cnos_image?: {
        /**
         * Specify the password for the server relating to the protocol used.
         */
        serverpassword?: string;
        /**
         * This refers to the protocol used by the network device to interact with the remote server from where to download the firmware image. The choices are FTP, SFTP, TFTP, or SCP. Any other protocols will result in error. If this parameter is not specified, there is no default value to be used.
         */
        protocol?: string;
        /**
         * This specifies the IP Address of the remote server from where the software image will be downloaded.
         */
        serverip?: string;
        /**
         * This specifies the full file path of the image located on the remote server. In case the relative path is used as the variable value, the root folder for the user of the server needs to be specified.
         */
        imgpath?: string;
        /**
         * Specify the username for the server relating to the protocol used.
         */
        serverusername?: string;
        /**
         * This specifies the firmware image type to be downloaded
         */
        imgtype?: string;
        [k: string]: any;
      };
      /**
       * Using VMware vCenter, move a virtual machine using vMotion to a different host.
       */
      vmware_vmotion?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * manages Zabbix host macros, it can create, update or delete them.
       */
      zabbix_hostmacro?: {
        /**
         * Default: None
         *
         * Basic Auth password
         */
        http_login_password?: string;
        /**
         * Name of the host macro.
         */
        macro_name?: string;
        /**
         * Value of the host macro.
         */
        macro_value?: string;
        /**
         * Zabbix user name.
         */
        login_user?: string;
        /**
         * Default: None
         *
         * Basic Auth login
         */
        http_login_user?: string;
        /**
         * Url of Zabbix server, with protocol (http or https).
         */
        server_url?: string;
        /**
         * Default: present
         *
         * State of the macro.
         * On C(present), it will create if macro does not exist or update the macro if the associated data is different.
         * On C(absent) will remove a macro if it exists.
         */
        state?: string;
        /**
         * Name of the host.
         */
        host_name?: string;
        /**
         * Default: 10
         *
         * The timeout of API request (seconds).
         */
        timeout?: string;
        /**
         * Zabbix user password.
         */
        login_password?: string;
        [k: string]: any;
      };
      /**
       * allows the addition, modification and deletion of ACL keys and associated rules in a consul cluster via the agent. For more details on using and configuring ACLs, see https://www.consul.io/docs/internals/acl.html.
       */
      consul_acl?: {
        /**
         * the name that should be associated with the acl key, this is opaque to Consul
         */
        name?: string;
        /**
         * an list of the rules that should be associated with a given token.
         */
        rules?: string;
        /**
         * the token key indentifying an ACL rule set. If generated by consul this will be a UUID.
         */
        token?: string;
        /**
         * Default: client
         *
         * the type of token that should be created, either management or client
         */
        token_type?: string;
        /**
         * Default: present
         *
         * whether the ACL pair should be present or absent
         */
        state?: string;
        /**
         * a management token is required to manipulate the acl lists
         */
        mgmt_token?: string;
        /**
         * Default: localhost
         *
         * host of the consul agent defaults to localhost
         */
        host?: string;
        /**
         * Default: http
         *
         * the protocol scheme on which the consul agent is running
         */
        scheme?: string;
        /**
         * Default: True
         *
         * whether to verify the tls certificate of the consul agent
         */
        validate_certs?: string;
        /**
         * Default: 8500
         *
         * the port on which the consul agent is running
         */
        port?: string;
        [k: string]: any;
      };
      /**
       * Add, update and remove regions.
       */
      cs_region?: {
        /**
         * Endpoint URL of the region.
         * Required if C(state=present)
         */
        endpoint?: string;
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        api_region?: string;
        /**
         * Default: present
         *
         * State of the region.
         */
        state?: "present" | "absent";
        api_key?: string;
        /**
         * ID of the region.
         * Must be an number (int).
         */
        id: number | string;
        /**
         * Name of the region.
         * Required if C(state=present)
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Manages SNMP user configuration.
       */
      nxos_snmp_user?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Group to which the user will belong to.
         */
        group: string;
        /**
         * Privacy password for the user.
         */
        privacy?: string;
        host?: string;
        authentication?: "md5" | "sha";
        /**
         * Enables AES-128 bit encryption when using privacy password.
         */
        encrypt?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Auth password when using md5 or sha.
         */
        pwd?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Name of the user.
         */
        user: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Get facts for a specific virtual network or all virtual networks within a resource group.
       */
      azure_rm_virtualnetwork_facts?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Only show results for a specific security group.
         */
        name?: string;
        /**
         * Limit results by resource group. Required when filtering by name.
         */
        resource_group?: string;
        /**
         * Limit results by providing a list of tags. Format tags as 'key' or 'key:value'.
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        ad_user?: string;
        cloud_environment?: string;
        secret?: string;
        client_id?: string;
        subscription_id?: string;
        password?: string;
        tenant?: string;
        [k: string]: any;
      };
      /**
       * This module allows you to modify the switch running configuration. It provides a way to execute a single CNOS command on a switch by evaluating the current running configuration and executing the command only if the specific setting has not been already configured. The CNOS command is passed as an argument of the method. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run. For more information about this module from Lenovo and customizing it usage for your use cases, please visit U(http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_command.html)
       */
      cnos_command?: {
        /**
         * This specifies the CLI command as an attribute to this method. The command is passed using double quotes. The variables can be placed directly on to the CLI commands or can be invoked from the vars directory.
         */
        clicommand?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of static IP routes on Vyatta VyOS network devices.
       */
      vyos_static_route?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Default: present
         *
         * State of the static route configuration.
         */
        state?: "present" | "absent";
        /**
         * Network prefix mask of the static route.
         */
        mask?: string;
        host?: string;
        /**
         * Admin distance of the static route.
         */
        admin_distance?: number | string;
        /**
         * Network prefix of the static route. C(mask) param should be ignored if C(prefix) is provided with C(mask) value C(prefix/mask).
         */
        prefix?: string;
        /**
         * Next hop IP of the static route.
         */
        next_hop?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of static route definitions
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Manages Bridge Domains (BD) on Cisco ACI Fabrics.
       * More information from the internal APIC class I(fv:BD) at U(https://developer.cisco.com/media/mim-ref/MO-fvBD.html).
       */
      aci_bd?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Add and remove username/password entries in a password file using htpasswd.
       * This is used by web servers such as Apache and Nginx for basic authentication.
       */
      htpasswd?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Authenticates to CyberArk Vault using Privileged Account Security Web Services SDK and creates a session fact that can be used by other modules. It returns an Ansible fact called I(cyberark_session). Every module can use this fact as C(cyberark_session) parameter.
       */
      cyberark_authentication?: {
        /**
         * The name of the user who will logon to the Vault.
         */
        username?: string;
        /**
         * Default: no
         *
         * Whether or not users will be authenticated via a RADIUS server. Valid values are true/false.
         */
        use_radius_authentication?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The new password of the user. This parameter is optional, and enables you to change a password.
         */
        new_password?: string;
        /**
         * Dictionary set by a CyberArk authentication containing the different values to perform actions on a logged-on CyberArk session.
         */
        cyberark_session?: {
          [k: string]: any;
        };
        /**
         * Default: present
         *
         * Specifies if an authentication logon/logoff and a cyberark_session should be added/removed.
         */
        state?: "present" | "absent";
        /**
         * The password of the user.
         */
        password?: string;
        /**
         * Default: yes
         *
         * If C(false), SSL certificates will not be validated.  This should only set to C(false) used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: no
         *
         * Whether or not Shared Logon Authentication will be used.
         */
        use_shared_logon_authentication?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A string containing the base URL of the server hosting CyberArk's Privileged Account Security Web Services SDK.
         */
        api_base_url?: string;
        [k: string]: any;
      };
      /**
       * Manages F5 BIG-IP GTM virtual servers
       */
      bigip_gtm_virtual_server?: {
        /**
         * Default: None
         *
         * Virtual server host
         */
        host?: string;
        /**
         * Virtual server name
         */
        virtual_server_name?: string;
        /**
         * Virtual server server
         */
        virtual_server_server?: string;
        /**
         * Default: None
         *
         * Virtual server port
         */
        port?: string;
        /**
         * Default: present
         *
         * Virtual server state
         */
        state?: string;
        [k: string]: any;
      };
      /**
       * Manages configuration of an OSPF interface instance.
       */
      nxos_interface_ospf?: {
        /**
         * Name of the ospf instance.
         */
        ospf: string;
        /**
         * Specifies the scheme used for encrypting message_digest_password. Valid values are '3des' or 'cisco_type_7' encryption.
         */
        message_digest_encryption_type?: "cisco_type_7" | "3des";
        /**
         * Time interval an ospf neighbor waits for a hello packet before tearing down adjacencies. Valid values are an integer or the keyword 'default'.
         */
        dead_interval?: string;
        /**
         * Time between sending successive hello packets. Valid values are an integer or the keyword 'default'.
         */
        hello_interval?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        /**
         * Ospf area associated with this cisco_interface_ospf instance. Valid values are a string, formatted as an IP address (i.e. "0.0.0.0") or as an integer.
         */
        area: string;
        /**
         * Algorithm used for authentication among neighboring routers within an area. Valid values is 'md5'.
         */
        message_digest_algorithm_type?: "md5";
        include_defaults?: string;
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        /**
         * Setting to true will prevent this interface from receiving HELLO packets. Valid values are 'true' and 'false'.
         */
        passive_interface?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        provider?: {
          [k: string]: any;
        };
        save?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        config?: string;
        /**
         * Enables or disables the usage of message digest authentication. Valid values are 'true' and 'false'.
         */
        message_digest?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        username?: string;
        /**
         * Specifies the message_digest password. Valid value is a string.
         */
        message_digest_password?: string;
        host?: string;
        /**
         * Name of this cisco_interface resource. Valid value is a string.
         */
        interface: string;
        password?: string;
        ssh_keyfile?: string;
        /**
         * Md5 authentication key-id associated with the ospf instance. If this is present, message_digest_encryption_type, message_digest_algorithm_type and message_digest_password are mandatory. Valid value is an integer and 'default'.
         */
        message_digest_key_id?: string;
        /**
         * The cost associated with this cisco_interface_ospf instance.
         */
        cost?: string;
        timeout?: number | string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage service group configuration in Netscaler.
       * This module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.
       */
      netscaler_servicegroup?: {
        /**
         * Any information about the service group.
         */
        comment?: string;
        /**
         * Enable TCP buffering for the service group.
         */
        tcpb?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Cache type supported by the cache server.
         */
        cachetype?: "TRANSPARENT" | "REVERSE" | "FORWARD";
        save_config?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * When set to C(yes) the service group state will be set to DISABLED.
         * When set to C(no) the service group state will be set to ENABLED.
         * Note that due to limitations of the underlying NITRO API a C(disabled) state change alone does not cause the module result to report a changed status.
         */
        disabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nitro_protocol?: "http" | "https";
        /**
         * Maximum number of requests that can be sent on a persistent connection to the service group.
         * Note: Connection requests beyond this value are rejected.
         * Minimum value = C(0)
         * Maximum value = C(65535)
         */
        maxreq?: number;
        /**
         * Wait for all existing connections to the service to terminate before shutting down the service.
         */
        graceful?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Maximum bandwidth, in Kbps, allocated for all the services in the service group.
         * Minimum value = C(0)
         * Maximum value = C(4294967287)
         */
        maxbandwidth?: number;
        /**
         * Time, in seconds, after which to terminate an idle server connection.
         * Minimum value = C(0)
         * Maximum value = C(31536000)
         */
        svrtimeout?: number;
        /**
         * Time, in seconds, after which to terminate an idle client connection.
         * Minimum value = C(0)
         * Maximum value = C(31536000)
         */
        clttimeout?: number;
        /**
         * Protocol used to exchange data with the service.
         */
        servicetype?:
          | "HTTP"
          | "FTP"
          | "TCP"
          | "UDP"
          | "SSL"
          | "SSL_BRIDGE"
          | "SSL_TCP"
          | "DTLS"
          | "NNTP"
          | "RPCSVR"
          | "DNS"
          | "ADNS"
          | "SNMP"
          | "RTSP"
          | "DHCPRA"
          | "ANY"
          | "SIP_UDP"
          | "SIP_TCP"
          | "SIP_SSL"
          | "DNS_TCP"
          | "ADNS_TCP"
          | "MYSQL"
          | "MSSQL"
          | "ORACLE"
          | "RADIUS"
          | "RADIUSListener"
          | "RDP"
          | "DIAMETER"
          | "SSL_DIAMETER"
          | "TFTP"
          | "SMPP"
          | "PPTP"
          | "GRE"
          | "SYSLOGTCP"
          | "SYSLOGUDP"
          | "FIX"
          | "SSL_FIX";
        /**
         * Use the transparent cache redirection virtual server to forward the request to the cache server.
         * Note: Do not set this parameter if you set the Cache Type.
         */
        cacheable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Auto scale option for a servicegroup.
         */
        autoscale?: "DISABLED" | "DNS" | "POLICY";
        /**
         * Maximum number of simultaneous open connections for the service group.
         * Minimum value = C(0)
         * Maximum value = C(4294967294)
         */
        maxclient?: number;
        /**
         * A list of monitornames to bind to this service
         * Note that the monitors must have already been setup possibly using the M(netscaler_lb_monitor) module or some other method
         */
        monitorbindings?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Name of the service group. Must begin with an ASCII alphabetic or underscore C(_) character, and must contain only ASCII alphanumeric, underscore C(_), hash C(#), period C(.), space C( ), colon C(:), at C(@), equals C(=), and hyphen C(-) characters. Can be changed after the name is created.
         * Minimum length = 1
         */
        servicegroupname?: string;
        state?: "present" | "absent";
        /**
         * Use client's IP address as the source IP address when initiating connection to the server. With the NO setting, which is the default, a mapped IP (MIP) address or subnet IP (SNIP) address is used as the source IP address to initiate server side connections.
         */
        usip?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nitro_user: string;
        /**
         * Network profile for the service group.
         * Minimum length = 1
         * Maximum length = 127
         */
        netprofile?: string;
        /**
         * Enable RTSP session ID mapping for the service group.
         */
        rtspsessionidremap?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nitro_timeout?: number;
        /**
         * Individual Path monitoring decisions.
         */
        pathmonitorindv?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Path monitoring for clustering.
         */
        pathmonitor?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enable logging of AppFlow information for the specified service group.
         */
        appflowlog?: "enabled" | "disabled";
        /**
         * A list of dictionaries describing each service member of the service group.
         */
        servicemembers?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Minimum sum of weights of the monitors that are bound to this service. Used to determine whether to mark a service as UP or DOWN.
         * Minimum value = C(0)
         * Maximum value = C(65535)
         */
        monthreshold?: number;
        /**
         * member port.
         */
        memberport?: number | string;
        /**
         * Enable client keep-alive for the service group.
         */
        cka?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the TCP profile that contains TCP configuration settings for the service group.
         * Minimum length = 1
         * Maximum length = 127
         */
        tcpprofilename?: string;
        /**
         * Enable surge protection for the service group.
         */
        sp?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Flush all active transactions associated with all the services in the service group whose state transitions from UP to DOWN. Do not enable this option for applications that must complete their transactions.
         */
        downstateflush?: "enabled" | "disabled";
        /**
         * Name of the HTTP header whose value must be set to the IP address of the client. Used with the Client IP parameter. If client IP insertion is enabled, and the client IP header is not specified, the value of Client IP Header parameter or the value set by the set ns config command is used as client's IP header name.
         * Minimum length = 1
         */
        cipheader?: string;
        /**
         * Name of the HTTP profile that contains HTTP configuration settings for the service group.
         * Minimum length = 1
         * Maximum length = 127
         */
        httpprofilename?: string;
        nsip: string;
        /**
         * Insert the Client IP header in requests forwarded to the service.
         */
        cip?: "enabled" | "disabled";
        /**
         * Monitor the health of this service. Available settings function as follows:
         * C(yes) - Send probes to check the health of the service.
         * C(no) - Do not send probes to check the health of the service. With the NO option, the appliance shows the service as UP at all times.
         */
        healthmonitor?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Use the proxy port as the source port when initiating connections with the server. With the NO setting, the client-side connection port is used as the source port for the server-side connection.
         * Note: This parameter is available only when the Use Source IP C(usip) parameter is set to C(yes).
         */
        useproxyport?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nitro_pass: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enable compression for the specified service.
         */
        cmp?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manages static route configuration
       */
      nxos_static_route?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Preference or administrative difference of route (range 1-255).
         */
        pref?: string;
        /**
         * Route tag value (numeric).
         */
        tag?: string;
        host?: string;
        /**
         * Name of the route. Used with the name parameter on the CLI.
         */
        route_name?: string;
        /**
         * Destination prefix of static route.
         */
        prefix: string;
        /**
         * Next hop address or interface of static route. If interface, it must be the fully-qualified interface name.
         */
        next_hop: string;
        /**
         * Default: default
         *
         * VRF for static route.
         */
        vrf?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * This module allows you to create, modify and delete Zabbix screens and associated graph data.
       */
      zabbix_screen?: {
        /**
         * Default: None
         *
         * Basic Auth password
         */
        http_login_password?: string;
        /**
         * Zabbix user name.
         */
        login_user?: string;
        /**
         * Default: None
         *
         * Basic Auth login
         */
        http_login_user?: string;
        /**
         * Url of Zabbix server, with protocol (http or https).
         */
        server_url?: string;
        /**
         * List of screens to be created/updated/deleted(see example).
         * If the screen(s) already been added, the screen(s) name won't be updated.
         * When creating or updating screen(s), C(screen_name), C(host_group) are required.
         * When deleting screen(s), the C(screen_name) is required.
         * The available states are: C(present) (default) and C(absent). If the screen(s) already exists, and the state is not C(absent), the screen(s) will just be updated as needed.
         */
        screens?: string;
        /**
         * Default: 10
         *
         * The timeout of API request (seconds).
         */
        timeout?: string;
        /**
         * Zabbix user password.
         */
        login_password?: string;
        [k: string]: any;
      };
      /**
       * Manages interface DLDP configuration on HUAWEI CloudEngine switches.
       */
      ce_dldp_interface?: {
        /**
         * Specify whether reseting interface DLDP state.
         */
        reset?: "enable" | "disable";
        username?: string;
        /**
         * Set interface DLDP enable state.
         */
        enable?: "enable" | "disable";
        /**
         * Set the source MAC address for DLDP packets sent in the DLDP-compatible mode. The value of MAC address is in H-H-H format. H contains 1 to 4 hexadecimal digits.
         */
        local_mac?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Must be fully qualified interface name, i.e. GE1/0/1, 10GE1/0/1, 40GE1/0/22, 100GE1/0/1.
         */
        interface: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Set DLDP compatible-mode enable state.
         */
        mode_enable?: "enable" | "disable";
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Manage packages with the I(pacman) package manager, which is used by Arch Linux and its variants.
       */
      pacman?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages SNMP host configuration parameters.
       */
      nxos_snmp_host?: {
        username?: string;
        /**
         * Name of VRF to filter.
         */
        vrf_filter?: string;
        /**
         * UDP port number (0-65535).
         */
        udp?: string;
        ssh_keyfile?: string;
        snmp_type?: "trap" | "inform";
        /**
         * Source interface.
         */
        src_intf?: string;
        /**
         * IP address of hostname of target host.
         */
        snmp_host: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Community string or v3 username.
         */
        community?: string;
        host?: string;
        /**
         * Default: v2c
         *
         * SNMP version.
         */
        version?: "v2c" | "v3";
        v3?: "noauth" | "auth" | "priv";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        /**
         * VRF to use to source traffic to source.
         */
        vrf?: string;
        [k: string]: any;
      };
      /**
       * The M(expect) module executes a command and responds to prompts
       * The given command will be executed on all selected nodes. It will not be processed through the shell, so variables like C($HOME) and operations like C("<"), C(">"), C("|"), and C("&") will not work
       */
      expect?: {
        /**
         * cd into this directory before running the command
         */
        chdir?: string;
        /**
         * Mapping of expected string/regex and string to respond with. If the response is a list, successive matches return successive responses. List functionality is new in 2.1.
         */
        responses: {
          [k: string]: any;
        };
        /**
         * a filename, when it does not exist, this step will B(not) be run.
         */
        removes?: string;
        /**
         * Whether or not to echo out your response strings
         */
        echo?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * a filename, when it already exists, this step will B(not) be run.
         */
        creates?: string;
        /**
         * the command module takes command to run.
         */
        command: string;
        /**
         * Default: 30
         *
         * Amount of time in seconds to wait for the expected strings
         */
        timeout?: number | string;
        [k: string]: any;
      };
      /**
       * Query / Set MySQL variables
       */
      mysql_variables?: {
        ssl_key?: string;
        ssl_cert?: string;
        config_file?: string;
        login_port?: number | string;
        login_user?: string;
        login_host?: string;
        /**
         * If set, then sets variable value to this
         */
        value?: string;
        ssl_ca?: string;
        login_unix_socket?: string;
        login_password?: string;
        /**
         * Variable name to operate
         */
        variable?: string;
        connect_timeout?: number | string;
        [k: string]: any;
      };
      /**
       * The M(nagios) module has two basic functions: scheduling downtime and toggling alerts for services or hosts.
       * All actions require the I(host) parameter to be given explicitly. In playbooks you can use the C({{inventory_hostname}}) variable to refer to the host the playbook is currently running on.
       * You can specify multiple services at once by separating them with commas, .e.g., C(services=httpd,nfs,puppet).
       * When specifying what service to handle there is a special service value, I(host), which will handle alerts/downtime for the I(host itself), e.g., C(service=host). This keyword may not be given with other services at the same time. I(Setting alerts/downtime for a host does not affect alerts/downtime for any of the services running on it.) To schedule downtime for all services on particular host use keyword "all", e.g., C(service=all).
       * When using the M(nagios) module you will need to specify your Nagios server using the C(delegate_to) parameter.
       */
      nagios?: {
        [k: string]: any;
      };
      /**
       * Send a message to a flowdock team inbox or chat using the push API (see https://www.flowdock.com/api/team-inbox and https://www.flowdock.com/api/chat)
       */
      flowdock?: {
        /**
         * (inbox only) Name of the message sender
         */
        from_name?: string;
        /**
         * (inbox only - required) Email address of the message sender
         */
        from_address?: string;
        /**
         * tags of the message, separated by commas
         */
        tags?: string;
        /**
         * Whether to post to 'inbox' or 'chat'
         */
        type: "inbox" | "chat";
        /**
         * (chat only - required) Name of the "user" sending the message
         */
        external_user_name?: string;
        /**
         * (inbox only) Human readable identifier for more detailed message categorization
         */
        project?: string;
        /**
         * (inbox only - required) Human readable identifier of the application that uses the Flowdock API
         */
        source?: string;
        /**
         * API token.
         */
        token: string;
        /**
         * (inbox only) Link associated with the message. This will be used to link the message subject in Team Inbox.
         */
        link?: string;
        /**
         * (inbox only) Email address for replies
         */
        reply_to?: string;
        /**
         * (inbox only - required) Subject line of the message
         */
        subject?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Content of the message
         */
        msg: string;
        [k: string]: any;
      };
      /**
       * Sets attributes of files, symlinks, and directories, or removes files/symlinks/directories. Many other modules support the same options as the C(file) module - including M(copy), M(template), and M(assemble).
       * For Windows targets, use the M(win_file) module instead.
       */
      file?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Returns information about a Windows file.
       * For non-Windows targets, use the M(stat) module instead.
       */
      win_stat?: {
        /**
         * The full path of the file/object to get the facts of; both forward and back slashes are accepted.
         */
        path?: string;
        /**
         * Default: True
         *
         * Whether to return the checksum sum of the file. Between Ansible 1.9 and 2.2 this is no longer an MD5, but a SHA1 instead. As of Ansible 2.3 this is back to an MD5. Will return None if host is unable to use specified algorithm.
         * This option is deprecated in Ansible 2.3 and is replaced with C(checksum_algorithm=md5).
         */
        get_md5?: string;
        /**
         * Default: True
         *
         * Whether to return a checksum of the file (default sha1)
         */
        get_checksum?: string;
        /**
         * Default: sha1
         *
         * Algorithm to determine checksum of file. Will throw an error if the host is unable to use specified algorithm.
         */
        checksum_algorithm?: string;
        [k: string]: any;
      };
      /**
       * The M(wakeonlan) module sends magic Wake-on-LAN (WoL) broadcast packets.
       */
      wakeonlan?: {
        /**
         * Default: 255.255.255.255
         *
         * Network broadcast address to use for broadcasting magic Wake-on-LAN packet
         */
        broadcast?: string;
        /**
         * MAC address to send Wake-on-LAN broadcast packet for
         */
        mac: string;
        /**
         * Default: 7
         *
         * UDP port to use for magic Wake-on-LAN packet
         */
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Add and remove secondary IPs to and from a NIC.
       */
      cs_nic?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * This module allows the management of AWS Lambda functions aliases via the Ansible framework.  It is idempotent and supports "Check" mode.    Use module M(lambda) to manage the lambda function itself and M(lambda_event) to manage event source mappings.
       */
      lambda_alias?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Apstra AOS Blueprint Parameter module let you manage your Blueprint Parameter easily. You can create access, define and delete Blueprint Parameter. The list of Parameters supported is different per Blueprint. The option I(get_param_list) can help you to access the list of supported Parameters for your blueprint. This module is idempotent and support the I(check) mode. It's using the AOS REST API.
       */
      aos_blueprint_param?: {
        /**
         * Blueprint Name or Id as defined in AOS.
         */
        blueprint: string;
        /**
         * Name of blueprint parameter, as defined by AOS design template. You can use the option I(get_param_list) to get the complete list of supported parameters for your blueprint.
         */
        name?: string;
        /**
         * Blueprint parameter value.  This value may be transformed by using the I(param_map) field; used when the blueprint parameter requires an AOS unique ID value.
         */
        value?: {
          [k: string]: any;
        };
        /**
         * Default: present
         *
         * Indicate what is the expected state of the Blueprint Parameter (present or not).
         */
        state?: "present" | "absent";
        /**
         * An existing AOS session as obtained by M(aos_login) module.
         */
        session: {
          [k: string]: any;
        };
        /**
         * Defines the aos-pyez collection that will is used to map the user-defined item name into the AOS unique ID value.  For example, if the caller provides an IP address pool I(param_value) called "Server-IpAddrs", then the aos-pyez collection is 'IpPools'. Some I(param_map) are already defined by default like I(logical_device_maps).
         */
        param_map?: string;
        /**
         * Get the complete list of supported parameters for this blueprint and the description of those parameters.
         */
        get_param_list?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manages applying ACLs to interfaces.
       */
      nxos_acl_interface?: {
        username?: string;
        /**
         * Direction ACL to be applied in on the interface.
         */
        direction: "ingress" | "egress";
        ssh_keyfile?: string;
        /**
         * Case sensitive name of the access list (ACL).
         */
        name?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Full name of interface, e.g. I(Ethernet1/1).
         */
        interface: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Creates, Removes and configures a virtual directory in IIS.
       */
      win_iis_virtualdirectory?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Configure data-port (DP) network interface for DHCP. By default DP interfaces are static.
       */
      panos_interface?: {
        /**
         * Default: admin
         *
         * Username credentials to use for auth.
         */
        username?: string;
        /**
         * Name of the interface to configure.
         */
        if_name: string;
        /**
         * Default: false
         *
         * Whether or not to add default route with router learned via DHCP.
         */
        create_default_route?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * Commit if changed
         */
        commit?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the zone for the interface. If the zone does not exist it is created but if the zone exists and it is not of the layer3 type the operation will fail.
         *
         */
        zone_name: string;
        /**
         * Password credentials to use for auth.
         */
        password: string;
        /**
         * IP address (or hostname) of PAN-OS device being configured.
         */
        ip_address: string;
        [k: string]: any;
      };
      /**
       * Manage PHP packages with the pear package manager.
       */
      pear?: {
        [k: string]: any;
      };
      /**
       * Manage the hostname of a BIG-IP.
       */
      bigip_hostname?: {
        /**
         * Hostname of the BIG-IP host.
         */
        hostname?: string;
        [k: string]: any;
      };
      /**
       * This module creates, deletes or modifies NFS exports on Infinibox.
       */
      infini_export?: {
        /**
         * Default: /
         *
         * Internal path of the export.
         */
        inner_path?: string;
        /**
         * Default: present
         *
         * Creates/Modifies export when present and removes when absent.
         */
        state?: string;
        /**
         * Default: All Hosts(*), RW, no_root_squash: True
         *
         * List of dictionaries with client entries. See examples. Check infini_export_client module to modify individual NFS client entries for export.
         */
        client_list?: string;
        /**
         * Export name. Should always start with C(/). (ex. name=/data)
         */
        name?: string;
        /**
         * Name of exported file system.
         */
        filesystem?: string;
        [k: string]: any;
      };
      /**
       * Allows for the management of API Gatway APIs
       * Normally you should give the api_id since there is no other stable guaranteed unique identifier for the API.  If you do not give api_id then a new API will be create each time this is run.
       * Beware that there are very hard limits on the rate that you can call API Gateway's REST API.  You may need to patch your boto.  See https://github.com/boto/boto3/issues/876 and discuss with your AWS rep.
       * swagger_file and swagger_text are passed directly on to AWS transparently whilst swagger_dict is an ansible dict which is converted to JSON before the API definitions are uploaded.
       */
      aws_api_gateway?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages AAA server global configuration
       */
      nxos_aaa_server?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Enables direct authentication requests to AAA server. Device default is disabled.
         */
        directed_request?: "enabled" | "disabled" | "default";
        /**
         * The server type is either radius or tacacs.
         */
        server_type: "radius" | "tacacs";
        /**
         * The state of encryption applied to the entered global key. O clear text, 7 encrypted. Type-6 encryption is not supported.
         */
        encrypt_type?: "0" | "7";
        /**
         * Global AAA shared secret.
         */
        global_key?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "default";
        host?: string;
        /**
         * Global AAA server timeout period, in seconds. Range is 1-60. Device default is 5.
         */
        server_timeout?: string;
        /**
         * Duration for which a non-reachable AAA server is skipped, in minutes. Range is 1-1440. Device default is 0.
         */
        deadtime?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Create, update or delete a virtual networks. Allows setting and updating the available IPv4 address ranges and setting custom DNS servers. Use the azure_rm_subnet module to associate subnets with a virtual network.
       */
      azure_rm_virtualnetwork?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages IGMP global configuration configuration settings.
       */
      nxos_igmp?: {
        username?: string;
        save?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        /**
         * Enables or disables the enforce router alert option check for IGMPv2 and IGMPv3 packets.
         */
        enforce_rtr_alert?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Removes routes when the IGMP process is restarted. By default, routes are not flushed.
         */
        flush_routes?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        config?: string;
        /**
         * Default: present
         *
         * Manages desired state of the resource.
         */
        state?: "present" | "default";
        include_defaults?: string;
        host?: string;
        transport?: "cli" | "nxapi";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        /**
         * Restarts the igmp process (using an exec config command).
         */
        restart?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Configures the SELinux mode and policy. A reboot may be required after usage. Ansible will not issue this reboot but will let you know when it is required.
       */
      selinux?: {
        [k: string]: any;
      };
      /**
       * This module can create and destroy Google Compute Engine C(loadbalancer) and C(httphealthcheck) resources.  The primary LB resource is the C(load_balancer) resource and the health check parameters are all prefixed with I(httphealthcheck). The full documentation for Google Compute Engine load balancing is at U(https://developers.google.com/compute/docs/load-balancing/).  However, the ansible module simplifies the configuration by following the libcloud model. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.
       */
      gce_lb?: {
        /**
         * host header to pass through on HTTP check requests
         */
        httphealthcheck_host?: string;
        /**
         * the name identifier for the HTTP health check
         */
        httphealthcheck_name?: string;
        /**
         * name of the load-balancer resource
         */
        name?: string;
        /**
         * the external static IPv4 (or auto-assigned) address for the LB
         */
        external_ip?: string;
        /**
         * service account email
         */
        service_account_email?: string;
        /**
         * the GCE region where the load-balancer is defined
         */
        region?: string;
        /**
         * Default: 2
         *
         * number of consecutive failed checks before marking a node unhealthy
         */
        httphealthcheck_unhealthy_count?: string;
        /**
         * Default: 2
         *
         * number of consecutive successful checks before marking a node healthy
         */
        httphealthcheck_healthy_count?: string;
        /**
         * path to the pem file associated with the service account email This option is deprecated. Use 'credentials_file'.
         */
        pem_file?: string;
        /**
         * Default: /
         *
         * the url path to use for HTTP health checking
         */
        httphealthcheck_path?: string;
        /**
         * the port (range) to forward, e.g. 80 or 8000-8888 defaults to all ports
         */
        port_range?: string;
        /**
         * Default: present
         *
         * desired state of the LB
         */
        state?: string;
        /**
         * Default: 5
         *
         * the timeout in seconds before a request is considered a failed check
         */
        httphealthcheck_timeout?: string;
        /**
         * a list of zone/nodename pairs, e.g ['us-central1-a/www-a', ...]
         */
        members?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * path to the JSON file associated with the service account email
         */
        credentials_file?: string;
        /**
         * Default: 80
         *
         * the TCP port to use for HTTP health checking
         */
        httphealthcheck_port?: string;
        /**
         * Default: tcp
         *
         * the protocol used for the load-balancer packet forwarding, tcp or udp
         */
        protocol?: string;
        /**
         * your GCE project ID
         */
        project_id?: string;
        /**
         * Default: 5
         *
         * the duration in seconds between each health check request
         */
        httphealthcheck_interval?: string;
        [k: string]: any;
      };
      /**
       * Retrieve facts about a one or more OpenStack domains
       */
      os_keystone_domain_facts?: {
        /**
         * Name or ID of the domain
         */
        name?: string;
        /**
         * Default: None
         *
         * A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.
         */
        filters?: string;
        [k: string]: any;
      };
      /**
       * Manage OpenStack DNS recordsets. Recordsets can be created, deleted or updated. Only the I(records), I(description), and I(ttl) values can be updated.
       */
      os_recordset?: {
        /**
         * Name of the recordset
         */
        name?: string;
        /**
         * Zone managing the recordset
         */
        zone?: string;
        /**
         * List of recordset definitions
         */
        records?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: None
         *
         * TTL (Time To Live) value in seconds
         */
        ttl?: string;
        /**
         * Recordset type
         */
        recordset_type?: string;
        /**
         * Default: None
         *
         * Description of the recordset
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * This module will let you create Zabbix maintenance windows.
       */
      zabbix_maintenance?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        };
      /**
       * install a different version of Cumulus Linux in the inactive slot. For more details go the Image Management User Guide at U(http://docs.cumulusnetworks.com/).
       */
      cl_img_install?: {
        /**
         * The full path to the Cumulus Linux binary image. Can be a local path, http or https URL. If the code version is in the name of the file, the module will assume this is the version of code you wish to install.
         */
        src: string;
        /**
         * Default: None
         *
         * Inform the module of the exact version one is installing. This overrides the automatic check of version in the file name. For example, if the binary file name is called CumulusLinux-2.2.3.bin, and version is set to '2.5.0', then the module will assume it is installing '2.5.0' not '2.2.3'. If version is not included, then the module will assume '2.2.3' is the version to install.
         */
        version?: string;
        /**
         * Default: no
         *
         * Switch slots after installing the image. To run the installed code, reboot the switch.
         */
        switch_slot?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage a maintenance-mode or normal-mode profile with configuration commands that can be applied during graceful removal or graceful insertion.
       */
      nxos_gir_profile_management?: {
        username?: string;
        /**
         * List of commands to be included into the profile.
         */
        commands?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        ssh_keyfile?: string;
        /**
         * Specify the configuration string to be used for module operations.
         */
        config?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Specify to retrieve or not the complete running configuration for module operations.
         */
        include_defaults?: string;
        host?: string;
        /**
         * Configure the profile as Maintenance or Normal mode.
         */
        mode: "maintenance" | "normal";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Add or remove kernel modules from blacklist.
       */
      kernel_blacklist?: {
        /**
         * If specified, use this blacklist file instead of C(/etc/modprobe.d/blacklist-ansible.conf).
         */
        blacklist_file?: string;
        /**
         * Default: present
         *
         * Whether the module should be present in the blacklist or absent.
         */
        state?: "present" | "absent";
        /**
         * Name of kernel module to black- or whitelist.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Sends an arbitrary command to an NXOS node and returns the results read from the device.  This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.
       */
      nxos_command?: {
        [k: string]: any;
      };
      /**
       * Manage upload, installation and removal of UCS files.
       */
      bigip_ucs?: {
        /**
         * If C(yes) will upload the file every time and replace the file on the device. If C(no), the file will only be uploaded if it does not already exist. Generally should be C(yes) only in cases where you have reason to believe that the image was corrupted during upload.
         */
        force?: string;
        /**
         * When specified, the device and trust domain certs and keys are not loaded from the UCS. Instead, a new set is regenerated.
         */
        reset_trust?: string;
        /**
         * Bypasses the platform check and allows a UCS that was created using a different platform to be installed. By default (without this option), a UCS created from a different platform is not allowed to be installed.
         */
        no_platform_check?: string;
        /**
         * Default: present
         *
         * When C(installed), ensures that the UCS is uploaded and installed, on the system. When C(present), ensures that the UCS is uploaded. When C(absent), the UCS will be removed from the system. When C(installed), the uploading of the UCS is idempotent, however the installation of that configuration is not idempotent.
         */
        state?: string;
        /**
         * During restore of the UCS file, include chassis level configuration that is shared among boot volume sets. For example, cluster default configuration.
         */
        include_chassis_level_config?: string;
        /**
         * Specifies the passphrase that is necessary to load the specified UCS file.
         */
        passphrase?: string;
        /**
         * The path to the UCS file to install. The parameter must be provided if the C(state) is either C(installed) or C(activated). When C(state) is C(absent), the full path for this parameter will be ignored and only the filename will be used to select a UCS for removal. Therefore you could specify C(/mickey/mouse/test.ucs) and this module would only look for C(test.ucs).
         */
        ucs?: string;
        /**
         * Performs a full restore of the UCS file and all the files it contains, with the exception of the license file. The option must be used to restore a UCS on RMA devices (Returned Materials Authorization).
         */
        no_license?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of L3 interfaces on network devices.
       */
      net_l3_interface?: {
        wildfire?: string;
        username?: string;
        data_filtering?: string;
        file_blocking?: string;
        pg_name: string;
        vulnerability?: string;
        spyware?: string;
        url_filtering?: string;
        virus?: string;
        commit?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password: string;
        ip_address: string;
        [k: string]: any;
      };
      /**
       * Sends logs to LogEntries in realtime
       */
      logentries?: {
        [k: string]: any;
      };
      /**
       * Manages F5 BIG-IP LTM pool members via iControl SOAP API
       */
      bigip_pool_member?: {
        /**
         * Set new session availability status for pool member
         */
        session_state?: string;
        /**
         * Pool member ratio weight. Valid values range from 1 through 100. New pool members -- unless overriden with this value -- default to 1.
         */
        ratio?: string;
        /**
         * Pool member description
         */
        description?: string;
        /**
         * Set monitor availability status for pool member
         */
        monitor_state?: string;
        /**
         * Default: Common
         *
         * Partition
         */
        partition?: string;
        /**
         * Pool member connection limit. Setting this to 0 disables the limit.
         */
        connection_limit?: string;
        /**
         * Pool member IP
         */
        host?: string;
        /**
         * Default: present
         *
         * Pool member state
         */
        state?: string;
        /**
         * Default: no
         *
         * When state is absent and the pool member is no longer referenced in other pools, the default behavior removes the unused node o bject. Setting this to 'yes' disables this behavior.
         */
        preserve_node?: string;
        /**
         * Pool member rate limit (connections-per-second). Setting this to 0 disables the limit.
         */
        rate_limit?: string;
        /**
         * Pool member port
         */
        port?: string;
        /**
         * Pool name. This pool must exist.
         */
        pool?: string;
        [k: string]: any;
      };
      /**
       * Add or Remove a floating IP to an instance
       */
      os_floating_ip?: {
        /**
         * To which fixed IP of server the floating IP address should be attached to.
         */
        fixed_address?: string;
        /**
         * The name or ID of a neutron external network or a nova pool name.
         */
        network?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        /**
         * When attaching a floating IP address, specify whether we should wait for it to appear as attached.
         */
        wait?: string;
        /**
         * Default: None
         *
         * The name or id of a neutron private network that the fixed IP to attach floating IP is on
         */
        nat_destination?: string;
        /**
         * When I(state) is absent, indicates whether or not to delete the floating IP completely, or only detach it from the server. Default is to detach only.
         */
        purge?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * A floating IP address to attach or to detach. Required only if I(state) is absent. When I(state) is present can be used to specify a IP address to attach.
         */
        floating_ip_address?: string;
        /**
         * Default: 60
         *
         * Time to wait for an IP address to appear as attached. See wait.
         */
        timeout?: string;
        /**
         * The name or ID of the instance to which the IP address should be assigned.
         */
        server?: string;
        /**
         * When I(state) is present, and I(floating_ip_address) is not present, this parameter can be used to specify whether we should try to reuse a floating IP address already allocated to the project.
         */
        reuse?: string;
        [k: string]: any;
      };
      /**
       * Installs or uninstalls Windows Roles or Features on Windows Server. This module uses the Add/Remove-WindowsFeature Cmdlets on Windows 2008 and Install/Uninstall-WindowsFeature Cmdlets on Windows 2012, which are not available on client os machines.
       */
      win_feature?: {
        /**
         * Names of roles or features to install as a single feature or a comma-separated list of features
         */
        name?: string;
        /**
         * Adds the corresponding management tools to the specified feature.
         * Not supported in Windows 2008. If present when using Windows 2008 this option will be ignored.
         */
        include_management_tools?: string;
        /**
         * Adds all subfeatures of the specified feature
         */
        include_sub_features?: string;
        /**
         * Specify a source to install the feature from.
         * Not supported in Windows 2008. If present when using Windows 2008 this option will be ignored.
         */
        source?: string;
        /**
         * Default: present
         *
         * State of the features or roles on the system
         */
        state?: string;
        /**
         * Restarts the computer automatically when installation is complete, if restarting is required by the roles or features installed.
         * DEPRECATED in Ansible 2.4, as unmanaged reboots cause numerous issues under Ansible. Check the C(reboot_required) return value from this module to determine if a reboot is necessary, and if so, use the M(win_reboot) action to perform it.
         */
        restart?: string;
        [k: string]: any;
      };
      /**
       * Manages Windows services.
       * For non-Windows targets, use the M(service) module instead.
       */
      win_service?: {
        /**
         * The username to set the service to start as.
         * This and the C(password) argument must be supplied together.
         */
        username?: string;
        /**
         * The display name to set for the service.
         */
        display_name?: string;
        /**
         * The description to set for the service.
         */
        description?: string;
        /**
         * If True, stopping or restarting a service with dependent services will force the dependent services to stop or restart also.
         * If False, stopping or restarting a service with dependent services may fail.
         */
        force_dependent_services?: string;
        /**
         * Default: set
         *
         * Used in conjunction with C(dependency) to either add the dependencies to the existing service dependencies.
         * Remove the dependencies to the existing dependencies.
         * Set the dependencies to only the values in the list replacing the existing dependencies.
         */
        dependency_action?: string;
        /**
         * Name of the service
         */
        name?: string;
        /**
         * Set the startup type for the service.
         * C(delayed) added in Ansible 2.3
         */
        start_mode?: string;
        /**
         * C(started)/C(stopped)/C(absent)/C(pause) are idempotent actions that will not run commands unless necessary.
         * C(restarted) will always bounce the service.
         * C(absent) added in Ansible 2.3
         * C(pause) was added in Ansible 2.4
         * Only services that support the paused state can be paused, you can check the return value C(can_pause_and_continue).
         * You can only pause a service that is already started.
         */
        state?: string;
        /**
         * A list of service dependencies to set for this particular service.
         * This should be a list of service names and not the display name of the service.
         * This works by C(dependency_action) to either add/remove or set the services in this list.
         */
        dependencies?: string;
        /**
         * The path to the executable to set for the service.
         */
        path?: string;
        /**
         * The password to set the service to start as.
         * This and the C(username) argument must be supplied together.
         * If specifying LocalSystem, NetworkService or LocalService this field must be an empty string and not null.
         */
        password?: string;
        /**
         * Whether to allow the service user to interact with the desktop.
         * This should only be set to true when using the LocalSystem username.
         */
        desktop_interact?: string;
        [k: string]: any;
      };
      /**
       * This module de-registers or registers an AWS EC2 instance from the ELBs that it belongs to.
       * Returns fact "ec2_elbs" which is a list of elbs attached to the instance if state=absent is passed as an argument.
       * Will be marked changed when called only if there are ELBs found to operate on.
       */
      ec2_elb?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Creates temporary files and directories.
       * For non-Windows targets, please use the M(tempfile) module instead.
       */
      win_tempfile?: {
        /**
         * Default: %TEMP%
         *
         * Location where temporary file or directory should be created.
         * If path is not specified default system temporary directory (%TEMP%) will be used.
         */
        path?: string;
        /**
         * Default: file
         *
         * Whether to create file or directory.
         */
        state?: string;
        /**
         * Default: ansible.
         *
         * Prefix of file/directory name created by module.
         */
        prefix?: string;
        /**
         * Suffix of file/directory name created by module.
         */
        suffix?: string;
        [k: string]: any;
      };
      /**
       * Reboot a Windows machine, wait for it to go down, come back up, and respond to commands.
       */
      win_reboot?: {
        /**
         * Default: 2
         *
         * Seconds for shutdown to wait before requesting reboot
         */
        pre_reboot_delay?: string;
        /**
         * Default: whoami
         *
         * Command to expect success for to determine the machine is ready for management
         */
        test_command?: string;
        /**
         * Default: 600
         *
         * Maximum seconds to wait for machine to re-appear on the network and respond to a test command
         * This timeout is evaluated separately for both network appearance and test command success (so maximum clock time is actually twice this value)
         */
        reboot_timeout?: string;
        /**
         * Seconds to wait after the reboot was successful and the connection was re-established
         * This is useful if you want wait for something to settle despite your connection already working
         */
        post_reboot_delay?: string;
        /**
         * Default: 600
         *
         * Maximum seconds to wait for shutdown to occur
         * Increase this timeout for very slow hardware, large update applications, etc
         */
        shutdown_timeout?: string;
        /**
         * Default: Reboot initiated by Ansible
         *
         * Message to display to users
         */
        msg?: string;
        /**
         * Default: 5
         *
         * Maximum seconds to wait for a single successful TCP connection to the WinRM endpoint before trying again
         */
        connect_timeout?: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure AlertEmailConfig object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_alertemailconfig?: {
        username?: string;
        /**
         * Alerts are sent to the comma separated list of  email recipients.
         */
        to_emails: string;
        /**
         * User defined description for the object.
         */
        description?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * Alerts are copied to the comma separated list of  email recipients.
         */
        cc_emails?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        controller?: string;
        /**
         * A user-friendly name of the email notification service.
         */
        name: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        tenant?: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        [k: string]: any;
      };
      /**
       * Attach/Detach a subnet interface to a router, to provide a gateway for the subnet.
       */
      quantum_router_interface?: {
        /**
         * Default: None
         *
         * Name of the region
         */
        region_name?: string;
        availability_zone?: string;
        /**
         * Default: None
         *
         * Name of the tenant whose subnet has to be attached.
         */
        tenant_name?: string;
        /**
         * Default: yes
         *
         * The tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone URL for authentication
         */
        auth_url?: string;
        /**
         * Default: yes
         *
         * Password of login user
         */
        login_password: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Default: None
         *
         * Name of the subnet to whose interface should be attached to the router.
         */
        subnet_name: string;
        /**
         * Default: None
         *
         * Name of the router to which the subnet's interface should be attached.
         */
        router_name: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure UserAccountProfile object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_useraccountprofile?: {
        username?: string;
        /**
         * Maximum number of concurrent sessions allowed.
         * There are unlimited sessions by default.
         * Default value when not specified in API or module is interpreted by Avi Controller as 0.
         */
        max_concurrent_sessions?: number | string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * The time period after which credentials expire.
         * Default is 180 days.
         * Default value when not specified in API or module is interpreted by Avi Controller as 180.
         */
        credentials_timeout_threshold?: number | string;
        /**
         * Lock timeout period (in minutes).
         * Default is 30 minutes.
         * Default value when not specified in API or module is interpreted by Avi Controller as 30.
         */
        account_lock_timeout?: number | string;
        controller?: string;
        /**
         * Number of login attempts before lockout.
         * Default is 3 attempts.
         * Default value when not specified in API or module is interpreted by Avi Controller as 3.
         */
        max_login_failure_count?: number | string;
        tenant?: string;
        /**
         * Maximum number of passwords to be maintained in the password history.
         * Default is 4 passwords.
         * Default value when not specified in API or module is interpreted by Avi Controller as 4.
         */
        max_password_history_count?: number | string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Name of the object.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Adds or removes a user from a MySQL database.
       */
      mysql_user?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * maintains ec2 security groups. This module has a dependency on python-boto >= 2.5
       */
      ec2_group?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module provides declarative management of L3 interfaces on Juniper JUNOS network devices.
       */
      junos_l3_interface?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Name of the L3 interface.
         */
        name?: string;
        /**
         * IPv6 of the L3 interface.
         */
        ipv6?: string;
        /**
         * Default: present
         *
         * State of the L3 interface configuration.
         */
        state?: "present" | "absent";
        /**
         * Logical interface number.
         */
        unit?: number | string;
        /**
         * Default: True
         *
         * Specifies whether or not the configuration is active or deactivated
         */
        active?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        host?: string;
        /**
         * IPv4 of the L3 interface.
         */
        ipv4?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of L3 interfaces definitions
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        port?: number | string;
        transport?: string;
        [k: string]: any;
      };
      /**
       * Create, update, put into maintenance, disable, enable and remove storage pools.
       */
      cs_storage_pool?: {
        [k: string]: any;
      };
      /**
       * Add or Remove images from the glance repository.
       */
      glance_image?: {
        /**
         * Default: yes
         *
         * The tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: None
         *
         * Name of the region
         */
        region_name?: string;
        availability_zone?: string;
        /**
         * Default: bare
         *
         * The format of the container
         */
        container_format?: "aki" | "ari" | "bare" | "ovf";
        /**
         * Default: None
         *
         * The minimum ram required to deploy this image
         */
        min_ram?: string;
        /**
         * Default: qcow2
         *
         * The format of the disk that is getting uploaded
         */
        disk_format?: "aki" | "vhd" | "vmdk" | "raw" | "qcow2" | "vdi" | "iso";
        /**
         * Default: 180
         *
         * The time to wait for the image process to complete in seconds
         */
        timeout?: string;
        /**
         * Default: None
         *
         * A url from where the image can be downloaded, mutually exclusive with file parameter
         */
        copy_from?: string;
        /**
         * Default: None
         *
         * The owner of the image
         */
        owner?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: publicURL
         *
         * The name of the glance service's endpoint URL type
         */
        endpoint_type?: "publicURL" | "internalURL";
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone url for authentication
         */
        auth_url?: string;
        /**
         * Default: None
         *
         * The path to the file which has to be uploaded, mutually exclusive with copy_from
         */
        file?: string;
        /**
         * Default: yes
         *
         * Password of login user
         */
        login_password: string;
        /**
         * Default: None
         *
         * The minimum disk space required to deploy this image
         */
        min_disk?: string;
        /**
         * Default: yes
         *
         * Whether the image can be accessed publicly
         */
        is_public?: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Default: None
         *
         * Name that has to be given to the image
         */
        name: string;
        [k: string]: any;
      };
      /**
       * allows the addition, modification and deletion of sessions in a consul cluster. These sessions can then be used in conjunction with key value pairs to implement distributed locks. In depth documentation for working with sessions can be found here http://www.consul.io/docs/internals/sessions.html
       */
      consul_session?: {
        /**
         * Default: None
         *
         * the name of the node that with which the session will be associated. by default this is the name of the agent.
         */
        node?: string;
        /**
         * Default: None
         *
         * name of the datacenter in which the session exists or should be created.
         */
        datacenter?: string;
        /**
         * Default: None
         *
         * the name that should be associated with the session. This is opaque to Consul and not required.
         */
        name?: string;
        /**
         * Default: localhost
         *
         * host of the consul agent defaults to localhost
         */
        host?: string;
        /**
         * Default: 8500
         *
         * the port on which the consul agent is running
         */
        port?: string;
        /**
         * Default: 15
         *
         * the optional lock delay that can be attached to the session when it is created. Locks for invalidated sessions ar blocked from being acquired until this delay has expired. Durations are in seconds
         */
        delay?: string;
        /**
         * Default: present
         *
         * whether the session should be present i.e. created if it doesn't exist, or absent, removed if present. If created, the ID for the session is returned in the output. If absent, the name or ID is required to remove the session. Info for a single session, all the sessions for a node or all available sessions can be retrieved by specifying info, node or list for the state; for node or info, the node name or session id is required as parameter.
         */
        state?: string;
        /**
         * Default: release
         *
         * the optional behavior that can be attached to the session when it is created. This can be set to either ‘release’ or ‘delete’. This controls the behavior when a session is invalidated.
         */
        behavior?: string;
        /**
         * Default: http
         *
         * the protocol scheme on which the consul agent is running
         */
        scheme?: string;
        /**
         * Default: True
         *
         * whether to verify the tls certificate of the consul agent
         */
        validate_certs?: string;
        /**
         * Default: None
         *
         * a list of checks that will be used to verify the session health. If all the checks fail, the session will be invalidated and any locks associated with the session will be release and can be acquired once the associated lock delay has expired.
         */
        checks?: string;
        [k: string]: any;
      };
      /**
       * Gets the default administrator password from any EC2 Windows instance.  The instance is referenced by its id (e.g. i-XXXXXXX). This module has a dependency on python-boto.
       */
      ec2_win_password?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Ensure that a Windows Server 2012+ host is configured as a domain controller or demoted to member server. This module may require subsequent use of the M(win_reboot) action if changes are made.
       */
      win_domain_controller?: {
        /**
         * username of a domain admin for the target domain (necessary to promote or demote a domain controller)
         */
        domain_admin_user?: string;
        /**
         * when C(state) is C(domain_controller), the DNS name of the domain for which the targeted Windows host should be a DC
         */
        dns_domain_name?: string;
        /**
         * safe mode password for the domain controller (required when C(state) is C(domain_controller))
         */
        safe_mode_password?: string;
        /**
         * password for the specified C(domain_admin_user)
         */
        domain_admin_password?: string;
        /**
         * whether the target host should be a domain controller or a member server
         */
        state?: string;
        /**
         * password to be assigned to the local C(Administrator) user (required when C(state) is C(member_server))
         */
        local_admin_password?: string;
        [k: string]: any;
      };
      /**
       * Manage Jenkins jobs by using Jenkins REST API.
       */
      jenkins_job?: {
        /**
         * Name of the Jenkins job.
         */
        name: string;
        /**
         * Default: http://localhost:8080
         *
         * Url where the Jenkins server is accessible.
         */
        url?: string;
        /**
         * Whether the job should be enabled or disabled.
         * Mututally exclusive with C(config).
         * Considered if C(state=present).
         */
        enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * Attribute that specifies if the job has to be created or deleted.
         */
        state?: "present" | "absent";
        /**
         * API token used to authenticate alternatively to password.
         */
        token?: string;
        /**
         * User to authenticate with the Jenkins server.
         */
        user?: string;
        /**
         * Password to authenticate with the Jenkins server.
         */
        password?: string;
        /**
         * config in XML format.
         * Required if job does not yet exist.
         * Mututally exclusive with C(enabled).
         * Considered if C(state=present).
         */
        config?: string;
        [k: string]: any;
      };
      /**
       * Manages global parameters of NetStream on HUAWEI CloudEngine switches.
       */
      ce_netstream_global?: {
        username?: string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Specifies the netstream statistic direction.
         */
        statistics_direction?: "inbound" | "outbound";
        /**
         * Default: ip
         *
         * Specifies the type of netstream global.
         */
        type?: "ip" | "vxlan";
        /**
         * Default: 16
         *
         * Specifies the netstream index-switch.
         */
        index_switch?: "16" | "32";
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Specifies the netstream sampler interval, length is 1 - 65535.
         */
        sampler_interval?: string;
        /**
         * Specifies the flexible netstream statistic record, length is 1 - 32.
         */
        statistics_record?: string;
        host?: string;
        timeout?: number | string;
        /**
         * Specifies the netstream sampler direction.
         */
        sampler_direction?: "inbound" | "outbound";
        /**
         * Netstream global interface.
         */
        interface: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Read the AWS documentation for VPC Peering Connections U(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-peering.html)
       */
      ec2_vpc_peer?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Gather facts about ec2 VPC subnets in AWS
       */
      ec2_vpc_subnet_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Starts gunicorn with the parameters specified. Common settings for gunicorn configuration are supported. For additional configuration use a config file See U(https://gunicorn-docs.readthedocs.io/en/latest/settings.html) for more options. It's recommended to always use the chdir option to avoid problems with the location of the app.
       */
      gunicorn?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        };
      /**
       * Notify airbrake about app deployments (see http://help.airbrake.io/kb/api-2/deploy-tracking)
       */
      airbrake_deployment?: {
        /**
         * URL of the project repository
         */
        repo?: string;
        /**
         * Default: https://airbrake.io/deploys.txt
         *
         * Optional URL to submit the notification to. Use to send notifications to Airbrake-compliant tools like Errbit.
         */
        url?: string;
        /**
         * The airbrake environment name, typically 'production', 'staging', etc.
         */
        environment: string;
        /**
         * API token.
         */
        token: string;
        /**
         * The username of the person doing the deployment
         */
        user?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A hash, number, tag, or other identifier showing what revision was deployed
         */
        revision?: string;
        [k: string]: any;
      };
      /**
       * Add or remove YUM repositories in RPM-based Linux distributions.
       */
      yum_repository?: {
        /**
         * Default: whatever
         *
         * Determines how yum resolves host names.
         * C(4) or C(IPv4) - resolve to IPv4 addresses only.
         * C(6) or C(IPv6) - resolve to IPv6 addresses only.
         */
        ip_resolve?: "4" | "6" | "IPv4" | "IPv6" | "whatever";
        /**
         * Default: yes
         *
         * This tells yum whether or not use this repository.
         */
        enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Username to use for proxy.
         */
        proxy_password?: string;
        /**
         * Maximum available network bandwidth in bytes/second. Used with the I(throttle) option.
         * If I(throttle) is a percentage and bandwidth is C(0) then bandwidth throttling will be disabled. If I(throttle) is expressed as a data rate (bytes/sec) then this option is ignored. Default is C(0) (no bandwidth throttling).
         */
        bandwidth?: string;
        /**
         * Default: 1000
         *
         * Relative cost of accessing this repository. Useful for weighing one repo's packages as greater/less than any other.
         */
        cost?: string;
        /**
         * File to use to save the repo in. Defaults to the value of I(name).
         */
        file?: string;
        /**
         * Default: 21600
         *
         * Time (in seconds) after which the mirrorlist locally cached will expire.
         * Default value is 6 hours.
         */
        mirrorlist_expire?: string;
        /**
         * List of packages to exclude from updates or installs. This should be a space separated list. Shell globs using wildcards (eg. C(*) and C(?)) are allowed.
         * The list can also be a regular YAML array.
         */
        exclude?: string;
        /**
         * Default: no
         *
         * This tells yum whether or not HTTP/1.1 keepalive should be used with this repository. This can improve transfer speeds by using one connection when downloading multiple files from a repository.
         */
        keepalive?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: no
         *
         * This tells yum whether or not it should perform a GPG signature check on the repodata from this repository.
         */
        repo_gpgcheck?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: yes
         *
         * Defines whether yum should verify SSL certificates/hosts at all.
         */
        sslverify?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: roundrobin
         *
         * C(roundrobin) randomly selects a URL out of the list of URLs to start with and proceeds through each of them as it encounters a failure contacting the host.
         * C(priority) starts from the first I(baseurl) listed and reads through them sequentially.
         */
        failovermethod?: "roundrobin" | "priority";
        /**
         * Default: 100
         *
         * When the relative size of deltarpm metadata vs pkgs is larger than this, deltarpm metadata is not downloaded from the repo. Note that you can give values over C(100), so C(200) means that the metadata is required to be half the size of the packages. Use C(0) to turn off this check, and always download metadata.
         */
        deltarpm_metadata_percentage?: string;
        /**
         * A URL pointing to the ASCII-armored GPG key file for the repository.
         */
        gpgkey?: string;
        /**
         * Default: all
         *
         * Determines how upstream HTTP caches are instructed to handle any HTTP downloads that Yum does.
         * C(all) means that all HTTP downloads should be cached.
         * C(packages) means that only RPM package downloads should be cached (but not repository metadata downloads).
         * C(none) means that no HTTP downloads should be cached.
         */
        http_caching?: "all" | "packages" | "none";
        /**
         * Default: 99
         *
         * Enforce ordered protection of repositories. The value is an integer from 1 to 99.
         * This option only works if the YUM Priorities plugin is installed.
         */
        priority?: string;
        /**
         * Default: present
         *
         * State of the repo file.
         */
        state?: "absent" | "present";
        /**
         * Specifies a URL to a file containing a list of baseurls.
         * This or the I(baseurl) parameter is required if I(state) is set to C(present).
         */
        mirrorlist?: string;
        /**
         * Option used to allow the user to overwrite any of the other options. To remove an option, set the value of the option to C(null).
         */
        params?: {
          [k: string]: any;
        };
        /**
         * Default: no
         *
         * Tells yum whether or not it should perform a GPG signature check on packages.
         */
        gpgcheck?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Include external configuration file. Both, local path and URL is supported. Configuration file will be inserted at the position of the I(include=) line. Included files may contain further include lines. Yum will abort with an error if an inclusion loop is detected.
         */
        include?: string;
        /**
         * Password for this proxy.
         */
        proxy_username?: string;
        /**
         * Username to use for basic authentication to a repo or really any url.
         */
        username?: string;
        /**
         * Default: 21600
         *
         * Time (in seconds) after which the metadata will expire.
         * Default value is 6 hours.
         */
        metadata_expire?: string;
        /**
         * A human readable string describing the repository.
         * This parameter is only required if I(state) is set to C(present).
         */
        description?: string;
        /**
         * Default: 10
         *
         * Set the number of times any attempt to retrieve a file should retry before returning an error. Setting this to C(0) makes yum try forever.
         */
        retries?: string;
        /**
         * Path to the SSL client certificate yum should use to connect to repos/remote sites.
         */
        sslclientcert?: string;
        /**
         * A URL pointing to the ASCII-armored CA key file for the repository.
         */
        gpgcakey?: string;
        /**
         * URL to the directory where the yum repository's 'repodata' directory lives.
         * This or the I(mirrorlist) parameter is required if I(state) is set to C(present).
         */
        baseurl?: string;
        /**
         * Default: no
         *
         * Enables support for S3 repositories.
         * This option only works if the YUM S3 plugin is installed.
         */
        s3_enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * List of packages you want to only use from a repository. This should be a space separated list. Shell globs using wildcards (eg. C(*) and C(?)) are allowed. Substitution variables (e.g. C($releasever)) are honored here.
         * The list can also be a regular YAML array.
         */
        includepkgs?: string;
        /**
         * Default: yes
         *
         * If set to C(yes) Yum will download packages and metadata from this repo in parallel, if possible.
         */
        async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Password to use with the username for basic authentication.
         */
        password?: string;
        /**
         * Default: releasever basearch
         *
         * When a repository id is displayed, append these yum variables to the string if they are used in the I(baseurl)/etc. Variables are appended in the order listed (and found).
         */
        ui_repoid_vars?: string;
        /**
         * Default: no
         *
         * Protect packages from updates from other repositories.
         */
        protect?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: no
         *
         * Whether yum should check the permissions on the paths for the certificates on the repository (both remote and local).
         * If we can't read any of the files then yum will force I(skip_if_unavailable) to be C(yes). This is most useful for non-root processes which use yum on repos that have client cert files which are readable only by root.
         */
        ssl_check_cert_permissions?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enable bandwidth throttling for downloads.
         * This option can be expressed as a absolute data rate in bytes/sec. An SI prefix (k, M or G) may be appended to the bandwidth value.
         */
        throttle?: string;
        /**
         * Unique repository ID.
         * This parameter is only required if I(state) is set to C(present) or C(absent).
         */
        name: string;
        /**
         * Default: 75
         *
         * When the relative size of delta vs pkg is larger than this, delta is not used. Use C(0) to turn off delta rpm processing. Local repositories (with file:// I(baseurl)) have delta rpms turned off by default.
         */
        deltarpm_percentage?: string;
        /**
         * Path to the SSL client key yum should use to connect to repos/remote sites.
         */
        sslclientkey?: string;
        /**
         * Specifies a URL to a metalink file for the repomd.xml, a list of mirrors for the entire repository are generated by converting the mirrors for the repomd.xml file to a I(baseurl).
         */
        metalink?: string;
        /**
         * Default: /etc/yum.repos.d
         *
         * Directory where the C(.repo) files will be stored.
         */
        reposdir?: string;
        /**
         * Default: no
         *
         * If set to C(yes) yum will continue running if this repository cannot be contacted for any reason. This should be set carefully as all repos are consulted for any given command.
         */
        skip_if_unavailable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 1
         *
         * Either C(1) or C(0). Determines whether or not yum keeps the cache of headers and packages after successful installation.
         */
        keepcache?: "0" | "1";
        /**
         * Path to the directory containing the databases of the certificate authorities yum should use to verify SSL certificates.
         */
        sslcacert?: string;
        /**
         * Default: 30
         *
         * Number of seconds to wait for a connection before timing out.
         */
        timeout?: string;
        /**
         * Default: yes
         *
         * Determines whether yum will allow the use of package groups for this repository.
         */
        enablegroups?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: read-only:present
         *
         * Filter the I(metadata_expire) time, allowing a trade of speed for accuracy if a command doesn't require it. Each yum command can specify that it requires a certain level of timeliness quality from the remote repos. from "I'm about to install/upgrade, so this better be current" to "Anything that's available is good enough".
         * C(never) - Nothing is filtered, always obey I(metadata_expire).
         * C(read-only:past) - Commands that only care about past information are filtered from metadata expiring. Eg. I(yum history) info (if history needs to lookup anything about a previous transaction, then by definition the remote package was available in the past).
         * C(read-only:present) - Commands that are balanced between past and future. Eg. I(yum list yum).
         * C(read-only:future) - Commands that are likely to result in running other commands which will require the latest metadata. Eg. I(yum check-update).
         * Note that this option does not override "yum clean expire-cache".
         */
        metadata_expire_filter?: "never" | "read-only:past" | "read-only:present" | "read-only:future";
        /**
         * URL to the proxy server that yum should use. Set to C(_none_) to disable the global proxy setting.
         */
        proxy?: string;
        [k: string]: any;
      };
      /**
       * Installs a Cumulus Linux license. The module reports no change of status when a license is installed. For more details go the Cumulus Linux License Documentation at U(http://docs.cumulusnetwork.com) and the Licensing KB Site at U(https://support.cumulusnetworks.com/hc/en-us/sections/200507688)
       */
      cl_license?: {
        /**
         * The full path to the license. Can be local path or HTTP URL.
         */
        src: string;
        /**
         * Force installation of a license. Typically not needed. It is recommended to manually run this command via the ansible command. A reload of switchd is not required. Running the force option in a playbook will break the idempotent state machine of the module and cause the switchd notification to kick in all the time, causing a disruption.
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Apstra AOS Template module let you manage your Template easily. You can create create and delete Template by Name, ID or by using a JSON File. This module is idempotent and support the I(check) mode. It's using the AOS REST API.
       */
      aos_template?: {
        /**
         * Datastructure of the Template to create. The data can be in YAML / JSON or directly a variable. It's the same datastructure that is returned on success in I(value).
         */
        content?: string;
        /**
         * Default: present
         *
         * Indicate what is the expected state of the Template (present or not).
         */
        state?: "present" | "absent";
        /**
         * An existing AOS session as obtained by M(aos_login) module.
         */
        session: {
          [k: string]: any;
        };
        /**
         * AOS Id of the Template to manage (can't be used to create a new Template), Only one of I(name), I(id) or I(src) can be set.
         */
        id?: string;
        /**
         * Name of the Template to manage. Only one of I(name), I(id) or I(src) can be set.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Returns list of matching AMIs with AMI ID, along with other useful information
       * Can search AMIs with different owners
       * Can search by matching tag(s), by AMI name and/or other criteria
       * Results can be sorted and sliced
       */
      ec2_ami_find?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create, update, or delete OpenStack Identity domains. If a domain with the supplied name already exists, it will be updated with the new description and enabled attributes.
       */
      os_keystone_domain?: {
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: True
         *
         * Is the domain enabled
         */
        enabled?: string;
        /**
         * Name that has to be given to the instance
         */
        name?: string;
        /**
         * Default: None
         *
         * Description of the domain
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * Loads and executes a role as a task dynamically. This frees roles from the `roles:` directive and allows them to be treated more as tasks.
       * Unlike M(import_role), most keywords, including loops and conditionals, apply to this statement.
       * This module is also supported for Windows targets.
       */
      include_role?: {
        active_connection_states?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        host?: string;
        connect_timeout?: number | string;
        delay?: number | string;
        search_regex?: string;
        state?: "absent" | "drained" | "present" | "started" | "stopped";
        sleep?: number | string;
        timeout?: number | string;
        exclude_hosts?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        msg?: string;
        path?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Manage action rule profiles on Cisco ACI fabrics.
       * More information from the internal APIC class I(rtctrl:AttrP) at U(https://developer.cisco.com/media/mim-ref/MO-rtctrlAttrP.html).
       */
      aci_tenant_action_rule_profile?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Manages Sensu client configuration.
       * For more information, refer to the Sensu documentation: U(https://sensuapp.org/docs/latest/reference/clients.html)
       */
      sensu_client?: {
        /**
         * If a deregistration event should be created upon Sensu client process stop.
         */
        deregister?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * If Sensu should monitor keepalives for this client.
         */
        keepalives?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The socket definition scope, used to configure the Sensu client socket.
         */
        socket?: {
          [k: string]: any;
        };
        /**
         * An array of client subscriptions, a list of roles and/or responsibilities assigned to the system (e.g. webserver).
         * These subscriptions determine which monitoring checks are executed by the client, as check requests are sent to subscriptions.
         * The subscriptions array items must be strings.
         */
        subscriptions?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: Non-loopback IPv4 address as determined by Ruby Socket.ip_address_list (provided by Sensu)
         *
         * An address to help identify and reach the client. This is only informational, usually an IP address or hostname.
         */
        address?: string;
        /**
         * The chef definition scope, used to configure the Sensu Enterprise Chef integration (Sensu Enterprise users only).
         */
        chef?: {
          [k: string]: any;
        };
        /**
         * Client definition attributes to redact (values) when logging and sending client keepalives.
         */
        redact?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * Whether the client should be present or not
         */
        state?: "present" | "absent";
        /**
         * The puppet definition scope, used to configure the Sensu Enterprise Puppet integration (Sensu Enterprise users only).
         */
        puppet?: {
          [k: string]: any;
        };
        /**
         * The ec2 definition scope, used to configure the Sensu Enterprise AWS EC2 integration (Sensu Enterprise users only).
         */
        ec2?: {
          [k: string]: any;
        };
        /**
         * If safe mode is enabled for the client. Safe mode requires local check definitions in order to accept a check request and execute the check.
         */
        safe_mode?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The registration definition scope, used to configure Sensu registration event handlers.
         */
        registration?: {
          [k: string]: any;
        };
        /**
         * The keepalive definition scope, used to configure Sensu client keepalives behavior (e.g. keepalive thresholds, etc).
         */
        keepalive?: {
          [k: string]: any;
        };
        /**
         * The deregistration definition scope, used to configure automated Sensu client de-registration.
         */
        deregistration?: {
          [k: string]: any;
        };
        /**
         * The servicenow definition scope, used to configure the Sensu Enterprise ServiceNow integration (Sensu Enterprise users only).
         */
        servicenow?: {
          [k: string]: any;
        };
        /**
         * Default: System hostname as determined by Ruby Socket.gethostname (provided by Sensu)
         *
         * A unique name for the client. The name cannot contain special characters or spaces.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Lists or describes services in ecs.
       */
      ecs_service_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create, destroy, or update accounts on SolidFire
       */
      sf_account_manager?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Launches or updates an AWS CloudFormation stack and waits for it complete.
       */
      cloudformation?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module is used to configure MicroServiceGroup object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_microservicegroup?: {
        username?: string;
        /**
         * User defined description for the object.
         */
        description?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        controller?: string;
        /**
         * Creator name.
         */
        created_by?: string;
        /**
         * Name of the microservice group.
         */
        name: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        tenant?: string;
        /**
         * Configure microservice(es).
         * It is a reference to an object of type microservice.
         */
        service_refs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Uuid of the microservice group.
         */
        uuid?: string;
        [k: string]: any;
      };
      /**
       * Notify BigPanda when deployments start and end (successfully or not). Returns a deployment object containing all the parameters for future module calls.
       */
      bigpanda?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Manage content switching policy.
       * This module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.
       */
      netscaler_cs_policy?: {
        /**
         * Name for the content switching policy. Must begin with an ASCII alphanumeric or underscore C(_) character, and must contain only ASCII alphanumeric, underscore, hash C(#), period C(.), space C( ), colon C(:), at sign C(@), equal sign C(=), and hyphen C(-) characters. Cannot be changed after a policy is created.
         * The following requirement applies only to the NetScaler CLI:
         * If the name includes one or more spaces, enclose the name in double or single quotation marks (for example, my policy or my policy).
         * Minimum length = 1
         */
        policyname?: string;
        /**
         * The domain name. The string value can range to 63 characters.
         * Minimum length = 1
         */
        domain?: string;
        /**
         * URL string that is matched with the URL of a request. Can contain a wildcard character. Specify the string value in the following format: C([[prefix] [*]] [.suffix]).
         * Minimum length = 1
         * Maximum length = 208
         */
        url?: string;
        save_config?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        state?: "present" | "absent";
        /**
         * Expression, or name of a named expression, against which traffic is evaluated. Written in the classic or default syntax.
         * Note:
         * Maximum length of a string literal in the expression is 255 characters. A longer string can be split into smaller strings of up to 255 characters each, and the smaller strings concatenated with the + operator. For example, you can create a 500-character string as follows: '"<string of 255 characters>" + "<string of 245 characters>"'
         */
        rule?: string;
        nitro_protocol?: "http" | "https";
        nsip: string;
        nitro_user: string;
        /**
         * Content switching action that names the target load balancing virtual server to which the traffic is switched.
         */
        action?: string;
        nitro_pass: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nitro_timeout?: number;
        [k: string]: any;
      };
      /**
       * Security policies allow you to enforce rules and take action, and can be as general or specific as needed. The policy rules are compared against the incoming traffic in sequence, and because the first rule that matches the traffic is applied, the more specific rules must precede the more general ones.
       */
      panos_security_rule?: {
        /**
         * Default: None
         *
         * Name of the already defined wildfire_analysis profile.
         */
        wildfire_analysis?: string;
        /**
         * Default: None
         *
         * Name of the already defined vulnerability profile.
         */
        vulnerability?: string;
        /**
         * Default: None
         *
         * Name of the already defined spyware profile.
         */
        spyware?: string;
        /**
         * Default: any
         *
         * - If you are using GlobalProtect with host information profile (HIP) enabled, you can also base the policy on information collected by GlobalProtect. For example, the user access level can be determined HIP that notifies the firewall about the user's local configuration.
         *
         */
        hip_profiles?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * Name of the already defined file_blocking profile.
         */
        file_blocking?: string;
        /**
         * Whether to log at session start.
         */
        log_start?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: add
         *
         * The action to be taken.  Supported values are I(add)/I(update)/I(find)/I(delete).
         */
        operation?: "add" | "update" | "delete" | "find";
        /**
         * Default: None
         *
         * Name of the already defined data_filtering profile.
         */
        data_filtering?: string;
        category?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: application-default
         *
         * List of services.
         */
        service?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: any
         *
         * List of applications.
         */
        application?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: any
         *
         * Use users to enforce policy for individual users or a group of users.
         */
        source_user?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * Name of the already defined url_filtering profile.
         */
        url_filtering?: string;
        /**
         * Default: any
         *
         * List of destination zones.
         */
        destination_zone?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * - Security profile group that is already defined in the system. This property supersedes antivirus, vulnerability, spyware, url_filtering, file_blocking, data_filtering, and wildfire_analysis properties.
         *
         */
        group_profile?: string;
        /**
         * API key that can be used instead of I(username)/I(password) credentials.
         */
        api_key?: string;
        /**
         * Default: admin
         *
         * Username credentials to use for auth unless I(api_key) is set.
         */
        username?: string;
        /**
         * Default: any
         *
         * List of destination addresses.
         */
        destination_ip?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * - Device groups are used for the Panorama interaction with Firewall(s). The group must exists on Panorama. If device group is not define we assume that we are contacting Firewall.
         *
         */
        devicegroup?: string;
        /**
         * Default: None
         *
         * Description for the security rule.
         */
        description?: string;
        /**
         * Default: None
         *
         * Name of the already defined antivirus profile.
         */
        antivirus?: string;
        /**
         * Name of the security rule.
         */
        rule_name: string;
        /**
         * Password credentials to use for auth unless I(api_key) is set.
         */
        password?: string;
        /**
         * IP address (or hostname) of PAN-OS device being configured.
         */
        ip_address: string;
        /**
         * Default: universal
         *
         * Type of security rule (version 6.1 of PanOS and above).
         */
        rule_type?: string;
        /**
         * Default: any
         *
         * List of source zones.
         */
        source_zone?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: any
         *
         * List of source addresses.
         */
        source_ip?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * Administrative tags that can be added to the rule. Note, tags must be already defined.
         */
        tag_name?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: allow
         *
         * Action to apply once rules maches.
         */
        action?: string;
        /**
         * Default: True
         *
         * Commit configuration if changed.
         */
        commit?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * Whether to log at session end.
         */
        log_end?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manages configuration of an OSPF VPN instance on HUAWEI CloudEngine switches.
       */
      ce_ospf_vrf?: {
        /**
         * Specifies the hold interval of originate LSA . Valid value is an integer, in millisecond, from 0 to 5000, the default value is 1000.
         */
        lsaoholdinterval?: string;
        /**
         * Specifies the reference bandwidth used to assign ospf cost. Valid values are an integer, in Mbps, 1 - 2147483648, the default value is 100.
         */
        bandwidth?: string;
        /**
         * Specifies the interval to calculate SPF when use millisecond level  timer. Valid value is an integer, in millisecond, from 1 to 10000.
         */
        spfintervalmi?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        /**
         * Specifies the max interval of originate LSA . Valid value is an integer, in millisecond, from 1 to 10000, the default value is 5000.
         */
        lsaomaxinterval?: string;
        /**
         * Specifies the max interval of arrive LSA when use the intelligent timer. Valid value is an integer, in millisecond, from 0 to 10000, the default value is 1000.
         */
        lsaamaxinterval?: string;
        /**
         * Specifies the start interval of originate LSA . Valid value is an integer, in millisecond, from 0 to 1000, the default value is 500.
         */
        lsaostartinterval?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Specifies the hold interval to calculate SPF when use intelligent timer. Valid value is an integer, in millisecond, from 1 to 5000, the default value is 200.
         */
        spfholdinterval?: string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Specifies the hold interval of arrive LSA when use the intelligent timer. Valid value is an integer, in millisecond, from 0 to 10000, the default value is 500.
         */
        lsaaholdinterval?: string;
        username?: string;
        /**
         * Specifies the interval of originate LSA . Valid value is an integer, in second, from 0 to 10, the default value is 5.
         */
        lsaointerval?: string;
        /**
         * Specifies the description information of ospf process.
         */
        description?: string;
        /**
         * Specifies the mode of timer to calculate interval of arrive LSA. If set the parameter but not specifies value, the default will be used. If true use general timer. If false use intelligent timer.
         */
        lsaalflag?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        host?: string;
        /**
         * Default: _public_
         *
         * Specifies the vpn instance which use ospf,length is 1 - 31. Valid values are a string.
         */
        vrf?: string;
        /**
         * Specifies whether cancel the interval of LSA originate or not. If set the parameter but noe specifies value, the default will be used. true:cancel the interval of LSA originate, the interval is 0. false:do not cancel the interval of LSA originate.
         */
        lsaointervalflag?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        /**
         * Specifies the start interval of arrive LSA when use the intelligent timer. Valid value is an integer, in millisecond, from 0 to 10000, the default value is 500.
         */
        lsaastartinterval?: string;
        /**
         * The ID of the ospf process. Valid values are an integer, 1 - 4294967295, the default value is 1.
         */
        ospf: string;
        /**
         * Default: intelligent-timer
         *
         * Specifies the mode of timer which used to calculate SPF. If set the parameter but noe specifies value, the default will be used. If is intelligent-timer, then use intelligent timer. If is timer, then use second level timer. If is millisecond, then use millisecond level timer.
         */
        spfintervaltype?: "intelligent-timer" | "timer" | "millisecond";
        /**
         * Specifies the interval of arrive LSA when use the general timer. Valid value is an integer, in millisecond, from 0 to 10000.
         */
        lsaainterval?: string;
        /**
         * Specifies the start interval to calculate SPF when use intelligent timer. Valid value is an integer, in millisecond, from 1 to 1000, the default value is 50.
         */
        spfstartinterval?: string;
        /**
         * Specifies the ospf private route id,. Valid values are a string, formatted as an IP address (i.e. "10.1.1.1") the length is 0 - 20.
         */
        route_id?: string;
        /**
         * Specifies the max interval to calculate SPF when use intelligent timer. Valid value is an integer, in millisecond, from 1 to 20000, the default value is 5000.
         */
        spfmaxinterval?: string;
        timeout?: number | string;
        /**
         * Specifies the interval to calculate SPF when use second level  timer. Valid value is an integer, in second, from 1 to 10.
         */
        spfinterval?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * LogicMonitor is a hosted, full-stack, infrastructure monitoring platform.
       * This module manages hosts, host groups, and collectors within your LogicMonitor account.
       */
      logicmonitor?: {
        /**
         * Default: hostname -f
         *
         * The display name of a host in your LogicMonitor account or the desired display name of a device to manage.
         * Optional for managing hosts (target=host).
         */
        displayname?: string;
        /**
         * The long text description of the object in your LogicMonitor account.
         * Optional for managing hosts and host groups (target=host or target=hostgroup; action=add or action=update).
         */
        description?: string;
        /**
         * The LogicMonitor account company name. If you would log in to your account at "superheroes.logicmonitor.com" you would use "superheroes."
         */
        company: string;
        /**
         * Default: hostname -f
         *
         * The hostname of a host in your LogicMonitor account, or the desired hostname of a device to manage.
         * Optional for managing hosts (target=host).
         */
        hostname?: string;
        /**
         * The fullpath of the host group object you would like to manage.
         * Recommend running on a single Ansible host.
         * Required for management of LogicMonitor host groups (target=hostgroup).
         */
        fullpath?: string;
        /**
         * A dictionary of properties to set on the LogicMonitor host or host group.
         * Optional for managing hosts and host groups (target=host or target=hostgroup; action=add or action=update).
         * This parameter will add or update existing properties in your LogicMonitor account.
         */
        properties?: {
          [k: string]: any;
        };
        /**
         * The action you wish to perform on target.
         * Add: Add an object to your LogicMonitor account.
         * Remove: Remove an object from your LogicMonitor account.
         * Update: Update properties, description, or groups (target=host) for an object in your LogicMonitor account.
         * SDT: Schedule downtime for an object in your LogicMonitor account.
         */
        action: "add" | "remove" | "update" | "sdt";
        /**
         * A LogicMonitor user name. The module will authenticate and perform actions on behalf of this user.
         */
        user: string;
        /**
         * A list of groups that the host should be a member of.
         * Optional for managing hosts (target=host; action=add or action=update).
         */
        groups?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: 30
         *
         * The duration (minutes) of the Scheduled Down Time (SDT).
         * Optional for putting an object into SDT (action=sdt).
         */
        duration?: string;
        /**
         * Default: True
         *
         * A boolean flag to turn alerting on or off for an object.
         * Optional for managing all hosts (action=add or action=update).
         */
        alertenable?: 0 | "on" | "f" | "false" | 1 | "no" | "n" | "1" | "0" | "t" | "y" | "off" | "yes" | "true";
        /**
         * Default: Now
         *
         * The time that the Scheduled Down Time (SDT) should begin.
         * Optional for managing SDT (action=sdt).
         * Y-m-d H:M
         */
        starttime?: string;
        /**
         * The password of the specified LogicMonitor user
         */
        password: string;
        /**
         * The fully qualified domain name of a collector in your LogicMonitor account.
         * This is required for the creation of a LogicMonitor host (target=host action=add).
         * This is required for updating, removing or scheduling downtime for hosts if 'displayname' isn't specified (target=host action=update action=remove action=sdt).
         */
        collector?: string;
        /**
         * ID of the datasource to target.
         * Required for management of LogicMonitor datasources (target=datasource).
         */
        id?: string;
        /**
         * The type of LogicMonitor object you wish to manage.
         * Collector: Perform actions on a LogicMonitor collector.
         * NOTE You should use Ansible service modules such as M(service) or M(supervisorctl) for managing the Collector 'logicmonitor-agent' and 'logicmonitor-watchdog' services. Specifically, you'll probably want to start these services after a Collector add and stop these services before a Collector remove.
         * Host: Perform actions on a host device.
         * Hostgroup: Perform actions on a LogicMonitor host group.
         * NOTE Host and Hostgroup tasks should always be performed via local_action. There are no benefits to running these tasks on the remote host and doing so will typically cause problems.
         */
        target: "collector" | "host" | "datasource" | "hostgroup";
        [k: string]: any;
      };
      /**
       * Create snapshots of the running states of selected features, add new show commands for snapshot creation, delete and compare existing snapshots.
       */
      nxos_snapshot?: {
        /**
         * Snapshot name, to be used when C(action=create) or C(action=delete).
         */
        snapshot_name?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        /**
         * Used to name the show command output, to be used when C(action=add).
         */
        section?: string;
        /**
         * Specify a new show command, to be used when C(action=add).
         */
        show_command?: string;
        /**
         * Specify the tags used to distinguish among row entries, to be used when C(action=add).
         */
        element_key1?: string;
        /**
         * Specify the tags used to distinguish among row entries, to be used when C(action=add).
         */
        element_key2?: string;
        provider?: {
          [k: string]: any;
        };
        username?: string;
        /**
         * Snapshot description to be used when C(action=create).
         */
        description?: string;
        /**
         * First snapshot to be used when C(action=compare).
         */
        snapshot1?: string;
        /**
         * Second snapshot to be used when C(action=compare).
         */
        snapshot2?: string;
        host?: string;
        /**
         * Default: ./
         *
         * Specify the path of the file where new created snapshot or snapshots comparison will be stored, to be used when C(action=create) and C(save_snapshot_locally=true) or C(action=compare).
         */
        path?: string;
        password?: string;
        /**
         * Snapshot options to be used when C(action=compare).
         */
        compare_option?: "summary" | "ipv4routes" | "ipv6routes";
        ssh_keyfile?: string;
        /**
         * Specify to locally store a new created snapshot, to be used when C(action=create).
         */
        save_snapshot_locally?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the file where snapshots comparison will be stored when C(action=compare).
         */
        comparison_results_file?: string;
        timeout?: number | string;
        /**
         * Define what snapshot action the module would perform.
         */
        action: "create" | "add" | "compare" | "delete" | "delete_all";
        /**
         * Specifies the tag of each row entry of the show command's XML output, to be used when C(action=add).
         */
        row_id?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Copy a file to a remote cloudengine device over SCP on HUAWEI CloudEngine switches.
       */
      ce_file_copy?: {
        /**
         * Remote file path of the copy. Remote directories must exist. If omitted, the name of the local file will be used. The maximum length of remote_file is 4096.
         */
        remote_file?: string;
        /**
         * Path to local file. Local directory must exist. The maximum length of local_file is 4096.
         */
        local_file?: string;
        /**
         * Default: flash:
         *
         * The remote file system of the device. If omitted, devices that support a file_system parameter will use their default values. File system indicates the storage medium and can be set to as follows, 1) 'flash:' is root directory of the flash memory on the master MPU. 2) 'slave#flash:' is root directory of the flash memory on the slave MPU. If no slave MPU exists, this drive is unavailable. 3) 'chassis ID/slot number#flash:' is root directory of the flash memory on a device in a stack. For example, 1/5#flash indicates the flash memory whose chassis ID is 1 and slot number is 5.
         */
        file_system?: string;
        [k: string]: any;
      };
      /**
       * Manage OpenStack Identity Roles.
       */
      os_keystone_role?: {
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Role Name
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Create, update or delete an Azure Function App
       */
      azure_rm_functionapp?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * The M(known_hosts) module lets you add or remove a host keys from the C(known_hosts) file.
       * Starting at Ansible 2.2, multiple entries per host are allowed, but only one for each key type supported by ssh. This is useful if you're going to want to use the M(git) module over ssh, for example.
       * If you have a very large number of host keys to manage, you will find the M(template) module more useful.
       */
      known_hosts?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * This module provides declarative management of VLANs on network devices.
       */
      net_vlan?: {
        pn_scope?: "fabric" | "local";
        pn_clipassword?: string;
        pn_cliusername?: string;
        pn_vlanid: number | string;
        /**
         * Default: present
         *
         * State of the VLAN configuration.
         */
        state: "present" | "absent";
        pn_ports?: string;
        pn_untagged_ports?: string;
        pn_cliswitch?: string;
        pn_stats?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        pn_description?: string;
        [k: string]: any;
      };
      /**
       * Retrieve facts for a device using SNMP, the facts will be inserted to the ansible_facts key.
       */
      snmp_facts?: {
        /**
         * Username for SNMPv3, required if version is v3
         */
        username?: string;
        /**
         * Encryption algoritm, required if level is authPriv
         */
        privacy?: "des" | "aes";
        /**
         * Authentication level, required if version is v3
         */
        level?: "authPriv" | "authNoPriv";
        /**
         * The SNMP community string, required if version is v2/v2c
         */
        community?: string;
        /**
         * Authentication key, required if version is v3
         */
        authkey?: string;
        /**
         * Set to target snmp server (normally {{inventory_hostname}})
         */
        host: string;
        /**
         * SNMP Version to use, v2/v2c or v3
         */
        version: "v2" | "v2c" | "v3";
        /**
         * Hashing algoritm, required if version is v3
         */
        integrity?: "md5" | "sha";
        removeplaceholder?: string;
        /**
         * Encryption key, required if version is authPriv
         */
        privkey?: string;
        [k: string]: any;
      };
      /**
       * An Ansible module to Create, Delete shared loadbalancers in CenturyLink Cloud.
       */
      clc_loadbalancer?: {
        /**
         * Default: enabled
         *
         * The status of the loadbalancer
         */
        status?: "enabled" | "disabled";
        /**
         * Default: None
         *
         * A description for the loadbalancer
         */
        description?: string;
        /**
         * Default: None
         *
         * -The balancing method for the load balancer pool
         */
        method?: "leastConnection" | "roundRobin";
        /**
         * The alias of your CLC Account
         */
        alias: string;
        /**
         * Default: present
         *
         * Whether to create or delete the load balancer pool
         */
        state?: "present" | "absent" | "port_absent" | "nodes_present" | "nodes_absent";
        /**
         * The location of the datacenter where the load balancer resides in
         */
        location: string;
        /**
         * A list of nodes that needs to be added to the load balancer pool
         */
        nodes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * Port to configure on the public-facing side of the load balancer pool
         */
        port?: 80 | 443;
        /**
         * Default: None
         *
         * The persistence method for the load balancer
         */
        persistence?: "standard" | "sticky";
        /**
         * The name of the loadbalancer
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This will configure both login and motd banners on remote devices running Arista EOS.  It allows playbooks to add or remote banner text from the active running configuration.
       */
      eos_banner?: {
        username?: string;
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        /**
         * The banner text that should be present in the remote device running configuration.  This argument accepts a multiline string. Requires I(state=present).
         */
        text?: string;
        auth_pass?: string;
        /**
         * Default: present
         *
         * Specifies whether or not the configuration is present in the current devices active running configuration.
         */
        state?: "present" | "absent";
        /**
         * Specifies which banner that should be configured on the remote device.
         */
        banner: "login" | "motd";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "eapi";
        [k: string]: any;
      };
      /**
       * Gather facts from ZFS pool properties.
       */
      zpool_facts?: {
        [k: string]: any;
      };
      /**
       * This module provides declarative management of VRFs on network devices.
       */
      net_vrf?: {
        wildfire?: string;
        username?: string;
        data_filtering?: string;
        file_blocking?: string;
        pg_name: string;
        vulnerability?: string;
        spyware?: string;
        url_filtering?: string;
        virus?: string;
        commit?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password: string;
        ip_address: string;
        [k: string]: any;
      };
      /**
       * This module can create and destroy Google Compute Engine networks and firewall rules U(https://cloud.google.com/compute/docs/networking). The I(name) parameter is reserved for referencing a network while the I(fwname) parameter is used to reference firewall rules. IPv4 Address ranges must be specified using the CIDR U(http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) format. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.
       */
      gce_net?: {
        /**
         * the source instance tags for creating a firewall rule
         */
        src_tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * region of subnet to create
         */
        subnet_region?: string;
        /**
         * name of the network
         */
        name?: string;
        /**
         * Default: present
         *
         * desired state of the network or firewall
         */
        state?: string;
        /**
         * the source IPv4 address range in CIDR notation
         */
        src_range?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * path to the JSON file associated with the service account email
         */
        credentials_file?: string;
        /**
         * the IPv4 address range in CIDR notation for the network this parameter is not mandatory when you specified existing network in name parameter, but when you create new network, this parameter is mandatory
         */
        ipv4_range?: string;
        /**
         * name of the firewall rule
         */
        fwname?: string;
        /**
         * path to the pem file associated with the service account email This option is deprecated. Use 'credentials_file'.
         */
        pem_file?: string;
        /**
         * the target instance tags for creating a firewall rule
         */
        target_tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * name of subnet to create
         */
        subnet_name?: string;
        /**
         * Default: legacy
         *
         * network mode for Google Cloud "legacy" indicates a network with an IP address range "auto" automatically generates subnetworks in different regions "custom" uses networks to group subnets of user specified IP address ranges https://cloud.google.com/compute/docs/networking#network_types
         */
        mode?: "legacy" | "auto" | "custom";
        /**
         * the protocol:ports to allow ('tcp:80' or 'tcp:80,443' or 'tcp:80-800;udp:1-25') this parameter is mandatory when creating or updating a firewall rule
         */
        allowed?: string;
        /**
         * service account email
         */
        service_account_email?: string;
        /**
         * your GCE project ID
         */
        project_id?: string;
        /**
         * description of subnet to create
         */
        subnet_desc?: string;
        [k: string]: any;
      };
      /**
       * Manage OpenStack Quotas. Quotas can be created, updated or deleted using this module. A quota will be updated if matches an existing project and is present.
       */
      os_quota?: {
        /**
         * Default: None
         *
         * Number of LVM snapshots to allow.
         */
        snapshots_lvm?: string;
        /**
         * Default: None
         *
         * Number of server groups to allow.
         */
        server_groups?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        /**
         * Default: None
         *
         * Maximum amount of ram in MB to allow.
         */
        ram?: string;
        /**
         * Default: None
         *
         * Number of snapshots to allow.
         */
        snapshots?: string;
        /**
         * Default: None
         *
         * Maximum number of instances allowed.
         */
        instances?: string;
        /**
         * Default: None
         *
         * Maximum number of backups allowed.
         */
        backups?: string;
        /**
         * Default: None
         *
         * Number of fixed IP's to allow.
         */
        fixed_ips?: string;
        /**
         * Default: None
         *
         * Number of Network ports to allow, this needs to be greater than the instances limit.
         */
        port?: string;
        /**
         * Default: None
         *
         * Number of subnets to allow.
         */
        subnet?: string;
        /**
         * Default: None
         *
         * Maximum size in GB's of individual volumes.
         */
        per_volume_gigabytes?: string;
        /**
         * Default: None
         *
         * Number of networks to allow.
         */
        network?: string;
        /**
         * Default: None
         *
         * Number of floating IP's to allow in Network.
         */
        floatingip?: string;
        /**
         * Default: None
         *
         * Number of LVM volumes to allow.
         */
        volumes_lvm?: string;
        /**
         * Default: None
         *
         * Number of floating IP's to allow in Compute.
         */
        floating_ips?: string;
        /**
         * Default: None
         *
         * Number of rules per security group to allow.
         */
        security_group_rule?: string;
        /**
         * Default: present
         *
         * A value of present sets the quota and a value of absent resets the quota to system defaults.
         */
        state?: string;
        /**
         * Default: None
         *
         * Number of injected files to allow.
         */
        injected_files?: string;
        /**
         * Default: None
         *
         * Maximum size in GB's of individual lvm volumes.
         */
        gigabytes_lvm?: string;
        /**
         * Default: None
         *
         * Maximum path size.
         */
        injected_path_size?: string;
        /**
         * Default: None
         *
         * Maximum volume storage allowed for project.
         */
        gigabytes?: string;
        /**
         * Default: None
         *
         * Maximum size of backups in GB's.
         */
        backup_gigabytes?: string;
        /**
         * Default: None
         *
         * Number of subnet pools to allow.
         */
        subnetpool?: string;
        /**
         * Default: None
         *
         * Number of key pairs to allow.
         */
        key_pairs?: string;
        /**
         * Default: None
         *
         * Number of policies to allow.
         */
        rbac_policy?: string;
        /**
         * Default: None
         *
         * Maximum file size in bytes.
         */
        injected_file_size?: string;
        /**
         * Default: None
         *
         * Number of routers to allow.
         */
        router?: string;
        /**
         * Default: None
         *
         * Number of properties to allow.
         */
        properties?: string;
        /**
         * Default: None
         *
         * Number of load balancer pools to allow.
         */
        pool?: string;
        /**
         * Default: None
         *
         * Number of server group members to allow.
         */
        server_group_members?: string;
        /**
         * Name of the OpenStack Project to manage.
         */
        name?: string;
        /**
         * Default: None
         *
         * Number of volumes to allow.
         */
        volumes?: string;
        /**
         * Default: None
         *
         * Number of security groups to allow.
         */
        security_group?: string;
        /**
         * Default: None
         *
         * Maximum number of CPU's per project.
         */
        cores?: string;
        /**
         * Default: None
         *
         * Number of load balancers to allow.
         */
        loadbalancer?: string;
        [k: string]: any;
      };
      /**
       * Manages VRRP interface attributes on HUAWEI CloudEngine devices.
       */
      ce_vrrp?: {
        /**
         * Type of a VRRP backup group.
         */
        vrrp_type?: "normal" | "member" | "admin";
        /**
         * Authentication type used for VRRP packet exchanges between virtual routers. The values are noAuthentication, simpleTextPassword, md5Authentication. The default value is noAuthentication.
         */
        auth_mode?: "simple" | "md5" | "none";
        /**
         * Select the display mode of an authentication key. By default, an authentication key is displayed in ciphertext.
         */
        is_plain?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Preemption delay. The value is an integer ranging from 0 to 3600. The default value is 0.
         */
        preempt_timer_delay?: string;
        port?: number | string;
        transport?: "cli";
        /**
         * Default: present
         *
         * VRRP backup group ID. The value is an integer ranging from 1 to 255.
         */
        vrid?: string;
        /**
         * Configured VRRP priority. The value ranges from 1 to 254. The default value is 100. A larger value indicates a higher priority.
         */
        priority?: string;
        /**
         * Delay in recovering after an interface goes Up. The delay is used for interface flapping suppression. The value is an integer ranging from 0 to 3600. The default value is 0 seconds.
         */
        recover_delay?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * VRRP version. The default version is v2.
         */
        version?: "v2" | "v3";
        provider?: {
          [k: string]: any;
        };
        /**
         * Configured interval between sending advertisements, in milliseconds. Only the master router sends VRRP advertisements. The default value is 1000 milliseconds.
         */
        advertise_interval?: string;
        username?: string;
        timeout?: number | string;
        host?: string;
        /**
         * Name of an interface. The value is a string of 1 to 63 characters.
         */
        interface?: string;
        password?: string;
        /**
         * Interval at which gratuitous ARP packets are sent, in seconds. The value ranges from 30 to 1200.The default value is 300.
         */
        gratuitous_arp_interval?: string;
        /**
         * This object is set based on the authentication type. When noAuthentication is specified, the value is empty. When simpleTextPassword or md5Authentication is specified, the value is a string of 1 to 8 characters in plaintext and displayed as a blank text for security.
         */
        auth_key?: string;
        /**
         * Virtual IP address. The value is a string of 0 to 255 characters.
         */
        virtual_ip?: string;
        /**
         * Tracked mVRRP interface name. The value is a string of 1 to 63 characters.
         */
        admin_interface?: string;
        /**
         * mVRRP ignores an interface Down event.
         */
        admin_ignore_if_down?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * mVRRP's fast resume mode.
         */
        fast_resume?: "enable" | "disable";
        /**
         * Disable the flowdown function for service VRRP.
         */
        admin_flowdown?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The configured holdMultiplier.The value is an integer ranging from 3 to 10. The default value is 3.
         */
        holding_multiplier?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Tracked mVRRP ID. The value is an integer ranging from 1 to 255.
         */
        admin_vrid?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of logging on network devices.
       */
      net_logging?: {
        username?: string;
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        auth_pass?: string;
        host?: string;
        gather_subset?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Manage Contract resources on Cisco ACI fabrics.
       * More information from the internal APIC class I(vz:BrCP) at U(https://developer.cisco.com/media/mim-ref/MO-vzBrCP.html).
       */
      aci_contract?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Create, Update or Destory a Url_Map. See U(https://cloud.google.com/compute/docs/load-balancing/http/url-map) for an overview. More details on the Url_Map API can be found at U(https://cloud.google.com/compute/docs/reference/latest/urlMaps#resource).
       */
      gcp_url_map?: {
        /**
         * Default Backend Service if no host rules match.
         */
        default_service: string;
        service_account_email?: string;
        service_account_permissions?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The list of named PathMatchers to use against the URL. Contains path_rules, which is a list of paths and an associated service. A default_service can also be specified for each path_matcher.
         * The 'name' parameter to which this path_matcher is referred by the host_rule.
         * The 'default_service' parameter is the name of the BackendService resource. This will be used if none of the path_rules defined by this path_matcher is matched by the URL's path portion.
         * The 'path_rules' parameter is a list of dictionaries containing a list of paths and a service to direct traffic to. Each path item must start with / and the only place a * is allowed is at the end following a /. The string fed to the path matcher does not include any text after the first ? or
         */
        path_matchers?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Name of the Url_Map.
         */
        url_map_name: string;
        pem_file?: string;
        /**
         * The list of HostRules to use against the URL. Contains a list of hosts and an associated path_matcher.
         * The 'hosts' parameter is a list of host patterns to match. They must be valid hostnames, except * will match any string of ([a-z0-9-.]*). In that case, * must be the first character and must be followed in the pattern by either - or ..
         * The 'path_matcher' parameter is name of the PathMatcher to use to match the path portion of the URL if the hostRule matches the URL's host portion.
         */
        host_rules?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        state?: "absent" | "present";
        credentials_file?: string;
        project_id?: string;
        [k: string]: any;
      };
      /**
       * Execute cluster-create or cluster-delete command.
       * A cluster allows two switches to cooperate in high-availability (HA) deployments. The nodes that form the cluster must be members of the same fabric. Clusters are typically used in conjunction with a virtual link aggregation group (VLAG) that allows links physically connected to two separate switches appear as a single trunk to a third device. The third device can be a switch,server, or any Ethernet device.
       */
      pn_cluster?: {
        /**
         * Specify the name of the cluster.
         */
        pn_name: string;
        /**
         * Provide login password if user is not root.
         */
        pn_clipassword?: string;
        /**
         * Provide login username if user is not root.
         */
        pn_cliusername?: string;
        /**
         * Validate the inter-switch links and state of switches in the cluster.
         */
        pn_validate?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify action to perform. Use 'present' to create cluster and 'absent' to delete cluster.
         */
        state: "present" | "absent";
        /**
         * Target switch to run the cli on.
         */
        pn_cliswitch?: string;
        /**
         * Specify the name of the first switch in the cluster.
         * Required for 'cluster-create'.
         */
        pn_cluster_node1?: string;
        /**
         * Specify the name of the second switch in the cluster.
         * Required for 'cluster-create'.
         */
        pn_cluster_node2?: string;
        [k: string]: any;
      };
      /**
       * Creates and deletes Route53 private and public zones
       */
      route53_zone?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module is used to configure AlertSyslogConfig object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_alertsyslogconfig?: {
        username?: string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * The list of syslog servers.
         */
        syslog_servers?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * User defined description for alert syslog config.
         */
        description?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        controller?: string;
        tenant?: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * A user-friendly name of the syslog notification.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Manipulate general SNMP settings on a BIG-IP.
       */
      bigip_snmp?: {
        /**
         * Specifies the name of the person who administers the SNMP service for this system.
         */
        contact?: string;
        /**
         * When C(enabled), ensures that the system sends authentication warning traps to the trap destinations. This is usually disabled by default on a BIG-IP.
         */
        agent_authentication_traps?: string;
        /**
         * Specifies the description of this system's physical location.
         */
        location?: string;
        /**
         * When C(enabled), ensures that the system sends device warning traps to the trap destinations. This is usually enabled by default on a BIG-IP.
         */
        device_warning_traps?: string;
        /**
         * When C(enabled), ensures that the system sends a trap whenever the SNMP agent starts running or stops running. This is usually enabled by default on a BIG-IP.
         */
        agent_status_traps?: string;
        [k: string]: any;
      };
      /**
       * Module to manage clusters in oVirt/RHV
       */
      ovirt_cluster?: {
        [k: string]: any;
      };
      /**
       * Configure the VMkernel IP Address
       */
      vmware_vmkernel_ip_config?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * This module provides an abstraction that enables and configures the netconf system service running on Junos devices.  This module can be used to easily enable the Netconf API. Netconf provides a programmatic interface for working with configuration and state resources as defined in RFC 6242.
       */
      junos_netconf?: {
        [k: string]: any;
      };
      /**
       * Module to manage Virtual Machine Snapshots in oVirt/RHV
       */
      ovirt_snapshots?: {
        [k: string]: any;
      };
      /**
       * Manages IGMP snooping global configuration.
       */
      nxos_igmp_snooping?: {
        /**
         * Global link-local groups suppression.
         */
        link_local_grp_supp?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        username?: string;
        /**
         * Global IGMPv1/IGMPv2 Report Suppression.
         */
        report_supp?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        /**
         * Enables/disables IGMP snooping on the switch.
         */
        snooping?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Group membership timeout value for all VLANs on the device. Accepted values are integer in range 1-10080, I(never) and I(default).
         */
        group_timeout?: string;
        /**
         * Global IGMPv3 Report Suppression and Proxy Reporting.
         */
        v3_report_supp?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "default";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * This module allows to manage posix users on a univention corporate server (UCS). It uses the python API of the UCS to create a new object or edit it.
       */
      udm_user?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Module searches Amazon EFS file systems
       */
      efs_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module is used to configure GslbHealthMonitor object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_gslbhealthmonitor?: {
        /**
         * Healthmonitorhttp settings for gslbhealthmonitor.
         */
        https_monitor?: {
          [k: string]: any;
        };
        /**
         * Number of continuous successful health checks before server is marked up.
         * Allowed values are 1-50.
         * Default value when not specified in API or module is interpreted by Avi Controller as 2.
         */
        successful_checks?: number | string;
        /**
         * Uuid of the health monitor.
         */
        uuid?: string;
        /**
         * Healthmonitordns settings for gslbhealthmonitor.
         */
        dns_monitor?: {
          [k: string]: any;
        };
        /**
         * Number of continuous failed health checks before the server is marked down.
         * Allowed values are 1-50.
         * Default value when not specified in API or module is interpreted by Avi Controller as 2.
         */
        failed_checks?: number | string;
        /**
         * Healthmonitortcp settings for gslbhealthmonitor.
         */
        tcp_monitor?: {
          [k: string]: any;
        };
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Healthmonitorexternal settings for gslbhealthmonitor.
         */
        external_monitor?: {
          [k: string]: any;
        };
        /**
         * Type of the health monitor.
         * Enum options - HEALTH_MONITOR_PING, HEALTH_MONITOR_TCP, HEALTH_MONITOR_HTTP, HEALTH_MONITOR_HTTPS, HEALTH_MONITOR_EXTERNAL, HEALTH_MONITOR_UDP,
         * HEALTH_MONITOR_DNS, HEALTH_MONITOR_GSLB.
         */
        type: string;
        api_version?: string;
        username?: string;
        /**
         * A valid response from the server is expected within the receive timeout window.
         * This timeout must be less than the send interval.
         * If server status is regularly flapping up and down, consider increasing this value.
         * Allowed values are 1-300.
         * Default value when not specified in API or module is interpreted by Avi Controller as 4.
         */
        receive_timeout?: number | string;
        /**
         * User defined description for the object.
         */
        description?: string;
        controller?: string;
        /**
         * Healthmonitorudp settings for gslbhealthmonitor.
         */
        udp_monitor?: {
          [k: string]: any;
        };
        /**
         * Healthmonitorhttp settings for gslbhealthmonitor.
         */
        http_monitor?: {
          [k: string]: any;
        };
        password?: string;
        tenant?: string;
        /**
         * Use this port instead of the port defined for the server in the pool.
         * If the monitor succeeds to this port, the load balanced traffic will still be sent to the port of the server defined within the pool.
         * Allowed values are 1-65535.
         * Special values are 0 - 'use server port'.
         */
        monitor_port?: number | string;
        /**
         * A user friendly name for this health monitor.
         */
        name: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Frequency, in seconds, that monitors are sent to a server.
         * Allowed values are 1-3600.
         * Default value when not specified in API or module is interpreted by Avi Controller as 5.
         */
        send_interval?: number | string;
        tenant_uuid?: string;
        [k: string]: any;
      };
      /**
       * Adds or removes deploy keys for GitHub repositories. Supports authentication using username and password, username and password and 2-factor authentication code (OTP), OAuth2 token, or personal access token.
       */
      github_deploy_key?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Creates or removes resource records in Google Cloud DNS.
       */
      gcdns_record?: {
        /**
         * The Google Cloud ID of the zone (e.g., example-com).
         * One of either I(zone) or I(zone_id) must be specified as an option, or the module will fail.
         * These usually take the form of domain names with the dots replaced with dashes. A zone ID will never have any dots in it.
         * I(zone_id) can be faster than I(zone) in projects with a large number of zones.
         * If both I(zone) and I(zone_id) are specifed, I(zone_id) will be used.
         */
        zone_id?: string;
        /**
         * The DNS domain name of the zone (e.g., example.com).
         * One of either I(zone) or I(zone_id) must be specified as an option, or the module will fail.
         * If both I(zone) and I(zone_id) are specifed, I(zone_id) will be used.
         */
        zone?: string;
        /**
         * The record_data to use for the resource record.
         * I(record_data) must be specified if I(state) is C(present) or I(overwrite) is C(True), or the module will fail.
         * Valid record_data vary based on the record's I(type). In addition, resource records that contain a DNS domain name in the value field (e.g., CNAME, PTR, SRV, .etc) MUST include a trailing dot in the value.
         * Individual string record_data for TXT records must be enclosed in double quotes.
         * For resource records that have the same name but different record_data (e.g., multiple A records), they must be defined as multiple list entries in a single record.
         */
        record_data?: string;
        /**
         * The e-mail address for a service account with access to Google Cloud DNS.
         */
        service_account_email?: string;
        /**
         * The path to the JSON file associated with the service account email.
         */
        credentials_file?: string;
        /**
         * The path to the PEM file associated with the service account email.
         * This option is deprecated and may be removed in a future release. Use I(credentials_file) instead.
         */
        pem_file?: string;
        /**
         * The fully-qualified domain name of the resource record.
         */
        record?: string;
        /**
         * Default: present
         *
         * Whether the given resource record should or should not be present.
         */
        state?: string;
        /**
         * Default: 300
         *
         * The amount of time in seconds that a resource record will remain cached by a caching resolver.
         */
        ttl?: string;
        /**
         * The Google Cloud Platform project ID to use.
         */
        project_id?: string;
        /**
         * The type of resource record to add.
         */
        type?: string;
        /**
         * Whether an attempt to overwrite an existing record should succeed or fail. The behavior of this option depends on I(state).
         * If I(state) is C(present) and I(overwrite) is C(True), this module will replace an existing resource record of the same name with the provided I(record_data). If I(state) is C(present) and I(overwrite) is C(False), this module will fail if there is an existing resource record with the same name and type, but different resource data.
         * If I(state) is C(absent) and I(overwrite) is C(True), this module will remove the given resource record unconditionally. If I(state) is C(absent) and I(overwrite) is C(False), this module will fail if the provided record_data do not match exactly with the existing resource record's record_data.
         */
        overwrite?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of LLDP service on VyOS network devices.
       */
      vyos_lldp?: {
        username?: string;
        ssh_keyfile?: string;
        interfaces?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * State of the LLDP configuration.
         */
        state?: "present" | "absent" | "enabled" | "disabled";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Create, destroy, resize luns on NetApp cDOT.
       */
      na_cdot_lun?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * This module manipulates sysctl entries and optionally performs a C(/sbin/sysctl -p) after changing them.
       */
      sysctl?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Create, manage and delete Windows shortcuts
       */
      win_shortcut?: {
        /**
         * Influences how the application is displayed when it is launched.
         */
        windowstyle?: string;
        /**
         * Executable or URL the shortcut points to.
         * The executable needs to be in your PATH, or has to be an absolute path to the executable.
         */
        src?: string;
        /**
         * Description for the shortcut.
         * This is usually shown when hoovering the icon.
         */
        description?: string;
        /**
         * Destination file for the shortcuting file.
         * File name should have a C(.lnk) or C(.url) extension.
         */
        dest?: string;
        /**
         * Additional arguments for the executable defined in C(src).
         */
        args?: string;
        /**
         * Key combination for the shortcut.
         */
        hotkey?: string;
        /**
         * Default: present
         *
         * When C(present), creates or updates the shortcut.  When C(absent), removes the shortcut if it exists.
         */
        state?: string;
        /**
         * Working directory for executable defined in C(src).
         */
        directory?: string;
        /**
         * Icon used for the shortcut.
         * File name should have a C(.ico) extension.
         * The file name is followed by a comma and the number in the library file (.dll) or use 0 for an image file.
         */
        icon?: string;
        [k: string]: any;
      };
      /**
       * Import file on PAN-OS device
       */
      panos_import?: {
        /**
         * Default: software
         *
         * Category of file uploaded. The default is software.
         */
        category?: string;
        /**
         * Default: admin
         *
         * Username for device authentication.
         */
        username?: string;
        /**
         * Default: None
         *
         * URL of the file that will be imported to device.
         */
        url?: string;
        /**
         * Default: None
         *
         * Location of the file to import into device.
         */
        file?: string;
        /**
         * Password for device authentication.
         */
        password: string;
        /**
         * IP address (or hostname) of PAN-OS device.
         */
        ip_address: string;
        [k: string]: any;
      };
      /**
       * Query current pagefile configuration.
       * Enable/Disable AutomaticManagedPagefile.
       * Create new or override pagefile configuration.
       */
      win_pagefile?: {
        /**
         * Default: yes
         *
         * Use Test-Path on the drive to make sure the drive is accessible before creating the pagefile.
         */
        test_path?: string;
        /**
         * The initial size of the pagefile in megabytes.
         */
        initial_size?: string;
        /**
         * The drive of the pagefile.
         */
        drive?: string;
        /**
         * Default: query
         *
         * State of the pagefile.
         */
        state?: string;
        /**
         * Default: no
         *
         * Configures current pagefile to be managed by the system.
         */
        system_managed?: string;
        /**
         * Default: no
         *
         * Remove all pagefiles in the system, not including automatic managed.
         */
        remove_all?: string;
        /**
         * Default: yes
         *
         * Override the current pagefile on the drive.
         */
        override?: string;
        /**
         * The maximum size of the pagefile in megabytes.
         */
        maximum_size?: string;
        /**
         * Configures AutomaticManagedPagefile for the entire system.
         */
        automatic?: string;
        [k: string]: any;
      };
      /**
       * Install, upgrade, delete and list packages with the Helm package manage
       */
      helm?: {
        /**
         * Whether to disable hooks during the uninstall process
         */
        disable_hooks?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Release name to manage
         */
        name?: string;
        /**
         * Default: default
         *
         * Kubernetes namespace where the chart should be installed
         */
        namespace?: string;
        /**
         * A map describing the chart to install. For example:
         * chart:
         *   name: memcached
         *   version: 0.4.0
         *   source:
         *     type: repo
         *     location: https://kubernetes-charts.storage.googleapis.com
         *
         */
        chart?: {
          [k: string]: any;
        };
        /**
         * Default: installed
         *
         * Whether to install C(present), remove C(absent), or purge C(purged) a package.
         */
        state?: "absent" | "purged" | "present";
        /**
         * A map of value options for the chart.
         */
        values?: {
          [k: string]: any;
        };
        /**
         * Default: localhost
         *
         * Tiller's server host
         */
        host?: string;
        /**
         * Default: 44134
         *
         * Tiller's server port
         */
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Grant or revoke privileges on PostgreSQL database objects.
       * This module is basically a wrapper around most of the functionality of PostgreSQL's GRANT and REVOKE statements with detection of changes (GRANT/REVOKE I(privs) ON I(type) I(objs) TO/FROM I(roles))
       */
      postgresql_privs?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Manages physical attributes of interfaces of NX-OS switches.
       */
      nxos_interface?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Interface description.
         */
        description?: string;
        /**
         * Associate SVI with anycast gateway under VLAN configuration mode.
         */
        fabric_forwarding_anycast_gateway?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Interface type to be unconfigured from the device.
         */
        interface_type?: "loopback" | "portchannel" | "svi" | "nve";
        /**
         * Enable/Disable ip forward feature on SVIs.
         */
        ip_forward?: "enable" | "disable";
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent" | "default";
        host?: string;
        /**
         * Default: up
         *
         * Administrative state of the interface.
         */
        admin_state?: "up" | "down";
        /**
         * Manage Layer 2 or Layer 3 state of the interface.
         */
        mode?: "layer2" | "layer3";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Full name of interface, i.e. Ethernet1/1, port-channel10.
         */
        interface?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * This module allows you to view the switch information. It executes the show sysinfo CLI command on a switch and returns a file containing all the system information of the target network device. This module uses SSH to manage network device configuration. The results of the operation can be viewed in results directory. For more information about this module from Lenovo and customizing it usage for your use cases, please visit U(http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_facts.html)
       */
      cnos_facts?: {
        [k: string]: any;
      };
      /**
       * Cancel Ansible Tower jobs. See U(https://www.ansible.com/tower) for an overview.
       */
      tower_job_cancel?: {
        /**
         * ID of the job to cancel
         */
        job_id?: string;
        /**
         * Fail loudly if the job_id does not reference a running job.
         */
        fail_if_not_running?: string;
        [k: string]: any;
      };
      /**
       * Controls systemd services on remote hosts.
       */
      systemd?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create, register and remove SSH keys.
       * If no key was found and no public key was provided and a new SSH private/public key pair will be created and the private key will be returned.
       */
      cs_sshkeypair?: {
        /**
         * String of the public key.
         */
        public_key?: string;
        /**
         * Account the public key is related to.
         */
        account?: string;
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        api_region?: string;
        /**
         * Name of the project the public key to be registered in.
         */
        project?: string;
        /**
         * Default: present
         *
         * State of the public key.
         */
        state?: "present" | "absent";
        /**
         * Domain the public key is related to.
         */
        domain?: string;
        api_key?: string;
        /**
         * Name of public key.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Enable or disable an Icinga2 feature
       */
      icinga2_feature?: {
        /**
         * Default: present
         *
         * Apply feature state.
         */
        state?: "present" | "absent";
        /**
         * This is the feature name to enable or disable.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Obtain a session token from the AWS Security Token Service
       */
      sts_session_token?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage MCP interface policies on Cisco ACI fabrics.
       * More information from the internal APIC class I(mcp:IfPol) at U(https://developer.cisco.com/media/mim-ref/MO-mcpIfPol.html).
       */
      aci_intf_policy_mcp?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Create and Delete Instances/Databases on Spanner. See U(https://cloud.google.com/spanner/docs) for an overview.
       */
      gcspanner?: {
        /**
         * Configuration the instance should use. Examples are us-central1, asia-east1 and europe-west1.
         */
        configuration: string;
        service_account_email?: string;
        /**
         * Name of database contained on the instance.
         */
        database_name?: string;
        /**
         * To delete an instance, this argument must exist and be true (along with state being equal to absent).
         */
        force_instance_delete?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * GCP spanner instance name.
         */
        instance_id: string;
        /**
         * Default: present
         *
         * State of the instance or database (absent, present). Applies to the most granular resource. If a database_name is specified we remove it.  If only instance_id is specified, that is what is removed.
         */
        state?: "absent" | "present";
        credentials_file?: string;
        /**
         * Number of nodes in the instance.  If not specified while creating an instance, node_count will be set to 1.
         */
        node_count?: number | string;
        project_id?: string;
        /**
         * Name of Instance to display.  If not specified, instance_id will be used instead.
         */
        instance_display_name?: string;
        [k: string]: any;
      };
      /**
       * Create and remove Rundeck projects through HTTP API.
       */
      rundeck_project?: {
        /**
         * Sets the rundeck instance URL.
         */
        url: string;
        /**
         * Sets the token to authenticate against Rundeck API.
         */
        token: string;
        /**
         * Sets the project name.
         */
        name: string;
        /**
         * Default: 14
         *
         * Sets the API version used by module.
         * API version must be at least 14.
         */
        api_version?: number | string;
        /**
         * Default: present
         *
         * Create or remove Rundeck project.
         */
        state?: "present" | "absent";
        [k: string]: any;
      };
      /**
       * Create or delete a Rackspace Cloud Monitoring alarm that associates an existing rax_mon_entity, rax_mon_check, and rax_mon_notification_plan with criteria that specify what conditions will trigger which levels of notifications. Rackspace monitoring module flow | rax_mon_entity -> rax_mon_check -> rax_mon_notification -> rax_mon_notification_plan -> *rax_mon_alarm*
       */
      rax_mon_alarm?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * The M(proxysql_backend_servers) module adds or removes mysql hosts using the proxysql admin interface.
       */
      proxysql_backend_servers?: {
        /**
         * Text field that can be used for any purposed defined by the user. Could be a description of what the host stores, a reminder of when the host was added or disabled, or a JSON processed by some checker script.
         */
        comment?: string;
        /**
         * ONLINE - Backend server is fully operational. OFFLINE_SOFT - When a server is put into C(OFFLINE_SOFT) mode, connections are kept in use until the current transaction is completed. This allows to gracefully detach a backend. OFFLINE_HARD - When a server is put into C(OFFLINE_HARD) mode, the existing connections are dropped, while new incoming connections aren't accepted either.
         * If omitted the proxysql database default for I(status) is C(ONLINE).
         */
        status?: "ONLINE" | "OFFLINE_SOFT" | "OFFLINE_HARD";
        /**
         * The ip address at which the mysqld instance can be contacted.
         */
        hostname: string;
        /**
         * Specify a config file from which login_user and login_password are to be read.
         */
        config_file?: string;
        /**
         * If the value of I(compression) is greater than 0, new connections to that server will use compression. If omitted the proxysql database default for I(compression) is 0.
         */
        compression?: number | string;
        /**
         * The bigger the weight of a server relative to other weights, the higher the probability of the server being chosen from the hostgroup. If omitted the proxysql database default for I(weight) is 1.
         */
        weight?: number | string;
        /**
         * Default: 6032
         *
         * The port used to connect to ProxySQL admin interface.
         */
        login_port?: number | string;
        /**
         * Default: None
         *
         * The username used to authenticate to ProxySQL admin interface.
         */
        login_user?: string;
        /**
         * Default: 127.0.0.1
         *
         * The host used to connect to ProxySQL admin interface.
         */
        login_host?: string;
        /**
         * Default: None
         *
         * The password used to authenticate to ProxySQL admin interface.
         */
        login_password?: string;
        /**
         * The hostgroup in which this mysqld instance is included. An instance can be part of one or more hostgroups.
         */
        hostgroup_id?: number | string;
        login_unix_socket?: string;
        /**
         * Default: present
         *
         * When C(present) - adds the host, when C(absent) - removes the host.
         */
        state?: "present" | "absent";
        /**
         * Default: True
         *
         * Dynamically load mysql host config to runtime memory.
         */
        load_to_runtime?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * Save mysql host config to sqlite db on disk to persist the configuration.
         */
        save_to_disk?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * If I(use_ssl) is set to C(True), connections to this server will be made using SSL connections. If omitted the proxysql database default for I(use_ssl) is C(False).
         */
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * If greater than 0, ProxySQL will reguarly monitor replication lag. If replication lag goes above I(max_replication_lag), proxysql will temporarily shun the server until replication catches up. If omitted the proxysql database default for I(max_replication_lag) is 0.
         */
        max_replication_lag?: number | string;
        /**
         * Default: 3306
         *
         * The port at which the mysqld instance can be contacted.
         */
        port?: number | string;
        /**
         * Ping time is monitored regularly. If a host has a ping time greater than I(max_latency_ms) it is excluded from the connection pool (although the server stays ONLINE). If omitted the proxysql database default for I(max_latency_ms) is 0.
         */
        max_latency_ms?: number | string;
        /**
         * The maximum number of connections ProxySQL will open to this backend server. If omitted the proxysql database default for I(max_connections) is 1000.
         */
        max_connections?: number | string;
        [k: string]: any;
      };
      /**
       * Manages Kibana plugins.
       */
      kibana_plugin?: {
        /**
         * Delete and re-install the plugin. Can be useful for plugins update
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: /opt/kibana/bin/kibana
         *
         * Location of the plugin binary
         */
        plugin_bin?: string;
        /**
         * Default: None
         *
         * Set exact URL to download the plugin from. For local file, prefix its absolute path with file://
         */
        url?: string;
        /**
         * Default: present
         *
         * Desired state of a plugin.
         */
        state?: "present" | "absent";
        /**
         * Default: None
         *
         * Version of the plugin to be installed. If plugin exists with previous version, it will NOT be updated if C(force) is not set to yes
         */
        version?: string;
        /**
         * Default: 1m
         *
         * Timeout setting: 30s, 1m, 1h...
         */
        timeout?: string;
        /**
         * Default: /opt/kibana/installedPlugins/
         *
         * Your configured plugin directory specified in Kibana
         */
        plugin_dir?: string;
        /**
         * Name of the plugin to install
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Module to manage Virtual Machine and floating disks in oVirt/RHV.
       */
      ovirt_disk?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Allows you to modify mapped network drives for individual users.
       */
      win_mapped_drive?: {
        /**
         * Credentials to map the drive with.
         * The username MUST include the domain or servername like SERVER\user, see the example for more information.
         */
        username?: string;
        /**
         * The UNC path to map the drive to.
         * This is required if C(state=present).
         * If C(state=absent) and path is not set, the module will delete the mapped drive regardless of the target.
         * If C(state=absent) and the path is set, the module will throw an error if path does not match the target of the mapped drive.
         */
        path?: string;
        /**
         * Default: present
         *
         * If C(state=present) will ensure the mapped drive exists.
         * If C(state=absent) will ensure the mapped drive does not exist.
         */
        state?: string;
        /**
         * The password for C(username).
         */
        password?: string;
        /**
         * The letter of the network path to map to.
         * This letter must not already be in use with Windows.
         */
        letter?: string;
        [k: string]: any;
      };
      /**
       * Manages VTP version configuration.
       */
      nxos_vtp_version?: {
        username?: string;
        ssh_keyfile?: string;
        host?: string;
        /**
         * VTP version number.
         */
        version: "1" | "2";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Apstra AOS Ip Pool module let you manage your IP Pool easily. You can create create and delete IP Pool by Name, ID or by using a JSON File. This module is idempotent and support the I(check) mode. It's using the AOS REST API.
       */
      aos_ip_pool?: {
        /**
         * List of subnet that needs to be part of the IP Pool.
         */
        subnets?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Name of the IP Pool to manage. Only one of I(name), I(id) or I(content) can be set.
         */
        name?: string;
        /**
         * Datastructure of the IP Pool to manage. The data can be in YAML / JSON or directly a variable. It's the same datastructure that is returned on success in I(value).
         */
        content?: string;
        /**
         * Default: present
         *
         * Indicate what is the expected state of the IP Pool (present or not).
         */
        state?: "present" | "absent";
        /**
         * An existing AOS session as obtained by M(aos_login) module.
         */
        session: {
          [k: string]: any;
        };
        /**
         * AOS Id of the IP Pool to manage (can't be used to create a new IP Pool), Only one of I(name), I(id) or I(content) can be set.
         */
        id?: string;
        [k: string]: any;
      };
      /**
       * Adds or removes Vertica database role and, optionally, assign other roles.
       */
      vertica_role?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * This module allows setting/accumulating stats on the current ansible run, either per host of for all hosts in the run.
       * This module is also supported for Windows targets.
       */
      set_stats?: {
        timeout?: number | string;
        ipv6?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        debug?: number | string;
        password: string;
        minutes?: number | string;
        port?: number | string;
        multi_key?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This modules allows for enable/disable/activate of I(awall) policies. Alpine Wall (I(awall)) generates a firewall configuration from the enabled policy files and activates the configuration on the system.
       */
      awall?: {
        /**
         * Default: enabled
         *
         * The policy(ies) will be C(enabled)
         * The policy(ies) will be C(disabled)
         */
        state?: "enabled" | "disabled";
        /**
         * Activate the new firewall rules. Can be run with other steps or on it's own.
         */
        activate?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A policy name, like C(foo), or multiple policies, like C(foo, bar).
         */
        name?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        [k: string]: any;
      };
      /**
       * This module is used to configure VrfContext object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_vrfcontext?: {
        username?: string;
        /**
         * Configure ping based heartbeat check for all default gateways in service engines of vrf.
         * Field introduced in 17.1.1.
         */
        internal_gateway_monitor?: {
          [k: string]: any;
        };
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * List of staticroute.
         */
        static_routes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * User defined description for the object.
         */
        description?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Configure debug flags for vrf.
         * Field introduced in 17.1.1.
         */
        debugvrfcontext?: {
          [k: string]: any;
        };
        /**
         * It is a reference to an object of type cloud.
         */
        cloud_ref?: string;
        controller?: string;
        /**
         * Boolean flag to set system_default.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        system_default?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        tenant?: string;
        /**
         * Bgp local and peer info.
         */
        bgp_profile?: {
          [k: string]: any;
        };
        /**
         * Configure ping based heartbeat check for gateway in service engines of vrf.
         */
        gateway_mon?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Name of the object.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module will update settings for OpenDJ with the command set-backend-prop.
       * It will check first via de get-backend-prop if configuration needs to be applied.
       */
      opendj_backendprop?: {
        /**
         * Default: cn=Directory Manager
         *
         * The username to connect to.
         */
        username?: string;
        /**
         * The configuration setting to update.
         */
        name: string;
        /**
         * The hostname of the OpenDJ server.
         */
        hostname: string;
        /**
         * The value for the configuration item.
         */
        value: string;
        /**
         * Default: present
         *
         * If configuration needs to be added/updated
         */
        state?: string;
        /**
         * Location to the password file which holds the password for the cn=Directory Manager user.
         * Either password or passwordfile is needed.
         */
        passwordfile?: string;
        /**
         * The password for the cn=Directory Manager user.
         * Either password or passwordfile is needed.
         */
        password?: string;
        /**
         * Default: /opt/opendj/bin
         *
         * The path to the bin directory of OpenDJ.
         */
        opendj_bindir?: string;
        /**
         * The Admin port on which the OpenDJ instance is available.
         */
        port: string;
        /**
         * The name of the backend on which the property needs to be updated.
         */
        backend: string;
        [k: string]: any;
      };
      /**
       * Provides rollback and rollback preview functionality for Cisco ACI fabric.
       * Config Rollbacks are done using snapshots C(aci_snapshot) with the configImportP class.
       * More information from the internal APIC class I(config:ImportP) at U(https://developer.cisco.com/media/mim-ref/MO-configImportP.html).
       */
      aci_config_rollback?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * The S3 module is great, but it is very slow for a large volume of files- even a dozen will be noticeable. In addition to speed, it handles globbing, inclusions/exclusions, mime types, expiration mapping, recursion, cache control and smart directory mapping.
       */
      s3_sync?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create or destroy svm on NetApp cDOT
       */
      na_cdot_svm?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Can create or delete AWS metric alarms.
       * Metrics you wish to alarm on must already exist.
       */
      ec2_metric_alarm?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages Logstash plugins.
       */
      logstash_plugin?: {
        /**
         * Default: /usr/share/logstash/bin/logstash-plugin
         *
         * Specify logstash-plugin to use for plugin management.
         */
        plugin_bin?: string;
        /**
         * Default: None
         *
         * Proxy host to use during plugin installation.
         */
        proxy_host?: string;
        /**
         * Default: None
         *
         * Proxy port to use during plugin installation.
         */
        proxy_port?: string;
        /**
         * Default: present
         *
         * Apply plugin state.
         */
        state?: "present" | "absent";
        /**
         * Default: None
         *
         * Specify plugin Version of the plugin to install. If plugin exists with previous version, it will NOT be updated.
         */
        version?: string;
        /**
         * Install plugin with that name.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Retrieve facts about one or more oVirt/RHV templates relate to a storage domain.
       */
      ovirt_storage_templates_facts?: {
        /**
         * Flag which indicates whether to get unregistered templates which contain one or more disks which reside on a storage domain or diskless templates.
         */
        unregistered?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of LLDP interfaces configuration on network devices.
       */
      net_lldp_interface?: {
        /**
         * List of interfaces LLDP should be configured on.
         */
        aggregate?: string;
        /**
         * Purge interfaces not defined in the aggregate parameter.
         */
        purge?: string;
        /**
         * Default: present
         *
         * State of the LLDP configuration.
         */
        state?: string;
        /**
         * Name of the interface LLDP should be configured on.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of the local usernames configured on Cisco Nexus devices.  It allows playbooks to manage either individual usernames or the collection of usernames in the current running config.  It also supports purging usernames from the configuration that are not explicitly defined.
       */
      nxos_user?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages SELinux file context mapping definitions
       * Similar to the C(semanage fcontext) command
       */
      sefcontext?: {
        /**
         * Target path (expression).
         */
        target?: string;
        /**
         * SELinux range for the specified target.
         */
        selevel?: string;
        /**
         * SELinux user for the specified target.
         */
        seuser?: string;
        /**
         * Default: present
         *
         * Desired boolean value.
         */
        state?: string;
        /**
         * Default: True
         *
         * Reload SELinux policy after commit.
         */
        reload?: string;
        /**
         * SELinux type for the specified target.
         */
        setype?: string;
        /**
         * Default: a
         *
         * File type.
         */
        ftype?: string;
        [k: string]: any;
      };
      /**
       * Controls services on remote hosts. Supported init systems include BSD init, OpenRC, SysV, Solaris SMF, systemd, upstart.
       * For Windows targets, use the M(win_service) module instead.
       */
      service?: {
        [k: string]: any;
      };
      /**
       * Add or remove a host from distributed virtual switch
       */
      vmware_dvs_host?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Gather facts about Redshift cluster(s)
       */
      redshift_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Collects facts from devices running the OpenSwitch operating system.  Fact collection is supported over both Cli and Rest transports.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.
       * The facts collected from pre Ansible 2.2 are still available and are collected for backwards compatibility; however, these facts should be considered deprecated and will be removed in a future release.
       */
      ops_facts?: {
        /**
         * Default: !config
         *
         * When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, hardware, config, legacy, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(M(!)) to specify that a specific subset should not be collected.
         */
        gather_subset?: string;
        /**
         * Accepts a list of endpoints to retrieve from the remote device using the REST API.  The endpoints should be valid endpoints available on the device.  This argument is only valid when the C(transport=rest).
         */
        endpoints?: string;
        /**
         * When enabled, this argument will collect the current running configuration from the remote device.  If the C(transport=rest) then the collected configuration will be the full system configuration.
         */
        config?: string;
        [k: string]: any;
      };
      /**
       * Manage logging facility of an s3 bucket in AWS
       */
      s3_logging?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages creating and downloading qkviews from a BIG-IP. Various options can be provided when creating qkviews. The qkview is important when dealing with F5 support. It may be required that you upload this qkview to the supported channels during resolution of an SRs that you may have opened.
       */
      bigip_qkview?: {
        /**
         * Max file size, in bytes, of the qkview to create. By default, no max file size is specified.
         */
        max_file_size?: string;
        /**
         * Default: True
         *
         * If C(no), the file will only be transferred if the destination does not exist.
         */
        force?: string;
        /**
         * When C(True), includes the ASM request log data. When C(False), excludes the ASM request log data.
         */
        asm_request_log?: string;
        /**
         * Destination on your local filesystem when you want to save the qkview.
         */
        dest?: string;
        /**
         * Default: localhost.localdomain.qkview
         *
         * Name of the qkview to create on the remote BIG-IP.
         */
        filename?: string;
        /**
         * Exclude core files from the qkview.
         */
        exclude_core?: string;
        /**
         * Default: True
         *
         * Include complete information in the qkview.
         */
        complete_information?: string;
        /**
         * Exclude various file from the qkview.
         */
        exclude?: string;
        [k: string]: any;
      };
      /**
       * Sends alerts which appear in the Action Center area of the windows desktop.
       */
      win_toast?: {
        /**
         * Default: True
         *
         * If false, the notification will not pop up and will only appear in the Action Center.
         */
        popup?: string;
        /**
         * Default: Powershell
         *
         * Which notification group to add the notification to.
         */
        group?: string;
        /**
         * Default: Notification HH:mm
         *
         * The notification title, which appears in the pop up..
         */
        title?: string;
        /**
         * Default: Ansible
         *
         * The tag to add to the notification.
         */
        tag?: string;
        /**
         * Default: 45
         *
         * How long in seconds before the notification expires.
         */
        expire?: string;
        /**
         * Default: Hello, World!
         *
         * The message to appear inside the notification.  May include \n to format the message to appear within the Action Center.
         */
        msg?: string;
        [k: string]: any;
      };
      /**
       * Manages MLAG interface attributes on HUAWEI CloudEngine switches.
       */
      ce_mlag_interface?: {
        username?: string;
        /**
         * Name of the local M-LAG interface. The value is ranging from 0 to 511.
         */
        eth_trunk_id?: string;
        /**
         * ID of the M-LAG. The value is an integer that ranges from 1 to 2048.
         */
        mlag_id?: string;
        /**
         * Configure the interface on the slave device to enter the Error-Down state.
         */
        mlag_error_down?: "enable" | "disable";
        /**
         * Default: present
         *
         * ID of a DFS group.The value is 1.
         */
        dfs_group_id?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * M-LAG global LACP system MAC address. The value is a string of 0 to 255 characters. The default value is the MAC address of the Ethernet port of MPU.
         */
        mlag_system_id?: string;
        host?: string;
        /**
         * M-LAG global LACP system priority. The value is an integer ranging from 0 to 65535. The default value is 32768.
         */
        mlag_priority_id?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Name of the interface that enters the Error-Down state when the peer-link fails. The value is a string of 1 to 63 characters.
         */
        interface?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Create or destroy aggregates on NetApp cDOT.
       */
      na_cdot_aggregate?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Enable or Disable Windows Firewall profiles.
       */
      win_firewall?: {
        /**
         * Set state of firewall for given profile.
         */
        state?: string;
        /**
         * Default: ['Domain', 'Private', 'Public']
         *
         * Specify one or more profiles to change.
         */
        profiles?: string;
        [k: string]: any;
      };
      /**
       * Sends arbitrary commands to an ASA node and returns the results read from the device. The M(asa_command) module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.
       */
      asa_command?: {
        /**
         * Default: 10
         *
         * Specifies the number of retries a command should by tried before it is considered failed. The command is run on the target device every retry and evaluated against the I(wait_for) conditions.
         */
        retries?: string;
        /**
         * List of commands to send to the remote device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retires as expired.
         */
        commands?: string;
        /**
         * List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.
         */
        wait_for?: string;
        /**
         * Default: all
         *
         * The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy.  Valid values are C(all) or C(any).  If the value is set to C(all) then all conditionals in the wait_for must be satisfied.  If the value is set to C(any) then only one of the values must be satisfied.
         */
        match?: string;
        /**
         * Default: 1
         *
         * Configures the interval in seconds to wait between retries of the command. If the command does not pass the specified conditions, the interval indicates how long to wait before trying the command again.
         */
        interval?: string;
        [k: string]: any;
      };
      /**
       * Create, destroy, attach, detach volumes.
       */
      cs_volume?: {
        /**
         * Name of the domain the volume to be deployed in.
         */
        domain?: string;
        /**
         * Force removal of volume even it is attached to a VM.
         * Considered on C(state=absnet) only.
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the disk offering to be used.
         * Required one of C(disk_offering), C(snapshot) if volume is not already C(state=present).
         */
        disk_offering?: string;
        api_http_method?: "get" | "post";
        /**
         * Whether to allow to shrink the volume.
         */
        shrink_ok?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * Whether to display the volume to the end user or not.
         * Allowed to Root Admins only.
         */
        display_volume?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Size of disk in GB
         */
        size?: number | string;
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_url?: string;
        /**
         * Name of the zone in which the volume should be deployed.
         * If not set, default zone is used.
         */
        zone?: string;
        /**
         * Max iops
         */
        max_iops?: number | string;
        /**
         * Default: present
         *
         * State of the volume.
         */
        state?: "present" | "absent" | "attached" | "detached";
        api_key?: string;
        api_secret?: string;
        api_timeout?: number | string;
        /**
         * Account the volume is related to.
         */
        account?: string;
        /**
         * Name of the virtual machine to attach the volume to.
         */
        vm?: string;
        /**
         * Min iops
         */
        min_iops?: number | string;
        device_id?: number | string;
        /**
         * Custom id to the resource.
         * Allowed to Root Admins only.
         */
        custom_id?: string;
        /**
         * Name of the volume.
         * C(name) can only contain ASCII letters.
         */
        name: string;
        api_region?: string;
        /**
         * Name of the project the volume to be deployed in.
         */
        project?: string;
        /**
         * The snapshot name for the disk volume.
         * Required one of C(disk_offering), C(snapshot) if volume is not already C(state=present).
         */
        snapshot?: string;
        [k: string]: any;
      };
      /**
       * Collects fact information from a remote device running the Junos operating system.  By default, the module will collect basic fact information from the device to be included with the hostvars. Additional fact information can be collected based on the configured set of arguments.
       */
      junos_facts?: {
        username?: string;
        ssh_keyfile?: string;
        host?: string;
        /**
         * Default: !config
         *
         * When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, hardware, config, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(M(!)) to specify that a specific subset should not be collected. To maintain backward compatbility old style facts can be retrieved using all value, this reqires junos-eznc to be installed as a prerequisite.
         */
        gather_subset?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Default: text
         *
         * The I(config_format) argument specifies the format of the configuration when serializing output from the device. This argument is applicable only when C(config) value is present in I(gather_subset). The I(config_format) should be supported by the junos version running on device.
         */
        config_format?: "xml" | "set" | "text" | "json";
        password?: string;
        port?: number | string;
        transport?: string;
        [k: string]: any;
      };
      /**
       * Sends arbitrary commands to an SR OS node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.
       * This module does not support running commands in configuration mode. Please use M(sros_config) to configure SR OS devices.
       */
      sros_command?: {
        [k: string]: any;
      };
      /**
       * Send a message to jabber
       */
      jabber?: {
        /**
         * message encoding
         */
        encoding?: string;
        /**
         * user ID or name of the room, when using room use a slash to indicate your nick.
         */
        to: string;
        /**
         * host to connect, overrides user info
         */
        host?: string;
        /**
         * User as which to connect
         */
        user: string;
        /**
         * The message body.
         */
        msg: string;
        /**
         * password for user to connect
         */
        password: string;
        /**
         * Default: 5222
         *
         * port to connect to, overrides default
         */
        port?: string;
        [k: string]: any;
      };
      /**
       * List the MFA (Multi-Factor Authentication) devices registered for a user
       */
      iam_mfa_device_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module allows you to work with the running configuration of a switch. It provides a way to execute a set of CNOS commands on a switch by evaluating the current running configuration and executing the commands only if the specific settings have not been already configured. The configuration source can be a set of commands or a template written in the Jinja2 templating language. This module functions the same as the cnos_template module. The only exception is that the following inventory variable can be specified ["condition = <flag string>"] When this inventory variable is specified as the variable of a task, the template is executed for the network element that matches the flag string. Usually, templates are used when commands are the same across a group of network devices. When there is a requirement to skip the execution of the template on one or more devices, it is recommended to use this module. This module uses SSH to manage network device configuration. For more information about this module from Lenovo and customizing it usage for your use cases, please visit U(http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_conditional_template.html)
       */
      cnos_conditional_template?: {
        /**
         * If a task needs to be executed, you have to set the flag the same as it is specified in the inventory for that device.
         */
        flag?: string;
        /**
         * If you specify condition=<flag string> in the inventory file against any device, the template execution is done for that device in case it matches the flag setting for that task.
         */
        condition?: string;
        /**
         * This specifies the path to the CNOS command file which needs to be applied. This usually comes from the commands folder. Generally this file is the output of the variables applied on a template file. So this command is preceded by a template module. The command file must contain the Ansible keyword {{ inventory_hostname }} and the condition flag in its filename to ensure that the command file is unique for each switch and condition. If this is omitted, the command file will be overwritten during iteration. For example, commandfile=./commands/clos_leaf_bgp_{{ inventory_hostname }}_LP21_commands.txt
         */
        commandfile?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of LLDP service on Juniper JUNOS network devices.
       */
      junos_lldp?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Frequency at which LLDP advertisements are sent (in seconds).
         */
        interval?: number | string;
        /**
         * Default: present
         *
         * Value of C(present) ensures given LLDP configuration is present on device and LLDP is enabled, for value of C(absent) LLDP configuration is deleted and LLDP is in disabled state. Value C(enabled) ensures LLDP protocol is enabled and LLDP configuration if any is configured on remote device, for value of C(disabled) it ensures LLDP protocol is disabled any LLDP configuration if any is still present.
         */
        state?: "present" | "absent" | "enabled" | "disabled";
        host?: string;
        /**
         * Specify the number of seconds the device waits before sending advertisements to neighbors after a change is made in local system.
         */
        transmit_delay?: number | string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Default: True
         *
         * Specifies whether or not the configuration is active or deactivated
         */
        active?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        /**
         * Specify the number of seconds that LLDP information is held before it is discarded. The multiplier value is used in combination with the C(interval) value.
         */
        hold_multiplier?: number | string;
        port?: number | string;
        transport?: string;
        [k: string]: any;
      };
      /**
       * Manages HSRP configuration on NX-OS switches.
       */
      nxos_hsrp?: {
        /**
         * Authentication type.
         */
        auth_type?: "text" | "md5";
        username?: string;
        ssh_keyfile?: string;
        /**
         * HSRP group number.
         */
        group: string;
        preempt?: "disabled" | "enabled";
        /**
         * Authentication string.
         */
        auth_string?: string;
        /**
         * HSRP virtual IP address.
         */
        vip?: string;
        host?: string;
        /**
         * HSRP priority.
         */
        priority?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Default: 2
         *
         * HSRP version.
         */
        version?: "1" | "2";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Full name of interface that is being managed for HSRP.
         */
        interface: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Sends arbitrary commands to an IOS XR node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.
       * This module does not support running commands in configuration mode. Please use M(iosxr_config) to configure iosxr devices.
       */
      iosxr_command?: {
        [k: string]: any;
      };
      /**
       * creates an EC2 snapshot from an existing EBS volume
       */
      ec2_snapshot?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Allows notifications to be sent using sms / mms via the catapult bandwidth api.
       */
      catapult?: {
        /**
         * One of your catapult telephone numbers the message should come from (must be in E.164 format, like C(+19195551212)).
         */
        src: string;
        /**
         * User Id from Api account page.
         */
        user_id: string;
        /**
         * The phone number or numbers the message should be sent to (must be in E.164 format, like C(+19195551212)).
         */
        dest:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * For MMS messages, a media url to the location of the media to be sent with the message.
         */
        media?: string;
        /**
         * Api Secret from Api account page.
         */
        api_secret: string;
        /**
         * Api Token from Api account page.
         */
        api_token: string;
        /**
         * The contents of the text message (must be 2048 characters or less).
         */
        msg: string;
        [k: string]: any;
      };
      /**
       * Manages Windows Active Directory user accounts.
       */
      win_domain_user?: {
        /**
         * Default: always
         *
         * C(always) will update passwords if they differ.  C(on_create) will only set the password for newly created users. Note that C(always) will always report an Ansible status of 'changed' because we cannot determine whether the new password differs from the old password.
         */
        update_password?: string;
        /**
         * Configures the user's last name (surname)
         */
        surname?: string;
        /**
         * Default: replace
         *
         * If C(replace), the user is added as a member of each group in I(groups) and removed from any other groups.  If C(add), the user is added to each group in I(groups) where not already a member.  If C(remove), the user is removed from each group in I(groups).
         */
        groups_action?: string;
        /**
         * C(yes) will require the user to change their password at next login. C(no) will clear the expired password flag. This is mutually exclusive with I(password_never_expires).
         */
        password_expired?: string;
        /**
         * Configures the user's street address
         */
        street?: string;
        /**
         * Configures the user's postal code / zip code
         */
        postal_code?: string;
        /**
         * C(yes) will set the password to never expire.  C(no) will allow the password to expire. This is mutually exclusive with I(password_expired)
         */
        password_never_expires?: string;
        /**
         * Configures the user's city
         */
        city?: string;
        /**
         * Default: present
         *
         * When C(present), creates or updates the user account.  When C(absent), removes the user account if it exists.  When C(query), retrieves the user account details without making any changes.
         */
        state?: string;
        /**
         * Configures the user's email address. This is a record in AD and does not do anything to configure any email servers or systems.
         */
        email?: string;
        /**
         * Configures the user's state or province
         */
        state_province?: string;
        /**
         * Description of the user
         */
        description?: string;
        /**
         * Configures the user's first name (given name)
         */
        firstname?: string;
        /**
         * Configures the user's company name
         */
        company?: string;
        /**
         * Adds or removes the user from this list of groups, depending on the value of I(groups_action). To remove all but the Principal Group, set C(groups=<principal group name>) and I(groups_action=replace). Note that users cannot be removed from their principal group (for example, "Domain Users").
         */
        groups?: string;
        /**
         * Container or OU for the new user; if you do not specify this, the user will be placed in the default container for users in the domain. Setting the path is only available when a new user is created; if you specify a path on an existing user, the user's path will not be updated - you must delete (e.g., state=absent) the user and then re-add the user with the appropriate path.
         */
        path?: string;
        /**
         * Optionally set the user's password to this (plain text) value. In order to enable an account - I(enabled) - a password must already be configured on the account, or you must provide a password here.
         */
        password?: string;
        /**
         * C(no) will unlock the user account if locked. Note that there is not a way to lock an account as an administrator. Accounts are locked due to user actions; as an admin, you may only unlock a locked account. If you wish to administratively disable an account, set 'enabled' to 'no'.
         */
        account_locked?: string;
        /**
         * Configures the User Principal Name (UPN) for the account. This is not required, but is best practice to configure for modern versions of Active Directory. The format is "<username>@<domain>".
         */
        upn?: string;
        /**
         * Name of the user to create, remove or modify.
         */
        name?: string;
        /**
         * Configures the user's country code. Note that this is a two-character ISO 3166 code.
         */
        country?: string;
        /**
         * Default: yes
         *
         * C(yes) will enable the user account. C(no) will disable the account.
         */
        enabled?: string;
        /**
         * C(yes) will prevent the user from changing their password.  C(no) will allow the user to change their password.
         */
        user_cannot_change_password?: string;
        [k: string]: any;
      };
      /**
       * Create, destroy, or update volume access groups on SolidFire
       */
      sf_volume_access_group_manager?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Gather facts about virtual gateways in AWS.
       */
      ec2_vpc_vgw_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage bower packages with bower
       */
      bower?: {
        /**
         * The name of a bower package to install
         */
        name?: string;
        /**
         * Default: present
         *
         * The state of the bower package
         */
        state?: "present" | "absent" | "latest";
        /**
         * Install with --production flag
         */
        production?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The version to be installed
         */
        version?: string;
        /**
         * Relative path to bower executable from install path
         */
        relative_execpath?: string;
        /**
         * The base path where to install the bower packages
         */
        path: string;
        /**
         * Install packages from local cache, if the packages were installed before
         */
        offline?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Execute vrouter-ospf-add, vrouter-ospf-remove command.
       * This command adds/removes Open Shortest Path First(OSPF) area to/from a virtual router(vRouter) service.
       */
      pn_ospfarea?: {
        /**
         * Specify the OSPF area number.
         */
        pn_ospf_area: string;
        /**
         * Login password.
         */
        pn_clipassword: string;
        /**
         * Specify the name of the vRouter.
         */
        pn_vrouter_name: string;
        /**
         * Login username.
         */
        pn_cliusername: string;
        /**
         * OSPF prefix list for filtering incoming packets.
         */
        pn_prefix_listin?: string;
        /**
         * State the action to perform. Use 'present' to add ospf-area, 'absent' to remove ospf-area and 'update' to modify ospf-area.
         */
        state: "present" | "absent" | "update";
        /**
         * OSPF prefix list for filtering outgoing packets.
         */
        pn_prefix_listout?: string;
        /**
         * Specify the OSPF stub type.
         */
        pn_stub_type?: "none" | "stub" | "stub-no-summary" | "nssa" | "nssa-no-summary";
        /**
         * Target switch(es) to run the CLI on.
         */
        pn_cliswitch?: string;
        /**
         * Default: True
         *
         * Enable/disable system information.
         */
        pn_quiet?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Create, update, delete user roles.
       */
      cs_role?: {
        [k: string]: any;
      };
      /**
       * The C(unarchive) module unpacks an archive.
       * By default, it will copy the source file from the local system to the target before unpacking.
       * Set C(remote_src=yes) to unpack an archive which already exists on the target.
       * For Windows targets, use the M(win_unzip) module instead.
       */
      unarchive?: {
        /**
         * If C(remote_src=no) (default), local path to archive file to copy to the target server; can be absolute or relative. If C(remote_src=yes), path on the target server to existing archive file to unpack.
         * If C(remote_src=yes) and C(src) contains C(://), the remote machine will download the file from the URL first. (version_added 2.0). This is only for simple cases, for full download support use the M(get_url) module.
         */
        src: string;
        /**
         * Default: no
         *
         * Set to C(yes) to indicate the archived file is already on the remote system and not local to the Ansible controller.
         * This option is mutually exclusive with C(copy).
         */
        remote_src?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Remote absolute path where the archive should be unpacked.
         */
        dest: string;
        /**
         * Default: no
         *
         * If set to True, return the list of files that are contained in the tarball.
         */
        list_files?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: no
         *
         * Do not replace existing files that are newer than files from the archive.
         */
        keep_newer?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A filename, when it already exists, this step will B(not) be run.
         */
        creates?: string;
        original_basename?: string;
        /**
         * List the directory and file entries that you would like to exclude from the unarchive action.
         */
        exclude?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Specify additional options by passing in an array.
         */
        extra_opts?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: yes
         *
         * This only applies if using a https URL as the source of the file.
         * This should only set to C(no) used on personally controlled sites using self-signed certificate.
         * Prior to 2.2 the code worked as if this was set to C(yes).
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * makes an OS computer speak!  Amuse your friends, annoy your coworkers!
       */
      osx_say?: {
        /**
         * What to say
         */
        msg: string;
        /**
         * What voice to use
         */
        voice?: string;
        [k: string]: any;
      };
      /**
       * The C(jenkins_script) module takes a script plus a dict of values to use within the script and returns the result of the script being run.
       */
      jenkins_script?: {
        /**
         * The groovy script to be executed. This gets passed as a string Template if args is defined.
         */
        script: string;
        /**
         * Default: http://localhost:8080
         *
         * The jenkins server to execute the script against. The default is a local jenkins instance that is not being proxied through a webserver.
         */
        url?: string;
        /**
         * A dict of key-value pairs used in formatting the script using string.Template (see https://docs.python.org/2/library/string.html#template-strings).
         */
        args?: {
          [k: string]: any;
        };
        /**
         * The username to connect to the jenkins server with.
         */
        user?: string;
        /**
         * Default: 10
         *
         * The request timeout in seconds
         */
        timeout?: number | string;
        /**
         * The password to connect to the jenkins server with.
         */
        password?: string;
        /**
         * Default: True
         *
         * If set to C(no), the SSL certificates will not be validated. This should only set to C(no) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module is used to configure Scheduler object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_scheduler?: {
        username?: string;
        /**
         * Scheduler start date and time.
         */
        start_date_time?: string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * Boolean flag to set enabled.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        controller?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Unit at which custom scheduler will run.
         * Enum options - SCHEDULER_FREQUENCY_UNIT_MIN, SCHEDULER_FREQUENCY_UNIT_HOUR, SCHEDULER_FREQUENCY_UNIT_DAY, SCHEDULER_FREQUENCY_UNIT_WEEK,
         * SCHEDULER_FREQUENCY_UNIT_MONTH.
         */
        frequency_unit?: string;
        /**
         * Name of scheduler.
         */
        name: string;
        /**
         * Backup configuration to be executed by this scheduler.
         * It is a reference to an object of type backupconfiguration.
         */
        backup_config_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Frequency at which custom scheduler will run.
         * Allowed values are 0-60.
         */
        frequency?: number | string;
        /**
         * Define scheduler action.
         * Enum options - SCHEDULER_ACTION_RUN_A_SCRIPT, SCHEDULER_ACTION_BACKUP.
         * Default value when not specified in API or module is interpreted by Avi Controller as SCHEDULER_ACTION_BACKUP.
         */
        scheduler_action?: string;
        /**
         * Control script to be executed by this scheduler.
         * It is a reference to an object of type alertscriptconfig.
         */
        run_script_ref?: string;
        /**
         * Scheduler end date and time.
         */
        end_date_time?: string;
        tenant?: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Scheduler run mode.
         * Enum options - RUN_MODE_PERIODIC, RUN_MODE_AT, RUN_MODE_NOW.
         */
        run_mode?: string;
        [k: string]: any;
      };
      /**
       * Manage (add, remove, change) individual settings in an INI-style file without having to manage the file as a whole with, say, M(template) or M(assemble). Adds missing sections if they don't exist.
       * Before version 2.0, comments are discarded when the source file is read, and therefore will not show up in the destination file.
       * Since version 2.3, this module adds missing ending newlines to files to keep in line with the POSIX standard, even when no other modifications need to be applied.
       */
      ini_file?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manages BGP configurations on HUAWEI CloudEngine switches.
       */
      ce_bgp?: {
        username?: string;
        /**
         * Default: no_use
         *
         * If the value is true, VPN BGP instances are enabled to automatically select router IDs. If the value is false, VPN BGP instances are disabled from automatically selecting router IDs.
         */
        vrf_rid_auto_sel?: "no_use" | "true" | "false";
        /**
         * Suppress interval.
         */
        suppress_interval?: string;
        /**
         * Default: no_use
         *
         * Support BGP RIB memory protection.
         */
        memory_limit?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * Interrupt BGP all neighbor.
         */
        is_shutdown?: "no_use" | "true" | "false";
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        /**
         * Hold time, in seconds. The value of the hold time can be 0 or range from 3 to 65535.
         */
        hold_time?: string;
        /**
         * Hold interval.
         */
        hold_interval?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        provider?: {
          [k: string]: any;
        };
        /**
         * Name of a BGP instance. The name is a case-sensitive string of characters.
         */
        vrf_name?: string;
        /**
         * Default: no_use
         *
         * Peer disconnection through GR.
         */
        gr_peer_reset?: "no_use" | "true" | "false";
        /**
         * ID of a router that is in IPv4 address format.
         */
        router_id?: string;
        /**
         * Local AS number. The value is a string of 1 to 11 characters.
         */
        as_number?: string;
        /**
         * Maximum number of AS numbers in the AS_Path attribute. The default value is 255.
         */
        as_path_limit?: string;
        /**
         * Confederation ID. The value is a string of 1 to 11 characters.
         */
        confed_id_number?: string;
        /**
         * Default: no_use
         *
         * If the value is true, the system stores all route update messages received from all peers (groups) after BGP connection setup. If the value is false, the system stores only BGP update messages that are received from peers and pass the configured import policy.
         */
        keep_all_routes?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * The function to automatically select router IDs for all VPN BGP instances is enabled.
         */
        bgp_rid_auto_sel?: "no_use" | "true" | "false";
        /**
         * ConnectRetry interval. The value is an integer, in seconds. The default value is 32s.
         */
        conn_retry_time?: string;
        host?: string;
        /**
         * Confederation AS number, in two-byte or four-byte format. The value is a string of 1 to 11 characters.
         */
        confed_peer_as_num?: string;
        /**
         * Min hold time, in seconds. The value of the hold time can be 0 or range from 20 to 65535.
         */
        min_hold_time?: string;
        /**
         * Default: no_use
         *
         * If the value is true, After the fast EBGP interface awareness function is enabled, EBGP sessions on an interface are deleted immediately when the interface goes Down. If the value is  false, After the fast EBGP interface awareness function is enabled, EBGP sessions on an interface are not deleted immediately when the interface goes Down.
         */
        ebgp_if_sensitive?: "no_use" | "true" | "false";
        password?: string;
        /**
         * Default: no_use
         *
         * Check the first AS in the AS_Path of the update messages from EBGP peers.
         */
        check_first_as?: "no_use" | "true" | "false";
        /**
         * Clear interval.
         */
        clear_interval?: string;
        /**
         * Default: no_use
         *
         * Enable GR of the BGP speaker in the specified address family, peer address, or peer group.
         */
        graceful_restart?: "no_use" | "true" | "false";
        /**
         * Period of waiting for the End-Of-RIB flag. The value is an integer ranging from 3 to 3000. The default value is 600.
         */
        time_wait_for_rib?: string;
        /**
         * Type of a created address family, which can be IPv4 unicast or IPv6 unicast. The default type is IPv4 unicast.
         */
        default_af_type?: "ipv4uni" | "ipv6uni";
        /**
         * If the value of a timer changes, the BGP peer relationship between the routers is disconnected. The value is an integer ranging from 0 to 21845. The default value is 60.
         */
        keepalive_time?: string;
        /**
         * Default: no_use
         *
         * Configure the device to be compatible with devices in a nonstandard confederation.
         */
        confed_nonstanded?: "no_use" | "true" | "false";
        timeout?: number | string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage VMware vSphere Datacenters
       */
      vmware_datacenter?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Add, modify or delete sudo command within FreeIPA server using FreeIPA API.
       */
      ipa_sudocmd?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Create, update, or destroy Ansible Tower organizations. See U(https://www.ansible.com/tower) for an overview.
       */
      tower_organization?: {
        /**
         * The description to use for the organization.
         */
        description?: string;
        /**
         * URL to your Tower instance.
         */
        tower_host?: string;
        /**
         * Username for your Tower instance.
         */
        tower_username?: string;
        /**
         * Default: present
         *
         * Desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Password for your Tower instance.
         */
        tower_password?: string;
        /**
         * Path to the Tower config file. See notes.
         */
        tower_config_file?: string;
        /**
         * Default: True
         *
         * Dis/allow insecure connections to Tower. If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        tower_verify_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name to use for the organization.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Add or remove network from OpenStack.
       */
      os_network?: {
        /**
         * Name to be assigned to the network.
         */
        name?: string;
        /**
         * Default: None
         *
         * The type of physical network that maps to this network resource.
         */
        provider_network_type?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        /**
         * Default: True
         *
         * Whether the state should be marked as up or down.
         */
        admin_state_up?: string;
        /**
         * Default: None
         *
         * The physical network where this network object is implemented.
         */
        provider_physical_network?: string;
        /**
         * Default: None
         *
         * Project name or ID containing the network (name admin-only)
         */
        project?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource.
         */
        state?: string;
        /**
         * Default: None
         *
         * An isolated segment on the physical network. The I(network_type) attribute defines the segmentation model. For example, if the I(network_type) value is vlan, this ID is a vlan identifier. If the I(network_type) value is gre, this ID is a gre key.
         */
        provider_segmentation_id?: string;
        /**
         * Whether this network is externally accessible.
         */
        external?: string;
        /**
         * Whether this network is shared or not.
         */
        shared?: string;
        [k: string]: any;
      };
      /**
       * An Ansible module to modify servers in CenturyLink Cloud.
       */
      clc_modify_server?: {
        /**
         * Default: None
         *
         * The alert policy name to be associated to the server. This is mutually exclusive with 'alert_policy_id'
         */
        alert_policy_name?: string;
        /**
         * Default: None
         *
         * The anti affinity policy name to be set for a hyper scale server. This is mutually exclusive with 'anti_affinity_policy_id'
         */
        anti_affinity_policy_name?: string;
        /**
         * Default: present
         *
         * The state to insure that the provided resources are in.
         */
        state?: "present" | "absent";
        /**
         * Default: None
         *
         * The anti affinity policy id to be set for a hyper scale server. This is mutually exclusive with 'anti_affinity_policy_name'
         */
        anti_affinity_policy_id?: string;
        /**
         * Default: None
         *
         * The alert policy id to be associated to the server. This is mutually exclusive with 'alert_policy_name'
         */
        alert_policy_id?: string;
        /**
         * Default: None
         *
         * Memory (in GB) to set to the server.
         */
        memory?: string;
        /**
         * A list of server Ids to modify.
         */
        server_ids:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * How many CPUs to update on the server
         */
        cpu?: string;
        /**
         * Default: True
         *
         * Whether to wait for the provisioning tasks to finish before returning.
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module affects the configuration files located in the interfaces folder defined by ifupdown2. Interfaces port and port ranges listed in the "allowed" parameter define what interfaces will be available on the switch. If the user runs this module and has an interface configured on the switch, but not found in the "allowed" list, this interface will be unconfigured. By default this is `/etc/network/interface.d` For more details go the Configuring Interfaces at U(http://docs.cumulusnetworks.com).
       */
      cl_interface_policy?: {
        /**
         * Default: /etc/network/interfaces.d/
         *
         * Directory to store interface files.
         */
        location?: string;
        /**
         * List of ports to run initial run at 10G.
         */
        allowed:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        [k: string]: any;
      };
      /**
       * Gets information about an AWS CloudFormation stack
       */
      cloudformation_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * osx_defaults allows users to read, write, and delete Mac OS X user defaults from Ansible scripts. Mac OS X applications and other programs use the defaults system to record user preferences and other information that must be maintained when the applications aren't running (such as default font for new documents, or the position of an Info panel).
       */
      osx_defaults?: {
        /**
         * Default: NSGlobalDomain
         *
         * The domain is a domain name of the form com.companyname.appname.
         */
        domain?: string;
        /**
         * Default: present
         *
         * The state of the user defaults
         */
        state?: "present" | "absent";
        /**
         * The value to write. Only required when state = present.
         */
        value?: string;
        /**
         * The host on which the preference should apply. The special value "currentHost" corresponds to the "-currentHost" switch of the defaults commandline tool.
         */
        host?: string;
        /**
         * The key of the user preference
         */
        key?: string;
        path?: string;
        /**
         * Default: string
         *
         * The type of value to write.
         */
        type?: "array" | "bool" | "boolean" | "date" | "float" | "int" | "integer" | "string";
        /**
         * Add new elements to the array for a key which has an array as its value.
         */
        array_add?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Create, update and remove OMAPI hosts into compatible DHCPd servers.
       */
      omapi_host?: {
        [k: string]: any;
      };
      /**
       * This module is used to configure VsVip object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_vsvip?: {
        /**
         * Force placement on all service engines in the service engine group (container clouds only).
         * Field introduced in 17.1.1.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        east_west_placement?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        username?: string;
        /**
         * Virtual routing context that the virtual service is bound to.
         * This is used to provide the isolation of the set of networks the application is attached to.
         * It is a reference to an object of type vrfcontext.
         * Field introduced in 17.1.1.
         */
        vrf_context_ref?: string;
        /**
         * Uuid of the vsvip object.
         * Field introduced in 17.1.1.
         */
        uuid?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * Service discovery specific data including fully qualified domain name, type and time-to-live of the dns record.
         * Field introduced in 17.1.1.
         */
        dns_info?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        controller?: string;
        /**
         * It is a reference to an object of type tenant.
         * Field introduced in 17.1.1.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * It is a reference to an object of type cloud.
         * Field introduced in 17.1.1.
         */
        cloud_ref?: string;
        /**
         * List of virtual service ips and other shareable entities.
         * Field introduced in 17.1.1.
         */
        vip?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        tenant?: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Name for the vsvip object.
         * Field introduced in 17.1.1.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Create, delete or modifiy hostgroups on Pure Storage FlashArrays.
       */
      purefa_hg?: {
        /**
         * List of existing volumes to add to hostgroup.
         */
        volume?: string;
        /**
         * Default: present
         *
         * Define whether the hostgroup should exist or not.
         */
        state?: string;
        /**
         * List of existing hosts to add to hostgroup.
         */
        host?: string;
        /**
         * The name of the hostgroup.
         */
        hostgroup?: string;
        [k: string]: any;
      };
      /**
       * Gather facts about a single VM on a VMware ESX cluster
       */
      vmware_guest_facts?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Searches, downloads, and installs Windows updates synchronously by automating the Windows Update client
       */
      win_updates?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * You can wait for a set amount of time C(timeout), this is the default if nothing is specified or just C(timeout) is specified. This does not produce an error.
       * Waiting for a port to become available is useful for when services are not immediately available after their init scripts return which is true of certain Java application servers. It is also useful when starting guests with the M(virt) module and needing to pause until they are ready.
       * This module can also be used to wait for a regex match a string to be present in a file.
       * In 1.6 and later, this module can also be used to wait for a file to be available or absent on the filesystem.
       * In 1.8 and later, this module can also be used to wait for active connections to be closed before continuing, useful if a node is being rotated out of a load balancer pool.
       * This module is also supported for Windows targets.
       */
      wait_for?: {
        /**
         * Default: ['ESTABLISHED', 'FIN_WAIT1', 'FIN_WAIT2', 'SYN_RECV', 'SYN_SENT', 'TIME_WAIT']
         *
         * The list of TCP connection states which are counted as active connections.
         */
        active_connection_states?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: 127.0.0.1
         *
         * A resolvable hostname or IP address to wait for.
         */
        host?: string;
        /**
         * Default: 5
         *
         * Maximum number of seconds to wait for a connection to happen before closing and retrying.
         */
        connect_timeout?: number | string;
        /**
         * Number of seconds to wait before starting to poll.
         */
        delay?: number | string;
        /**
         * Can be used to match a string in either a file or a socket connection.
         * Defaults to a multiline regex.
         */
        search_regex?: string;
        /**
         * Default: started
         *
         * Either C(present), C(started), or C(stopped), C(absent), or C(drained).
         * When checking a port C(started) will ensure the port is open, C(stopped) will check that it is closed, C(drained) will check for active connections.
         * When checking for a file or a search string C(present) or C(started) will ensure that the file or string is present before continuing, C(absent) will check that file is absent or removed.
         */
        state?: "absent" | "drained" | "present" | "started" | "stopped";
        /**
         * Default: 1
         *
         * Number of seconds to sleep between checks, before 2.3 this was hardcoded to 1 second.
         */
        sleep?: number | string;
        /**
         * Default: 300
         *
         * Maximum number of seconds to wait for, when used with another condition it will force an error.
         * When used without other conditions it is equivalent of just sleeping.
         */
        timeout?: number | string;
        /**
         * List of hosts or IPs to ignore when looking for active TCP connections for C(drained) state.
         */
        exclude_hosts?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * This overrides the normal error message from a failure to meet the required conditions.
         */
        msg?: string;
        /**
         * Path to a file on the filesystem that must exist before continuing.
         */
        path?: string;
        /**
         * Port number to poll.
         */
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Retrieve facts about one or more subnets from OpenStack.
       */
      os_subnets_facts?: {
        /**
         * Name or ID of the subnet
         */
        subnet?: string;
        /**
         * A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.
         */
        filters?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        [k: string]: any;
      };
      /**
       * Gathers Vertica database facts.
       */
      vertica_facts?: {
        /**
         * Default: dbadmin
         *
         * The username used to authenticate with.
         */
        login_user?: string;
        /**
         * Default: localhost
         *
         * Name of the cluster running the schema.
         */
        cluster?: string;
        /**
         * Name of the database running the schema.
         */
        db?: string;
        /**
         * Default: 5433
         *
         * Database port to connect to.
         */
        port?: string;
        /**
         * The password used to authenticate with.
         */
        login_password?: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure HealthMonitor object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_healthmonitor?: {
        /**
         * Healthmonitorhttp settings for healthmonitor.
         */
        https_monitor?: {
          [k: string]: any;
        };
        /**
         * Number of continuous successful health checks before server is marked up.
         * Allowed values are 1-50.
         * Default value when not specified in API or module is interpreted by Avi Controller as 2.
         */
        successful_checks?: number | string;
        /**
         * Uuid of the health monitor.
         */
        uuid?: string;
        /**
         * Healthmonitordns settings for healthmonitor.
         */
        dns_monitor?: {
          [k: string]: any;
        };
        /**
         * Number of continuous failed health checks before the server is marked down.
         * Allowed values are 1-50.
         * Default value when not specified in API or module is interpreted by Avi Controller as 2.
         */
        failed_checks?: number | string;
        /**
         * Healthmonitortcp settings for healthmonitor.
         */
        tcp_monitor?: {
          [k: string]: any;
        };
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Healthmonitorexternal settings for healthmonitor.
         */
        external_monitor?: {
          [k: string]: any;
        };
        /**
         * Type of the health monitor.
         * Enum options - HEALTH_MONITOR_PING, HEALTH_MONITOR_TCP, HEALTH_MONITOR_HTTP, HEALTH_MONITOR_HTTPS, HEALTH_MONITOR_EXTERNAL, HEALTH_MONITOR_UDP,
         * HEALTH_MONITOR_DNS, HEALTH_MONITOR_GSLB.
         */
        type: string;
        api_version?: string;
        username?: string;
        /**
         * A valid response from the server is expected within the receive timeout window.
         * This timeout must be less than the send interval.
         * If server status is regularly flapping up and down, consider increasing this value.
         * Allowed values are 1-300.
         * Default value when not specified in API or module is interpreted by Avi Controller as 4.
         */
        receive_timeout?: number | string;
        /**
         * User defined description for the object.
         */
        description?: string;
        controller?: string;
        /**
         * Healthmonitorudp settings for healthmonitor.
         */
        udp_monitor?: {
          [k: string]: any;
        };
        /**
         * Healthmonitorhttp settings for healthmonitor.
         */
        http_monitor?: {
          [k: string]: any;
        };
        password?: string;
        tenant?: string;
        /**
         * Use this port instead of the port defined for the server in the pool.
         * If the monitor succeeds to this port, the load balanced traffic will still be sent to the port of the server defined within the pool.
         * Allowed values are 1-65535.
         * Special values are 0 - 'use server port'.
         */
        monitor_port?: number | string;
        /**
         * A user friendly name for this health monitor.
         */
        name: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * This field describes the object's replication scope.
         * If the field is set to false, then the object is visible within the controller-cluster and its associated service-engines.
         * If the field is set to true, then the object is replicated across the federation.
         * Field introduced in 17.1.3.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        is_federated?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Frequency, in seconds, that monitors are sent to a server.
         * Allowed values are 1-3600.
         * Default value when not specified in API or module is interpreted by Avi Controller as 10.
         */
        send_interval?: number | string;
        tenant_uuid?: string;
        [k: string]: any;
      };
      /**
       * Downloads an artifact from a maven repository given the maven coordinates provided to the module. Can retrieve
       * snapshots or release versions of the artifact and will resolve the latest available version if one is not
       * available.
       */
      maven_artifact?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Module allows create, search and destroy Amazon EFS file systems
       */
      efs?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create/remove Docker networks and connect containers to them.
       * Performs largely the same function as the "docker network" CLI subcommand.
       */
      docker_network?: {
        /**
         * With state I(absent) forces disconnecting all containers from the network prior to deleting the network. With state I(present) will disconnect all containers, delete the network and re-create the network.  This option is required if you have changed the IPAM or driver options and want an existing network to be updated to use the new options.
         */
        force?: string;
        /**
         * Name of the network to operate on.
         */
        name?: string;
        /**
         * Default: bridge
         *
         * Specify the type of network. Docker provides bridge and overlay drivers, but 3rd party drivers can also be used.
         */
        driver?: string;
        /**
         * Dictionary of IPAM options.
         */
        ipam_options?: string;
        /**
         * Default: present
         *
         * I(absent) deletes the network. If a network has connected containers, it cannot be deleted. Use the C(force) option to disconnect all containers and delete the network.
         * I(present) creates the network, if it does not already exist with the specified parameters, and connects the list of containers provided via the connected parameter. Containers not on the list will be disconnected. An empty list will leave no containers connected to the network. Use the C(appends) option to leave existing containers connected. Use the C(force) options to force re-creation of the network.
         */
        state?: string;
        /**
         * Dictionary of network settings. Consult docker docs for valid options and values.
         */
        driver_options?: string;
        /**
         * List of container names or container IDs to connect to a network.
         */
        connected?: string;
        /**
         * Specify an IPAM driver.
         */
        ipam_driver?: string;
        /**
         * By default the connected list is canonical, meaning containers not on the list are removed from the network. Use C(appends) to leave existing containers connected.
         */
        appends?: string;
        [k: string]: any;
      };
      /**
       * Manage registration to the Red Hat Network.
       */
      rhn_register?: {
        /**
         * Red Hat Network username
         */
        username?: string;
        /**
         * Default: None
         *
         * supply an organizational id for use with registration
         */
        systemorgid?: string;
        /**
         * If true, extended update support will be requested.
         */
        enable_eus?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: Current value of I(serverURL) from C(/etc/sysconfig/rhn/up2date) is the default
         *
         * Specify an alternative Red Hat Network server URL
         */
        server_url?: string;
        /**
         * Optionally specify a list of comma-separated channels to subscribe to upon successful registration.
         */
        channels?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * whether to register (C(present)), or unregister (C(absent)) a system
         */
        state?: "present" | "absent";
        /**
         * Default: None
         *
         * supply a custom ssl CA certificate file for use with registration
         */
        sslcacert?: string;
        /**
         * supply an activation key for use with registration
         */
        activationkey?: string;
        /**
         * supply an profilename for use with registration
         */
        profilename?: string;
        /**
         * Red Hat Network password
         */
        password?: string;
        [k: string]: any;
      };
      /**
       * Allows the management of Foreman resources inside your Foreman server
       */
      foreman?: {
        /**
         * Username on Foreman server
         */
        username: string;
        /**
         * URL of Foreman server
         */
        server_url: string;
        /**
         * The Foreman resource that the action will be performed on (e.g. organization, host)
         */
        entity: string;
        verify_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Parameters associated to the entity resource to set or edit in dictionary format (e.g. name, description)
         */
        params: {
          [k: string]: any;
        };
        /**
         * Password for user accessing Foreman server
         */
        password: string;
        [k: string]: any;
      };
      /**
       * Add, modify or delete sudo rule within IPA server using IPA API.
       */
      ipa_sudorule?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * LogicMonitor is a hosted, full-stack, infrastructure monitoring platform.
       * This module collects facts about hosts abd host groups within your LogicMonitor account.
       */
      logicmonitor_facts?: {
        /**
         * Default: hostname -f
         *
         * The display name of a host in your LogicMonitor account or the desired display name of a device to add into monitoring.
         */
        displayname?: string;
        /**
         * The LogicMonitor object you wish to manage.
         */
        target: "host" | "hostgroup";
        /**
         * The LogicMonitor account company name. If you would log in to your account at "superheroes.logicmonitor.com" you would use "superheroes".
         */
        company: string;
        /**
         * Default: hostname -f
         *
         * The hostname of a host in your LogicMonitor account, or the desired hostname of a device to add into monitoring.
         * Required for managing hosts (target=host).
         */
        hostname?: string;
        /**
         * A LogicMonitor user name. The module will authenticate and perform actions on behalf of this user.
         */
        user: string;
        /**
         * The fullpath of the hostgroup object you would like to manage.
         * Recommend running on a single ansible host.
         * Required for management of LogicMonitor host groups (target=hostgroup).
         */
        fullpath?: string;
        /**
         * The password for the chosen LogicMonitor User.
         * If an md5 hash is used, the digest flag must be set to true.
         */
        password: string;
        /**
         * The fully qualified domain name of a collector in your LogicMonitor account.
         * This is optional for querying a LogicMonitor host when a displayname is specified.
         * This is required for querying a LogicMonitor host when a displayname is not specified.
         */
        collector?: string;
        [k: string]: any;
      };
      /**
       * Return various information about NetApp E-Series storage arrays (eg, configuration, disks)
       */
      netapp_e_facts?: {
        /**
         * The ID of the array to manage. This value must be unique for each array.
         */
        ssid: string;
        /**
         * Default: True
         *
         * Should https certificates be validated?
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_password: string;
        /**
         * The url to the SANtricity WebServices Proxy or embedded REST API.
         */
        api_url: string;
        /**
         * The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_username: string;
        [k: string]: any;
      };
      /**
       * Manage I(bzr) branches to deploy files or software.
       */
      bzr?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Gets information about an AWS CloudFront distribution
       */
      cloudfront_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Gather IP geolocation facts of a host's IP address using ipinfo.io API
       */
      ipinfoio_facts?: {
        /**
         * Default: ansible-ipinfoio-module/0.0.1
         *
         * Set http user agent
         */
        http_agent?: string;
        /**
         * Default: 10
         *
         * HTTP connection timeout in seconds
         */
        timeout?: number | string;
        [k: string]: any;
      };
      /**
       * Collect facts from F5 BIG-IP GTM devices.
       */
      bigip_gtm_facts?: {
        /**
         * Default: None
         *
         * Perform regex filter of response. Filtering is done on the name of the resource. Valid filters are anything that can be provided to Python's C(re) module.
         */
        filter?: string;
        /**
         * Fact category to collect
         */
        include?: string;
        [k: string]: any;
      };
      /**
       * Huawei CloudEngine configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with CloudEngine configuration sections in a deterministic way.  This module works with CLI transports.
       */
      ce_config?: {
        [k: string]: any;
      };
      /**
       * This module allows you to view the switch running configuration. It executes the display running-config CLI command on a switch and returns a file containing the current running configuration of the target network device. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run. For more information about this module from Lenovo and customizing it usage for your use cases, please visit U(http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_showrun.html)
       */
      cnos_showrun?: {
        [k: string]: any;
      };
      /**
       * Bind Contract Subjects to Filters on Cisco ACI fabrics.
       * More information from the internal APIC class I(vz:RsSubjFiltAtt) at U(https://developer.cisco.com/media/mim-ref/MO-vzRsSubjFiltAtt.html).
       */
      aci_contract_subject_to_filter?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Creates/deletes an issue in a Taiga Project Management Platform (U(https://taiga.io)).
       * An issue is identified by the combination of project, issue subject and issue type.
       * This module implements the creation or deletion of issues (not the update).
       */
      taiga_issue?: {
        /**
         * Default: New
         *
         * The issue status. Must exist previously.
         */
        status?: string;
        /**
         * Name of the project containing the issue. Must exist previously.
         */
        project: string;
        /**
         * The issue description.
         */
        description?: string;
        /**
         * A lists of tags to be assigned to the issue.
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: Normal
         *
         * The issue priority. Must exist previously.
         */
        priority?: string;
        /**
         * Default: https://api.taiga.io
         *
         * The hostname of the Taiga instance.
         */
        taiga_host?: string;
        /**
         * Default: present
         *
         * Whether the issue should be present or not.
         */
        state?: "present" | "absent";
        /**
         * Default: None
         *
         * Path to a file to be attached to the issue.
         */
        attachment?: string;
        /**
         * The issue type. Must exist previously.
         */
        issue_type: string;
        /**
         * The issue subject.
         */
        subject: string;
        /**
         * A string describing the file to be attached to the issue.
         */
        attachment_description?: string;
        /**
         * Default: Normal
         *
         * The issue severity. Must exist previously.
         */
        severity?: string;
        [k: string]: any;
      };
      /**
       * Manipulate Rackspace Cloud Block Storage Volumes
       */
      rax_cbs?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages base ACL configurations on HUAWEI CloudEngine switches.
       */
      ce_acl?: {
        /**
         * ACL step. The value is an integer ranging from 1 to 20. The default value is 5.
         */
        acl_step?: string;
        /**
         * Flag of logging matched data packets.
         */
        log_flag?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of a time range in which an ACL rule takes effect. The value is a string of 1 to 32 characters. The value is case-insensitive, and cannot contain spaces. The name must start with an uppercase or lowercase letter. In addition, the word "all" cannot be specified as a time range name.
         */
        time_range?: string;
        /**
         * Type of packet fragmentation.
         */
        frag_type?: "fragment" | "clear_fragment";
        /**
         * ACL description. The value is a string of 1 to 127 characters.
         */
        acl_description?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Mask of a source IP address. The value is an integer ranging from 1 to 32.
         */
        src_mask?: string;
        transport?: "cli";
        /**
         * ACL number. The value is an integer ranging from 2000 to 2999.
         */
        acl_num?: string;
        port?: number | string;
        /**
         * Matching mode of basic ACL rules.
         */
        rule_action?: "permit" | "deny";
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent" | "delete_acl";
        provider?: {
          [k: string]: any;
        };
        username?: string;
        /**
         * ACL number or name. For a numbered rule group, the value ranging from 2000 to 2999 indicates a basic ACL. For a named rule group, the value is a string of 1 to 32 case-sensitive characters starting with a letter, spaces not supported.
         */
        acl_name: string;
        /**
         * Name of a basic ACL rule. The value is a string of 1 to 32 characters. The value is case-insensitive, and cannot contain spaces or begin with an underscore (_).
         */
        rule_name?: string;
        host?: string;
        password?: string;
        /**
         * Description about an ACL rule. The value is a string of 1 to 127 characters.
         */
        rule_description?: string;
        /**
         * Source IP address. The value is a string of 0 to 255 characters.The default value is 0.0.0.0. The value is in dotted decimal notation.
         */
        source_ip?: string;
        /**
         * VPN instance name. The value is a string of 1 to 31 characters.The default value is _public_.
         */
        vrf_name?: string;
        timeout?: number | string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * ID of a basic ACL rule in configuration mode. The value is an integer ranging from 0 to 4294967294.
         */
        rule_id?: string;
        [k: string]: any;
      };
      /**
       * Manages AAA server global configuration on HUAWEI CloudEngine switches.
       */
      ce_aaa_server?: {
        username?: string;
        /**
         * Name of the user group where the user belongs. The user inherits all the rights of the user group. The value is a string of 1 to 32 characters.
         */
        local_user_group?: string;
        /**
         * Preferred authorization mode.
         */
        first_author_mode?: "invalid" | "local" | "hwtacacs" | "if-authenticated" | "none";
        /**
         * Name of an authentication scheme. The value is a string of 1 to 32 characters.
         */
        authen_scheme_name?: string;
        /**
         * Name of an authorization scheme. The value is a string of 1 to 32 characters.
         */
        author_scheme_name?: string;
        /**
         * Accounting Mode.
         */
        accounting_mode?: "invalid" | "hwtacacs" | "radius" | "none";
        /**
         * RADIUS server group's name. The value is a string of 1 to 32 case-insensitive characters.
         */
        radius_server_group?: string;
        /**
         * Name of a domain. The value is a string of 1 to 64 characters.
         */
        domain_name?: string;
        /**
         * Preferred authentication mode.
         */
        first_authen_mode?: "invalid" | "local" | "hwtacacs" | "radius" | "none";
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Name of a HWTACACS template. The value is a string of 1 to 32 case-insensitive characters.
         */
        hwtacas_template?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        host?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Accounting scheme name. The value is a string of 1 to 32 characters.
         */
        acct_scheme_name?: string;
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Return a list of files based on specific criteria. Multiple criteria are AND'd together.
       * For Windows targets, use the M(win_find) module instead.
       */
      find?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Set column values in record in database table.
       */
      openvswitch_db?: {
        /**
         * Identifies the key in the record column
         */
        key: string;
        /**
         * Expected value for the table, record, column and key.
         */
        value: string;
        /**
         * Identifies the recoard in the table.
         */
        record: string;
        /**
         * Default: 5
         *
         * How long to wait for ovs-vswitchd to respond
         */
        timeout?: number | string;
        /**
         * Identifies the table in the database.
         */
        table: string;
        col: string;
        [k: string]: any;
      };
      /**
       * Manage InfluxDB retention policies
       */
      influxdb_retention_policy?: {
        /**
         * Default: root
         *
         * Username that will be used to authenticate against InfluxDB server
         */
        username?: string;
        /**
         * Sets the retention policy as default retention policy
         */
        default?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the database where retention policy will be created
         */
        database_name: string;
        /**
         * The hostname or IP address on which InfluxDB server is listening
         */
        hostname: string;
        /**
         * Name of the retention policy
         */
        policy_name: string;
        /**
         * Determines how many independent copies of each point are stored in the cluster
         */
        replication: number | string;
        /**
         * Determines how long InfluxDB should keep the data
         */
        duration: string;
        /**
         * Default: root
         *
         * Password that will be used to authenticate against InfluxDB server
         */
        password?: string;
        /**
         * Default: 8086
         *
         * The port on which InfluxDB server is listening
         */
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Allows you to create/remove/update or powermanage virtual machines on a RHEV/oVirt platform.
       */
      rhevm?: {
        [k: string]: any;
      };
      /**
       * This module fetches data from the metadata servers in ec2 (aws) as per http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html. The module must be called from within the EC2 instance itself.
       */
      ec2_facts?: {
        [k: string]: any;
      };
      /**
       * Create, modifies, and deletes Redshift cluster subnet groups.
       */
      redshift_subnet_group?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        };
      /**
       * This module authenticates to oVirt engine and creates SSO token, which should be later used in all other oVirt modules, so all modules don't need to perform login and logout. This module returns an Ansible fact called I(ovirt_auth). Every module can use this fact as C(auth) parameter, to perform authentication.
       */
      ovirt_auth?: {
        /**
         * The name of the user. For example: I(admin@internal).
         */
        username?: string;
        /**
         * A PEM file containing the trusted CA certificates. The certificate presented by the server will be verified using these CA certificates. If C(ca_file) parameter is not set, system wide CA certificate store is used.
         */
        ca_file?: string;
        /**
         * A string containing the base URL of the server. For example: I(https://server.example.com/ovirt-engine/api).
         */
        url?: string;
        /**
         * A boolean flag that indicates if the server TLS certificate and host name should be checked.
         */
        insecure?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.
         */
        kerberos?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A boolean flag indicating if the SDK should ask the server to send compressed responses. The default is I(True). Note that this is a hint for the server, and that it may return uncompressed data even when this parameter is set to I(True).
         */
        compress?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * Specifies if a token should be created or revoked.
         */
        state?: "present" | "absent";
        ovirt_auth?: {
          [k: string]: any;
        };
        /**
         * The maximum total time to wait for the response, in seconds. A value of zero (the default) means wait forever. If the timeout expires before the response is received an exception will be raised.
         */
        timeout?: number | string;
        /**
         * The password of the user.
         */
        password?: string;
        [k: string]: any;
      };
      /**
       * Creates Connector Card messages through
       * Office 365 Connectors U(https://dev.outlook.com/Connectors)
       */
      office_365_connector_card?: {
        /**
         * A title for the Connector message. Shown at the top of the message.
         */
        title?: string;
        /**
         * Accent color used for branding or indicating status in the card.
         */
        color?: string;
        /**
         * The main text of the card.
         * This will be rendered below the sender information and optional title,
         * and above any sections or actions present.
         */
        text?: string;
        /**
         * The webhook URL is given to you when you create a new Connector.
         */
        webhook: string;
        /**
         * This array of objects will power the action links
         * found at the bottom of the card.
         */
        actions?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * A string used for summarizing card content.
         * This will be shown as the message subject.
         * This is required if the text parameter isn't populated.
         */
        summary?: string;
        /**
         * Contains a list of sections to display in the card.
         * For more information see https://dev.outlook.com/Connectors/reference.
         */
        sections?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        [k: string]: any;
      };
      /**
       * Modify protocol properties on Solaris/illumos systems.
       */
      ipadm_prop?: {
        /**
         * Specifies the procotol for which we want to manage properties.
         */
        protocol: "ipv4" | "ipv6" | "icmp" | "tcp" | "udp" | "sctp";
        /**
         * Default: present
         *
         * Set or reset the property value.
         */
        state?: "present" | "absent" | "reset";
        /**
         * Specifies the name of property we want to manage.
         */
        property: string;
        /**
         * Specifies that the property value is temporary. Temporary property values do not persist across reboots.
         */
        temporary?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specifies the value we want to set for the property.
         */
        value?: string;
        [k: string]: any;
      };
      /**
       * Create, update and delete an Azure Managed Disk
       */
      azure_rm_managed_disk?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The resource ID of the managed disk to copy when 'create_option' is 'copy'.
         */
        source_resource_uri?: string;
        /**
         * -Size in GB of the managed disk to be created. If 'create_option' is 'copy' then the value must be greater than or equal to the source's size.
         */
        disk_size_gb?: number | string;
        /**
         * Name of the managed disk
         */
        name: string;
        /**
         * Name of a resource group where the managed disk exists or will be created.
         */
        resource_group: string;
        /**
         * Tags to assign to the managed disk.
         */
        tags?: {
          [k: string]: any;
        };
        ad_user?: string;
        /**
         * URI to a valid VHD file to be used when 'create_option' is 'import'.
         */
        source_uri?: string;
        append_tags?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        cloud_environment?: string;
        secret?: string;
        /**
         * Type of storage for the managed disk: 'Standard_LRS'  or 'Premium_LRS'. If not specified the disk is created 'Standard_LRS'
         */
        storage_account_type?: "Standard_LRS" | "Premium_LRS";
        /**
         * Type of Operating System: 'linux' or 'windows'. Used when 'create_option' is either 'copy' or 'import' and the source is an OS disk.
         */
        os_type?: "linux" | "windows";
        /**
         * Default: present
         *
         * Assert the state of the managed disk. Use 'present' to create or update a managed disk and 'absent' to delete a managed disk.
         */
        state?: "absent" | "present";
        /**
         * Default: resource_group location
         *
         * Valid Azure location. Defaults to location of the resource group.
         */
        location?: string;
        client_id?: string;
        subscription_id?: string;
        password?: string;
        /**
         * Allowed values: empty, import, copy. 'import' from a VHD file in 'source_uri' and 'copy' from previous managed disk 'source_resource_uri'.
         */
        create_option?: "empty" | "import" | "copy";
        tenant?: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure PoolGroupDeploymentPolicy object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_poolgroupdeploymentpolicy?: {
        username?: string;
        /**
         * Target traffic ratio before pool is made production.
         * Allowed values are 1-100.
         * Default value when not specified in API or module is interpreted by Avi Controller as 100.
         */
        target_test_traffic_ratio?: number | string;
        /**
         * Duration of evaluation period for automatic deployment.
         * Allowed values are 60-86400.
         * Default value when not specified in API or module is interpreted by Avi Controller as 300.
         */
        evaluation_duration?: number | string;
        /**
         * Deployment scheme.
         * Enum options - BLUE_GREEN, CANARY.
         * Default value when not specified in API or module is interpreted by Avi Controller as BLUE_GREEN.
         */
        scheme?: string;
        /**
         * Uuid of the pool group deployment policy.
         */
        uuid?: string;
        /**
         * Ratio of the traffic that is sent to the pool under test.
         * Test ratio of 100 means blue green.
         * Allowed values are 1-100.
         * Default value when not specified in API or module is interpreted by Avi Controller as 100.
         */
        test_traffic_ratio_rampup?: number | string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It will automatically disable old production pools once there is a new production candidate.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        auto_disable_old_prod_pools?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * User defined description for the object.
         */
        description?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * List of pgdeploymentrule.
         */
        rules?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        controller?: string;
        /**
         * It is a reference to an object of type cloud.
         */
        cloud_ref?: string;
        tenant?: string;
        /**
         * Webhook configured with url that avi controller will pass back information about pool group, old and new pool information and current deployment
         * rule results.
         * It is a reference to an object of type webhook.
         * Field introduced in 17.1.1.
         */
        webhook_ref?: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * The name of the pool group deployment policy.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Can create or delete AWS Autoscaling Groups
       * Works with the ec2_lc module to manage Launch Configurations
       */
      ec2_asg?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage slb service-group objects on A10 Networks devices via aXAPI
       */
      a10_service_group?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Trigger a graceful removal or insertion (GIR) of the switch.
       */
      nxos_gir?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * When C(system_mode_maintenance_dont_generate_profile=true) it prevents the dynamic searching of enabled protocols and executes commands configured in a maintenance-mode profile. Use this option if you want the system to use a maintenance-mode profile that you have created. When C(system_mode_maintenance_dont_generate_profile=false) it prevents the dynamic searching of enabled protocols and executes commands configured in a normal-mode profile. Use this option if you want the system to use a normal-mode profile that you have created.
         */
        system_mode_maintenance_dont_generate_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Shuts down all protocols, vPC domains, and interfaces except the management interface (using the shutdown command). This option is disruptive while C(system_mode_maintenance) (which uses the isolate command) is not.
         */
        system_mode_maintenance_shutdown?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "absent" | "present" | "default";
        host?: string;
        /**
         * Keeps the switch in maintenance mode for a specified number of minutes. Range is 5-65535.
         */
        system_mode_maintenance_timeout?: string;
        /**
         * Boots the switch into maintenance mode automatically in the event of a specified system crash.
         */
        system_mode_maintenance_on_reload_reset_reason?:
          | "hw_error"
          | "svc_failure"
          | "kern_failure"
          | "wdog_timeout"
          | "fatal_error"
          | "lc_failure"
          | "match_any"
          | "manual_reload";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * When C(system_mode_maintenance=true) it puts all enabled protocols in maintenance mode (using the isolate command). When C(system_mode_maintenance=false) it puts all enabled protocols in normal mode (using the no isolate command).
         */
        system_mode_maintenance?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * This module creates, modifies, and deletes VPN connections. Idempotence is achieved by using the filters option or specifying the VPN connection identifier.
       */
      ec2_vpc_vpn?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module allows one to (re)generate OpenSSL private keys. It uses the pyOpenSSL python library to interact with openssl. One can generate either RSA or DSA private keys. Keys are generated in PEM format. This module uses file common arguments to specify generated file permissions.
       */
      openssl_privatekey?: {
        /**
         * Should the key be regenerated even it it already exists
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * Whether the private key should exist or not, taking action if the state is different from what is stated.
         */
        state?: "present" | "absent";
        /**
         * The cipher to encrypt the private key. (cipher can be found by running `openssl list-cipher-algorithms`)
         */
        cipher?: string;
        /**
         * The passphrase for the private key.
         */
        passphrase?: string;
        /**
         * Name of the file in which the generated TLS/SSL private key will be written. It will have 0600 mode.
         */
        path: string;
        /**
         * Default: RSA
         *
         * The algorithm used to generate the TLS/SSL private key
         */
        type?: "RSA" | "DSA";
        /**
         * Default: 4096
         *
         * Size (in bits) of the TLS/SSL key to generate
         */
        size?: number | string;
        [k: string]: any;
      };
      /**
       * This module is used to configure ActionGroupConfig object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_actiongroupconfig?: {
        username?: string;
        /**
         * Select the snmp trap notification to use when sending alerts via snmp trap.
         * It is a reference to an object of type snmptrapprofile.
         */
        snmp_trap_profile_ref?: string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * Select the syslog notification configuration to use when sending alerts via syslog.
         * It is a reference to an object of type alertsyslogconfig.
         */
        syslog_config_ref?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * User defined description for the object.
         */
        description?: string;
        /**
         * When an alert is generated, mark its priority via the alert level.
         * Enum options - ALERT_LOW, ALERT_MEDIUM, ALERT_HIGH.
         * Default value when not specified in API or module is interpreted by Avi Controller as ALERT_LOW.
         */
        level: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Reference of the action script configuration to be used.
         * It is a reference to an object of type alertscriptconfig.
         */
        action_script_config_ref?: string;
        /**
         * Trigger notification to autoscale manager.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        autoscale_trigger_notification?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        controller?: string;
        /**
         * Generate alert only to external destinations.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        external_only:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        tenant?: string;
        /**
         * Select the email notification configuration to use when sending alerts via email.
         * It is a reference to an object of type alertemailconfig.
         */
        email_config_ref?: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Name of the object.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Create a VMware VMkernel Interface
       */
      vmware_vmkernel?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manage BIG-IP device DNS settings
       */
      bigip_device_dns?: {
        /**
         * A list of domains that the system searches for local domain lookups, to resolve local host names.
         */
        search?: string;
        /**
         * Default: disable
         *
         * Specifies whether the system caches DNS lookups or performs the operation each time a lookup is needed. Please note that this applies only to Access Policy Manager features, such as ACLs, web application rewrites, and authentication.
         */
        cache?: string;
        /**
         * Specifies whether the DNS specifies IP addresses using IPv4 or IPv6.
         */
        ip_version?: string;
        /**
         * Default: present
         *
         * The state of the variable on the system. When C(present), guarantees that an existing variable is set to C(value).
         */
        state?: string;
        /**
         * A list of BIND servers that the system can use to perform DNS lookups
         */
        forwarders?: string;
        /**
         * A list of name serverz that the system uses to validate DNS lookups
         */
        name_servers?: string;
        [k: string]: any;
      };
      /**
       * creates an EBS volume and optionally attaches it to an instance. If both an instance ID and a device name is given and the instance has a device at the device name, then no volume is created and no attachment is made. This module has a dependency on python-boto.
       */
      ec2_vol?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create, delete, or modify a Direct Connect link aggregation group.
       */
      aws_direct_connect_link_aggregation_group?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Enables the management of the Cisco ACI fabric through direct access to the Cisco APIC REST API.
       * More information regarding the Cisco APIC REST API is available from U(http://www.cisco.com/c/en/us/td/docs/switches/datacenter/aci/apic/sw/2-x/rest_cfg/2_1_x/b_Cisco_APIC_REST_API_Configuration_Guide.html).
       */
      aci_rest?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        };
      /**
       * Add or remove PostgreSQL extensions from a database.
       */
      postgresql_ext?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Edit PAM service's type, control, module path and module arguments. In order for a PAM rule to be modified, the type, control and module_path must match an existing rule.  See man(5) pam.d for details.
       */
      pamd?: {
        /**
         * The control of the PAM rule being modified.  This may be a complicated control with brackets.  If this is the case, be sure to put "[bracketed controls]" in quotes.  The type, control and module_path all must match a rule to be modified.
         */
        control: string;
        /**
         * The new module path to be assigned to the new rule.
         */
        new_module_path?: string;
        /**
         * When state is 'updated', the module_arguments will replace existing module_arguments.  When state is 'args_absent' args matching those listed in module_arguments will be removed.  When state is 'args_present' any args listed in module_arguments are added if missing from the existing rule.  Furthermore, if the module argument takes a value denoted by '=', the value will be changed to that specified in module_arguments.
         */
        module_arguments?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The new type to assign to the new rule.
         */
        new_type?: "account" | "auth" | "password" | "session";
        /**
         * Default: updated
         *
         * The default of 'updated' will modify an existing rule if type, control and module_path all match an existing rule.  With 'before', the new rule will be inserted before a rule matching type, control and module_path.  Similarly, with 'after', the new rule will be inserted after an existing rule matching type, control and module_path.  With either 'before' or 'after' new_type, new_control, and new_module_path must all be specified.  If state is 'args_absent' or 'args_present', new_type, new_control, and new_module_path will be ignored.  State 'absent' will remove the rule.  The 'absent' state was added in version 2.4 and is only available in Ansible versions >= 2.4.
         */
        state?: "updated" | "before" | "after" | "args_present" | "args_absent" | "absent";
        /**
         * The new control to assign to the new rule.
         */
        new_control?: string;
        /**
         * The module path of the PAM rule being modified.  The type, control and module_path all must match a rule to be modified.
         */
        module_path: string;
        /**
         * Default: /etc/pam.d/
         *
         * This is the path to the PAM service files
         */
        path?: string;
        /**
         * The type of the PAM rule being modified.  The type, control and module_path all must match a rule to be modified.
         */
        type: "account" | "auth" | "password" | "session";
        /**
         * The name generally refers to the PAM service file to change, for example system-auth.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Manage IP tunnel interfaces on Solaris/illumos systems.
       */
      dladm_iptun?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Allows for the creation, removal and updating of Asynchronous Mirror Groups for NetApp E-series storage arrays
       */
      netapp_e_amg?: {
        new_name?: string;
        /**
         * The ID of the primary storage array for the async mirror action
         */
        ssid: string;
        /**
         * Default: 10
         *
         * The synchronization interval in minutes
         */
        syncIntervalMinutes?: number | string;
        /**
         * Default: 20
         *
         * Recovery point warning threshold (minutes). The user will be warned when the age of the last good failures point exceeds this value
         */
        recoveryWarnThresholdMinutes?: number | string;
        /**
         * The ID of the secondary array to be used in mirroing process
         */
        secondaryArrayId: string;
        /**
         * The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_password: string;
        /**
         * The name of the async array you wish to target, or create.
         * If C(state) is present and the name isn't found, it will attempt to create.
         */
        name: string;
        /**
         * Default: 80
         *
         * Recovery point warning threshold
         */
        repoUtilizationWarnThreshold?: number | string;
        /**
         * A C(state) of present will either create or update the async mirror group.
         * A C(state) of absent will remove the async mirror group.
         */
        state: "present" | "absent";
        /**
         * The intended protocol to use if both Fibre and iSCSI are available.
         */
        interfaceType?: "iscsi" | "fibre";
        /**
         * Setting this to true will cause other synchronization values to be ignored
         */
        manualSync?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_username: string;
        /**
         * Default: 10
         *
         * The threshold (in minutes) for notifying the user that periodic synchronization has taken too long to complete.
         */
        syncWarnThresholdMinutes?: number | string;
        /**
         * Default: True
         *
         * Should https certificates be validated?
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The url to the SANtricity WebServices Proxy or embedded REST API.
         */
        api_url: string;
        [k: string]: any;
      };
      /**
       * Sends an arbitrary set of commands to an EOS node and returns the results read from the device.  This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.
       */
      eos_command?: {
        [k: string]: any;
      };
      /**
       * Create, Update or Destory GCE Labels on instances, disks, snapshots, etc. When specifying the GCE resource, users may specifiy the full URL for the resource (its 'self_link'), or the individual parameters of the resource (type, location, name). Examples for the two options can be seen in the documentaion. See U(https://cloud.google.com/compute/docs/label-or-tag-resources) for more information about GCE Labels. Labels are gradually being added to more GCE resources, so this module will need to be updated as new resources are added to the GCE (v1) API.
       */
      gce_labels?: {
        /**
         * The name of resource.
         */
        resource_name?: string;
        service_account_email?: string;
        /**
         * A list of labels (key/value pairs) to add or remove for the resource.
         */
        labels?: {
          [k: string]: any;
        };
        /**
         * The location of resource (global, us-central1-f, etc.)
         */
        resource_location?: string;
        state?: "absent" | "present";
        service_account_permissions?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        credentials_file?: string;
        pem_file?: string;
        /**
         * The 'self_link' for the resource (instance, disk, snapshot, etc)
         */
        resource_url?: string;
        project_id?: string;
        /**
         * The type of resource (instances, disks, snapshots, images)
         */
        resource_type?: string;
        [k: string]: any;
      };
      /**
       * Sends an arbitrary netconf command on HUAWEI CloudEngine switches.
       */
      ce_netconf?: {
        username?: string;
        /**
         * The type of rpc.
         */
        rpc: "get" | "edit-config" | "execute-action" | "execute-cli";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        /**
         * The config xml string.
         */
        cfg_xml: string;
        [k: string]: any;
      };
      /**
       * Manage binary packages for Slackware using 'slackpkg' which is available in versions after 12.2.
       */
      slackpkg?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Create, update and remove DNS records using DDNS updates
       * DDNS works well with both bind and Microsoft DNS (see https://technet.microsoft.com/en-us/library/cc961412.aspx)
       */
      nsupdate?: {
        /**
         * Default: hmac-md5
         *
         * Specify key algorithm used by C(key_secret).
         */
        key_algorithm?:
          | "HMAC-MD5.SIG-ALG.REG.INT"
          | "hmac-md5"
          | "hmac-sha1"
          | "hmac-sha224"
          | "hmac-sha256"
          | "hamc-sha384"
          | "hmac-sha512";
        /**
         * DNS record will be modified on this C(zone).
         */
        zone: string;
        /**
         * Use TSIG key name to authenticate against DNS C(server)
         */
        key_name?: string;
        /**
         * Default: None
         *
         * Sets the record value.
         */
        value?: string;
        /**
         * Apply DNS modification on this server.
         */
        server: string;
        /**
         * Sets the DNS record to modify.
         */
        record: string;
        /**
         * Default: present
         *
         * Manage DNS record.
         */
        state?: "present" | "absent";
        /**
         * Default: 3600
         *
         * Sets the record TTL.
         */
        ttl?: number | string;
        /**
         * Default: A
         *
         * Sets the record type.
         */
        type?: string;
        /**
         * Use TSIG key secret, associated with C(key_name), to authenticate against C(server)
         */
        key_secret?: string;
        [k: string]: any;
      };
      /**
       * Gather facts about ec2 VPCs in AWS
       */
      ec2_vpc_net_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Cisco ASA configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with ASA configuration sections in a deterministic way.
       */
      asa_config?: {
        [k: string]: any;
      };
      /**
       * Add and remove security group rules.
       */
      cs_securitygroup_rule?: {
        [k: string]: any;
      };
      /**
       * Manage the container images on the atomic host platform
       * Allows to execute the commands on the container images
       */
      atomic_image?: {
        /**
         * Default: True
         *
         * Start or Stop the continer
         */
        started?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: latest
         *
         * The state of the container image.
         * The state ```latest``` will ensure container image is upgraded to the latest version and forcefully restart container, if running.
         */
        state?: "present" | "absent" | "latest";
        /**
         * Name of the container image
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module allows you to work with Border Gateway Protocol (BGP) related configurations. The operators used are overloaded to ensure control over switch BGP configurations. This module is invoked using method with asNumber as one of its arguments. The first level of the BGP configuration allows to set up an AS number, with the following attributes going into various configuration operations under the context of BGP. After passing this level, there are eight BGP arguments that will perform further configurations. They are bgpArg1, bgpArg2, bgpArg3, bgpArg4, bgpArg5, bgpArg6, bgpArg7, and bgpArg8. For more details on how to use these arguments, see [Overloaded Variables]. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run. For more information about this module from Lenovo and customizing it usage for your use cases, please visit U(http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_bgp.html)
       */
      cnos_bgp?: {
        /**
         * This is an overloaded bgp eigth argument. Usage of this argument can be found is the User Guide referenced above.
         */
        bgpArg8?: string;
        /**
         * AS number
         */
        asNum?: string;
        /**
         * This is an overloaded bgp fourth argument. Usage of this argument can be found is the User Guide referenced above.
         */
        bgpArg4?: string;
        /**
         * This is an overloaded bgp fifth argument. Usage of this argument can be found is the User Guide referenced above.
         */
        bgpArg5?: string;
        /**
         * This is an overloaded bgp sixth argument. Usage of this argument can be found is the User Guide referenced above.
         */
        bgpArg6?: string;
        /**
         * This is an overloaded bgp seventh argument. Usage of this argument can be found is the User Guide referenced above.
         */
        bgpArg7?: string;
        /**
         * This is an overloaded bgp first argument. Usage of this argument can be found is the User Guide referenced above.
         */
        bgpArg1?: string;
        /**
         * This is an overloaded bgp second argument. Usage of this argument can be found is the User Guide referenced above.
         */
        bgpArg2?: string;
        /**
         * This is an overloaded bgp third argument. Usage of this argument can be found is the User Guide referenced above.
         */
        bgpArg3?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of static IP routes on network devices.
       */
      net_static_route?: {
        username?: string;
        ssh_keyfile?: string;
        name?: string;
        facility?: string;
        dest?: "console" | "file" | "global" | "host" | "user";
        level?: string;
        /**
         * Default: present
         *
         * State of the static route configuration.
         */
        state?: "present" | "absent";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of static route definitions
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Gathering facts from the API of a zone.
       */
      cs_zone_facts?: {
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        api_region?: string;
        api_key?: string;
        /**
         * Name of the zone.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Configures the NXAPI feature on devices running Cisco NXOS.  The NXAPI feature is absent from the configuration by default.  Since this module manages the NXAPI feature it only supports the use of the C(Cli) transport.
       */
      nxos_nxapi?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module provides management of firewall IPv4 policies on FortiOS devices.
       */
      fortios_ipv4_policy?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Wraps the reg.exe command to import the contents of a registry file.
       * Suitable for use with registry files created using M(win_template).
       * Windows registry files have a specific format and must be constructed correctly with carriage return and line feed line endings otherwise they will not be merged.
       * Exported registry files often start with a Byte Order Mark which must be removed if the file is to templated using M(win_template).
       * Registry file format is described at U(https://support.microsoft.com/en-us/kb/310516)
       * See also M(win_template), M(win_regedit)
       */
      win_regmerge?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Create, update and delete Azure load balancers
       */
      azure_rm_loadbalancer?: {
        [k: string]: any;
      };
      /**
       * Manage SmartOS virtual machine images through imgadm(1M)
       */
      imgadm?: {
        /**
         * Force a given operation (where supported by imgadm(1M)).
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Image UUID. Can either be a full UUID or C(*) for all images.
         */
        uuid?: string;
        /**
         * URI for the image source.
         */
        source?: string;
        /**
         * State the object operated on should be in. C(imported) is an alias for for C(present) and C(deleted) for C(absent). When set to C(vacuumed) and C(uuid) to C(*), it will remove all unused images.
         */
        state: "present" | "absent" | "deleted" | "imported" | "updated" | "vacuumed";
        /**
         * Default: imgapi
         *
         * Type for image sources.
         */
        type?: "imgapi" | "docker" | "dsapi";
        /**
         * Default: zones
         *
         * zpool to import to or delete images from.
         */
        pool?: string;
        [k: string]: any;
      };
      /**
       * Manages MTU settings on HUAWEI CloudEngine switches.
       */
      ce_mtu?: {
        username?: string;
        /**
         * Non-jumbo frame size threshod. The default value is 1518. The value is an integer that ranges from 1518 to jumbo_max, in bytes.
         */
        jumbo_min?: string;
        /**
         * Maximum frame size. The default value is 9216. The value is an integer and expressed in bytes. The value range is 1536 to 12224 for the CE12800 and 1536 to 12288 for ToR switches.
         */
        jumbo_max?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * MTU for a specific interface. The value is an integer ranging from 46 to 9600, in bytes.
         */
        mtu?: string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Full name of interface, i.e. 40GE1/0/22.
         */
        interface: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Add or remove LDAP entries. This module only asserts the existence or non-existence of an LDAP entry, not its attributes. To assert the attribute values of an entry, see M(ldap_attr).
       */
      ldap_entry?: {
        /**
         * The DN of the entry to add or remove.
         */
        dn: string;
        /**
         * If I(state=present), value or list of values to use when creating the entry. It can either be a string or an actual list of strings.
         */
        objectClass?: string;
        /**
         * Default: no
         *
         * If true, we'll use the START_TLS LDAP extension.
         */
        start_tls?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A DN to bind with. If this is omitted, we'll try a SASL bind with the EXTERNAL mechanism. If this is blank, we'll use an anonymous bind.
         */
        bind_dn?: string;
        /**
         * Default: ldapi:///
         *
         * A URI to the LDAP server. The default value lets the underlying LDAP client library look for a UNIX domain socket in its default location.
         */
        server_uri?: string;
        /**
         * Default: present
         *
         * The target state of the entry.
         */
        state?: "present" | "absent";
        /**
         * List of options which allows to overwrite any of the task or the I(attributes) options. To remove an option, set the value of the option to C(null).
         */
        params?: {
          [k: string]: any;
        };
        /**
         * The password to use with I(bind_dn).
         */
        bind_pw?: string;
        /**
         * If I(state=present), attributes necessary to create an entry. Existing entries are never modified. To assert specific attribute values on an existing entry, use M(ldap_attr) module instead.
         */
        attributes?: {
          [k: string]: any;
        };
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Module to manage datacenter quotas in oVirt/RHV
       */
      ovirt_quotas?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages physical attributes of interfaces on HUAWEI CloudEngine switches.
       */
      ce_interface?: {
        username?: string;
        /**
         * Specifies an interface description. The value is a string of 1 to 242 case-sensitive characters, spaces supported but question marks (?) not supported.
         */
        description?: string;
        /**
         * Interface type to be configured from the device.
         */
        interface_type?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent" | "default";
        host?: string;
        /**
         * Specifies the interface management status. The value is an enumerated type. up, An interface is in the administrative Up state. down, An interface is in the administrative Down state.
         */
        admin_state?: "up" | "down";
        /**
         * Manage Layer 2 or Layer 3 state of the interface.
         */
        mode?: "layer2" | "layer3";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Full name of interface, i.e. 40GE1/0/10, Tunnel1.
         */
        interface?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        /**
         * Specifies whether the interface is a Layer 2 sub-interface.
         */
        l2sub?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Offers ability to enable and disable features in NX-OS.
       */
      nxos_feature?: {
        username?: string;
        save?: string;
        ssh_keyfile?: string;
        config?: string;
        /**
         * Name of feature.
         */
        feature: string;
        include_defaults?: string;
        /**
         * Default: enabled
         *
         * Desired state of the feature.
         */
        state?: "enabled" | "disabled";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        host?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Configures a bridge interface on Cumulus Linux To configure a bond port use the cl_bond module. To configure any other type of interface use the cl_interface module. Follow the guidelines for bridging found in the Cumulus User Guide at U(http://docs.cumulusnetworks.com)
       */
      cl_bridge?: {
        /**
         * Configures the port to use DHCP. To enable this feature use the option I(dhcp).
         */
        addr_method?: "" | "dhcp";
        /**
         * Name of the interface.
         */
        name: string;
        /**
         * Enables vlan-aware mode.
         */
        vlan_aware?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Set spanning tree root priority. Must be a multiple of 4096.
         */
        mstpctl_treeprio?: string;
        /**
         * Define Ethernet mac associated with Cumulus Linux VRR feature.
         */
        virtual_mac?: string;
        /**
         * Set MTU. Configure Jumbo Frame by setting MTU to I(9000).
         */
        mtu?: string;
        /**
         * In vlan-aware mode, defines vlan that is the untagged vlan.
         */
        pvid?: string;
        /**
         * List of IPv4 addresses to configure on the interface. In the form I(X.X.X.X/YY).
         */
        ipv4?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: yes
         *
         * Enables spanning tree Protocol. As of Cumulus Linux 2.5 the default bridging mode, only per vlan RSTP or 802.1d is supported. For the vlan aware mode, only common instance STP is supported
         */
        stp?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Define IPv4 virtual IP used by the Cumulus Linux VRR feature.
         */
        virtual_ip?: string;
        /**
         * List of IPv6 addresses to configure on the interface. In the form I(X:X:X::X/YYY).
         */
        ipv6?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * In vlan-aware mode, lists VLANs defined under the interface.
         */
        vids?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Description of the port.
         */
        alias_name?: string;
        /**
         * List of bridge members.
         */
        ports:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: ['/etc/network/interfaces.d']
         *
         * Interface directory location.
         */
        location?: string;
        [k: string]: any;
      };
      /**
       * Manage SPAN source groups' associated destinaton group on Cisco ACI fabrics.
       * More information from the internal APIC class I(span:SrcGrp) at U(https://developer.cisco.com/media/mim-ref/MO-spanSpanLbl.html).
       */
      aci_tenant_span_src_group_to_dst_group?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * This module is used to configure ApplicationPersistenceProfile object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_applicationpersistenceprofile?: {
        username?: string;
        /**
         * A user-friendly name for the persistence profile.
         */
        name: string;
        /**
         * Specifies the application cookie persistence profile parameters.
         */
        app_cookie_persistence_profile?: {
          [k: string]: any;
        };
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * User defined description for the object.
         */
        description?: string;
        controller?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Specifies behavior when a persistent server has been marked down by a health monitor.
         * Enum options - HM_DOWN_PICK_NEW_SERVER, HM_DOWN_ABORT_CONNECTION, HM_DOWN_CONTINUE_PERSISTENT_SERVER.
         * Default value when not specified in API or module is interpreted by Avi Controller as HM_DOWN_PICK_NEW_SERVER.
         */
        server_hm_down_recovery?: string;
        /**
         * This field describes the object's replication scope.
         * If the field is set to false, then the object is visible within the controller-cluster and its associated service-engines.
         * If the field is set to true, then the object is replicated across the federation.
         * Field introduced in 17.1.3.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        is_federated?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specifies the http cookie persistence profile parameters.
         */
        http_cookie_persistence_profile?: {
          [k: string]: any;
        };
        /**
         * Method used to persist clients to the same server for a duration of time or a session.
         * Enum options - PERSISTENCE_TYPE_CLIENT_IP_ADDRESS, PERSISTENCE_TYPE_HTTP_COOKIE, PERSISTENCE_TYPE_TLS, PERSISTENCE_TYPE_CLIENT_IPV6_ADDRESS,
         * PERSISTENCE_TYPE_CUSTOM_HTTP_HEADER, PERSISTENCE_TYPE_APP_COOKIE, PERSISTENCE_TYPE_GSLB_SITE.
         * Default value when not specified in API or module is interpreted by Avi Controller as PERSISTENCE_TYPE_CLIENT_IP_ADDRESS.
         */
        persistence_type: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Specifies the client ip persistence profile parameters.
         */
        ip_persistence_profile?: {
          [k: string]: any;
        };
        tenant?: string;
        /**
         * Specifies the custom http header persistence profile parameters.
         */
        hdr_persistence_profile?: {
          [k: string]: any;
        };
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Uuid of the persistence profile.
         */
        uuid?: string;
        [k: string]: any;
      };
      /**
       * create / delete a database in the Cloud Databases.
       */
      rax_cdb_database?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Tests reachability using ping from switch to a remote destination.
       */
      nxos_ping?: {
        /**
         * Default: 2
         *
         * Number of packets to send.
         */
        count?: string;
        username?: string;
        ssh_keyfile?: string;
        /**
         * IP address or hostname (resolvable by switch) of remote node.
         */
        dest: string;
        /**
         * Default: present
         *
         * Determines if the expected result is success or fail.
         */
        state?: "absent" | "present";
        /**
         * Source IP Address.
         */
        source?: string;
        host?: string;
        /**
         * Outgoing VRF.
         */
        vrf?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Manage Subnets on Cisco ACI fabrics.
       * More information from the internal APIC class I(fv:Subnet) at U(https://developer.cisco.com/media/mim-ref/MO-fvSubnet.html).
       */
      aci_bd_subnet?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Allows you to attach or detach a volume from a ProfitBricks server. This module has a dependency on profitbricks >= 1.0.0
       */
      profitbricks_volume_attachments?: {
        /**
         * The datacenter in which to operate.
         */
        datacenter?: string;
        /**
         * The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environement variable.
         */
        subscription_user?: string;
        /**
         * The name of the server you wish to detach or attach the volume.
         */
        server?: string;
        /**
         * The volume name or ID.
         */
        volume?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: string;
        /**
         * Default: 600
         *
         * how long before wait gives up, in seconds
         */
        wait_timeout?: number | string;
        /**
         * THe ProfitBricks password. Overrides the PB_PASSWORD environement variable.
         */
        subscription_password?: string;
        /**
         * Default: yes
         *
         * wait for the operation to complete before returning
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage port channel interface policies on Cisco ACI fabrics.
       * More information from the internal APIC class I(lacp:LagPol) at U(https://developer.cisco.com/media/mim-ref/MO-lacpLagPol.html).
       */
      aci_intf_policy_port_channel?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      znode?: {
        /**
         * The path of the znode.
         */
        name: string;
        /**
         * Default: None
         *
         * The value assigned to the znode.
         */
        value?: string;
        /**
         * Default: None
         *
         * The state to enforce. Mutually exclusive with op.
         */
        state?: "present" | "absent";
        /**
         * A list of ZooKeeper servers (format '[server]:[port]').
         */
        hosts: string;
        /**
         * Default: 300
         *
         * The amount of time to wait for a node to appear.
         */
        timeout?: number | string;
        /**
         * Default: None
         *
         * An operation to perform. Mutually exclusive with state.
         */
        op?: "get" | "wait" | "list";
        /**
         * Recursively delete node and all its children.
         */
        recursive?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Sends an email with a SendGrid account through their API, not through the SMTP service.
       */
      sendgrid?: {
        body: string;
        /**
         * username for logging into the SendGrid account.
         * Since 2.2 it is only required if api_key is not supplied.
         */
        username?: string;
        /**
         * password that corresponds to the username
         * Since 2.2 it is only required if api_key is not supplied.
         */
        password?: string;
        /**
         * the name you want to appear in the from field, i.e 'John Doe'
         */
        from_name?: string;
        /**
         * a list of relative or explicit paths of files you want to attach (7MB limit as per SendGrid docs)
         */
        attachments?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * a list of email addresses to cc
         */
        cc?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * a list of email addresses to bcc
         */
        bcc?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * a dict to pass on as headers
         */
        headers?: {
          [k: string]: any;
        };
        /**
         * a list with one or more recipient email addresses
         */
        to_addresses:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * whether the body is html content that should be rendered
         */
        html_body?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * sendgrid API key to use instead of username/password
         */
        api_key?: string;
        /**
         * the address in the "from" field for the email
         */
        from_address: string;
        /**
         * the desired subject for the email
         */
        subject: string;
        [k: string]: any;
      };
      /**
       * This is a simple module that supports creating or removing vDCs. A vDC is required before you can create servers. This module has a dependency on profitbricks >= 1.0.0
       */
      profitbricks_datacenter?: {
        /**
         * The description of the virtual datacenter.
         */
        description?: string;
        /**
         * The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environement variable.
         */
        subscription_user?: string;
        /**
         * The name of the virtual datacenter.
         */
        name?: string;
        /**
         * THe ProfitBricks password. Overrides the PB_PASSWORD environement variable.
         */
        subscription_password?: string;
        /**
         * Default: present
         *
         * create or terminate datacenters
         */
        state?: string;
        /**
         * Default: 600
         *
         * how long before wait gives up, in seconds
         */
        wait_timeout?: string;
        /**
         * Default: us/las
         *
         * The datacenter location.
         */
        location?: "us/las" | "de/fra" | "de/fkb";
        /**
         * Default: yes
         *
         * wait for the datacenter to be created before returning
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manages IGMP interface configuration settings.
       */
      nxos_igmp_interface?: {
        /**
         * Query interval used when the IGMP process starts up. The range is from 1 to 18000. The default is 31.
         */
        startup_query_interval?: string;
        /**
         * Configure a routemap for static outgoing interface (OIF).
         */
        oif_routemap?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Sets the number of times that the software sends an IGMP query in response to a host leave message. Values can range from 1 to 5. The default is 2.
         */
        last_member_query_count?: string;
        port?: number | string;
        transport?: "cli" | "nxapi";
        /**
         * Configures report-link-local-groups. Enables sending reports for groups in 224.0.0.0/24. Reports are always sent for nonlink local groups. By default, reports are not sent for link local groups.
         */
        report_llg?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Sets the query interval waited after sending membership reports before the software deletes the group state. Values can range from 1 to 25 seconds. The default is 1 second.
         */
        last_member_qrt?: string;
        /**
         * Query count used when the IGMP process starts up. The range is from 1 to 10. The default is 2.
         */
        startup_query_count?: string;
        /**
         * Enables the device to remove the group entry from the multicast routing table immediately upon receiving a leave message for the group. Use this command to minimize the leave latency of IGMPv2 group memberships on a given IGMP interface because the device does not send group-specific queries. The default is disabled.
         */
        immediate_leave?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        include_defaults?: string;
        /**
         * Default: present
         *
         * Manages desired state of the resource.
         */
        state?: "present" | "absent" | "default";
        /**
         * IGMP version. It can be 2 or 3.
         */
        version?: string;
        provider?: {
          [k: string]: any;
        };
        save?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        config?: string;
        username?: string;
        /**
         * Sets the group membership timeout for IGMPv2. Values can range from 3 to 65,535 seconds. The default is 260 seconds.
         */
        group_timeout?: string;
        host?: string;
        /**
         * Configure a prefix for static outgoing interface (OIF).
         */
        oif_prefix?: string;
        /**
         * The full interface name for IGMP configuration. e.g. I(Ethernet1/2).
         */
        interface: string;
        /**
         * Sets the querier timeout that the software uses when deciding to take over as the querier. Values can range from 1 to 65535 seconds. The default is 255 seconds.
         */
        querier_timeout?: string;
        password?: string;
        /**
         * Restart IGMP.
         */
        restart?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        /**
         * Sets the robustness variable. Values can range from 1 to 7. The default is 2.
         */
        robustness?: string;
        timeout?: number | string;
        /**
         * Configure a source for static outgoing interface (OIF).
         */
        oif_source?: string;
        /**
         * Sets the frequency at which the software sends IGMP host query messages. Values can range from 1 to 18000 seconds. he default is 125 seconds.
         */
        query_interval?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Sets the response time advertised in IGMP queries. Values can range from 1 to 25 seconds. The default is 10 seconds.
         */
        query_mrt?: string;
        [k: string]: any;
      };
      /**
       * Configure the rollback feature on remote Nokia devices running the SR OS operating system.  this module provides a stateful implementation for managing the configuration of the rollback feature
       */
      sros_rollback?: {
        username?: string;
        provider?: {
          [k: string]: any;
        };
        ssh_keyfile?: string;
        /**
         * The I(local_max_checkpoints) argument configures the maximum number of rollback files that can be saved on the devices local compact flash.  Valid values for this argument are in the range of 1 to 50
         */
        local_max_checkpoints?: number | string;
        /**
         * Default: present
         *
         * The I(state) argument specifies the state of the configuration entries in the devices active configuration.  When the state value is set to C(true) the configuration is present in the devices active configuration.  When the state value is set to C(false) the configuration values are removed from the devices active configuration.
         */
        state?: "present" | "absent";
        /**
         * The I(rollback_location) specifies the location and filename of the rollback checkpoint files.   This argument supports any valid local or remote URL as specified in SR OS
         */
        rollback_location?: string;
        host?: string;
        /**
         * The I(rescue_location) specifies the location of the rescue file.  This argument supports any valid local or remote URL as specified in SR OS
         */
        rescue_location?: string;
        timeout?: number | string;
        /**
         * The I(remote_max_checkpoints) argument configures the maximum number of rollback files that can be transferred and saved to a remote location.  Valid values for this argument are in the range of 1 to 50
         */
        remote_max_checkpoints?: number | string;
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * This module allows to manage dns records on a univention corporate server (UCS). It uses the python API of the UCS to create a new object or edit it.
       */
      udm_dns_record?: {
        /**
         * Additional data for this record, e.g. ['a': '192.0.2.1']. Required if C(state=present).
         */
        data?: string;
        /**
         * Default: present
         *
         * Whether the dns record is present or not.
         */
        state?: string;
        /**
         * Define the record type. C(host_record) is a A or AAAA record, C(alias) is a CNAME, C(ptr_record) is a PTR record, C(srv_record) is a SRV record and C(txt_record) is a TXT record.
         */
        type?: string;
        /**
         * Name of the record, this is also the DNS record. E.g. www for www.example.com.
         */
        name?: string;
        /**
         * Corresponding DNS zone for this record, e.g. example.com.
         */
        zone?: string;
        [k: string]: any;
      };
      /**
       * Manage user accounts and user attributes.
       * For Windows targets, use the M(win_user) module instead.
       */
      user?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Execute vrouter-interface-add, vrouter-interface-remove, vrouter-interface-modify command.
       * You configure interfaces to vRouter services on a fabric, cluster, standalone switch or virtual network(VNET).
       */
      pn_vrouterif?: {
        /**
         * Specify if the NIC is enabled or not
         */
        pn_nic_enable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Provide login password if user is not root.
         */
        pn_clipassword?: string;
        /**
         * Specify if the interface is exclusive to the configuration. Exclusive means that other configurations cannot use the interface. Exclusive is specified when you configure the interface as span interface and allows higher throughput through the interface.
         */
        pn_exclusive?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify the type of NIC. Used for vrouter-interface remove/modify.
         */
        pn_nic_str?: string;
        /**
         * Specify the ID for the VRRP interface. The IDs on both vRouters must be the same IS number.
         */
        pn_vrrp_id?: number | string;
        /**
         * Specify a VRRP advertisement interval in milliseconds. The range is from 30 to 40950 with a default value of 1000.
         */
        pn_vrrp_adv_int?: string;
        /**
         * Specify the priority for the VRRP interface. This is a value between 1 (lowest) and 255 (highest).
         */
        pn_vrrp_priority?: number | string;
        /**
         * Specify an alias for the interface.
         */
        pn_alias?: string;
        /**
         * Specify a secondary MAC address for the interface.
         */
        pn_secondary_macs?: string;
        /**
         * Specify the name of the vRouter interface.
         */
        pn_vrouter_name: string;
        /**
         * Provide login username if user is not root.
         */
        pn_cliusername?: string;
        /**
         * Specify the IP address of the interface in x.x.x.x/n format.
         */
        pn_interface_ip: string;
        /**
         * State the action to perform. Use 'present' to add vrouter interface, 'absent' to remove vrouter interface and 'update' to modify vrouter interface.
         */
        state: "present" | "absent";
        /**
         * Specify the VLAN identifier. This is a value between 1 and 4092.
         */
        pn_vlan?: number | string;
        /**
         * Specify if the interface is management, data or span interface.
         */
        pn_interface?: "mgmt" | "data" | "span";
        /**
         * Specify a Layer 3 port for the interface.
         */
        pn_l3port?: string;
        /**
         * Specify the VXLAN identifier. This is a value between 1 and 16777215.
         */
        pn_vxlan?: number | string;
        /**
         * Target switch to run the cli on.
         */
        pn_cliswitch?: string;
        /**
         * Specify the DHCP method for IP address assignment.
         */
        pn_assignment?: "none" | "dhcp" | "dhcpv6" | "autov6";
        [k: string]: any;
      };
      /**
       * Create and Delete Topics/Subscriptions, Publish and pull messages on PubSub. See U(https://cloud.google.com/pubsub/docs) for an overview.
       */
      gcpubsub?: {
        service_account_email?: string;
        /**
         * List of dictionaries describing messages and attributes to be published.  Dictionary is in message(str):attributes(dict) format. Only message is required.
         */
        publish?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * GCP pubsub topic name.  Only the name, not the full path, is required.
         */
        topic: string;
        /**
         * Default: present
         *
         * State of the topic or queue (absent, present). Applies to the most granular resource. Remove the most granular resource.  If subcription is specified we remove it.  If only topic is specified, that is what is removed. Note that a topic can be removed without first removing the subscription.
         */
        state?: "absent" | "present";
        credentials_file?: string;
        project_id?: string;
        /**
         * Dictionary containing a subscripton name associated with a topic (required), along with optional ack_deadline, push_endpoint and pull. For pulling from a subscription, message_ack (bool), max_messages (int) and return_immediate are available as subfields. See subfields name, push_endpoint and ack_deadline for more information.
         */
        subscription?: {
          [k: string]: any;
        };
        [k: string]: any;
      };
      /**
       * Modify IP interface properties on Solaris/illumos systems.
       */
      ipadm_ifprop?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manipulate Rackspace Cloud Files Containers
       */
      rax_files?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This is the original Ansible module for managing the Docker container life cycle.
       * NOTE: Additional and newer modules are available. For the latest on orchestrating containers with Ansible visit our Getting Started with Docker Guide at U(https://github.com/ansible/ansible/blob/devel/docs/docsite/rst/guide_docker.rst).
       */
      docker?: {
        /**
         * Publish all exposed ports to the host interfaces.
         */
        publish_all_ports?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Allocate a pseudo-tty within the container.
         */
        tty?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Additional options to pass to the logging driver selected above. See Docker `log-driver <https://docs.docker.com/reference/logging/overview/>` documentation for more information. Requires docker >=1.7.0.
         */
        log_opt?: {
          [k: string]: any;
        };
        /**
         * Use insecure private registry by HTTP instead of HTTPS. Needed for docker-py >= 0.5.0.
         */
        insecure_registry?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * List of other containers to link within this container with an optional
         * alias. Use docker CLI-style syntax: C(redis:myredis).
         */
        links?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Container domain name.
         */
        domainname?: string;
        /**
         * Default: ${DOCKER_HOST} or unix://var/run/docker.sock
         *
         * URL of the host running the docker daemon. This will default to the env var DOCKER_HOST if unspecified.
         */
        docker_url?: string;
        /**
         * Container image used to match and launch containers.
         */
        image: string;
        /**
         * Set container labels. Requires docker >= 1.6 and docker-py >= 1.2.0.
         */
        labels?: {
          [k: string]: any;
        };
        /**
         * Default: None
         *
         * Set the PID namespace mode for the container (currently only supports 'host'). Requires docker-py >= 1.0.0 and docker >= 1.5.0
         */
        pid?: string;
        /**
         * Default: docker-py default remote API version
         *
         * Remote API version to use. This defaults to the current default as specified by docker-py.
         */
        docker_api_version?: string;
        /**
         * Default: 10
         *
         * How many seconds to wait for the container to stop before killing it.
         */
        stop_timeout?: number | string;
        /**
         * Default: ${DOCKER_CERT_PATH}/key.pem
         *
         * Path to the PEM-encoded key used to authenticate docker client. If specified tls_client_cert must be valid
         */
        tls_client_key?: string;
        /**
         * Pass in a path to a file with environment variable (FOO=BAR). If a key value is present in both explicitly presented (i.e. as 'env') and in the environment file, the explicit value will override. Requires docker-py >= 1.4.0.
         */
        env_file?: string;
        /**
         * Mount the container's root filesystem as read only
         */
        read_only?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Whether to use tls to connect to the docker server.  "no" means not to use tls (and ignore any other tls related parameters). "encrypt" means to use tls to encrypt the connection to the server.  "verify" means to also verify that the server's certificate is valid for the server (this both verifies the certificate against the CA and that the certificate was issued for that host. If this is unspecified, tls will only be used if one of the other tls options require it.
         */
        use_tls?: "no" | "encrypt" | "verify";
        /**
         * Remote API password.
         */
        password?: string;
        /**
         * Container hostname.
         */
        hostname?: string;
        /**
         * LXC configuration parameters, such as C(lxc.aa_profile:unconfined).
         */
        lxc_conf?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: ${DOCKER_CERT_PATH}/ca.pem
         *
         * Path to a PEM-encoded certificate authority to secure the Docker connection. This has no effect if use_tls is encrypt.
         */
        tls_ca_cert?: string;
        /**
         * Default: started
         *
         * Assert the container's desired state. "present" only asserts that the matching containers exist. "started" asserts that the matching containers both exist and are running, but takes no action if any configuration has changed. "reloaded" (added in Ansible 1.9) asserts that all matching containers are running and restarts any that have any images or configuration out of date. "restarted" unconditionally restarts (or starts) the matching containers. "stopped" and '"killed" stop and kill all matching containers. "absent" stops and then' removes any matching containers.
         */
        state?: "present" | "started" | "reloaded" | "restarted" | "stopped" | "killed" | "absent" | "running";
        /**
         * Default: ${DOCKER_CERT_PATH}/cert.pem
         *
         * Path to the PEM-encoded certificate used to authenticate docker client. If specified tls_client_key must be valid
         */
        tls_client_cert?: string;
        /**
         * Corresponds to ``--entrypoint`` option of ``docker run`` command and ``ENTRYPOINT`` directive of Dockerfile. Used to match and launch containers.
         */
        entrypoint?: string;
        /**
         * List of custom DNS servers for the container.
         */
        dns?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * List of names of containers to mount volumes from.
         */
        volumes_from?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Network mode for the launched container: bridge, none, container:<name|id>
         * or host. Requires docker >= 0.11.
         */
        net?: string;
        /**
         * Whether the container should run in privileged mode or not.
         */
        privileged?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Remote API username.
         */
        username?: string;
        /**
         * Username or UID to use within the container
         */
        docker_user?: string;
        /**
         * Dict of custom host-to-IP mappings to be defined in the container
         */
        extra_hosts?: {
          [k: string]: any;
        };
        /**
         * Default: json-file
         *
         * You can specify a different logging driver for the container than for the daemon. "json-file" Default logging driver for Docker. Writes JSON messages to file. docker logs command is available only for this logging driver. "none" disables any logging for the container. "syslog" Syslog logging driver for Docker. Writes log messages to syslog. docker logs command is not available for this logging driver. "journald" Journald logging driver for Docker. Writes log messages to "journald". "gelf" Graylog Extended Log Format (GELF) logging driver for Docker. Writes log messages to a GELF endpoint likeGraylog or Logstash. "fluentd" Fluentd logging driver for Docker. Writes log messages to "fluentd" (forward input). "awslogs" (added in 2.1) Awslogs logging driver for Docker. Writes log messages to AWS Cloudwatch Logs. If not defined explicitly, the Docker daemon's default ("json-file") will apply. Requires docker >= 1.6.0.
         */
        log_driver?: "json-file" | "none" | "syslog" | "journald" | "gelf" | "fluentd" | "awslogs";
        /**
         * List of additional container ports to expose for port mappings or links. If the port is already exposed using EXPOSE in a Dockerfile, you don't need to expose it again.
         */
        expose?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Keep stdin open after a container is launched.
         */
        stdin_open?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * RAM allocated to the container as a number of bytes or as a human-readable string like "512MB". Leave as "0" to specify no limit.
         */
        memory_limit?: string;
        /**
         * Default: Taken from docker_url
         *
         * A hostname to check matches what's supplied in the docker server's certificate.  If unspecified, the hostname is taken from the docker_url.
         */
        tls_hostname?: string;
        /**
         * Default: DockerHub
         *
         * Remote registry URL to pull images from.
         */
        registry?: string;
        /**
         * List of volumes to mount within the container
         * Use docker CLI-style syntax: C(/host:/container[:mode])
         * You can specify a read mode for the mount with either C(ro) or C(rw). Starting at version 2.1, SELinux hosts can additionally use C(z) or C(Z) mount options to use a shared or private label for the volume.
         */
        volumes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: True
         *
         * Enable detached mode to leave the container running in background. If disabled, fail unless the process exits cleanly.
         */
        detach?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        memory_swap?: number | string;
        /**
         * CPUs in which to allow execution. Requires docker-py >= 0.6.0.
         */
        cpu_set?: string;
        /**
         * Default: missing
         *
         * Control when container images are updated from the C(docker_url) registry. If "missing," images will be pulled only when missing from the host; if '"always," the registry will be checked for a newer version of the image' each time the task executes.
         */
        pull?: "missing" | "always";
        /**
         * Name used to match and uniquely name launched containers. Explicit names are used to uniquely identify a single container or to link among containers. Mutually exclusive with a "count" other than "1".
         */
        name?: string;
        /**
         * Pass a dict of environment variables to the container.
         */
        env?: {
          [k: string]: any;
        };
        /**
         * Default: KILL
         *
         * With the state "killed", you can alter the signal sent to the container.
         */
        signal?: string;
        /**
         * Add capabilities for the container. Requires docker-py >= 0.5.0.
         */
        cap_add?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Container restart policy.
         * The 'unless-stopped' choice is only available starting in Ansible 2.1 and for Docker 1.9 and above.
         */
        restart_policy?: "no" | "on-failure" | "always" | "unless-stopped";
        /**
         * Default: 1
         *
         * Number of matching containers that should be in the desired state.
         */
        count?: number | string;
        /**
         * List of host devices to expose to container
         */
        devices?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Remote API email.
         */
        email?: string;
        /**
         * Command used to match and launch containers.
         */
        command?: string;
        /**
         * Maximum number of times to restart a container. Leave as "0" for unlimited retries.
         */
        restart_policy_retry?: number | string;
        /**
         * Default: 60
         *
         * Docker daemon response timeout in seconds.
         */
        timeout?: number | string;
        debug?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Drop capabilities for the container. Requires docker-py >= 0.5.0.
         */
        cap_drop?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * List containing private to public port mapping specification. Use docker 'CLI-style syntax: C(8000), C(9000:8000), or C(0.0.0.0:9000:8000)' where 8000 is a container port, 9000 is a host port, and 0.0.0.0 is - a host interface. The container ports need to be exposed either in the Dockerfile or via the C(expose) option.
         */
        ports?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * ulimits, list ulimits with name, soft and optionally hard limit separated by colons. e.g. nofile:1024:2048 Requires docker-py >= 1.2.0 and docker >= 1.6.0
         */
        ulimits?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * CPU shares (relative weight). Requires docker-py >= 0.6.0.
         */
        cpu_shares?: number | string;
        [k: string]: any;
      };
      /**
       * Send notifications via telegram bot, to a verified group or user
       */
      telegram?: {
        /**
         * What message you wish to send.
         */
        msg: string;
        /**
         * Token identifying your telegram bot.
         */
        token: string;
        /**
         * Telegram group or user chat_id
         */
        chat_id: string;
        [k: string]: any;
      };
      /**
       * Configuring Centralized All-Active Gateways or Distributed Gateway for the VXLAN Network on HUAWEI CloudEngine devices.
       */
      ce_vxlan_gateway?: {
        /**
         * Specifies a VNI ID. Binds a VXLAN network identifier (VNI) to a virtual private network (VPN) instance. The value is an integer ranging from 1 to 16000000.
         */
        vpn_vni?: string;
        /**
         * Specifies a MAC address for a VBDIF interface. The value is in the format of H-H-H. Each H is a 4-digit hexadecimal number, such as C(00e0) or C(fc01). If an H contains less than four digits, 0s are added ahead. For example,  C(e0) is equal to C(00e0). A MAC address cannot be all 0s or 1s or a multicast MAC address.
         */
        vbdif_mac?: string;
        /**
         * Specifies the IPv4 address bound to a DFS group. The value is in dotted decimal notation.
         */
        dfs_source_ip?: string;
        /**
         * Specifies the UDP port number of the DFS group. The value is an integer that ranges from 1025 to 65535.
         */
        dfs_udp_port?: string;
        /**
         * Specifies the name of the VPN instance that is associated with the interface. The value is a string of 1 to 31 case-sensitive characters, spaces not supported. When double quotation marks are used around the string, spaces are allowed in the string. The value C(_public_) is reserved and cannot be used as the VPN instance name.
         */
        vbdif_bind_vpn?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        /**
         * Specifies the name of a VPN instance bound to a DFS group. The value is a string of 1 to 31 case-sensitive characters without spaces. If the character string is quoted by double quotation marks, the character string can contain spaces. The value C(_public_) is reserved and cannot be used as the VPN instance name.
         */
        dfs_source_vpn?: string;
        /**
         * Enable VLINK direct route on VBDIF interface.
         */
        arp_direct_route?: "enable" | "disable";
        /**
         * Full name of VBDIF interface, i.e. Vbdif100.
         */
        vbdif_name?: string;
        /**
         * Configure the IP address of an all-active gateway peer. The value is in dotted decimal notation.
         */
        dfs_peer_ip?: string;
        /**
         * Enable the distributed gateway function on VBDIF interface.
         */
        arp_distribute_gateway?: "enable" | "disable";
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        provider?: {
          [k: string]: any;
        };
        username?: string;
        /**
         * Specifies the ID of a DFS group. The value must be 1.
         */
        dfs_id?: string;
        /**
         * Specifies the name of the VPN instance that is associated with all-active gateway peer. The value is a string of 1 to 31 case-sensitive characters, spaces not supported. When double quotation marks are used around the string, spaces are allowed in the string. The value C(_public_) is reserved and cannot be used as the VPN instance name.
         */
        dfs_peer_vpn?: string;
        host?: string;
        /**
         * Specifies the name of a VPN instance. The value is a string of 1 to 31 case-sensitive characters, spaces not supported. When double quotation marks are used around the string, spaces are allowed in the string. The value C(_public_) is reserved and cannot be used as the VPN instance name.
         */
        vpn_instance?: string;
        password?: string;
        /**
         * Creates all-active gateways.
         */
        dfs_all_active?: "enable" | "disable";
        timeout?: number | string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Create or delete etherstubs on Solaris/illumos systems.
       */
      dladm_etherstub?: {
        /**
         * Default: present
         *
         * Create or delete Solaris/illumos etherstub.
         */
        state?: "present" | "absent";
        /**
         * Specifies that the etherstub is temporary. Temporary etherstubs do not persist across reboots.
         */
        temporary?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Etherstub name.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Manages SNMP community configuration on HUAWEI CloudEngine switches.
       */
      ce_snmp_community?: {
        username?: string;
        /**
         * Mib view name for notification.
         */
        notify_view?: string;
        /**
         * Unique name to identify the community.
         */
        community_name?: string;
        /**
         * Mib view name.
         */
        community_mib_view?: string;
        /**
         * Security level indicating whether to use authentication and encryption.
         */
        security_level?: "noAuthNoPriv" | "authentication" | "privacy";
        /**
         * Mib view name for read.
         */
        read_view?: string;
        /**
         * Access control list number.
         */
        acl_number?: string;
        /**
         * Unique name to identify the SNMPv3 group.
         */
        group_name?: string;
        /**
         * Mib view name for write.
         */
        write_view?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Access right read or write.
         */
        access_right?: "read" | "write";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        host?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Create, update and delete blob containers and blob objects. Use to upload a file and store it as a blob object, or download a blob object to a file.
       */
      azure_rm_storageblob?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        };
      /**
       * Manages VPN instance of HUAWEI CloudEngine switches.
       */
      ce_vrf?: {
        username?: string;
        /**
         * Description of the vrf, the string length is 1 - 242 .
         */
        description?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        host?: string;
        /**
         * VPN instance, the length of vrf name is 1 - 31, i.e. "test", but can not be C(_public_).
         */
        vrf: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Sets or updates the password for a storage array.  When the password is updated on the storage array, it must be updated on the SANtricity Web Services proxy. Note, all storage arrays do not have a Monitor or RO role.
       */
      netapp_e_auth?: {
        /**
         * the identifier of the storage array in the Web Services Proxy.
         */
        ssid?: string;
        /**
         * The full API url.
         * Example: http://ENDPOINT:8080/devmgr/v2
         * This can optionally be set via an environment variable, API_URL
         */
        api_url: string;
        /**
         * The password you would like to set. Cannot be more than 30 characters.
         */
        new_password: string;
        /**
         * The password used to authenticate against the API
         * This can optionally be set via an environment variable, API_PASSWORD
         */
        api_password?: string;
        /**
         * The current admin password. This is not required if the password hasn't been set before.
         */
        current_password?: string;
        /**
         * The username used to authenticate against the API
         * This can optionally be set via an environment variable, API_USERNAME
         */
        api_username?: string;
        /**
         * Default: True
         *
         * Should https certificates be validated?
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Boolean value on whether to update the admin password. If set to false then the RO account is updated.
         */
        set_admin:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The name of the storage array. Note that if more than one storage array with this name is detected, the task will fail and you'll have to use the ID instead.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Gather facts from ZFS dataset properties.
       */
      zfs_facts?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * allows you to create new instances, either from scratch or an image, in addition to deleting or stopping instances on the oVirt/RHEV platform
       */
      ovirt?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Manage registration and subscription to the Red Hat Subscription Management entitlement platform using the C(subscription-manager) command
       */
      redhat_subscription?: {
        /**
         * Default: Current value from C(/etc/rhsm/rhsm.conf) is the default
         *
         * Specify an alternative Red Hat Subscription Management or Sat6 server
         */
        server_hostname?: string;
        /**
         * access.redhat.com or Sat6  username
         */
        username?: string;
        /**
         * Name of the system to register, defaults to the hostname
         */
        consumer_name?: string;
        /**
         * Specify subscription pool IDs to consume. Prefer over I(pool) when possible as it is much faster.
         * A pool ID may be specified as a C(string) - just the pool ID (ex. C(0123456789abcdef0123456789abcdef)),
         * or as a C(dict) with the pool ID as the key, and a quantity as the value (ex.
         * C(0123456789abcdef0123456789abcdef: 2). If the quantity is provided, it is used to consume multiple
         * entitlements from a pool (the pool must support this). Mutually exclusive with I(pool).
         *
         */
        pool_ids?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The type of unit to register, defaults to system
         */
        consumer_type?: string;
        /**
         * Organization ID to use in conjunction with activationkey
         */
        org_id?: string;
        /**
         * Default: Current value from C(/etc/rhsm/rhsm.conf) is the default
         *
         * Specify a HTTP proxy hostname
         */
        server_proxy_hostname?: string;
        /**
         * References an existing consumer ID to resume using a previous registration
         * for this system. If the  system's identity certificate is lost or corrupted,
         * this option allows it to resume using its previous identity and subscriptions.
         * The default is to not specify a consumer ID so a new ID is created.
         *
         */
        consumer_id?: string;
        /**
         * Register with a specific environment in the destination org. Used with Red Hat Satellite 6.x or Katello
         */
        environment?: string;
        /**
         * Register the system even if it is already registered
         */
        force_register?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * whether to register and subscribe (C(present)), or unregister (C(absent)) a system
         */
        state?: "present" | "absent";
        /**
         * Default: Current value from C(/etc/rhsm/rhsm.conf) is the default
         *
         * Specify a user for HTTP proxy with basic authentication
         */
        server_proxy_user?: string;
        /**
         * Upon successful registration, auto-consume available subscriptions
         */
        autosubscribe?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: Current value from C(/etc/rhsm/rhsm.conf) is the default
         *
         * Enable or disable https server certificate verification when connecting to C(server_hostname)
         */
        server_insecure?: string;
        /**
         * supply an activation key for use with registration
         */
        activationkey?: string;
        /**
         * Default: Current value from C(/etc/rhsm/rhsm.conf) is the default
         *
         * Specify a password for HTTP proxy with basic authentication
         */
        server_proxy_password?: string;
        /**
         * access.redhat.com or Sat6 password
         */
        password?: string;
        /**
         * Default: Current value from C(/etc/rhsm/rhsm.conf) is the default
         *
         * Specify CDN baseurl
         */
        rhsm_baseurl?: string;
        /**
         * Default: ^$
         *
         * Specify a subscription pool name to consume.  Regular expressions accepted. Use I(pool_ids) instead if
         * possible, as it is much faster. Mutually exclusive with I(pool_ids).
         *
         */
        pool?: string;
        /**
         * Default: Current value from C(/etc/rhsm/rhsm.conf) is the default
         *
         * Specify a HTTP proxy port
         */
        server_proxy_port?: string;
        [k: string]: any;
      };
      /**
       * This module allows a server team to provision server network ports for new servers without having to access Arista CVP or asking the network team to do it for them. Provide the information for connecting to CVP, switch rack, port the new server is connected to, optional vlan, and an action and the module will apply the configuration to the switch port via CVP. Actions are add (applies template config to port), remove (defaults the interface config) and show (returns the current port config).
       */
      cv_server_provision?: {
        /**
         * The user that will be used to connect to CVP for making API calls.
         */
        username: string;
        /**
         * Default: None
         *
         * The vlan that should be applied to the port for this server. This parameter is dependent on a proper template that supports single vlan provisioning with it. If a port vlan is specified by the template specified does not support this the module will exit out with no changes. If a template is specified that requires a port vlan but no port vlan is specified the module will exit out with no changes.
         */
        port_vlan?: string;
        /**
         * Default: https
         *
         * The protocol to use when making API calls to CVP. CVP defaults to https and newer versions of CVP no longer support http.
         */
        protocol?: "https" | "http";
        /**
         * The physical port number on the switch that the new server is connected to.
         */
        switch_port: string;
        /**
         * The hostname or identifier for the server that is having it's switch port provisioned.
         */
        server_name: string;
        /**
         * Default: None
         *
         * The port number to use when making API calls to the CVP node. This will default to the default port for the specified protocol. Port 80 for http and port 443 for https.
         */
        port?: string;
        /**
         * The hostname or IP address of the CVP node being connected to.
         */
        host: string;
        /**
         * A path to a Jinja formatted template file that contains the configuration block that will be applied to the specified switch port. This template will have variable fields replaced by the module before being applied to the switch configuration.
         */
        template?: string;
        /**
         * Flag that determines whether or not the module will execute the CVP task spawned as a result of changes to a switch configlet. When an add or remove action is taken which results in a change to a switch configlet, CVP will spawn a task that needs to be executed for the configuration to be applied to the switch. If this option is True then the module will determined the task number created by the configuration change, execute it and wait for the task to complete. If the option is False then the task will remain in the Pending state in CVP for a network administrator to review and execute.
         */
        auto_run?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: show
         *
         * The action for the module to take. The actions are add, which applies the specified template config to port, remove, which defaults the specified interface configuration, and show, which will return the current port configuration with no changes.
         */
        action?: "show" | "add" | "remove";
        /**
         * The password of the user that will be used to connect to CVP for API calls.
         */
        password: string;
        /**
         * The hostname of the switch is being configured for the server being provisioned.
         */
        switch_name: string;
        [k: string]: any;
      };
      /**
       * When the group does not exists in Gitlab, it will be created.
       * When the group does exists and state=absent, the group will be deleted.
       */
      gitlab_group?: {
        [k: string]: any;
      };
      /**
       * Create and clear (delete) a silence entries via the Sensu API for subscriptions and checks.
       */
      sensu_silence?: {
        /**
         * Specifies the entity responsible for this entry.
         */
        creator?: string;
        /**
         * Default: http://127.0.01:4567
         *
         * Specifies the URL of the Sensu monitoring host server.
         */
        url?: string;
        /**
         * If specified as true, the silence entry will be automatically cleared once the condition it is silencing is resolved.
         */
        expire_on_resolve?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * If specified, this free-form string is used to provide context or rationale for the reason this silence entry was created.
         */
        reason?: string;
        /**
         * Default: present
         *
         * Specifies to create or clear (delete) a silence entry via the Sensu API
         */
        state?: "present" | "absent";
        /**
         * If specified, the silence entry will be automatically cleared after this number of seconds.
         */
        expire?: string;
        /**
         * Specifies the check which the silence entry applies to.
         */
        check?: string;
        /**
         * Specifies the subscription which the silence entry applies to.
         * To create a silence entry for a client append C(client:) to client name. Example - C(client:server1.example.dev)
         */
        subscription: string;
        [k: string]: any;
      };
      /**
       * Create or Delete a Kinesis Stream.
       * Update the retention period of a Kinesis Stream.
       * Update Tags on a Kinesis Stream.
       */
      kinesis_stream?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages VTP password configuration.
       */
      nxos_vtp_password?: {
        username?: string;
        /**
         * VTP password
         */
        vtp_password?: string;
        ssh_keyfile?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource
         */
        state?: "present" | "absent";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Create or delete AWS SQS queues.
       * Update attributes on existing queues.
       */
      sqs_queue?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module provides management of FortiOS Devices configuration.
       */
      fortios_config?: {
        username?: string;
        /**
         * The I(src) argument provides a path to the configuration template to load into the remote device.
         */
        src?: string;
        config_file?: string;
        file_mode?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        backup_path?: string;
        /**
         * Only for partial backup, you can restrict by giving expected configuration path (ex. firewall address).
         */
        filter?: string;
        host?: string;
        backup_filename?: string;
        timeout?: number | string;
        password?: string;
        backup?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        vdom?: string;
        [k: string]: any;
      };
      /**
       * Manage s3 bucket lifecycle rules in AWS
       */
      s3_lifecycle?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add, Update or Remove ports from an OpenStack cloud. A I(state) of 'present' will ensure the port is created or updated if required.
       */
      os_port?: {
        /**
         * Network ID or name this port belongs to.
         */
        network?: string;
        /**
         * Default: None
         *
         * Allowed address pairs list.  Allowed address pairs are supported with dictionary structure. e.g.  allowed_address_pairs: - ip_address: 10.1.0.12 mac_address: ab:cd:ef:12:34:56 - ip_address: ...
         */
        allowed_address_pairs?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        /**
         * Default: None
         *
         * Extra dhcp options to be assigned to this port.  Extra options are supported with dictionary structure. e.g.  extra_dhcp_opts: - opt_name: opt name1 opt_value: value1 - opt_name: ...
         */
        extra_dhcp_opts?: string;
        /**
         * Default: None
         *
         * Sets admin state.
         */
        admin_state_up?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: None
         *
         * The ID of the entity that uses this port.
         */
        device_owner?: string;
        /**
         * Do not associate a security group with this port.
         */
        no_security_groups?: string;
        /**
         * Default: None
         *
         * MAC address of this port.
         */
        mac_address?: string;
        /**
         * Default: None
         *
         * Device ID of device using this port.
         */
        device_id?: string;
        /**
         * Default: None
         *
         * Desired IP and/or subnet for this port.  Subnet is referenced by subnet_id and IP is referenced by ip_address.
         */
        fixed_ips?: string;
        /**
         * Default: None
         *
         * Security group(s) ID(s) or name(s) associated with the port (comma separated string or YAML list)
         */
        security_groups?: string;
        /**
         * Default: None
         *
         * Name that has to be given to the port.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Manages SELinux network port type definitions.
       */
      seport?: {
        /**
         * Default: True
         *
         * Reload SELinux policy after commit.
         */
        reload?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * SELinux type for the specified port.
         */
        setype: string;
        /**
         * Protocol for the specified port.
         */
        proto: "tcp" | "udp";
        /**
         * Default: present
         *
         * Desired boolean value.
         */
        state: "present" | "absent";
        /**
         * Ports or port ranges, separated by a comma
         */
        ports: string;
        [k: string]: any;
      };
      /**
       * Add, modify and delete an IPA host-group using IPA API
       */
      ipa_hostgroup?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Send a message to typetalk using typetalk API ( http://developers.typetalk.in/ )
       */
      typetalk?: {
        /**
         * message body
         */
        msg: string;
        /**
         * topic id to post message
         */
        topic: number | string;
        /**
         * OAuth2 client ID
         */
        client_id: string;
        /**
         * OAuth2 client secret
         */
        client_secret: string;
        [k: string]: any;
      };
      /**
       * Add or remove PostgreSQL databases from a remote host.
       */
      postgresql_db?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manages Layer 3 attributes for IPv4 and IPv6 interfaces on HUAWEI CloudEngine switches.
       */
      ce_ip_interface?: {
        username?: string;
        /**
         * IPv4 or IPv6 Address.
         */
        addr?: string;
        /**
         * Subnet mask for IPv4 or IPv6 Address in decimal format.
         */
        mask?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Default: main
         *
         * Specifies an address type. The value is an enumerated type. main, primary IP address. sub, secondary IP address.
         */
        ipv4_type?: "main" | "sub";
        host?: string;
        /**
         * Default: v4
         *
         * IP address version.
         */
        version?: "v4" | "v6";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Full name of interface, i.e. 40GE1/0/22, vlanif10.
         */
        interface: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Fetches a file from a URL and saves it locally.
       * For non-Windows targets, use the M(get_url) module instead.
       */
      win_get_url?: {
        /**
         * Basic authentication password.
         */
        url_password?: string;
        /**
         * Default: yes
         *
         * If C(yes), will always download the file. If C(no), will only download the file if it does not exist or the remote file has been modified more recently than the local file.
         * This works by sending an http HEAD request to retrieve last modified time of the requested resource, so for this to work, the remote web server must support HEAD requests.
         */
        force?: string;
        /**
         * Default: yes
         *
         * If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.
         */
        use_proxy?: string;
        /**
         * Add custom HTTP headers to a request (as a dictionary).
         */
        headers?: string;
        /**
         * The full URL of a file to download.
         */
        url?: string;
        /**
         * Default: no
         *
         * This option is deprecated since v2.4, please use C(validate_certs) instead.
         * If C(yes), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        skip_certificate_validation?: string;
        /**
         * The full URL of the proxy server to download through.
         */
        proxy_url?: string;
        /**
         * Proxy authentication password.
         */
        proxy_password?: string;
        /**
         * The location to save the file at the URL.
         * Be sure to include a filename and extension as appropriate.
         */
        dest?: string;
        /**
         * Proxy authentication username.
         */
        proxy_username?: string;
        /**
         * Default: 10
         *
         * Timeout in seconds for URL request.
         */
        timeout?: string;
        /**
         * Basic authentication username.
         */
        url_username?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         * If C(skip_certificate_validation) was set, it overrides this option.
         */
        validate_certs?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of LLDP service configuration on network devices.
       */
      net_lldp?: {
        neighbor_down_fib_accelerate?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        confederation_peers?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        confederation_id?: string;
        event_history_cli?: "true" | "false" | "default" | "size_small" | "size_medium" | "size_large" | "size_disable";
        event_history_periodic?:
          | "true"
          | "false"
          | "default"
          | "size_small"
          | "size_medium"
          | "size_large"
          | "size_disable";
        cluster_id?: string;
        shutdown?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        timer_bgp_hold?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        bestpath_aspath_multipath_relax?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        graceful_restart_timers_stalepath_time?: string;
        maxas_limit?: string;
        graceful_restart_timers_restart?: string;
        isolate?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        timer_bgp_keepalive?: string;
        bestpath_cost_community_ignore?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        fast_external_fallover?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * State of the LLDP service configuration.
         */
        state?: "present" | "absent";
        disable_policy_batching?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        disable_policy_batching_ipv6_prefix_list?: string;
        suppress_fib_pending?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        bestpath_med_missing_as_worst?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        router_id?: string;
        timer_bestpath_limit?: string;
        bestpath_compare_neighborid?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        provider?: {
          [k: string]: any;
        };
        local_as?: string;
        bestpath_always_compare_med?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        host?: string;
        disable_policy_batching_ipv4_prefix_list?: string;
        vrf?: string;
        graceful_restart_helper?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        log_neighbor_changes?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        asn: string;
        event_history_events?: "true" | "false" | "defaultsize_small" | "size_medium" | "size_large" | "size_disable";
        event_history_detail?:
          | "true"
          | "false"
          | "default"
          | "size_small"
          | "size_medium"
          | "size_large"
          | "size_disable";
        ssh_keyfile?: string;
        graceful_restart?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        flush_routes?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        enforce_first_as?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        bestpath_med_non_deterministic?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        username?: string;
        reconnect_interval?: string;
        timeout?: number | string;
        bestpath_med_confed?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        bestpath_compare_routerid?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * maintains ec2 key pairs. This module has a dependency on python-boto >= 2.5
       */
      ec2_key?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create, update, restart and delete networks.
       */
      cs_network?: {
        /**
         * Domain the network is related to.
         */
        domain?: string;
        /**
         * The ending IPv6 address of the network belongs to.
         * If not specified, value of C(start_ipv6) is used.
         * Only considered on create.
         */
        end_ipv6?: string;
        api_http_method?: "get" | "post";
        /**
         * The gateway of the network.
         * Required for shared networks and isolated networks when it belongs to a VPC.
         * Only considered on create.
         */
        gateway?: string;
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_url?: string;
        /**
         * Name of the zone in which the network should be deployed.
         * If not set, default zone is used.
         */
        zone?: string;
        /**
         * The beginning IPv6 address of the network belongs to.
         * Only considered on create.
         */
        start_ipv6?: string;
        /**
         * CIDR of IPv6 network, must be at least /64.
         * Only considered on create.
         */
        cidr_ipv6?: string;
        /**
         * Default: present
         *
         * State of the network.
         */
        state?: "present" | "absent" | "restarted";
        /**
         * The ending IPv4 address of the network belongs to.
         * If not specified, value of C(start_ip) is used.
         * Only considered on create.
         */
        end_ip?: string;
        api_key?: string;
        /**
         * The ID or VID of the network.
         */
        vlan?: string;
        api_secret?: string;
        api_timeout?: number | string;
        /**
         * Cleanup old network elements.
         * Only considered on C(state=restarted).
         */
        clean_up?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The netmask of the network.
         * Required for shared networks and isolated networks when it belongs to a VPC.
         * Only considered on create.
         */
        netmask?: string;
        /**
         * Name of the offering for the network.
         * Required if C(state=present).
         */
        network_offering?: string;
        /**
         * Name of the VPC of the network.
         */
        vpc?: string;
        /**
         * The beginning IPv4 address of the network belongs to.
         * Only considered on create.
         */
        start_ip?: string;
        /**
         * The gateway of the IPv6 network.
         * Required for shared networks.
         * Only considered on create.
         */
        gateway_ipv6?: string;
        /**
         * Display text of the network.
         * If not specified, C(name) will be used as C(display_text).
         */
        display_text?: string;
        /**
         * The isolated private VLAN for this network.
         */
        isolated_pvlan?: string;
        /**
         * Account the network is related to.
         */
        account?: string;
        /**
         * Default: account
         *
         * Access control type.
         * Only considered on create.
         */
        acl_type?: "account" | "domain";
        /**
         * Name (case sensitive) of the network.
         */
        name: string;
        api_region?: string;
        /**
         * Name of the project the network to be deployed in.
         */
        project?: string;
        /**
         * The network domain.
         */
        network_domain?: string;
        [k: string]: any;
      };
      /**
       * This modules launches an ephemeral I(accelerate) daemon on the remote node which Ansible can use to communicate with nodes at high speed.
       * The daemon listens on a configurable port for a configurable amount of time.
       * Fireball mode is AES encrypted
       */
      accelerate?: {
        /**
         * Default: 300
         *
         * The number of seconds the socket will wait for data. If none is received when the timeout value is reached, the connection will be closed.
         */
        timeout?: number | string;
        /**
         * The listener daemon on the remote host will bind to the ipv6 localhost socket if this parameter is set to true.
         */
        ipv6?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        debug?: number | string;
        password: string;
        /**
         * Default: 30
         *
         * The I(accelerate) listener daemon is started on nodes and will stay around for this number of minutes before turning itself off.
         */
        minutes?: number | string;
        /**
         * Default: 5099
         *
         * TCP port for the socket connection
         */
        port?: number | string;
        /**
         * When enabled, the daemon will open a local socket file which can be used by future daemon executions to upload a new key to the already running daemon, so that multiple users can connect using different keys. This access still requires an ssh connection as the uid for which the daemon is currently running.
         */
        multi_key?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This will configure both exec and motd banners on remote devices running Cisco IOS XR. It allows playbooks to add or remote banner text from the active running configuration.
       */
      iosxr_banner?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * The banner text that should be present in the remote device running configuration. This argument accepts a multiline string, with no empty lines. Requires I(state=present).
         */
        text?: string;
        /**
         * Default: present
         *
         * Specifies whether or not the configuration is present in the current devices active running configuration.
         */
        state?: "present" | "absent";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        /**
         * Specifies which banner that should be configured on the remote device.
         */
        banner: "login" | "motd";
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Manage Open vSwitch bridges
       */
      openvswitch_bridge?: {
        /**
         * Name of bridge to manage
         */
        bridge: string;
        /**
         * Default: present
         *
         * Whether the bridge should exist
         */
        state?: "present" | "absent";
        /**
         * Default: None
         *
         * Set bridge fail-mode. The default value (None) is a No-op.
         */
        fail_mode?: string;
        /**
         * Default: None
         *
         * A dictionary of external-ids. Omitting this parameter is a No-op. To  clear all external-ids pass an empty value.
         */
        external_ids?: {
          [k: string]: any;
        };
        /**
         * Default: 5
         *
         * How long to wait for ovs-vswitchd to respond
         */
        timeout?: number | string;
        [k: string]: any;
      };
      /**
       * Create/delete a DNS record in DigitalOcean.
       */
      digital_ocean_domain?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Provides an interface to manage Network Set resources. Can create, update, or delete.
       */
      oneview_network_set?: {
        username?: string;
        image_streamer_hostname?: string;
        hostname?: string;
        config?: string;
        validate_etag?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * Indicates the desired state for the Network Set resource. - C(present) will ensure data properties are compliant with OneView. - C(absent) will remove the resource from OneView, if it exists.
         */
        state?: "present" | "absent";
        password?: string;
        /**
         * List with the Network Set properties.
         */
        data: {
          [k: string]: any;
        };
        api_version?: number | string;
        [k: string]: any;
      };
      /**
       * Configure management settings of device
       */
      panos_mgtconfig?: {
        /**
         * Default: admin
         *
         * username for authentication
         */
        username?: string;
        /**
         * Default: None
         *
         * address of secondary DNS server
         */
        dns_server_secondary?: string;
        /**
         * Default: None
         *
         * address of primary Panorama server
         */
        panorama_primary?: string;
        /**
         * Default: None
         *
         * address of primary DNS server
         */
        dns_server_primary?: string;
        /**
         * Default: None
         *
         * address of secondary Panorama server
         */
        panorama_secondary?: string;
        /**
         * Default: True
         *
         * commit if changed
         */
        commit?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * password for authentication
         */
        password: string;
        /**
         * IP address (or hostname) of PAN-OS device
         */
        ip_address: string;
        [k: string]: any;
      };
      /**
       * Create a static address group object in the firewall used for policy rules.
       */
      panos_sag?: {
        /**
         * Default: admin
         *
         * username for authentication
         */
        username?: string;
        /**
         * password for authentication
         */
        password: string;
        /**
         * Default: None
         *
         * - The name of the Panorama device group. The group must exist on Panorama. If device group is not defined it is assumed that we are contacting a firewall.
         *
         */
        devicegroup?: string;
        /**
         * The purpose / objective of the static Address Group
         */
        description?: string;
        /**
         * Tags to be associated with the address group
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * name of the dynamic address group
         */
        sag_name: string;
        sag_match_filter?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: True
         *
         * commit if changed
         */
        commit?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The operation to perform Supported values are I(add)/I(list)/I(delete).
         */
        operation: "add" | "list" | "delete";
        /**
         * API key that can be used instead of I(username)/I(password) credentials.
         */
        api_key?: string;
        /**
         * IP address (or hostname) of PAN-OS device
         */
        ip_address: string;
        [k: string]: any;
      };
      /**
       * List Ansible Tower jobs. See U(https://www.ansible.com/tower) for an overview.
       */
      tower_job_list?: {
        /**
         * Only list jobs with this status.
         */
        status?: string;
        /**
         * Query used to further filter the list of jobs. {"foo":"bar"} will be passed at ?foo=bar
         */
        query?: string;
        /**
         * Page number of the results to fetch.
         */
        page?: string;
        /**
         * Fetch all the pages and return a single result.
         */
        all_pages?: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure AuthProfile object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_authprofile?: {
        username?: string;
        /**
         * Http user authentication params.
         */
        http?: {
          [k: string]: any;
        };
        /**
         * Uuid of the auth profile.
         */
        uuid?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * User defined description for the object.
         */
        description?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        controller?: string;
        /**
         * Tacacs+ settings.
         */
        tacacs_plus?: {
          [k: string]: any;
        };
        /**
         * Ldap server and directory settings.
         */
        ldap?: {
          [k: string]: any;
        };
        tenant?: string;
        password?: string;
        /**
         * Type of the auth profile.
         * Enum options - AUTH_PROFILE_LDAP, AUTH_PROFILE_TACACS_PLUS.
         */
        type: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Name of the auth profile.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module creates, deletes or modifies filesystems on Infinibox.
       */
      infini_fs?: {
        /**
         * Default: present
         *
         * Creates/Modifies file system when present or removes when absent.
         */
        state?: string;
        /**
         * File system name.
         */
        name?: string;
        /**
         * Pool that will host file system.
         */
        pool?: string;
        /**
         * File system size in MB, GB or TB units. See examples.
         */
        size?: string;
        [k: string]: any;
      };
      /**
       * Add or remove MSSQL databases from a remote host.
       */
      mssql_db?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manage BIG-IP system database variables
       */
      bigip_sys_db?: {
        /**
         * Default: present
         *
         * The state of the variable on the system. When C(present), guarantees that an existing variable is set to C(value). When C(reset) sets the variable back to the default value. At least one of value and state C(reset) are required.
         */
        state?: string;
        /**
         * The value to set the key to. At least one of value and state C(reset) are required.
         */
        value?: string;
        /**
         * The database variable to manipulate.
         */
        key?: string;
        [k: string]: any;
      };
      /**
       * Retrieve facts about one or more oVirt/RHV external providers.
       */
      ovirt_external_provider_facts?: {
        /**
         * Type of the external provider.
         */
        type?: string;
        /**
         * Name of the external provider, can be used as glob expression.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Create or Remove virtual machines from Openstack.
       */
      nova_compute?: {
        /**
         * Default: None
         *
         * Name of the availability zone
         */
        availability_zone?: string;
        /**
         * Text to use to filter image names, for the case, such as HP, where there are multiple image names matching the common identifying portions. image_exclude is a negative match filter - it is text that may not exist in the image name. Defaults to "(deprecated)"
         */
        image_exclude?: string;
        /**
         * Text to use to filter flavor names, for the case, such as Rackspace, where there are multiple flavors that have the same ram count. flavor_include is a positive match filter - it must exist in the flavor name.
         */
        flavor_include?: string;
        /**
         * Default: None
         *
         * A list of key value pairs that should be provided as a metadata to the new VM
         */
        meta?: {
          [k: string]: any;
        };
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone url for authentication
         */
        auth_url?: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Default: 180
         *
         * The amount of time the module should wait for the VM to get into active state
         */
        wait_for?: string;
        /**
         * Default: no
         *
         * Should a floating ip be auto created and assigned
         */
        auto_floating_ip?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * Arbitrary key/value pairs to the scheduler for custom use
         */
        scheduler_hints?: {
          [k: string]: any;
        };
        /**
         * Default: None
         *
         * A list of network id's to which the VM's interface should be attached
         */
        nics?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * list of valid floating IPs that pre-exist to assign to this node
         */
        floating_ips?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: 1
         *
         * The minimum amount of ram in MB that the flavor in which the new VM has to be created must have. Mutually exclusive with flavor_id
         */
        flavor_ram?: number | string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: None
         *
         * The name of the security group to which the VM should be added
         */
        security_groups?: string;
        /**
         * Default: no
         *
         * Whether to boot the server with config drive enabled
         */
        config_drive?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * Name of the region
         */
        region_name?: string;
        /**
         * Default: None
         *
         * The key pair name to be used when creating a VM
         */
        key_name?: string;
        /**
         * Default: None
         *
         * The name of the base image to boot. Mutually exclusive with image_id
         */
        image_name?: string;
        /**
         * Default: None
         *
         * Opaque blob of data which is made available to the instance
         */
        user_data?: string;
        /**
         * Default: None
         *
         * The id of the base image to boot. Mutually exclusive with image_name
         */
        image_id?: string;
        /**
         * Default: yes
         *
         * Password of login user
         */
        login_password: string;
        /**
         * Default: yes
         *
         * If the module should wait for the VM to be created.
         */
        wait?: "yes" | "no";
        /**
         * Default: None
         *
         * Name that has to be given to the instance
         */
        name: string;
        /**
         * Default: yes
         *
         * The tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: 1
         *
         * The id of the flavor in which the new VM has to be created. Mutually exclusive with flavor_ram
         */
        flavor_id?: string;
        /**
         * Default: None
         *
         * list of floating IP pools from which to choose a floating IP
         */
        floating_ip_pools?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        [k: string]: any;
      };
      /**
       * Manages MTU settings on Nexus switch.
       */
      nxos_mtu?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * System jumbo MTU. Must be an even number between 576 and 9216.
         */
        sysmtu?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * MTU for a specific interface. Must be an even number between 576 and 9216.
         */
        mtu?: string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Full name of interface, i.e. Ethernet1/1.
         */
        interface?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Create, update or destroy host groups on a NetApp E-Series storage array.
       */
      netapp_e_hostgroup?: {
        /**
         * specify this when you need to update the name of a host group
         */
        new_name?: string;
        /**
         * The ID of the array to manage (as configured on the web services proxy).
         */
        ssid: string;
        /**
         * The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_password: string;
        /**
         * The name of the host group to manage. Either this or C(id_num) must be supplied.
         */
        name?: string;
        /**
         * Whether the specified host group should exist or not.
         */
        state: "present" | "absent";
        hosts?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_username: string;
        /**
         * Default: True
         *
         * Should https certificates be validated?
         */
        validate_certs?: string;
        /**
         * The id number of the host group to manage. Either this or C(name) must be supplied.
         */
        id?: string;
        /**
         * The url to the SANtricity WebServices Proxy or embedded REST API.
         */
        api_url: string;
        [k: string]: any;
      };
      /**
       * Manage firewall with UFW.
       */
      ufw?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages applying ACLs to interfaces on HUAWEI CloudEngine switches.
       */
      ce_acl_interface?: {
        username?: string;
        /**
         * Direction ACL to be applied in on the interface.
         */
        direction: "inbound" | "outbound";
        /**
         * ACL number or name. For a numbered rule group, the value ranging from 2000 to 4999. For a named rule group, the value is a string of 1 to 32 case-sensitive characters starting with a letter, spaces not supported.
         */
        acl_name: string;
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Interface name. Only support interface full name, such as "40GE2/0/1".
         */
        interface: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Allows the management of Katello resources inside your Foreman server
       */
      katello?: {
        /**
         * Username on Foreman server
         */
        username: string;
        /**
         * URL of Foreman server
         */
        server_url: string;
        /**
         * The Foreman resource that the action will be performed on (e.g. organization, host)
         */
        entity: string;
        verify_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Parameters associated to the entity resource to set or edit in dictionary format (e.g. name, description)
         */
        params: {
          [k: string]: any;
        };
        action?: string;
        /**
         * Password for user accessing Foreman server
         */
        password: string;
        [k: string]: any;
      };
      /**
       * Manage gslb site entities in Netscaler.
       */
      netscaler_gslb_site?: {
        /**
         * The naptr replacement suffix configured here will be used to construct the naptr replacement field in NAPTR record.
         * Minimum length = 1
         */
        naptrreplacementsuffix?: string;
        /**
         * Parent site of the GSLB site, in a parent-child topology.
         */
        parentsite?: string;
        /**
         * Exchange, with other GSLB sites, network metrics such as round-trip time (RTT), learned from communications with various local DNS (LDNS) servers used by clients. RTT information is used in the dynamic RTT load balancing method, and is exchanged every 5 seconds.
         */
        nwmetricexchange?: "enabled" | "disabled";
        /**
         * Cluster IP address. Specify this parameter to connect to the remote cluster site for GSLB auto-sync. Note: The cluster IP address is defined when creating the cluster.
         */
        clip?: string;
        /**
         * Name for the GSLB site. Must begin with an ASCII alphanumeric or underscore C(_) character, and must contain only ASCII alphanumeric, underscore C(_), hash C(#), period C(.), space C( ), colon C(:), at C(@), equals C(=), and hyphen C(-) characters. Cannot be changed after the virtual server is created.
         * Minimum length = 1
         */
        sitename?: string;
        /**
         * Type of site to create. If the type is not specified, the appliance automatically detects and sets the type on the basis of the IP address being assigned to the site. If the specified site IP address is owned by the appliance (for example, a MIP address or SNIP address), the site is a local site. Otherwise, it is a remote site.
         */
        sitetype?: "REMOTE" | "LOCAL";
        save_config?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Exchange persistent session entries with other GSLB sites every five seconds.
         */
        sessionexchange?: "enabled" | "disabled";
        state?: "present" | "absent";
        /**
         * IP address to be used to globally access the remote cluster when it is deployed behind a NAT. It can be same as the normal cluster IP address.
         */
        publicclip?: string;
        /**
         * Public IP address for the local site. Required only if the appliance is deployed in a private address space and the site has a public IP address hosted on an external firewall or a NAT device.
         * Minimum length = 1
         */
        publicip?: string;
        nitro_protocol?: "http" | "https";
        nsip: string;
        /**
         * IP address for the GSLB site. The GSLB site uses this IP address to communicate with other GSLB sites. For a local site, use any IP address that is owned by the appliance (for example, a SNIP or MIP address, or the IP address of the ADNS service).
         * Minimum length = 1
         */
        siteipaddress?: string;
        nitro_user: string;
        /**
         * Specify the conditions under which the GSLB service must be monitored by a monitor, if one is bound. Available settings function as follows:
         * * C(ALWAYS) - Monitor the GSLB service at all times.
         * * C(MEPDOWN) - Monitor the GSLB service only when the exchange of metrics through the Metrics Exchange Protocol (MEP) is disabled.
         * C(MEPDOWN_SVCDOWN) - Monitor the service in either of the following situations:
         * * The exchange of metrics through MEP is disabled.
         * * The exchange of metrics through MEP is enabled but the status of the service, learned through metrics exchange, is DOWN.
         */
        triggermonitor?: "ALWAYS" | "MEPDOWN" | "MEPDOWN_SVCDOWN";
        nitro_pass: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nitro_timeout?: number;
        /**
         * Exchange metrics with other sites. Metrics are exchanged by using Metric Exchange Protocol (MEP). The appliances in the GSLB setup exchange health information once every second.
         * If you disable metrics exchange, you can use only static load balancing methods (such as round robin, static proximity, or the hash-based methods), and if you disable metrics exchange when a dynamic load balancing method (such as least connection) is in operation, the appliance falls back to round robin. Also, if you disable metrics exchange, you must use a monitor to determine the state of GSLB services. Otherwise, the service is marked as DOWN.
         */
        metricexchange?: "enabled" | "disabled";
        [k: string]: any;
      };
      /**
       * Manage iRules across different modules on a BIG-IP.
       */
      bigip_irule?: {
        /**
         * The iRule file to interpret and upload to the BIG-IP. Either one of C(src) or C(content) must be provided.
         */
        src?: string;
        /**
         * The name of the iRule.
         */
        name?: string;
        /**
         * Default: Common
         *
         * The partition to create the iRule on.
         */
        partition?: string;
        /**
         * The BIG-IP module to add the iRule to.
         */
        module?: string;
        /**
         * When used instead of 'src', sets the contents of an iRule directly to the specified value. This is for simple values, but can be used with lookup plugins for anything complex or with formatting. Either one of C(src) or C(content) must be provided.
         */
        content?: string;
        /**
         * Default: present
         *
         * Whether the iRule should exist or not.
         */
        state?: string;
        [k: string]: any;
      };
      /**
       * Manage LLDP interface policies on Cisco ACI fabrics.
       * More information from the internal APIC class I(lldp:IfPol) at U(https://developer.cisco.com/media/mim-ref/MO-lldpIfPol.html).
       */
      aci_intf_policy_lldp?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * This module provides declarative management of logging on Juniper JUNOS devices.
       */
      junos_logging?: {
        /**
         * Number of files to be archived, this is applicable if value of I(dest) is C(file). The acceptable value is in range from 1 to 1000.
         */
        files?: number | string;
        username?: string;
        ssh_keyfile?: string;
        src_addr?: string;
        /**
         * If value of C(dest) is I(file) it indicates file-name, for I(user) it indicates username and for I(host) indicates the host name to be notified.
         */
        name?: string;
        /**
         * Set logging severity levels.
         */
        level?: string;
        /**
         * Destination of the logs.
         */
        dest?: "console" | "host" | "file" | "user";
        /**
         * Set logging facility.
         */
        facility?: string;
        /**
         * Default: present
         *
         * State of the logging configuration.
         */
        state?: "present" | "absent";
        /**
         * List of logging definitions.
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Default: True
         *
         * Specifies whether or not the configuration is active or deactivated
         */
        active?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Rotate log frequency in minutes, this is applicable if value of I(dest) is C(file). The acceptable value is in range of 1 to 59. This controls the frequency after which log file is rotated.
         */
        rotate_frequency?: number | string;
        password?: string;
        port?: number | string;
        transport?: string;
        /**
         * Size of the file in archive, this is applicable if value of I(dest) is C(file). The acceptable value is in range from 65536 to 1073741824 bytes.
         */
        size?: number | string;
        [k: string]: any;
      };
      /**
       * Create and remove tag(s) to DigitalOcean resource.
       */
      digital_ocean_tag?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module allows you to create, modify and delete Zabbix host entries and associated group and template data.
       */
      zabbix_host?: {
        /**
         * Default: enabled
         *
         * Monitoring status of the host.
         */
        status?: string;
        /**
         * Default: None
         *
         * Basic Auth password
         */
        http_login_password?: string;
        /**
         * Default: None
         *
         * Configure the inventory mode.
         */
        inventory_mode?: string;
        /**
         * Default: 10
         *
         * The timeout of API request (seconds).
         */
        timeout?: string;
        /**
         * Zabbix user name, used to authenticate against the server.
         */
        login_user?: string;
        /**
         * List of interfaces to be created for the host (see example below).
         * Available values are: dns, ip, main, port, type and useip.
         * Please review the interface documentation for more information on the supported properties
         * https://www.zabbix.com/documentation/2.0/manual/appendix/api/hostinterface/definitions#host_interface
         */
        interfaces?: string;
        /**
         * Default: None
         *
         * Basic Auth login
         */
        http_login_user?: string;
        /**
         * Url of Zabbix server, with protocol (http or https).
         */
        server_url?: string;
        /**
         * Default: present
         *
         * State of the host.
         * On C(present), it will create if host does not exist or update the host if the associated data is different.
         * On C(absent) will remove a host if it exists.
         */
        state?: string;
        /**
         * Name of the host in Zabbix.
         * host_name is the unique identifier used and cannot be updated using this module.
         */
        host_name?: string;
        /**
         * List of host groups the host is part of.
         */
        host_groups?: string;
        /**
         * Zabbix user password.
         */
        login_password?: string;
        /**
         * Default: yes
         *
         * Overwrite the host configuration, even if already present
         */
        force?: string;
        /**
         * Default: None
         *
         * List of templates linked to the host.
         */
        link_templates?: string;
        /**
         * Default: None
         *
         * The name of the Zabbix Proxy to be used
         */
        proxy?: string;
        [k: string]: any;
      };
      /**
       * Provide one or more image names, and the module will inspect each, returning an array of inspection results.
       */
      docker_image_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module allows you to create or restore a volume snapshot. This module has a dependency on profitbricks >= 1.0.0
       */
      profitbricks_nic?: {
        /**
         * The datacenter in which to operate.
         */
        datacenter?: string;
        /**
         * The LAN to place the NIC on. You can pass a LAN that doesn't exist and it will be created. Required on create.
         */
        lan?: string;
        /**
         * The name or ID of the NIC. This is only required on deletes, but not on create.
         */
        name?: string;
        /**
         * The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environement variable.
         */
        subscription_user?: string;
        /**
         * The server name or ID.
         */
        server?: string;
        /**
         * THe ProfitBricks password. Overrides the PB_PASSWORD environement variable.
         */
        subscription_password?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: string;
        /**
         * Default: 600
         *
         * how long before wait gives up, in seconds
         */
        wait_timeout?: number | string;
        /**
         * Default: yes
         *
         * wait for the operation to complete before returning
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Add, modify and delete user within IPA server
       */
      ipa_user?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Create, disable, lock, enable and remove accounts.
       */
      cs_account?: {
        /**
         * Username of the user to be created if account did not exist.
         * Required on C(state=present).
         */
        username?: string;
        /**
         * Default: ROOT
         *
         * Domain the account is related to.
         */
        domain?: string;
        /**
         * Last name of the user to be created if account did not exist.
         * Required on C(state=present).
         */
        last_name?: string;
        /**
         * Default: user
         *
         * Type of the account.
         */
        account_type?: "user" | "root_admin" | "domain_admin";
        /**
         * Name of account.
         */
        name: string;
        api_http_method?: "get" | "post";
        /**
         * Network domain of the account.
         */
        network_domain?: string;
        api_secret?: string;
        api_timeout?: number | string;
        /**
         * First name of the user to be created if account did not exist.
         * Required on C(state=present).
         */
        first_name?: string;
        api_region?: string;
        api_key?: string;
        /**
         * Default: present
         *
         * State of the account.
         * C(unlocked) is an alias for C(enabled).
         */
        state?: "present" | "absent" | "enabled" | "disabled" | "locked" | "unlocked";
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Timezone of the user to be created if account did not exist.
         */
        timezone?: string;
        /**
         * Password of the user to be created if account did not exist.
         * Required on C(state=present).
         */
        password?: string;
        /**
         * Email of the user to be created if account did not exist.
         * Required on C(state=present).
         */
        email?: string;
        api_url?: string;
        [k: string]: any;
      };
      /**
       * Uploads a new or updates an existing configuration template or workflow template into the Radware vDirect server. All parameters may be set as environment variables.
       */
      vdirect_file?: {
        /**
         * Default: None
         *
         * vDirect server username, may be set as VDIRECT_USER environment variable.
         */
        vdirect_user?: string;
        /**
         * Default: 2189
         *
         * vDirect server HTTPS port number, may be set as VDIRECT_HTTPS_PORT environment variable.
         */
        vdirect_https_port?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated,
         * may be set as VDIRECT_VALIDATE_CERTS or VDIRECT_VERIFY environment variable.
         * This should only set to C(no) used on personally controlled sites using self-signed certificates.
         */
        vdirect_validate_certs?: string;
        /**
         * vDirect runnable file name to be uploaded.
         * May be velocity configuration template (.vm) or workflow template zip file (.zip).
         */
        file_name?: string;
        /**
         * Default: 60
         *
         * Amount of time to wait for async operation completion [seconds],
         * may be set as VDIRECT_TIMEOUT environment variable.
         */
        vdirect_timeout?: string;
        /**
         * Default: yes
         *
         * Wait for async operation to complete, may be set as VDIRECT_WAIT environment variable.
         */
        vdirect_wait?: string;
        /**
         * Primary vDirect server IP address, may be set as VDIRECT_IP environment variable.
         */
        vdirect_ip?: string;
        /**
         * Default: None
         *
         * vDirect server password, may be set as VDIRECT_PASSWORD environment variable.
         */
        vdirect_password?: string;
        /**
         * Default: None
         *
         * Secondary vDirect server IP address, may be set as VDIRECT_SECONDARY_IP environment variable.
         */
        vdirect_secondary_ip?: string;
        /**
         * Default: yes
         *
         * If C(no), an HTTP connection will be used instead of the default HTTPS connection,
         * may be set as VDIRECT_HTTPS or VDIRECT_USE_SSL environment variable.
         */
        vdirect_use_ssl?: string;
        /**
         * Default: 2188
         *
         * vDirect server HTTP port number, may be set as VDIRECT_HTTP_PORT environment variable.
         */
        vdirect_http_port?: string;
        [k: string]: any;
      };
      /**
       * Reads data out of lldpctl
       */
      lldp?: {
        [k: string]: any;
      };
      /**
       * Add or Remove network from OpenStack.
       */
      quantum_network?: {
        /**
         * Default: None
         *
         * Name of the region
         */
        region_name?: string;
        /**
         * Default: None
         *
         * The type of the network to be created, gre, vlan, local. Available types depend on the plugin. The Quantum service decides if not specified.
         */
        provider_network_type?: "local" | "vlan" | "flat" | "gre";
        availability_zone?: string;
        /**
         * If 'yes', specifies that the virtual network is a external network (public).
         */
        router_external?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * The name of the tenant for whom the network is created
         */
        tenant_name?: string;
        /**
         * Default: True
         *
         * Whether the state should be marked as up or down
         */
        admin_state_up?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * The physical network which would realize the virtual network for flat and vlan networks.
         */
        provider_physical_network?: string;
        /**
         * Default: yes
         *
         * The tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone url for authentication
         */
        auth_url?: string;
        /**
         * Default: yes
         *
         * Password of login user
         */
        login_password: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Whether this network is shared or not
         */
        shared?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * The id that has to be assigned to the network, in case of vlan networks that would be vlan id and for gre the tunnel id
         */
        provider_segmentation_id?: string;
        /**
         * Default: None
         *
         * Name to be assigned to the network
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Manage load balancing monitors.
       * This module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.
       */
      netscaler_lb_monitor?: {
        /**
         * Version number of the Citrix Advanced Access Control Logon Agent. Required by the C(CITRIX-AAC-LAS) monitor.
         */
        lasversion?: string;
        /**
         * SNMP OID for C(SNMP) monitors.
         * Minimum length = 1
         */
        Snmpoid?: string;
        /**
         * Enable/Disable probing for Account Service. Applicable only to Store Front monitors. For multi-tenancy configuration users my skip account service.
         */
        storefrontacctservice?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Firmware-Revision value for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers.
         */
        firmwarerevision?: number;
        /**
         * Domain name to resolve as part of monitoring the DNS service (for example, C(example.com)).
         */
        query?: string;
        /**
         * List of Auth-Application-Id attribute value pairs (AVPs) for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers. A maximum of eight of these AVPs are supported in a monitoring CER message.
         * Minimum value = C(0)
         * Maximum value = C(4294967295)
         */
        authapplicationid?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Version of MSSQL server that is to be monitored.
         */
        mssqlprotocolversion?: "70" | "2000" | "2000SP1" | "2005" | "2008" | "2008R2" | "2012" | "2014";
        /**
         * Maximum number of hops that the SIP request used for monitoring can traverse to reach the server. Applicable only to monitors of type C(SIP-UDP).
         * Minimum value = C(0)
         * Maximum value = C(255)
         */
        maxforwards?: number;
        /**
         * String to send to the service. Applicable to C(TCP-ECV), C(HTTP-ECV), and C(UDP-ECV) monitors.
         */
        send?: string;
        /**
         * RTSP request to send to the server (for example, C("OPTIONS *")).
         */
        rtsprequest?: string;
        /**
         * Code expected when the server is under maintenance.
         */
        trofscode?: number;
        /**
         * Name for the monitor. Must begin with an ASCII alphanumeric or underscore C(_) character, and must contain only ASCII alphanumeric, underscore, hash C(#), period C(.), space C( ), colon C(:), at C(@), equals C(=), and hyphen C(-) characters.
         * Minimum length = 1
         */
        monitorname?: string;
        nitro_timeout?: number;
        /**
         * Unit of measurement for the Deviation parameter. Cannot be changed after the monitor is created.
         */
        units1?: "SEC" | "MSEC" | "MIN";
        /**
         * monitor interval units.
         */
        units3?: "SEC" | "MSEC" | "MIN";
        /**
         * Unit of measurement for the Down Time parameter. Cannot be changed after the monitor is created.
         */
        units2?: "SEC" | "MSEC" | "MIN";
        /**
         * Response codes for which to mark the service as UP. For any other response code, the action performed depends on the monitor type. C(HTTP) monitors and C(RADIUS) monitors mark the service as C(DOWN), while C(HTTP-INLINE) monitors perform the action indicated by the Action parameter.
         */
        respcode?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * String of arguments for the script. The string is copied verbatim into the request.
         */
        scriptargs?: string;
        /**
         * Amount of time for which the appliance must wait before it marks a probe as FAILED. Must be less than the value specified for the Interval parameter.
         * Note: For C(UDP-ECV) monitors for which a receive string is not configured, response timeout does not apply. For C(UDP-ECV) monitors with no receive string, probe failure is indicated by an ICMP port unreachable error received from the service.
         * Minimum value = C(1)
         * Maximum value = C(20939)
         */
        resptimeout?: number | string;
        /**
         * Time duration for which to wait before probing a service that has been marked as DOWN. Expressed in milliseconds, seconds, or minutes.
         * Minimum value = C(1)
         * Maximum value = C(20939)
         */
        downtime?: number | string;
        /**
         * Password that is required for logging on to the C(RADIUS), C(NNTP), C(FTP), C(FTP-EXTENDED), C(MYSQL), C(MSSQL), C(POP3), C(CITRIX-AG), C(CITRIX-XD-DDC), C(CITRIX-WI-EXTENDED), C(CITRIX-XNC-ECV) or C(CITRIX-XDM) server. Used in conjunction with the user name specified for the C(username) parameter.
         * Minimum length = 1
         */
        password?: string;
        /**
         * The monitor is bound to a transparent device such as a firewall or router. The state of a transparent device depends on the responsiveness of the services behind it. If a transparent device is being monitored, a destination IP address must be specified. The probe is sent to the specified IP address by using the MAC address of the transparent device.
         */
        transparent?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Number of retries that must fail, out of the number specified for the Retries parameter, for a service to be marked as DOWN. For example, if the Retries parameter is set to 10 and the Failure Retries parameter is set to 6, out of the ten probes sent, at least six probes must fail if the service is to be marked as DOWN. The default value of 0 means that all the retries must fail if the service is to be marked as DOWN.
         * Minimum value = C(0)
         * Maximum value = C(32)
         */
        failureretries?: number | string;
        /**
         * Authentication key (shared secret text string) for RADIUS clients and servers to exchange. Applicable to monitors of type C(RADIUS) and C(RADIUS_ACCOUNTING).
         * Minimum length = 1
         */
        radkey?: string;
        /**
         * Product-Name value for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers.
         * Minimum length = 1
         */
        productname?: string;
        /**
         * Name of the service identifier that is used to connect to the Oracle database during authentication.
         * Minimum length = 1
         */
        oraclesid?: string;
        /**
         * Account Type to be used in Account Request Packet. Applicable to monitors of type C(RADIUS_ACCOUNTING).
         * Minimum value = 0
         * Maximum value = 15
         */
        radaccounttype?: number;
        /**
         * The distinguished name with which an LDAP monitor can perform the Bind operation on the LDAP server. Optional. Applicable to C(LDAP) monitors.
         * Minimum length = 1
         */
        binddn?: string;
        /**
         * Domain in which the XenDesktop Desktop Delivery Controller (DDC) servers or Web Interface servers are present. Required by C(CITRIX-XD-DDC) and C(CITRIX-WI-EXTENDED) monitors for logging on to the DDC servers and Web Interface servers, respectively.
         */
        domain?: string;
        /**
         * Response time threshold, specified as a percentage of the Response Time-out parameter. If the response to a monitor probe has not arrived when the threshold is reached, the appliance generates an SNMP trap called monRespTimeoutAboveThresh. After the response time returns to a value below the threshold, the appliance generates a monRespTimeoutBelowThresh SNMP trap. For the traps to be generated, the "MONITOR-RTO-THRESHOLD" alarm must also be enabled.
         * Minimum value = C(0)
         * Maximum value = C(100)
         */
        resptimeoutthresh?: number;
        /**
         * Host-IP-Address value for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers. If Host-IP-Address is not specified, the appliance inserts the mapped IP (MIP) address or subnet IP (SNIP) address from which the CER request (the monitoring probe) is sent.
         * Minimum length = 1
         */
        hostipaddress?: string;
        /**
         * SIP URI string to send to the service (for example, C(sip:sip.test)). Applicable only to monitors of type C(SIP-UDP).
         * Minimum length = 1
         */
        sipuri?: string;
        /**
         * Vendor-Id to use in the Vendor-Specific-Application-Id grouped attribute-value pair (AVP) in the monitoring CER message. To specify Auth-Application-Id or Acct-Application-Id in Vendor-Specific-Application-Id, use vendorSpecificAuthApplicationIds or vendorSpecificAcctApplicationIds, respectively. Only one Vendor-Id is supported for all the Vendor-Specific-Application-Id AVPs in a CER monitoring message.
         * Minimum value = 1
         */
        vendorspecificvendorid?: number;
        /**
         * Path and name of the script to execute. The script must be available on the NetScaler appliance, in the /nsconfig/monitors/ directory.
         * Minimum length = 1
         */
        scriptname?: string;
        /**
         * Origin-Realm value for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers.
         * Minimum length = 1
         */
        originrealm?: string;
        /**
         * Calling Stations Id to be used in Account Request Packet. Applicable to monitors of type C(RADIUS_ACCOUNTING).
         * Minimum length = 1
         */
        radmsisdn?: string;
        /**
         * String expected from the server for the service to be marked as trofs. Applicable to HTTP-ECV/TCP-ECV monitors.
         */
        trofsstring?: string;
        /**
         * Name of a file on the FTP server. The appliance monitors the FTP service by periodically checking the existence of the file on the server. Applicable to C(FTP-EXTENDED) monitors.
         * Minimum length = 1
         */
        filename?: string;
        /**
         * State of the monitor. The C(disabled) setting disables not only the monitor being configured, but all monitors of the same type, until the parameter is set to C(enabled). If the monitor is bound to a service, the state of the monitor is not taken into account when the state of the service is determined.
         */
        state?: "present" | "absent";
        nitro_user: string;
        /**
         * Name of the network profile.
         * Minimum length = 1
         * Maximum length = 127
         */
        netprofile?: string;
        /**
         * Number of consecutive probe failures after which the appliance generates an SNMP trap called monProbeFailed.
         * Minimum value = C(0)
         * Maximum value = C(32)
         */
        alertretries?: number | string;
        /**
         * Account Session ID to be used in Account Request Packet. Applicable to monitors of type C(RADIUS_ACCOUNTING).
         * Minimum length = 1
         */
        radaccountsession?: string;
        /**
         * The base distinguished name of the LDAP service, from where the LDAP server can begin the search for the attributes in the monitoring query. Required for C(LDAP) service monitoring.
         * Minimum length = 1
         */
        basedn?: string;
        /**
         * Name of a newsgroup available on the NNTP service that is to be monitored. The appliance periodically generates an NNTP query for the name of the newsgroup and evaluates the response. If the newsgroup is found on the server, the service is marked as UP. If the newsgroup does not exist or if the search fails, the service is marked as DOWN. Applicable to NNTP monitors.
         * Minimum length = 1
         */
        group?: string;
        /**
         * String expected from the server for the service to be marked as UP. Applicable to C(TCP-ECV), C(HTTP-ECV), and C(UDP-ECV) monitors.
         */
        recv?: string;
        /**
         * Type of DNS record for which to send monitoring queries. Set to C(Address) for querying A records, C(AAAA) for querying AAAA records, and C(Zone) for querying the SOA record.
         */
        querytype?: "Address" | "Zone" | "AAAA";
        /**
         * The TOS ID of the specified destination IP. Applicable only when the TOS parameter is set.
         * Minimum value = C(1)
         * Maximum value = C(63)
         */
        tosid?: number;
        /**
         * Mark a service as DOWN, instead of UP, when probe criteria are satisfied, and as UP instead of DOWN when probe criteria are not satisfied.
         */
        reverse?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Store Name. For monitors of type C(STOREFRONT), C(storename) is an optional argument defining storefront service store name. Applicable to C(STOREFRONT) monitors.
         * Minimum length = 1
         */
        storename?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Calculate the least response times for bound services. If this parameter is not enabled, the appliance does not learn the response times of the bound services. Also used for LRTM load balancing.
         */
        lrtm?: "enabled" | "disabled";
        /**
         * Filter criteria for the LDAP query. Optional.
         * Minimum length = 1
         */
        filter?: string;
        /**
         * Action to perform when the response to an inline monitor (a monitor of type C(HTTP-INLINE)) indicates that the service is down. A service monitored by an inline monitor is considered C(DOWN) if the response code is not one of the codes that have been specified for the Response Code parameter.
         * Available settings function as follows:
         * * C(NONE) - Do not take any action. However, the show service command and the show lb monitor command indicate the total number of responses that were checked and the number of consecutive error responses received after the last successful probe.
         * * C(LOG) - Log the event in NSLOG or SYSLOG.
         * * C(DOWN) - Mark the service as being down, and then do not direct any traffic to the service until the configured down time has expired. Persistent connections to the service are terminated as soon as the service is marked as C(DOWN). Also, log the event in NSLOG or SYSLOG.
         */
        action?: "NONE" | "LOG" | "DOWN";
        nitro_pass: string;
        /**
         * Use a secure SSL connection when monitoring a service. Applicable only to TCP based monitors. The secure option cannot be used with a C(CITRIX-AG) monitor, because a CITRIX-AG monitor uses a secure connection by default.
         */
        secure?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Network Access Server (NAS) IP address to use as the source IP address when monitoring a RADIUS server. Applicable to monitors of type C(RADIUS) and C(RADIUS_ACCOUNTING).
         */
        radnasip?: string;
        /**
         * NAS-Identifier to send in the Access-Request packet. Applicable to monitors of type C(RADIUS).
         * Minimum length = 1
         */
        radnasid?: string;
        /**
         * Set of IP addresses expected in the monitoring response from the DNS server, if the record type is A or AAAA. Applicable to C(DNS) monitors.
         * Minimum length = 1
         */
        ipaddress?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Store the database list populated with the responses to monitor probes. Used in database specific load balancing if C(MSSQL-ECV)/C(MYSQL-ECV) monitor is configured.
         */
        storedb?: "enabled" | "disabled";
        /**
         * Vendor-Id value for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers.
         */
        vendorid?: number;
        /**
         * This option will enable monitoring of services running on storefront server. Storefront services are monitored by probing to a Windows service that runs on the Storefront server and exposes details of which storefront services are running.
         */
        storefrontcheckbackendservices?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Probe the service by encoding the destination IP address in the IP TOS (6) bits.
         */
        tos?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Number of consecutive successful probes required to transition a service's state from DOWN to UP.
         * Minimum value = C(1)
         * Maximum value = C(32)
         */
        successretries?: number | string;
        /**
         * Send the monitoring probe to the service through an IP tunnel. A destination IP address must be specified.
         */
        iptunnel?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Type of monitor that you want to create.
         */
        type?:
          | "PING"
          | "TCP"
          | "HTTP"
          | "TCP-ECV"
          | "HTTP-ECV"
          | "UDP-ECV"
          | "DNS"
          | "FTP"
          | "LDNS-PING"
          | "LDNS-TCP"
          | "LDNS-DNS"
          | "RADIUS"
          | "USER"
          | "HTTP-INLINE"
          | "SIP-UDP"
          | "SIP-TCP"
          | "LOAD"
          | "FTP-EXTENDED"
          | "SMTP"
          | "SNMP"
          | "NNTP"
          | "MYSQL"
          | "MYSQL-ECV"
          | "MSSQL-ECV"
          | "ORACLE-ECV"
          | "LDAP"
          | "POP3"
          | "CITRIX-XML-SERVICE"
          | "CITRIX-WEB-INTERFACE"
          | "DNS-TCP"
          | "RTSP"
          | "ARP"
          | "CITRIX-AG"
          | "CITRIX-AAC-LOGINPAGE"
          | "CITRIX-AAC-LAS"
          | "CITRIX-XD-DDC"
          | "ND6"
          | "CITRIX-WI-EXTENDED"
          | "DIAMETER"
          | "RADIUS_ACCOUNTING"
          | "STOREFRONT"
          | "APPC"
          | "SMPP"
          | "CITRIX-XNC-ECV"
          | "CITRIX-XDM"
          | "CITRIX-STA-SERVICE"
          | "CITRIX-STA-SERVICE-NHOP";
        /**
         * User name with which to probe the C(RADIUS), C(NNTP), C(FTP), C(FTP-EXTENDED), C(MYSQL), C(MSSQL), C(POP3), C(CITRIX-AG), C(CITRIX-XD-DDC), C(CITRIX-WI-EXTENDED), C(CITRIX-XNC) or C(CITRIX-XDM) server.
         * Minimum length = 1
         */
        username?: string;
        /**
         * SIP user to be registered. Applicable only if the monitor is of type C(SIP-UDP) and the SIP Method parameter is set to C(REGISTER).
         * Minimum length = 1
         */
        sipreguri?: string;
        /**
         * Maximum number of probes to send to establish the state of a service for which a monitoring probe failed.
         * Minimum value = C(1)
         * Maximum value = C(127)
         */
        retries?: number | string;
        /**
         * Threshold for C(SNMP) monitors.
         * Minimum length = 1
         */
        snmpthreshold?: string;
        /**
         * IP address of the service to which to send probes. If the parameter is set to 0, the IP address of the server to which the monitor is bound is considered the destination IP address.
         */
        destip?: string;
        /**
         * Validate the credentials of the Xen Desktop DDC server user. Applicable to monitors of type C(CITRIX-XD-DDC).
         */
        validatecred?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * List of Acct-Application-Id attribute value pairs (AVPs) for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers. A maximum of eight of these AVPs are supported in a monitoring message.
         * Minimum value = C(0)
         * Maximum value = C(4294967295)
         */
        acctapplicationid?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * List of Vendor-Specific-Acct-Application-Id attribute value pairs (AVPs) to use for monitoring Diameter servers. A maximum of eight of these AVPs are supported in a monitoring message. The specified value is combined with the value of vendorSpecificVendorId to obtain the Vendor-Specific-Application-Id AVP in the CER monitoring message.
         * Minimum value = C(0)
         * Maximum value = C(4294967295)
         */
        vendorspecificacctapplicationids?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Secondary password that users might have to provide to log on to the Access Gateway server. Applicable to C(CITRIX-AG) monitors.
         */
        secondarypassword?: string;
        /**
         * Attribute to evaluate when the LDAP server responds to the query. Success or failure of the monitoring probe depends on whether the attribute exists in the response. Optional.
         * Minimum length = 1
         */
        attribute?: string;
        save_config?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nitro_protocol?: "http" | "https";
        /**
         * Community name for C(SNMP) monitors.
         * Minimum length = 1
         */
        snmpcommunity?: string;
        /**
         * monitor response timeout units.
         */
        units4?: "SEC" | "MSEC" | "MIN";
        /**
         * HTTP request to send to the server (for example, C("HEAD /file.html")).
         */
        httprequest?: string;
        /**
         * Name of the logon point that is configured for the Citrix Access Gateway Advanced Access Control software. Required if you want to monitor the associated login page or Logon Agent. Applicable to C(CITRIX-AAC-LAS) and C(CITRIX-AAC-LOGINPAGE) monitors.
         */
        logonpointname?: string;
        /**
         * Called Station Id to be used in Account Request Packet. Applicable to monitors of type C(RADIUS_ACCOUNTING).
         * Minimum length = 1
         */
        radapn?: string;
        /**
         * Hostname in the FQDN format (Example: C(porche.cars.org)). Applicable to C(STOREFRONT) monitors.
         * Minimum length = 1
         */
        hostname?: string;
        /**
         * Source ip with which the packet will go out . Applicable to monitors of type C(RADIUS_ACCOUNTING).
         */
        radframedip?: string;
        /**
         * Name of the application used to determine the state of the service. Applicable to monitors of type C(CITRIX-XML-SERVICE).
         * Minimum length = 1
         */
        application?: string;
        /**
         * Time value added to the learned average response time in dynamic response time monitoring (DRTM). When a deviation is specified, the appliance learns the average response time of bound services and adds the deviation to the average. The final value is then continually adjusted to accommodate response time variations over time. Specified in milliseconds, seconds, or minutes.
         * Minimum value = C(0)
         * Maximum value = C(20939)
         */
        deviation?: number;
        /**
         * List of Supported-Vendor-Id attribute value pairs (AVPs) for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers. A maximum eight of these AVPs are supported in a monitoring message.
         * Minimum value = C(1)
         * Maximum value = C(4294967295)
         */
        supportedvendorids?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Inband-Security-Id for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers.
         */
        inbandsecurityid?: "NO_INBAND_SECURITY" | "TLS";
        /**
         * SQL query for a C(MYSQL-ECV) or C(MSSQL-ECV) monitor. Sent to the database server after the server authenticates the connection.
         * Minimum length = 1
         */
        sqlquery?: string;
        /**
         * Default syntax expression that evaluates the database server's response to a MYSQL-ECV or MSSQL-ECV monitoring query. Must produce a Boolean result. The result determines the state of the server. If the expression returns TRUE, the probe succeeds.
         * For example, if you want the appliance to evaluate the error message to determine the state of the server, use the rule C(MYSQL.RES.ROW(10) .TEXT_ELEM(2).EQ("MySQL")).
         */
        evalrule?: string;
        /**
         * SIP method to use for the query. Applicable only to monitors of type C(SIP-UDP).
         */
        sipmethod?: "OPTIONS" | "INVITE" | "REGISTER";
        /**
         * Custom header string to include in the monitoring probes.
         */
        customheaders?: string;
        /**
         * URL of the logon page. For monitors of type C(CITRIX-WEB-INTERFACE), to monitor a dynamic page under the site path, terminate the site path with a slash C(/). Applicable to C(CITRIX-WEB-INTERFACE), C(CITRIX-WI-EXTENDED) and C(CITRIX-XDM) monitors.
         * Minimum length = 1
         */
        sitepath?: string;
        /**
         * TCP or UDP port to which to send the probe. If the parameter is set to 0, the port number of the service to which the monitor is bound is considered the destination port. For a monitor of type C(USER), however, the destination port is the port number that is included in the HTTP request sent to the dispatcher. Does not apply to monitors of type C(PING).
         */
        destport?: number | string;
        /**
         * Port number on which the dispatcher listens for the monitoring probe.
         */
        dispatcherport?: number | string;
        /**
         * Name of the database to connect to during authentication.
         * Minimum length = 1
         */
        database?: string;
        /**
         * Time interval between two successive probes. Must be greater than the value of Response Time-out.
         * Minimum value = C(1)
         * Maximum value = C(20940)
         */
        interval?: number | string;
        /**
         * Origin-Host value for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers.
         * Minimum length = 1
         */
        originhost?: string;
        nsip: string;
        /**
         * List of Vendor-Specific-Auth-Application-Id attribute value pairs (AVPs) for the Capabilities-Exchange-Request (CER) message to use for monitoring Diameter servers. A maximum of eight of these AVPs are supported in a monitoring message. The specified value is combined with the value of vendorSpecificVendorId to obtain the Vendor-Specific-Application-Id AVP in the CER monitoring message.
         * Minimum value = C(0)
         * Maximum value = C(4294967295)
         */
        vendorspecificauthapplicationids?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * SNMP version to be used for C(SNMP) monitors.
         */
        snmpversion?: "V1" | "V2";
        /**
         * IP address of the dispatcher to which to send the probe.
         */
        dispatcherip?: string;
        [k: string]: any;
      };
      /**
       * Adds or removes Vertica database schema and, optionally, roles with schema access privileges.
       * A schema will not be removed until all the objects have been dropped.
       * In such a situation, if the module tries to remove the schema it will fail and only remove roles created for the schema if they have no dependencies.
       */
      vertica_schema?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * allows you to create/remove/update firewall rules
       */
      win_firewall_rule?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Start a program in a VM without the need for network connection
       */
      vmware_vm_shell?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Module to manage Virtual Machine and floating disks in oVirt.
       */
      ovirt_disks?: {
        [k: string]: any;
      };
      /**
       * Manages BGP configurations on NX-OS switches.
       */
      nxos_bgp?: {
        /**
         * Enable/Disable handle BGP neighbor down event, due to various reasons.
         */
        neighbor_down_fib_accelerate?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * AS confederation parameters.
         */
        confederation_peers?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Routing domain confederation AS.
         */
        confederation_id?: string;
        /**
         * Enable/Disable cli event history buffer.
         */
        event_history_cli?: "true" | "false" | "default" | "size_small" | "size_medium" | "size_large" | "size_disable";
        /**
         * Enable/Disable periodic event history buffer.
         */
        event_history_periodic?:
          | "true"
          | "false"
          | "default"
          | "size_small"
          | "size_medium"
          | "size_large"
          | "size_disable";
        /**
         * Route Reflector Cluster-ID.
         */
        cluster_id?: string;
        /**
         * Administratively shutdown the BGP protocol.
         */
        shutdown?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Set BGP hold timer.
         */
        timer_bgp_hold?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enable/Disable load sharing across the providers with different (but equal-length) AS paths.
         */
        bestpath_aspath_multipath_relax?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        /**
         * Set maximum time that BGP keeps the stale routes from the restarting BGP peer.
         */
        graceful_restart_timers_stalepath_time?: string;
        /**
         * Specify Maximum number of AS numbers allowed in the AS-path attribute. Valid values are between 1 and 512.
         */
        maxas_limit?: string;
        /**
         * Set maximum time for a restart sent to the BGP peer.
         */
        graceful_restart_timers_restart?: string;
        /**
         * Enable/Disable isolate this router from BGP perspective.
         */
        isolate?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Set BGP keepalive timer.
         */
        timer_bgp_keepalive?: string;
        /**
         * Enable/Disable Ignores the cost community for BGP best-path calculations.
         */
        bestpath_cost_community_ignore?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enable/Disable immediately reset the session if the link to a directly connected BGP peer goes down.  Only supported in the global BGP context.
         */
        fast_external_fallover?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        /**
         * Enable/Disable the batching evaluation of prefix advertisement to all peers.
         */
        disable_policy_batching?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enable/Disable the batching evaluation of prefix advertisements to all peers with prefix list.
         */
        disable_policy_batching_ipv6_prefix_list?: string;
        /**
         * Enable/Disable advertise only routes programmed in hardware to peers.
         */
        suppress_fib_pending?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enable/Disable assigns the value of infinity to received routes that do not carry the MED attribute, making these routes the least desirable.
         */
        bestpath_med_missing_as_worst?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Router Identifier (ID) of the BGP router VRF instance.
         */
        router_id?: string;
        /**
         * Specify timeout for the first best path after a restart, in seconds.
         */
        timer_bestpath_limit?: string;
        bestpath_compare_neighborid?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        provider?: {
          [k: string]: any;
        };
        /**
         * Local AS number to be used within a VRF instance.
         */
        local_as?: string;
        /**
         * Enable/Disable MED comparison on paths from different autonomous systems.
         */
        bestpath_always_compare_med?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        host?: string;
        /**
         * Enable/Disable the batching evaluation of prefix advertisements to all peers with prefix list.
         */
        disable_policy_batching_ipv4_prefix_list?: string;
        /**
         * Name of the VRF. The name 'default' is a valid VRF representing the global BGP.
         */
        vrf?: string;
        /**
         * Enable/Disable graceful restart helper mode.
         */
        graceful_restart_helper?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enable/Disable message logging for neighbor up/down event.
         */
        log_neighbor_changes?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        /**
         * BGP autonomous system number. Valid values are String, Integer in ASPLAIN or ASDOT notation.
         */
        asn: string;
        /**
         * Enable/Disable event history buffer.
         */
        event_history_events?: "true" | "false" | "defaultsize_small" | "size_medium" | "size_large" | "size_disable";
        /**
         * Enable/Disable detail event history buffer.
         */
        event_history_detail?:
          | "true"
          | "false"
          | "default"
          | "size_small"
          | "size_medium"
          | "size_large"
          | "size_disable";
        ssh_keyfile?: string;
        /**
         * Enable/Disable graceful restart.
         */
        graceful_restart?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enable/Disable flush routes in RIB upon controlled restart. On NX-OS, this property is only supported in the global BGP context.
         */
        flush_routes?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enable/Disable enforces the neighbor autonomous system to be the first AS number listed in the AS path attribute for eBGP. On NX-OS, this property is only supported in the global BGP context.
         */
        enforce_first_as?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enable/Disable deterministic selection of the best MED pat from among the paths from the same autonomous system.
         */
        bestpath_med_non_deterministic?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        username?: string;
        /**
         * The BGP reconnection interval for dropped sessions. Valid values are between 1 and 60.
         */
        reconnect_interval?: string;
        timeout?: number | string;
        /**
         * Enable/Disable enforcement of bestpath to do a MED comparison only between paths originated within a confederation.
         */
        bestpath_med_confed?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enable/Disable comparison of router IDs for identical eBGP paths.
         */
        bestpath_compare_routerid?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module provides declarative management of VRF definitions on Cisco IOS devices.  It allows playbooks to manage individual or the entire VRF collection.  It also supports purging VRF definitions from the configuration that are not explicitly defined.
       */
      ios_vrf?: {
        username?: string;
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        /**
         * Provides a short description of the VRF definition in the current active configuration.  The VRF definition value accepts alphanumeric characters used to provide additional information about the VRF.
         */
        description?: string;
        /**
         * The router-distinguisher value uniquely identifies the VRF to routing processes on the remote IOS system.  The RD value takes the form of C(A:B) where C(A) and C(B) are both numeric values.
         */
        rd?: string;
        /**
         * Identifies the set of interfaces that should be configured in the VRF.  Interfaces must be routed interfaces in order to be placed into a VRF.
         */
        interfaces?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        auth_pass?: string;
        /**
         * Default: present
         *
         * Configures the state of the VRF definition as it relates to the device operational configuration.  When set to I(present), the VRF should be configured in the device active configuration and when set to I(absent) the VRF should not be in the device active configuration
         */
        state?: "present" | "absent";
        /**
         * Instructs the module to consider the VRF definition absolute.  It will remove any previously configured VRFs on the device.
         */
        purge?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        host?: string;
        /**
         * Default: 10
         *
         * Time in seconds to wait before checking for the operational state on remote device.
         */
        delay?: number | string;
        /**
         * The set of VRF definition objects to be configured on the remote IOS device.  Ths list entries can either be the VRF name or a hash of VRF definitions and attributes.  This argument is mutually exclusive with the C(name) argument.
         */
        vrfs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        port?: number | string;
        /**
         * The name of the VRF definition to be managed on the remote IOS device.  The VRF definition name is an ASCII string name used to uniquely identify the VRF.  This argument is mutually exclusive with the C(vrfs) argument
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Interacts with HTTP and HTTPS web services and supports Digest, Basic and WSSE HTTP authentication mechanisms.
       */
      win_uri?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manage VLANs on a BIG-IP system
       */
      bigip_vlan?: {
        /**
         * The description to give to the VLAN.
         */
        description?: string;
        /**
         * Specifies a list of untagged interfaces and trunks that you want to configure for the VLAN.
         */
        untagged_interfaces?: string;
        /**
         * Default: present
         *
         * The state of the VLAN on the system. When C(present), guarantees that the VLAN exists with the provided attributes. When C(absent), removes the VLAN from the system.
         */
        state?: string;
        /**
         * Tag number for the VLAN. The tag number can be any integer between 1 and 4094. The system automatically assigns a tag number if you do not specify a value.
         */
        tag?: string;
        /**
         * Specifies a list of tagged interfaces and trunks that you want to configure for the VLAN. Use tagged interfaces or trunks when you want to assign a single interface or trunk to multiple VLANs.
         */
        tagged_interfaces?: string;
        /**
         * The VLAN to manage. If the special VLAN C(ALL) is specified with the C(state) value of C(absent) then all VLANs will be removed.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Manage RabbitMQ plugins.
       */
      rabbitmq_plugin?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Create or remove a Distributed vSwitch portgroup
       */
      vmware_dvs_portgroup?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Provides functionality similar to the "docker login" command.
       * Authenticate with a docker registry and add the credentials to your local Docker config file. Adding the credentials to the config files allows future connections to the registry using tools such as Ansible's Docker modules, the Docker CLI and docker-py without needing to provide credentials.
       * Running in check mode will perform the authentication without updating the config file.
       */
      docker_login?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage user accounts and user attributes on a BIG-IP.
       */
      bigip_user?: {
        /**
         * Default: on_create
         *
         * C(always) will allow to update passwords if the user chooses to do so. C(on_create) will only set the password for newly created users.
         */
        update_password?: string;
        /**
         * Optionally set the users shell.
         */
        shell?: string;
        /**
         * Set the users password to this unencrypted value. C(password_credential) is required when creating a new account.
         */
        password_credential?: string;
        /**
         * Specifies the administrative partition to which the user has access. C(partition_access) is required when creating a new account. Should be in the form "partition:role". Valid roles include C(acceleration-policy-editor), C(admin), C(application-editor), C(auditor) C(certificate-manager), C(guest), C(irule-manager), C(manager), C(no-access) C(operator), C(resource-admin), C(user-manager), C(web-application-security-administrator), and C(web-application-security-editor). Partition portion of tuple should be an existing partition or the value 'all'.
         */
        partition_access?: string;
        /**
         * Default: present
         *
         * Whether the account should exist or not, taking action if the state is different from what is stated.
         */
        state?: string;
        /**
         * Full name of the user.
         */
        full_name?: string;
        /**
         * Name of the user to create, remove or modify.
         */
        username_credential?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of the local usernames configured on network devices. It allows playbooks to manage either individual usernames or the collection of usernames in the current running config. It also supports purging usernames from the configuration that are not explicitly defined.
       */
      vyos_user?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create, update, suspend, activate and remove projects.
       */
      cs_project?: {
        [k: string]: any;
      };
      /**
       * Create, update, delete pods.
       */
      cs_pod?: {
        api_key?: string;
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        api_region?: string;
        /**
         * Gateway for the Pod.
         * Required on C(state=present)
         */
        gateway?: string;
        /**
         * Default: present
         *
         * State of the pod.
         */
        state?: "present" | "enabled" | "disabled" | "absent";
        /**
         * Ending IP address for the Pod.
         */
        end_ip?: string;
        /**
         * Starting IP address for the Pod.
         * Required on C(state=present)
         */
        start_ip?: string;
        /**
         * Name of the zone in which the pod belongs to.
         * If not set, default zone is used.
         */
        zone?: string;
        /**
         * Netmask for the Pod.
         * Required on C(state=present)
         */
        netmask?: string;
        /**
         * uuid of the exising pod.
         */
        id?: string;
        /**
         * Name of the pod.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Create, update or delete a storage account.
       */
      azure_rm_storageaccount?: {
        /**
         * Default: Storage
         *
         * The 'kind' of storage.
         */
        kind?: string;
        /**
         * Type of storage account. Required when creating a storage account. NOTE: Standard_ZRS and Premium_LRS accounts cannot be changed to other account types, and other account types cannot be changed to Standard_ZRS or Premium_LRS.
         */
        account_type?: string;
        /**
         * User domain assigned to the storage account. Must be a dictionary with 'name' and 'use_sub_domain' keys where 'name' is the CNAME source. Only one custom domain is supported per storage account at this time. To clear the existing custom domain, use an empty string for the custom domain name property.
         * Can be added to an existing storage account. Will be ignored during storage account creation.
         */
        custom_domain?: string;
        /**
         * Name of the resource group to use.
         */
        resource_group?: string;
        /**
         * Default: present
         *
         * Assert the state of the storage account. Use 'present' to create or update a storage account and 'absent' to delete an account.
         */
        state?: string;
        /**
         * Default: resource_group location
         *
         * Valid azure location. Defaults to location of the resource group.
         */
        location?: string;
        /**
         * Default: Storage
         *
         * The access tier for this storage account. Required for a storage account of kind 'BlobStorage'.
         */
        access_tier?: string;
        /**
         * Name of the storage account to update or create.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * An Ansible module to add or delete public ip addresses on an existing server or servers in CenturyLink Cloud.
       */
      clc_publicip?: {
        /**
         * A list of servers to create public ips on.
         */
        server_ids:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * Determine whether to create or delete public IPs. If present module will not create a second public ip if one already exists.
         */
        state?: "present" | "absent";
        /**
         * Default: TCP
         *
         * The protocol that the public IP will listen for.
         */
        protocol?: "TCP" | "UDP" | "ICMP";
        /**
         * Default: None
         *
         * A list of ports to expose. This is required when state is 'present'
         */
        ports?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: True
         *
         * Whether to wait for the tasks to finish before returning.
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * An Ansible module to Create or Delete Anti Affinity Policies at CenturyLink Cloud.
       */
      clc_aa_policy?: {
        /**
         * Default: present
         *
         * Whether to create or delete the policy.
         */
        state?: "present" | "absent";
        /**
         * Datacenter in which the policy lives/should live.
         */
        location: string;
        /**
         * The name of the Anti Affinity Policy.
         */
        name: string;
        /**
         * Default: True
         *
         * Whether to wait for the tasks to finish before returning.
         */
        wait?: string;
        [k: string]: any;
      };
      /**
       * Get facts for a virtual machine scale set
       */
      azure_rm_virtualmachine_scaleset_facts?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Limit results to a specific virtual machine scale set
         */
        name?: string;
        /**
         * The resource group to search for the desired virtual machine scale set
         */
        resource_group?: string;
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        ad_user?: string;
        cloud_environment?: string;
        secret?: string;
        client_id?: string;
        subscription_id?: string;
        password?: string;
        tenant?: string;
        [k: string]: any;
      };
      /**
       * This module uses rabbitMQ Rest API to create/delete exchanges
       */
      rabbitmq_exchange?: {
        [k: string]: any;
      };
      /**
       * This module executes AWS Lambda functions, allowing synchronous and asynchronous invocation.
       */
      execute_lambda?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Apstra AOS ASN Pool module let you manage your ASN Pool easily. You can create and delete ASN Pool by Name, ID or by using a JSON File. This module is idempotent and support the I(check) mode. It's using the AOS REST API.
       */
      aos_asn_pool?: {
        /**
         * List of ASNs ranges to add to the ASN Pool. Each range must have 2 values.
         */
        ranges?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Name of the ASN Pool to manage. Only one of I(name), I(id) or I(content) can be set.
         */
        name?: string;
        /**
         * Datastructure of the ASN Pool to manage. The data can be in YAML / JSON or directly a variable. It's the same datastructure that is returned on success in I(value).
         */
        content?: string;
        /**
         * Default: present
         *
         * Indicate what is the expected state of the ASN Pool (present or not).
         */
        state?: "present" | "absent";
        /**
         * An existing AOS session as obtained by M(aos_login) module.
         */
        session: {
          [k: string]: any;
        };
        /**
         * AOS Id of the ASN Pool to manage. Only one of I(name), I(id) or I(content) can be set.
         */
        id?: string;
        [k: string]: any;
      };
      /**
       * Module to manage external providers in oVirt/RHV
       */
      ovirt_external_provider?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Create/delete/assign a floating IP.
       */
      digital_ocean_floating_ip?: {
        [k: string]: any;
      };
      /**
       * An Ansible module to Create or Delete Alert Policies at CenturyLink Cloud.
       */
      clc_alert_policy?: {
        /**
         * Default: None
         *
         * The name of the alert policy. This is mutually exclusive with id
         */
        name?: string;
        /**
         * Default: None
         *
         * The metric on which to measure the condition that will trigger the alert. This is required for state 'present'
         */
        metric?: "cpu" | "memory" | "disk";
        /**
         * Default: None
         *
         * The alert policy id. This is mutually exclusive with name
         */
        id?: string;
        /**
         * The alias of your CLC Account
         */
        alias: string;
        /**
         * Default: present
         *
         * Whether to create or delete the policy.
         */
        state?: "present" | "absent";
        /**
         * Default: None
         *
         * The threshold that will trigger the alert when the metric equals or exceeds it. This is required for state 'present' This number represents a percentage and must be a value between 5.0 - 95.0 that is a multiple of 5.0
         */
        threshold?: number | string;
        /**
         * Default: None
         *
         * A list of recipient email ids to notify the alert. This is required for state 'present'
         */
        alert_recipients?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * The length of time in minutes that the condition must exceed the threshold. This is required for state 'present'
         */
        duration?: string;
        [k: string]: any;
      };
      /**
       * Load configuration on PAN-OS device
       */
      panos_loadcfg?: {
        /**
         * Default: admin
         *
         * username for authentication
         */
        username?: string;
        /**
         * Default: True
         *
         * commit if changed
         */
        commit?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * password for authentication
         */
        password: string;
        /**
         * IP address (or hostname) of PAN-OS device
         */
        ip_address: string;
        /**
         * Default: None
         *
         * configuration file to load
         */
        file?: string;
        [k: string]: any;
      };
      /**
       * Manage OpenStack DNS zones. Zones can be created, deleted or updated. Only the I(email), I(description), I(ttl) and I(masters) values can be updated.
       */
      os_zone?: {
        /**
         * Default: None
         *
         * Master nameservers (only applies if zone_type is secondary)
         */
        masters?: string;
        /**
         * Default: None
         *
         * Zone description
         */
        description?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: None
         *
         * TTL (Time To Live) value in seconds
         */
        ttl?: string;
        /**
         * Default: None
         *
         * Zone type
         */
        zone_type?: string;
        /**
         * Email of the zone owner (only applies if zone_type is primary)
         */
        email?: string;
        /**
         * Zone name
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Module to manage data centers in oVirt/RHV
       */
      ovirt_datacenter?: {
        /**
         * Compatibility version of the data center.
         */
        compatibility_version?: string;
        /**
         * Comment of the data center.
         */
        comment?: string;
        /**
         * Name of the data center to manage.
         */
        name: string;
        /**
         * MAC pool to be used by this datacenter.
         * IMPORTANT: This option is deprecated in oVirt/RHV 4.1. You should use C(mac_pool) in C(ovirt_clusters) module, as MAC pools are set per cluster since 4.1.
         */
        mac_pool?: string;
        /**
         * I(True) if the data center should be local, I(False) if should be shared.
         * Default value is set by engine.
         */
        local?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        poll_interval?: number | string;
        fetch_nested?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nested_attributes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * Should the data center be present or absent
         */
        state?: "present" | "absent";
        auth: {
          [k: string]: any;
        };
        timeout?: number | string;
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Quota mode of the data center. One of I(disabled), I(audit) or I(enabled)
         */
        quota_mode?: "disabled" | "audit" | "enabled";
        /**
         * Description of the data center.
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * Create, Update or Destroy a Target_Proxy. See U(https://cloud.google.com/compute/docs/load-balancing/http/target-proxies) for an overview. More details on the Target_Proxy API can be found at U(https://cloud.google.com/compute/docs/reference/latest/targetHttpProxies#resource-representations).
       */
      gcp_target_proxy?: {
        service_account_email?: string;
        service_account_permissions?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Name of the Url Map.  Required if type is HTTP or HTTPS proxy.
         */
        url_map_name?: string;
        pem_file?: string;
        state: "absent" | "present";
        /**
         * Name of the Target_Proxy.
         */
        target_proxy_name: string;
        credentials_file?: string;
        /**
         * Type of Target_Proxy. HTTP, HTTPS or SSL. Only HTTP is currently supported.
         */
        target_proxy_type: "HTTP";
        project_id?: string;
        [k: string]: any;
      };
      /**
       * Gather facts about ec2 volumes in AWS
       */
      ec2_vol_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add, modify or delete sudo command group within IPA server using IPA API.
       */
      ipa_sudocmdgroup?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manages NTP authentication.
       */
      nxos_ntp_auth?: {
        /**
         * Default: text
         *
         * Whether the given md5string is in cleartext or has been encrypted. If in cleartext, the device will encrypt it before storing it.
         */
        auth_type?: "text" | "encrypt";
        username?: string;
        ssh_keyfile?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Authentication key identifier (numeric).
         */
        key_id: string;
        host?: string;
        /**
         * MD5 String.
         */
        md5string: string;
        /**
         * Turns NTP authentication on or off.
         */
        authentication?: "on" | "off";
        /**
         * Whether the given key is required to be supplied by a time source for the device to synchronize to the time source.
         */
        trusted_key?: "true" | "false";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * This module allows you to restart the switch using the current startup configuration. The module is usually invoked after the running configuration has been saved over the startup configuration. This module uses SSH to manage network device configuration. The results of the operation can be viewed in results directory. For more information about this module from Lenovo and customizing it usage for your use cases, please visit U(http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_reload.html)
       */
      cnos_reload?: {
        [k: string]: any;
      };
      /**
       * Manipulate metadata for Rackspace Cloud Servers
       */
      rax_meta?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Controls daemontools services on remote hosts using the svc utility.
       */
      svc?: {
        dist?: string;
        /**
         * Name of the service to manage.
         */
        name: string;
        /**
         * Should a 'down' file exist or not, if it exists it disables auto startup. defaults to no. Downed does not imply stopped.
         */
        downed?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Wheater the service is enabled or not, if disabled it also implies stopped. Make note that a service can be enabled and downed (no auto restart).
         */
        enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: /service
         *
         * directory svscan watches for services
         */
        service_dir?: string;
        /**
         * C(Started)/C(stopped) are idempotent actions that will not run commands unless necessary.  C(restarted) will always bounce the svc (svc -t) and C(killed) will always bounce the svc (svc -k). C(reloaded) will send a sigusr1 (svc -1). C(once) will run a normally downed svc once (svc -o), not really an idempotent operation.
         */
        state?: "started" | "stopped" | "restarted" | "killed" | "reloaded" | "once";
        /**
         * directory where services are defined, the source of symlinks to service_dir.
         */
        service_src?: string;
        [k: string]: any;
      };
      /**
       * Collects a base set of device facts from a remote device that is running OS10.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module always collects a base set of facts from the device and can enable or disable collection of additional facts.
       */
      dellos10_facts?: {
        username?: string;
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        auth_pass?: string;
        host?: string;
        /**
         * Default: !config
         *
         * When supplied, this argument restricts the facts collected to a given subset.  Possible values for this argument include all, hardware, config, and interfaces.  You can specify a list of values to include a larger subset.  You can also use values with an initial M(!) to specify that a specific subset should not be collected.
         */
        gather_subset?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Manages DNS records via the v2 REST API of the DNS Made Easy service.  It handles records only; there is no manipulation of domains or monitor/account support yet. See: U(https://www.dnsmadeeasy.com/integration/restapi/)
       */
      dnsmadeeasy?: {
        /**
         * Domain to work with. Can be the domain name (e.g. "mydomain.com") or the numeric ID of the domain in DNS Made Easy (e.g. "839989") for faster resolution.
         */
        domain: string;
        /**
         * Record name to get/create/delete/update. If record_name is not specified; all records for the domain will be returned in "result" regardless of the state argument.
         */
        record_name?: string;
        /**
         * Default: 1800
         *
         * record's "Time to live".  Number of seconds the record remains cached in DNS servers.
         */
        record_ttl?: number | string;
        /**
         * Account Secret Key.
         */
        account_secret: string;
        /**
         * Account API Key.
         */
        account_key: string;
        /**
         * Record type.
         */
        record_type?: "A" | "AAAA" | "CNAME" | "HTTPRED" | "MX" | "NS" | "PTR" | "SRV" | "TXT";
        /**
         * whether the record should exist or not
         */
        state: "present" | "absent";
        /**
         * Record value. HTTPRED: <redirection URL>, MX: <priority> <target name>, NS: <name server>, PTR: <target name>, SRV: <priority> <weight> <port> <target name>, TXT: <text value>
         * If record_value is not specified; no changes will be made and the record will be returned in 'result' (in other words, this module can be used to fetch a record's current id, type, and ttl)
         */
        record_value?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage the state of a program monitored via I(Monit)
       */
      monit?: {
        /**
         * The state of service
         */
        state: "present" | "started" | "stopped" | "restarted" | "monitored" | "unmonitored" | "reloaded";
        /**
         * The name of the I(monit) program/process to manage
         */
        name: string;
        /**
         * Default: 300
         *
         * If there are pending actions for the service monitored by monit, then Ansible will check for up to this many seconds to verify the the requested action has been performed. Ansible will sleep for five seconds between each check.
         */
        timeout?: number | string;
        [k: string]: any;
      };
      /**
       * Manages UDLD global configuration params.
       */
      nxos_udld?: {
        /**
         * Ability to reset UDLD down interfaces.
         */
        reset?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        username?: string;
        ssh_keyfile?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Message time in seconds for UDLD packets.
         */
        msg_time?: string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Toggles aggressive mode.
         */
        aggressive?: "enabled" | "disabled";
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Creates or terminates ecs clusters.
       */
      ecs_cluster?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage I(libvirt) storage pools.
       */
      virt_pool?: {
        [k: string]: any;
      };
      /**
       * This module creates, deletes or modifys NFS client(s) for existing exports on Infinibox.
       */
      infini_export_client?: {
        /**
         * Default: present
         *
         * Creates/Modifies client when present and removes when absent.
         */
        state?: string;
        /**
         * Default: RW
         *
         * Read Write or Read Only Access.
         */
        access_mode?: string;
        /**
         * Name of the export.
         */
        export?: string;
        /**
         * Don't squash root user to anonymous. Will be set to "no" on creation if not specified explicitly.
         */
        no_root_squash?: string;
        /**
         * Client IP or Range. Ranges can be defined as follows 192.168.0.1-192.168.0.254.
         */
        client?: string;
        [k: string]: any;
      };
      /**
       * Manage dynamic, cluster-wide parameters for RabbitMQ
       */
      rabbitmq_parameter?: {
        /**
         * Default: rabbit
         *
         * erlang node name of the rabbit we wish to configure
         */
        node?: string;
        /**
         * Name of the parameter being set
         */
        name: string;
        /**
         * Name of the component of which the parameter is being set
         */
        component: string;
        /**
         * Value of the parameter, as a JSON term
         */
        value?: string;
        /**
         * Default: /
         *
         * vhost to apply access privileges.
         */
        vhost?: string;
        /**
         * Default: present
         *
         * Specify if user is to be added or removed
         */
        state?: "present" | "absent";
        [k: string]: any;
      };
      /**
       * Controls OpenWrt services on remote hosts.
       */
      openwrt_init?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Retrieve facts about all installed images on SmartOS. Facts will be inserted to the ansible_facts key.
       */
      smartos_image_facts?: {
        /**
         * Default: None
         *
         * Criteria for selecting image. Can be any value from image manifest and 'published_date', 'published', 'source', 'clones', and 'size'. More informaton can be found at U(https://smartos.org/man/1m/imgadm) under 'imgadm list'.
         */
        filters?: string;
        [k: string]: any;
      };
      /**
       * This module offers the ability to configure a BGP EVPN peer relationship on HUAWEI CloudEngine switches.
       */
      ce_evpn_bgp?: {
        username?: string;
        /**
         * Configures a device to advertise routes to its BGP EVPN peers.
         */
        advertise_router_type?: "arp" | "irb";
        /**
         * Enable or disable a device to advertise IP routes imported to a VPN instance to its EVPN instance.
         */
        advertise_l2vpn_evpn?: "enable" | "disable";
        /**
         * Specifies integral AS number. The value is an integer ranging from 1 to 4294967295.
         */
        as_number?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Associates a specified VPN instance with the IPv4 address family. The value is a string of 1 to 31 case-sensitive characters, spaces not supported.
         */
        vpn_name?: string;
        /**
         * Specify the name of a peer group that BGP peers need to join. The value is a string of 1 to 47 case-sensitive characters, spaces not supported.
         */
        peer_group_name?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Name of a BGP instance. The value is a string of 1 to 31 case-sensitive characters, spaces not supported.
         */
        bgp_instance: string;
        /**
         * Enable or disable a BGP device to exchange routes with a specified peer or peer group in the address family view.
         */
        peer_enable?: "true" | "false";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        host?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        /**
         * Specifies the IPv4 address of a BGP EVPN peer. The value is in dotted decimal notation.
         */
        peer_address?: string;
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * This module provides declarative management of LLDP interfaces configuration on Juniper JUNOS network devices.
       */
      junos_lldp_interface?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Name of the interface LLDP should be configured on.
         */
        name?: string;
        /**
         * Default: present
         *
         * Value of C(present) ensures given LLDP configured on given I(interfaces) and is enabled, for value of C(absent) LLDP configuration on given I(interfaces) deleted. Value C(enabled) ensures LLDP protocol is enabled on given I(interfaces) and for value of C(disabled) it ensures LLDP is disabled on given I(interfaces).
         */
        state?: "present" | "absent" | "enabled" | "disabled";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Default: True
         *
         * Specifies whether or not the configuration is active or deactivated
         */
        active?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        port?: number | string;
        transport?: string;
        [k: string]: any;
      };
      /**
       * The M(git_config) module changes git configuration by invoking 'git config'. This is needed if you don't want to use M(template) for the entire git config file (e.g. because you need to change just C(user.email) in /etc/.git/config).  Solutions involving M(command) are cumbersone or don't work correctly in check mode.
       */
      git_config?: {
        /**
         * Path to a git repository for reading and writing values from a specific repo.
         */
        repo?: string;
        /**
         * Specify which scope to read/set values from. This is required when setting config values. If this is set to local, you must also specify the repo parameter. It defaults to system only when not using I(list_all)=yes.
         */
        scope?: "local" | "global" | "system";
        /**
         * List all settings (optionally limited to a given I(scope))
         */
        list_all?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The name of the setting. If no value is supplied, the value will be read from the config if it has been set.
         */
        name?: string;
        /**
         * When specifying the name of a single setting, supply a value to set that setting to the given value.
         */
        value?: string;
        [k: string]: any;
      };
      /**
       * Manages VXLAN Network Virtualization Endpoint (NVE) overlay interface that terminates VXLAN tunnels.
       */
      nxos_vxlan_vtep?: {
        username?: string;
        timeout?: number | string;
        ssh_keyfile?: string;
        /**
         * Description of the NVE interface.
         */
        description?: string;
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        /**
         * Specify the loopback interface whose IP address should be used for the NVE interface.
         */
        source_interface?: string;
        /**
         * Specify mechanism for host reachability advertisement.
         */
        host_reachability?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Suppresses advertisement of the NVE loopback address until the overlay has converged.
         */
        source_interface_hold_down_time?: string;
        host?: string;
        /**
         * Default: True
         *
         * Administratively shutdown the NVE interface.
         */
        shutdown?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        provider?: {
          [k: string]: any;
        };
        /**
         * Interface name for the VXLAN Network Virtualization Endpoint.
         */
        interface: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Manage cache security groups in Amazon Elasticache.
       * Returns information about the specified cache cluster.
       */
      elasticache_parameter_group?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add or remove PostgreSQL schema from a remote host.
       */
      postgresql_schema?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manage taboo contracts on Cisco ACI fabrics.
       * More information from the internal APIC class I(vz:BrCP) at U(https://developer.cisco.com/media/mim-ref/MO-vzBrCP.html).
       */
      aci_taboo_contract?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Retrieve facts about one or more oVirt/RHV affinity labels.
       */
      ovirt_affinity_label_facts?: {
        /**
         * Name of the host, which affinity labels should be listed.
         */
        host?: string;
        /**
         * Name of the affinity labels which should be listed.
         */
        name?: string;
        /**
         * Name of the VM, which affinity labels should be listed.
         */
        vm?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of link aggregation groups on network devices.
       */
      net_linkagg?: {
        /**
         * Name of the link aggregation group.
         */
        name?: string;
        /**
         * Purge link aggregation groups not defined in the I(aggregate) parameter.
         */
        purge?: string;
        /**
         * Default: present
         *
         * State of the link aggregation group.
         */
        state?: string;
        /**
         * Default: True
         *
         * Mode of the link aggregation group. A value of C(on) will enable LACP. C(active) configures the link to actively information about the state of the link, or it can be configured in C(passive) mode ie. send link state information only when received them from another link.
         */
        mode?: string;
        /**
         * List of members interfaces of the link aggregation group. The value can be single interface or list of interfaces.
         */
        members?: string;
        /**
         * Minimum members that should be up before bringing up the link aggregation group.
         */
        min_links?: string;
        /**
         * List of link aggregation definitions.
         */
        aggregate?: string;
        [k: string]: any;
      };
      /**
       * Manages SNMP contact configurations on HUAWEI CloudEngine switches.
       */
      ce_snmp_contact?: {
        username?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        host?: string;
        /**
         * Contact information.
         */
        contact: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Gather facts about ec2 security groups in AWS.
       */
      ec2_group_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create, update and remove Rundeck ACL policies through HTTP API.
       */
      rundeck_acl_policy?: {
        /**
         * Sets the project name.
         */
        name: string;
        /**
         * Sets the rundeck instance URL.
         */
        url: string;
        /**
         * Sets the token to authenticate against Rundeck API.
         */
        token: string;
        /**
         * Sets the project which receive the ACL policy.
         * If unset, it's a system ACL policy.
         */
        project?: string;
        /**
         * Default: present
         *
         * Create or remove Rundeck project.
         */
        state?: "present" | "absent";
        /**
         * Sets the ACL policy content.
         * ACL policy content is a YAML object as described in http://rundeck.org/docs/man5/aclpolicy.html.
         * It can be a YAML string or a pure Ansible inventory YAML object.
         */
        policy?: string;
        /**
         * Default: 14
         *
         * Sets the API version used by module.
         * API version must be at least 14.
         */
        api_version?: number | string;
        [k: string]: any;
      };
      /**
       * This module uncoditionally saves the configuration on the target netscaler node.
       * This module does not support check mode.
       * This module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.
       */
      netscaler_save_config?: {
        /**
         * Default: http
         *
         * Which protocol to use when accessing the nitro API objects.
         */
        nitro_protocol?: "http" | "https";
        /**
         * The ip address of the netscaler appliance where the nitro API calls will be made.
         * The port can be specified with the colon (:). E.g. C(192.168.1.1:555).
         */
        nsip: string;
        /**
         * The username with which to authenticate to the netscaler node.
         */
        nitro_user: string;
        /**
         * The password with which to authenticate to the netscaler node.
         */
        nitro_pass: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 310
         *
         * Time in seconds until a timeout error is thrown when establishing a new session with Netscaler.
         */
        nitro_timeout?: number;
        [k: string]: any;
      };
      /**
       * Use this module to manage crontab and environment variables entries. This module allows you to create environment variables and named crontab entries, update, or delete them.
       * When crontab jobs are managed: the module includes one line with the description of the crontab entry C("#Ansible: <name>") corresponding to the "name" passed to the module, which is used by future ansible/module calls to find/check the state. The "name" parameter should be unique, and changing the "name" value will result in a new cron task being created (or a different one being removed).
       * When environment variables are managed: no comment line is added, but, when the module needs to find/check the state, it uses the "name" parameter to find the environment variable definition line.
       * When using symbols such as %, they must be properly escaped.
       */
      cron?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Configure an s3 bucket as a website
       */
      s3_website?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages Layer 2 interfaces
       */
      nxos_switchport?: {
        [k: string]: any;
      };
      /**
       * This module provides declarative management of logging on Arista Eos devices.
       */
      eos_logging?: {
        username?: string;
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        /**
         * If value of C(dest) is I(host) C(name) should be specified, which indicates hostname or IP address.
         */
        name?: string;
        /**
         * Set logging facility.
         */
        facility?: string;
        /**
         * Destination of the logs.
         */
        dest?: "on" | "host" | "console" | "monitor" | "buffered";
        auth_pass?: string;
        /**
         * Set logging severity levels.
         */
        level?:
          | "emergencies"
          | "alerts"
          | "critical"
          | "errors"
          | "warnings"
          | "notifications"
          | "informational"
          | "debugging";
        /**
         * Default: present
         *
         * State of the logging configuration.
         */
        state?: "present" | "absent";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of logging definitions.
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "eapi";
        /**
         * Size of buffer. The acceptable value is in range from 10 to 2147483647 bytes.
         */
        size?: number | string;
        [k: string]: any;
      };
      /**
       * Create or terminates AWS virtual private clouds.  This module has a dependency on python-boto.
       */
      ec2_vpc?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Deploy applications to JBoss standalone using the filesystem
       */
      jboss?: {
        /**
         * The remote path of the application ear or war to deploy
         */
        src?: string;
        /**
         * Default: present
         *
         * Whether the application should be deployed or undeployed
         */
        state?: "present" | "absent";
        /**
         * Default: /var/lib/jbossas/standalone/deployments
         *
         * The location in the filesystem where the deployment scanner listens
         */
        deploy_path?: string;
        /**
         * The name of the deployment
         */
        deployment: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure SystemConfiguration object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_systemconfiguration?: {
        /**
         * Boolean flag to set docker_mode.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        docker_mode?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Proxyconfiguration settings for systemconfiguration.
         */
        proxy_configuration?: {
          [k: string]: any;
        };
        /**
         * Allowed hmac list for ssh to the management interface on the controller and service engines.
         * If this is not specified, all the default hmacs are allowed.
         * Ssh -q mac provides the list of default hmacs supported.
         */
        ssh_hmacs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Portalconfiguration settings for systemconfiguration.
         */
        portal_configuration?: {
          [k: string]: any;
        };
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Ntpconfiguration settings for systemconfiguration.
         */
        ntp_configuration?: {
          [k: string]: any;
        };
        /**
         * Allowed ciphers list for ssh to the management interface on the controller and service engines.
         * If this is not specified, all the default ciphers are allowed.
         * Ssh -q cipher provides the list of default ciphers supported.
         */
        ssh_ciphers?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        api_version?: string;
        username?: string;
        /**
         * Tenantconfiguration settings for systemconfiguration.
         */
        global_tenant_config?: {
          [k: string]: any;
        };
        /**
         * Dnsconfiguration settings for systemconfiguration.
         */
        dns_configuration?: {
          [k: string]: any;
        };
        controller?: string;
        password?: string;
        tenant?: string;
        /**
         * Emailconfiguration settings for systemconfiguration.
         */
        email_configuration?: {
          [k: string]: any;
        };
        /**
         * Dns virtualservices hosting fqdn records for applications across avi vantage.
         * If no virtualservices are provided, avi vantage will provide dns services for configured applications.
         * Switching back to avi vantage from dns virtualservices is not allowed.
         * It is a reference to an object of type virtualservice.
         */
        dns_virtualservice_refs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Linuxconfiguration settings for systemconfiguration.
         */
        linux_configuration?: {
          [k: string]: any;
        };
        /**
         * Snmpconfiguration settings for systemconfiguration.
         */
        snmp_configuration?: {
          [k: string]: any;
        };
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * Adminauthconfiguration settings for systemconfiguration.
         */
        admin_auth_configuration?: {
          [k: string]: any;
        };
        /**
         * Configure ip access control for controller to restrict open access.
         */
        mgmt_ip_access_control?: {
          [k: string]: any;
        };
        tenant_uuid?: string;
        [k: string]: any;
      };
      /**
       * Provides an interface to manage SAN Manager resources. Can create, update, or delete.
       */
      oneview_san_manager?: {
        username?: string;
        image_streamer_hostname?: string;
        hostname?: string;
        config?: string;
        validate_etag?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * Indicates the desired state for the Uplink Set resource. - C(present) ensures data properties are compliant with OneView. - C(absent) removes the resource from OneView, if it exists. - C(connection_information_set) updates the connection information for the SAN Manager. This operation is non-idempotent.
         */
        state?: "present" | "absent" | "connection_information_set";
        password?: string;
        /**
         * List with SAN Manager properties.
         */
        data: {
          [k: string]: any;
        };
        api_version?: number | string;
        [k: string]: any;
      };
      /**
       * Create, update and remove clusters.
       */
      cs_cluster?: {
        /**
         * Username for the cluster.
         */
        username?: string;
        /**
         * Ovm3 native OCFS2 clustering enabled for cluster.
         */
        ovm3_cluster?: string;
        /**
         * Ovm3 native pooling enabled for cluster.
         */
        ovm3_pool?: string;
        api_http_method?: "get" | "post";
        /**
         * Name of the pod in which the cluster belongs to.
         */
        pod?: string;
        /**
         * Type of virtual switch used for public traffic in the cluster.
         * Allowed values are, vmwaresvs (for VMware standard vSwitch) and vmwaredvs (for VMware distributed vSwitch)
         */
        public_vswitch_type?: "vmwaresvs" | "vmwaredvs";
        api_url?: string;
        /**
         * Name of the zone in which the cluster belongs to.
         * If not set, default zone is used.
         */
        zone?: string;
        /**
         * Type of the cluster.
         * Required if C(state=present)
         */
        cluster_type?: "CloudManaged" | "ExternalManaged";
        /**
         * Ovm3 vip to use for pool (and cluster).
         */
        ovm3_vip?: string;
        /**
         * IP address of the VSM associated with this cluster.
         */
        vms_ip_address?: string;
        /**
         * Default: present
         *
         * State of the cluster.
         */
        state?: "present" | "absent" | "disabled" | "enabled";
        api_key?: string;
        /**
         * Type of virtual switch used for guest traffic in the cluster.
         * Allowed values are, vmwaresvs (for VMware standard vSwitch) and vmwaredvs (for VMware distributed vSwitch)
         */
        guest_vswitch_type?: "vmwaresvs" | "vmwaredvs";
        /**
         * Name of virtual switch used for guest traffic in the cluster.
         * This would override zone wide traffic label setting.
         */
        guest_vswitch_name?: string;
        api_secret?: string;
        api_timeout?: number | string;
        /**
         * Password for the cluster.
         */
        password?: string;
        /**
         * Username for the VSM associated with this cluster.
         */
        vms_username?: string;
        /**
         * name of the cluster.
         */
        name: string;
        /**
         * URL for the cluster
         */
        url?: string;
        /**
         * Default: none
         *
         * Name the hypervisor to be used.
         * Required if C(state=present).
         */
        hypervisor?:
          | "KVM"
          | "kvm"
          | "VMware"
          | "vmware"
          | "BareMetal"
          | "baremetal"
          | "XenServer"
          | "xenserver"
          | "LXC"
          | "lxc"
          | "HyperV"
          | "hyperv"
          | "UCS"
          | "ucs"
          | "OVM"
          | "ovm"
          | "Simulator"
          | "simulator";
        api_region?: string;
        /**
         * Name of virtual switch used for public traffic in the cluster.
         * This would override zone wide traffic label setting.
         */
        public_vswitch_name?: string;
        /**
         * Password for the VSM associated with this cluster.
         */
        vms_password?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of VLANs on Juniper JUNOS network devices.
       */
      junos_vlan?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Name of the VLAN.
         */
        name?: string;
        /**
         * List of interfaces to check the VLAN has been configured correctly.
         */
        interfaces?: string;
        /**
         * Default: present
         *
         * State of the VLAN configuration.
         */
        state?: "present" | "absent";
        /**
         * Default: True
         *
         * Specifies whether or not the configuration is active or deactivated
         */
        active?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        host?: string;
        /**
         * ID of the VLAN.
         */
        vlan_id?: number | string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of VLANs definitions.
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        port?: number | string;
        transport?: string;
        /**
         * Text description of VLANs.
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * Manages SNMP community configuration.
       */
      nxos_snmp_community?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Group to which the community belongs.
         */
        group?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Case-sensitive community string.
         */
        community: string;
        /**
         * Default: 1
         *
         * ACL name to filter snmp requests.
         */
        acl?: string;
        /**
         * Access type for community.
         */
        access?: "ro" | "rw";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Look up the most recent AMI on AWS for a given operating system.
       * Returns C(ami), C(aki), C(ari), C(serial), C(tag)
       * If there is no AKI or ARI associated with an image, these will be C(null).
       * Only supports images from cloud-images.ubuntu.com
       * Example output: C({"ami": "ami-69f5a900", "changed": false, "aki": "aki-88aa75e1", "tag": "release", "ari": null, "serial": "20131024"})
       */
      ec2_ami_search?: {
        /**
         * Default: server
         *
         * Type of release.
         */
        stream?: "server" | "desktop";
        /**
         * Default: paravirtual
         *
         * virutalization type
         */
        virt?: "paravirtual" | "hvm";
        /**
         * Default: us-east-1
         *
         * EC2 region
         */
        region?:
          | "ap-northeast-1"
          | "ap-southeast-1"
          | "ap-northeast-2"
          | "ap-southeast-2"
          | "ap-south-1"
          | "ca-central-1"
          | "eu-central-1"
          | "eu-west-1"
          | "eu-west-2"
          | "sa-east-1"
          | "us-east-1"
          | "us-east-2"
          | "us-west-1"
          | "us-west-2"
          | "us-gov-west-1";
        /**
         * short name of the release (e.g., C(precise))
         */
        release: string;
        /**
         * Default: amd64
         *
         * CPU architecture
         */
        arch?: "i386" | "amd64";
        /**
         * Default: ebs
         *
         * Back-end store for instance
         */
        store?: "ebs" | "ebs-io1" | "ebs-ssd" | "instance-store";
        /**
         * Linux distribution (e.g., C(ubuntu))
         */
        distro: "ubuntu";
        [k: string]: any;
      };
      /**
       * Creates or cancels SoftLayer instances. When created, optionally waits for it to be 'running'.
       */
      sl_vm?: {
        /**
         * Falg to determine if the instance should be deployed in dedicated space
         */
        dedicated?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Count of cpus to be assigned to new virtual instance
         */
        cpus?: number | string;
        /**
         * Flag to determine if the instance should be private only
         */
        private?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Domain name to be provided to a virtual instance
         */
        domain?: string;
        /**
         * VLAN by its Id to be assigned to the private NIC
         */
        private_vlan?: string;
        /**
         * Default: True
         *
         * Flag to determine if the instance should be hourly billed
         */
        hourly?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * List of ssh keys by their Id to be assigned to a virtual instance
         */
        ssh_keys?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Hostname to be provided to a virtual instance
         */
        hostname?: string;
        /**
         * OS Code to be used for new virtual instance
         */
        os_code?: string;
        wait_time?: number | string;
        /**
         * Default: present
         *
         * Create, or cancel a virtual instance. Specify "present" for create, "absent" to cancel.
         */
        state?: "present" | "absent";
        /**
         * URL of a post provisioning script ot be loaded and exectued on virtual instance
         */
        post_uri?: string;
        /**
         * Amount of memory to be assigned to new virtual instance
         */
        memory?: number | string;
        /**
         * Tag or list of tags to be provided to a virtual instance
         */
        tags?: string;
        /**
         * Image Template to be used for new virtual instance
         */
        image_id?: string;
        /**
         * Default: 10
         *
         * NIC Speed to be assigned to new virtual instance
         */
        nic_speed?: number | string;
        /**
         * VLAN by its Id to be assigned to the public NIC
         */
        public_vlan?: string;
        /**
         * Default: True
         *
         * Flag used to wait for active status before returning
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Datacenter for the virtual instance to be deployed
         */
        datacenter?:
          | "ams01"
          | "ams03"
          | "che01"
          | "dal01"
          | "dal05"
          | "dal06"
          | "dal09"
          | "dal10"
          | "fra02"
          | "hkg02"
          | "hou02"
          | "lon02"
          | "mel01"
          | "mex01"
          | "mil01"
          | "mon01"
          | "osl01"
          | "par01"
          | "sjc01"
          | "sjc03"
          | "sao01"
          | "sea01"
          | "sng01"
          | "syd01"
          | "tok02"
          | "tor01"
          | "wdc01"
          | "wdc04";
        /**
         * Default: [25]
         *
         * List of disk sizes to be assigned to new virtual instance
         */
        disks?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Instance Id of the virtual instance to perform action option
         */
        instance_id?: string;
        /**
         * Default: True
         *
         * Flag to determine if local disk should be used for the new instance
         */
        local_disk?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Create or destroy Qtrees.
       */
      na_cdot_qtree?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Creates, modifies, and deletes RDS parameter groups. This module has a dependency on python-boto >= 2.5.
       */
      rds_param_group?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Reads data out of XenAPI, can be used instead of multiple xe commands.
       */
      xenserver_facts?: {
        [k: string]: any;
      };
      /**
       * This module provides declarative management of link aggregation groups on Juniper JUNOS network devices.
       */
      junos_linkagg?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Description of Interface.
         */
        description?: string;
        /**
         * Minimum members that should be up before bringing up the link aggregation group.
         */
        min_links?: number | string;
        /**
         * Default: present
         *
         * State of the link aggregation group.
         */
        state?: "present" | "absent" | "up" | "down";
        /**
         * Number of aggregated ethernet devices that can be configured. Acceptable integer value is between 1 and 128.
         */
        device_count?: number | string;
        /**
         * List of members interfaces of the link aggregation group. The value can be single interface or list of interfaces.
         */
        members?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * List of link aggregation definitions.
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        host?: string;
        /**
         * Mode of the link aggregation group. A value of C(on) will enable LACP in C(passive) mode. C(active) configures the link to actively information about the state of the link, or it can be configured in C(passive) mode ie. send link state information only when received them from another link. A value of C(off) will disable LACP.
         */
        mode?: "on" | "off" | "active" | "passive";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Default: True
         *
         * Specifies whether or not the configuration is active or deactivated
         */
        active?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        port?: number | string;
        transport?: string;
        /**
         * Name of the link aggregation group.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Updates Vertica configuration parameters.
       */
      vertica_configuration?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * This module provides declarative management of node system attributes on Cisco NXOS devices.  It provides an option to configure host system parameters or remove those parameters from the device active configuration.
       */
      nxos_system?: {
        username?: string;
        ssh_keyfile?: string;
        lookup_source?: string;
        /**
         * Configures a list of domain name suffixes to search when performing DNS name resolution. This argument accepts either a list of domain names or a list of dicts that configure the domain name and VRF name.  See examples.
         */
        domain_search?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Configure the device hostname parameter. This option takes an ASCII string value.
         */
        hostname?: string;
        /**
         * Specifies the mtu, must be an integer.
         */
        system_mtu?: number | string;
        /**
         * Configures the default domain name suffix to be used when referencing this node by its FQDN.  This argument accepts either a list of domain names or a list of dicts that configure the domain name and VRF name.  See examples.
         */
        domain_name?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Enables or disables the DNS lookup feature in Cisco NXOS.  This argument accepts boolean values.  When enabled, the system will try to resolve hostnames using DNS and when disabled, hostnames will not be resolved.
         */
        domain_lookup?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        host?: string;
        /**
         * Default: present
         *
         * State of the configuration values in the device's current active configuration.  When set to I(present), the values should be configured in the device active configuration and when set to I(absent) the values should not be in the device active configuration
         */
        state?: "present" | "absent";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of DNS name servers by IP address to use to perform name resolution lookups.  This argument accepts either a list of DNS servers or a list of hashes that configure the name server and VRF name.  See examples.
         */
        name_servers?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Creates, deletes, or modifies rds instances.  When creating an instance it can be either a new instance or a read-only replica of an existing instance. This module has a dependency on python-boto >= 2.5. The 'promote' command requires boto >= 2.18.0. Certain features such as tags rely on boto.rds2 (boto >= 2.26.0)
       */
      rds?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Allows the addition, modification and deletion of key/value entries in a consul cluster via the agent. The entire contents of the record, including the indices, flags and session are returned as 'value'.
       * If the key represents a prefix then Note that when a value is removed, the existing value if any is returned as part of the results.
       * See http://www.consul.io/docs/agent/http.html#kv for more details.
       */
      consul_kv?: {
        /**
         * Default: None
         *
         * used when acquiring a lock with a session. If the cas is 0, then Consul will only put the key if it does not already exist. If the cas value is non-zero, then the key is only set if the index matches the ModifyIndex of that key.
         */
        cas?: string;
        /**
         * if the key represents a prefix, each entry with the prefix can be retrieved by setting this to true.
         */
        recurse?: string;
        /**
         * Default: present
         *
         * the action to take with the supplied key and value. If the state is 'present', the key contents will be set to the value supplied, 'changed' will be set to true only if the value was different to the current contents. The state 'absent' will remove the key/value pair, again 'changed' will be set to true only if the key actually existed prior to the removal. An attempt can be made to obtain or free the lock associated with a key/value pair with the states 'acquire' or 'release' respectively. a valid session must be supplied to make the attempt changed will be true if the attempt is successful, false otherwise.
         */
        state?: string;
        /**
         * the value should be associated with the given key, required if state is present
         */
        value?: string;
        /**
         * Default: None
         *
         * the token key indentifying an ACL rule set that controls access to the key value pair
         */
        token?: string;
        /**
         * Default: None
         *
         * the session that should be used to acquire or release a lock associated with a key/value pair
         */
        session?: string;
        /**
         * Default: None
         *
         * opaque integer value that can be passed when setting a value.
         */
        flags?: string;
        /**
         * the key at which the value should be stored.
         */
        key?: string;
        /**
         * Default: localhost
         *
         * host of the consul agent defaults to localhost
         */
        host?: string;
        /**
         * Default: http
         *
         * the protocol scheme on which the consul agent is running
         */
        scheme?: string;
        /**
         * Default: True
         *
         * whether to verify the tls certificate of the consul agent
         */
        validate_certs?: string;
        /**
         * Default: 8500
         *
         * the port on which the consul agent is running
         */
        port?: string;
        [k: string]: any;
      };
      /**
       * Run commands (remotely) through the PsExec service
       * Run commands as another (domain) user (with elevated privileges)
       */
      win_psexec?: {
        /**
         * The (remote) user to run the command as.
         * If not provided, the current user is used.
         */
        username?: string;
        /**
         * Default: no
         *
         * Run the command as limited user (strips the Administrators group and allows only privileges assigned to the Users group).
         */
        limited?: string;
        /**
         * Default: psexec.exe
         *
         * The location of the PsExec utility (in case it is not located in your PATH).
         */
        executable?: string;
        /**
         * Run the command from this (remote) directory.
         */
        chdir?: string;
        /**
         * Default: no
         *
         * Do not display the startup banner and copyright message.
         * This only works for specific versions of the PsExec binary.
         */
        nobanner?: string;
        /**
         * Default: no
         *
         * Run the command without loading the account's profile.
         */
        noprofile?: string;
        /**
         * Default: no
         *
         * Run the remote command in the System account.
         */
        system?: string;
        /**
         * Default: no
         *
         * Run the command with elevated privileges.
         */
        elevated?: string;
        /**
         * Used to run the command at a different priority.
         */
        priority?: string;
        /**
         * The hostnames to run the command.
         * If not provided, the command is run locally.
         */
        hostnames?: string;
        /**
         * The command line to run through PsExec (limited to 260 characters).
         */
        command?: string;
        /**
         * The connection timeout in seconds
         */
        timeout?: string;
        /**
         * Default: yes
         *
         * Wait for the application to terminate.
         * Only use for non-interactive applications.
         */
        wait?: string;
        /**
         * The password for the (remote) user to run the command as.
         * This is mandatory in order authenticate yourself.
         */
        password?: string;
        /**
         * Default: no
         *
         * Run the program so that it interacts with the desktop on the remote system.
         */
        interactive?: string;
        [k: string]: any;
      };
      /**
       * This module provides user management for ejabberd servers
       */
      ejabberd_user?: {
        /**
         * the name of the user to manage
         */
        username?: string;
        /**
         * Default: present
         *
         * describe the desired state of the user to be managed
         */
        state?: "present" | "absent";
        /**
         * the password to assign to the username
         */
        password?: string;
        /**
         * enables or disables the local syslog facility for this module
         */
        logging?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * the ejabberd host associated with this username
         */
        host?: string;
        [k: string]: any;
      };
      /**
       * Create virtual machines snapshots
       */
      vmware_guest_snapshot?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * This module boots a system through its HP iLO interface. The boot media can be one of: cdrom, floppy, hdd, network or usb.
       * This module requires the hpilo python module.
       */
      hpilo_boot?: {
        /**
         * Whether to force a reboot (even when the system is already booted).
         * As a safeguard, without force, hpilo_boot will refuse to reboot a server that is already running.
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: network
         *
         * The boot media to boot the system from
         */
        media?: "cdrom" | "floppy" | "rbsu" | "hdd" | "network" | "normal" | "usb";
        /**
         * The URL of a cdrom, floppy or usb boot media image. protocol://username:password@hostname:port/filename
         * protocol is either 'http' or 'https'
         * username:password is optional
         * port is optional
         */
        image?: string;
        /**
         * Default: TLSv1
         *
         * Change the ssl_version used.
         */
        ssl_version?: "SSLv3" | "SSLv23" | "TLSv1" | "TLSv1_1" | "TLSv1_2";
        /**
         * Default: boot_once
         *
         * The state of the boot media.
         * no_boot: Do not boot from the device
         * boot_once: Boot from the device once and then notthereafter
         * boot_always: Boot from the device each time the serveris rebooted
         * connect: Connect the virtual media device and set to boot_always
         * disconnect: Disconnects the virtual media device and set to no_boot
         * poweroff: Power off the server
         */
        state?: "boot_always" | "boot_once" | "connect" | "disconnect" | "no_boot" | "poweroff";
        /**
         * The HP iLO hostname/address that is linked to the physical system.
         */
        host: string;
        /**
         * Default: Administrator
         *
         * The login name to authenticate to the HP iLO interface.
         */
        login?: string;
        /**
         * Default: admin
         *
         * The password to authenticate to the HP iLO interface.
         */
        password?: string;
        [k: string]: any;
      };
      /**
       * Gathers various details related to Lambda functions, including aliases, versions and event source mappings. Use module M(lambda) to manage the lambda function itself, M(lambda_alias) to manage function aliases and M(lambda_event) to manage lambda event source mappings.
       */
      lambda_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Execute vrouter-loopback-interface-add, vrouter-loopback-interface-remove commands.
       * Each fabric, cluster, standalone switch, or virtual network (VNET) can provide its tenants with a virtual router (vRouter) service that forwards traffic between networks and implements Layer 3 protocols.
       */
      pn_vrouterlbif?: {
        /**
         * Specify the name of the vRouter.
         */
        pn_vrouter_name: string;
        /**
         * Provide login password if user is not root.
         */
        pn_clipassword?: string;
        /**
         * Provide login username if user is not root.
         */
        pn_cliusername?: string;
        /**
         * Specify the IP address.
         */
        pn_interface_ip?: string;
        /**
         * State the action to perform. Use 'present' to add vrouter loopback interface and 'absent' to remove vrouter loopback interface.
         */
        state: "present" | "absent";
        /**
         * Specify the interface index from 1 to 255.
         */
        pn_index?: number | string;
        /**
         * Target switch(es) to run the cli on.
         */
        pn_cliswitch?: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure GslbGeoDbProfile object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_gslbgeodbprofile?: {
        username?: string;
        /**
         * Uuid of the geodb profile.
         * Field introduced in 17.1.1.
         */
        uuid?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * Field introduced in 17.1.1.
         */
        description?: string;
        controller?: string;
        /**
         * It is a reference to an object of type tenant.
         * Field introduced in 17.1.1.
         */
        tenant_ref?: string;
        /**
         * This field indicates that this object is replicated across gslb federation.
         * Field introduced in 17.1.3.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        is_federated?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        tenant?: string;
        /**
         * List of geodb entries.
         * An entry can either be a geodb file or an ip address group with geo properties.
         * Field introduced in 17.1.1.
         */
        entries?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * A user-friendly name for the geodb profile.
         * Field introduced in 17.1.1.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Handles the EVPN control plane for VXLAN.
       */
      nxos_evpn_global?: {
        username?: string;
        save?: string;
        ssh_keyfile?: string;
        config?: string;
        include_defaults?: string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * EVPN control plane.
         */
        nv_overlay_evpn:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Manages I(apt) packages (such as for Debian/Ubuntu).
       */
      apt?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages I(apk) packages for Alpine Linux.
       */
      apk?: {
        /**
         * Default: present
         *
         * Indicates the desired package(s) state.
         * C(present) ensures the package(s) is/are present.
         * C(absent) ensures the package(s) is/are absent.
         * C(latest) ensures the package(s) is/are present and the latest version(s).
         */
        state?: "present" | "installed" | "absent" | "removed" | "latest";
        /**
         * Upgrade all installed packages to their latest version.
         */
        upgrade?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Update repository indexes. Can be run with other steps or on it's own.
         */
        update_cache?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A package name, like C(foo), or mutliple packages, like C(foo, bar).
         */
        name?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        [k: string]: any;
      };
      /**
       * Creates, Removes and configures a IIS Web applications
       */
      win_iis_webapplication?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Composer is a tool for dependency management in PHP. It allows you to declare the dependent libraries your project needs and it will install them in your project for you
       */
      composer?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * This module allows Ansible to interface with the PubNub BLOCKS infrastructure by providing the following operations: create / remove, start / stop and rename for blocks and create / modify / remove for event handlers
       */
      pubnub_blocks?: {
        /**
         * Name of PubNub account for from which C(application) will be used to manage blocks.
         * User's account will be used if value not set or empty.
         */
        account?: string;
        /**
         * Default: New block
         *
         * Short block description which will be later visible on admin.pubnub.com. Used only if block doesn't exists and won't change description for existing block.
         */
        description?: string;
        /**
         * Name of target PubNub application for which blocks configuration on specific C(keyset) will be done.
         */
        application: string;
        /**
         * Default: True
         *
         * This key allow to try skip certificates check when performing REST API calls. Sometimes host may have issues with certificates on it and this will cause problems to call PubNub REST API.
         * If check should be ignored C(False) should be passed to this parameter.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * In case if single play use blocks management module few times it is preferred to enabled 'caching' by making previous module to share gathered artifacts and pass them to this parameter.
         *
         */
        cache?: {
          [k: string]: any;
        };
        /**
         * Name of application's keys set which is bound to managed blocks.
         */
        keyset: string;
        /**
         * Default: started
         *
         * Intended block state after event handlers creation / update process will be completed.
         */
        state?: "started" | "stopped" | "present" | "absent";
        /**
         * Password which match to account to which specified C(email) belong.
         * Not required if C(cache) contains result of previous module call (in same play).
         */
        password?: string;
        /**
         * List of fields which should be changed by block itself (doesn't affect any event handlers).
         * Possible options for change is: C(name).
         */
        changes?: {
          [k: string]: any;
        };
        /**
         * Email from account for which new session should be started.
         * Not required if C(cache) contains result of previous module call (in same play).
         */
        email?: string;
        /**
         * List of event handlers which should be updated for specified block C(name).
         * Each entry for new event handler should contain: C(name), C(src), C(channels), C(event). C(name) used as event handler name which can be used later to make changes to it.
         * C(src) is full path to file with event handler code.
         * C(channels) is name of channel from which event handler is waiting for events.
         * C(event) is type of event which is able to trigger event handler: I(js-before-publish), I(js-after-publish), I(js-after-presence).
         * Each entry for existing handlers should contain C(name) (so target handler can be identified). Rest parameters (C(src), C(channels) and C(event)) can be added if changes required for them.
         * It is possible to rename event handler by adding C(changes) key to event handler payload and pass dictionary, which will contain single key C(name), where new name should be passed.
         * To remove particular event handler it is possible to set C(state) for it to C(absent) and it will be removed.
         */
        event_handlers?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Name of managed block which will be later visible on admin.pubnub.com.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Sends an arbitrary command to an BIG-IP node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.
       */
      bigip_command?: {
        /**
         * Default: 10
         *
         * Specifies the number of retries a command should by tried before it is considered failed. The command is run on the target device every retry and evaluated against the I(wait_for) conditionals.
         */
        retries?: string;
        /**
         * The commands to send to the remote BIG-IP device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retries as expired.
         * The I(commands) argument also accepts an alternative form that allows for complex values that specify the command to run and the output format to return. This can be done on a command by command basis. The complex argument supports the keywords C(command) and C(output) where C(command) is the command to run and C(output) is 'text' or 'one-line'.
         */
        commands?: string;
        /**
         * Specifies what to evaluate from the output of the command and what conditionals to apply.  This argument will cause the task to wait for a particular conditional to be true before moving forward. If the conditional is not true by the configured retries, the task fails. See examples.
         */
        wait_for?: string;
        /**
         * Default: all
         *
         * The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy. Valid values are C(all) or C(any). If the value is set to C(all) then all conditionals in the I(wait_for) must be satisfied. If the value is set to C(any) then only one of the values must be satisfied.
         */
        match?: string;
        /**
         * Default: 1
         *
         * Configures the interval in seconds to wait between retries of the command. If the command does not pass the specified conditional, the interval indicates how to long to wait before trying the command again.
         */
        interval?: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure StringGroup object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_stringgroup?: {
        username?: string;
        /**
         * Uuid of the string group.
         */
        uuid?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * User defined description for the object.
         */
        description?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        controller?: string;
        /**
         * Configure key value in the string group.
         */
        kv?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        tenant?: string;
        password?: string;
        /**
         * Type of stringgroup.
         * Enum options - SG_TYPE_STRING, SG_TYPE_KEYVAL.
         * Default value when not specified in API or module is interpreted by Avi Controller as SG_TYPE_STRING.
         */
        type: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Name of the string group.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Uses .NET libraries to convert text to speech and optionally play .wav sounds.  Audio Service needs to be running and some kind of speakers or headphones need to be attached to the windows target(s) for the speech to be audible.
       */
      win_say?: {
        /**
         * Full path to a C(.wav) file containing a sound to play before the text is spoken.
         * Useful on conference calls to alert other speakers that ansible has something to say.
         */
        start_sound_path?: string;
        /**
         * Full path to a windows format text file containing the text to be spokend.
         * Use either C(msg) or C(msg_file).
         * Optional so that you can use this module just to play sounds.
         */
        msg_file?: string;
        /**
         * Full path to a C(.wav) file containing a sound to play after the text has been spoken.
         * Useful on conference calls to alert other speakers that ansible has finished speaking.
         */
        end_sound_path?: string;
        /**
         * The text to be spoken.
         * Use either C(msg) or C(msg_file).
         * Optional so that you can use this module just to play sounds.
         */
        msg?: string;
        /**
         * Default: system default voice
         *
         * Which voice to use. See notes for how to discover installed voices.
         * If the requested voice is not available the default voice will be used. Example voice names from Windows 10 are C(Microsoft Zira Desktop) and C(Microsoft Hazel Desktop).
         */
        voice?: string;
        /**
         * How fast or slow to speak the text.
         * Must be an integer value in the range -10 to 10.
         * -10 is slowest, 10 is fastest.
         */
        speech_speed?: string;
        [k: string]: any;
      };
      /**
       * Create, update, or delete OpenStack host aggregates. If a aggregate with the supplied name already exists, it will be updated with the new name, new availability zone, new metadata and new list of hosts.
       */
      os_nova_host_aggregate?: {
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: None
         *
         * Availability zone to create aggregate into.
         */
        availability_zone?: string;
        /**
         * Default: None
         *
         * List of hosts to set for an aggregate.
         */
        hosts?: string;
        /**
         * Name of the aggregate.
         */
        name?: string;
        /**
         * Default: None
         *
         * Metadata dict.
         */
        metadata?: string;
        [k: string]: any;
      };
      /**
       * Sends arbitrary commands to an aruba node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.
       * This module does not support running commands in configuration mode. Please use M(aruba_config) to configure Aruba devices.
       */
      aruba_command?: {
        [k: string]: any;
      };
      /**
       * Retrieve facts about available OpenStack instance flavors. By default, facts about ALL flavors are retrieved. Filters can be applied to get facts for only matching flavors. For example, you can filter on the amount of RAM available to the flavor, or the number of virtual CPUs available to the flavor, or both. When specifying multiple filters, *ALL* filters must match on a flavor before that flavor is returned as a fact.
       */
      os_flavor_facts?: {
        /**
         * A string used for filtering flavors based on the number of virtual CPUs desired. Format is the same as the I(ram) parameter.
         */
        vcpus?: string;
        /**
         * A string used for filtering flavors based on the amount of RAM (in MB) desired. This string accepts the following special values: 'MIN' (return flavors with the minimum amount of RAM), and 'MAX' (return flavors with the maximum amount of RAM).
         * A specific amount of RAM may also be specified. Any flavors with this exact amount of RAM will be returned.
         * A range of acceptable RAM may be given using a special syntax. Simply prefix the amount of RAM with one of these acceptable range values: '<', '>', '<=', '>='. These values represent less than, greater than, less than or equal to, and greater than or equal to, respectively.
         */
        ram?: string;
        /**
         * Default: None
         *
         * Limits the number of flavors returned. All matching flavors are returned by default.
         */
        limit?: string;
        /**
         * Default: None
         *
         * A flavor name. Cannot be used with I(ram) or I(vcpus).
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Return basic facts pertaining to a vSphere virtual machine guest
       */
      vmware_vm_facts?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * This module is used to configure Pool object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_pool?: {
        /**
         * The load balancing algorithm will pick a server within the pool's list of available servers.
         * Enum options - LB_ALGORITHM_LEAST_CONNECTIONS, LB_ALGORITHM_ROUND_ROBIN, LB_ALGORITHM_FASTEST_RESPONSE, LB_ALGORITHM_CONSISTENT_HASH,
         * LB_ALGORITHM_LEAST_LOAD, LB_ALGORITHM_FEWEST_SERVERS, LB_ALGORITHM_RANDOM, LB_ALGORITHM_FEWEST_TASKS, LB_ALGORITHM_NEAREST_SERVER,
         * LB_ALGORITHM_CORE_AFFINITY.
         * Default value when not specified in API or module is interpreted by Avi Controller as LB_ALGORITHM_LEAST_CONNECTIONS.
         */
        lb_algorithm?: string;
        /**
         * Do not translate the client's destination port when sending the connection to the server.
         * The pool or servers specified service port will still be used for health monitoring.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        use_service_port?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Server autoscale.
         * Not used anymore.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        server_auto_scale?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Degree of non-affinity for core afffinity based server selection.
         * Allowed values are 1-65535.
         * Field introduced in 17.1.3.
         * Default value when not specified in API or module is interpreted by Avi Controller as 2.
         */
        lb_algorithm_core_nonaffinity?: number | string;
        /**
         * Enable or disable the pool.
         * Disabling will terminate all open connections and pause health monitors.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * If sni server name is specified, rewrite incoming host header to the sni server name.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        rewrite_host_header_to_sni?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Inline estimation of capacity of servers.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        capacity_estimation?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Rate limit connections to each server.
         */
        max_conn_rate_per_server?: {
          [k: string]: any;
        };
        /**
         * The pool directs load balanced traffic to this list of destination servers.
         * The servers can be configured by ip address, name, network or via ip address group.
         */
        servers?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Periodicity of feedback for fewest tasks server selection algorithm.
         * Allowed values are 1-300.
         * Default value when not specified in API or module is interpreted by Avi Controller as 10.
         */
        fewest_tasks_feedback_delay?: number | string;
        /**
         * Rewrite incoming host header to server name of the server to which the request is proxied.
         * Enabling this feature rewrites host header for requests to all servers in the pool.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        rewrite_host_header_to_server_name?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Inherited config from virtualservice.
         */
        east_west?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The maximum time-to-first-byte of a server.
         * Allowed values are 1-5000.
         * Special values are 0 - 'automatic'.
         * Default value when not specified in API or module is interpreted by Avi Controller as 0.
         */
        capacity_estimation_ttfb_thresh?: number | string;
        /**
         * A/b pool configuration.
         */
        ab_pool?: {
          [k: string]: any;
        };
        /**
         * Enable an action - close connection, http redirect or local http response - when a pool failure happens.
         * By default, a connection will be closed, in case the pool experiences a failure.
         */
        fail_action?: {
          [k: string]: any;
        };
        /**
         * Synchronize cisco apic epg members with pool servers.
         */
        apic_epg_name?: string;
        /**
         * (internal-use) networks designated as containing servers for this pool.
         * The servers may be further narrowed down by a filter.
         * This field is used internally by avi, not editable by the user.
         */
        networks?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Criteria used as a key for determining the hash between the client and  server.
         * Enum options - LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS, LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS_AND_PORT,
         * LB_ALGORITHM_CONSISTENT_HASH_URI, LB_ALGORITHM_CONSISTENT_HASH_CUSTOM_HEADER.
         * Default value when not specified in API or module is interpreted by Avi Controller as LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS.
         */
        lb_algorithm_hash?: string;
        /**
         * Uuid of the pool.
         */
        uuid?: string;
        /**
         * Fully qualified dns hostname which will be used in the tls sni extension in server connections if sni is enabled.
         * If no value is specified, avi will use the incoming host header instead.
         */
        server_name?: string;
        /**
         * Verify server health by applying one or more health monitors.
         * Active monitors generate synthetic traffic from each service engine and mark a server up or down based on the response.
         * The passive monitor listens only to client to server communication.
         * It raises or lowers the ratio of traffic destined to a server based on successful responses.
         * It is a reference to an object of type healthmonitor.
         */
        health_monitor_refs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * It is a reference to an object of type cloud.
         */
        cloud_ref?: string;
        /**
         * Enable common name check for server certificate.
         * If enabled and no explicit domain name is specified, avi will use the incoming host header to do the match.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        host_check_enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Reference to server autoscale policy.
         * It is a reference to an object of type serverautoscalepolicy.
         */
        autoscale_policy_ref?: string;
        /**
         * When enabled, avi re-encrypts traffic to the backend servers.
         * The specific ssl profile defines which ciphers and ssl versions will be supported.
         * It is a reference to an object of type sslprofile.
         */
        ssl_profile_ref?: string;
        /**
         * Use list of servers from ip address group.
         * It is a reference to an object of type ipaddrgroup.
         */
        ipaddrgroup_ref?: string;
        /**
         * Manually select the networks and subnets used to provide reachability to the pool's servers.
         * Specify the subnet using the following syntax  10-1-1-0/24.
         * Use static routes in vrf configuration when pool servers are not directly connected butroutable from the service engine.
         */
        placement_networks?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Used to gracefully disable a server.
         * Virtual service waits for the specified time before terminating the existing connections  to the servers that are disabled.
         * Allowed values are 1-60.
         * Special values are 0 - 'immediate', -1 - 'infinite'.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1.
         */
        graceful_disable_timeout?: number | string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * A list of nsx service groups where the servers for the pool are created.
         * Field introduced in 17.1.1.
         */
        nsx_securitygroup?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Name of container cloud application that constitutes a pool in a a-b pool configuration, if different from vs app.
         */
        a_pool?: string;
        /**
         * Avi will validate the ssl certificate present by a server against the selected pki profile.
         * It is a reference to an object of type pkiprofile.
         */
        pki_profile_ref?: string;
        api_version?: string;
        /**
         * Virtual routing context that the pool is bound to.
         * This is used to provide the isolation of the set of networks the pool is attached to.
         * The pool inherits the virtual routing conext of the virtual service, and this field is used only internally, and is set by pb-transform.
         * It is a reference to an object of type vrfcontext.
         */
        vrf_ref?: string;
        username?: string;
        /**
         * Persistence will ensure the same user sticks to the same server for a desired duration of time.
         * It is a reference to an object of type applicationpersistenceprofile.
         */
        application_persistence_profile_ref?: string;
        /**
         * The passive monitor will monitor client to server connections and requests and adjust traffic load to servers based on successful responses.
         * This may alter the expected behavior of the lb method, such as round robin.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        inline_health_monitor?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Traffic sent to servers will use this destination server port unless overridden by the server's specific port attribute.
         * The ssl checkbox enables avi to server encryption.
         * Allowed values are 1-65535.
         * Default value when not specified in API or module is interpreted by Avi Controller as 80.
         */
        default_server_port?: number | string;
        /**
         * A description of the pool.
         */
        description?: string;
        /**
         * Minimum number of requests to be queued when pool is full.
         * Default value when not specified in API or module is interpreted by Avi Controller as 128.
         */
        request_queue_depth?: number | string;
        /**
         * Server reselect configuration for http requests.
         */
        server_reselect?: {
          [k: string]: any;
        };
        /**
         * Comma separated list of domain names which will be used to verify the common names or subject alternative names presented by server certificates.
         * It is performed only when common name check host_check_enabled is enabled.
         */
        domain_name?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Duration for which new connections will be gradually ramped up to a server recently brought online.
         * Useful for lb algorithms that are least connection based.
         * Allowed values are 1-300.
         * Special values are 0 - 'immediate'.
         * Default value when not specified in API or module is interpreted by Avi Controller as 10.
         */
        connection_ramp_duration?: number | string;
        controller?: string;
        password?: string;
        /**
         * Number of server_count.
         * Default value when not specified in API or module is interpreted by Avi Controller as 0.
         */
        server_count?: number | string;
        tenant?: string;
        /**
         * Enable tls sni for server connections.
         * If disabled, avi will not send the sni extension as part of the handshake.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        sni_enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Priority of this pool in a a-b pool pair.
         * Internally used.
         */
        ab_priority?: number | string;
        /**
         * Enable request queue when pool is full.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        request_queue_enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The name of the pool.
         */
        name: string;
        /**
         * The maximum number of concurrent connections allowed to each server within the pool.
         * Note  applied value will be no less than the number of service engines that the pool is placed on.
         * If set to 0, no limit is applied.
         * Default value when not specified in API or module is interpreted by Avi Controller as 0.
         */
        max_concurrent_connections_per_server?: number | string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * If configured then avi will trigger orchestration of pool server creation and deletion.
         * It is only supported for container clouds like mesos, opensift, kubernates, docker etc.
         * It is a reference to an object of type autoscalelaunchconfig.
         */
        autoscale_launch_config_ref?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Network ids for the launch configuration.
         */
        autoscale_networks?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Http header name to be used for the hash key.
         */
        lb_algorithm_consistent_hash_hdr?: string;
        /**
         * Service engines will present a client ssl certificate to the server.
         * It is a reference to an object of type sslkeyandcertificate.
         */
        ssl_key_and_certificate_ref?: string;
        /**
         * Checksum of cloud configuration for pool.
         * Internally set by cloud connector.
         */
        cloud_config_cksum?: string;
        /**
         * Names of external auto-scale groups for pool servers.
         * Currently available only for aws.
         * Field introduced in 17.1.2.
         */
        external_autoscale_groups?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        tenant_uuid?: string;
        /**
         * Creator name.
         */
        created_by?: string;
        /**
         * Header name for custom header persistence.
         */
        prst_hdr_name?: string;
        [k: string]: any;
      };
      /**
       * Gather facts about ec2 instances in AWS
       */
      ec2_remote_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add or Remove key pair from OpenStack
       */
      os_keypair?: {
        /**
         * Default: None
         *
         * The public key that would be uploaded to nova and injected into VMs upon creation.
         */
        public_key?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: None
         *
         * Path to local file containing ssh public key. Mutually exclusive with public_key.
         */
        public_key_file?: string;
        /**
         * Default: None
         *
         * Name that has to be given to the key pair
         */
        name?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        [k: string]: any;
      };
      /**
       * Gather facts about ec2 VPC route tables in AWS
       */
      ec2_vpc_route_table_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Arista EOS configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with EOS configuration sections in a deterministic way.  This module works with either CLI or eAPI transports.
       */
      eos_config?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages network device configurations over SSH or eAPI.  This module allows implementers to work with the device running-config.  It provides a way to push a set of commands onto a network device by evaluating the current running-config and only pushing configuration commands that are not already configured.  The config source can be a set of commands or a template.
       */
      eos_template?: {
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        username?: string;
        ssh_keyfile?: string;
        /**
         * The force argument instructs the module to not consider the current devices running-config.  When set to true, this will cause the module to push the contents of I(src) into the device without first checking if already configured.
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The path to the config source.  The source can be either a file with config or a template that will be merged during runtime.  By default the task will search for the source file in role or playbook root folder in templates directory.
         */
        src: string;
        /**
         * When this argument is configured true, the module will backup the running-config from the node prior to making any changes. The backup file will be written to backup_{{ hostname }} in the root of the playbook directory.
         */
        backup?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        auth_pass?: string;
        /**
         * This argument will cause the provided configuration to be replaced on the destination node.   The use of the replace argument will always cause the task to set changed to true and will implies C(force=true).  This argument is only valid with C(transport=eapi).
         */
        replace?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * By default when the M(eos_template) connects to the remote device to retrieve the configuration it will issue the C(show running-config) command.  If this option is set to True then the issued command will be C(show running-config all).
         */
        include_defaults?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        host: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        /**
         * The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task in a playbook.  The I(config) argument allows the implementer to pass in the configuration to use as the base config for comparison.
         */
        config?: string;
        port?: number | string;
        transport?: string;
        [k: string]: any;
      };
      /**
       * Manage OpenStack Identity Groups. Groups can be created, deleted or updated. Only the I(description) value can be updated.
       */
      os_group?: {
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Group name
         */
        name?: string;
        /**
         * Default: None
         *
         * Group description
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * Manages NTP authentication configuration on HUAWEI CloudEngine switches.
       */
      ce_ntp_auth?: {
        /**
         * Default: encrypt
         *
         * Whether the given password is in cleartext or has been encrypted. If in cleartext, the device will encrypt it before storing it.
         */
        auth_type?: "text" | "encrypt";
        username?: string;
        /**
         * Authentication key identifier (numeric).
         */
        key_id: string;
        /**
         * Plain text with length of 1 to 255, encrypted text with length of 20 to 392.
         */
        auth_pwd?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        host?: string;
        /**
         * Specify authentication algorithm.
         */
        auth_mode?: "hmac-sha256" | "md5";
        /**
         * Default: disable
         *
         * Whether the given key is required to be supplied by a time source for the device to synchronize to the time source.
         */
        trusted_key?: "enable" | "disable";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        /**
         * Configure ntp authentication enable or unconfigure ntp authentication enable.
         */
        authentication?: "enable" | "disable";
        [k: string]: any;
      };
      /**
       * Get DLL or EXE file build version
       * change state alway be false
       */
      win_file_version?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Sends arbitrary commands to a Dell OS6 node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.
       * This module does not support running commands in configuration mode. Please use M(dellos6_config) to configure Dell OS6 devices.
       */
      dellos6_command?: {
        [k: string]: any;
      };
      /**
       * Creates, removes and lists tags from any EC2 resource.  The resource is referenced by its resource id (e.g. an instance being i-XXXXXXX). It is designed to be used with complex args (tags), see the examples.  This module has a dependency on python-boto.
       */
      ec2_tag?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Creates, modifies, and deletes RDS database subnet groups. This module has a dependency on python-boto >= 2.5.
       */
      rds_subnet_group?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module works like M(copy), but in reverse. It is used for fetching files from remote machines and storing them locally in a file tree, organized by hostname.
       * This module is also supported for Windows targets.
       */
      fetch?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * This will configure both exec and motd banners on remote devices running Cisco NXOS. It allows playbooks to add or remote banner text from the active running configuration.
       */
      nxos_banner?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * The banner text that should be present in the remote device running configuration. This argument accepts a multiline string, with no empty lines. Requires I(state=present).
         */
        text?: string;
        /**
         * Default: present
         *
         * Specifies whether or not the configuration is present in the current devices active running configuration.
         */
        state?: "present" | "absent";
        /**
         * Specifies which banner that should be configured on the remote device.
         */
        banner: "exec" | "motd";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Fetch metadata about Github Releases
       */
      github_release?: {
        /**
         * Action to perform
         */
        action: "latest_release";
        /**
         * Repository name
         */
        repo: string;
        /**
         * Github Personal Access Token for authenticating
         */
        token: string;
        /**
         * The GitHub account that owns the repository
         */
        user: string;
        [k: string]: any;
      };
      /**
       * Creates or deletes CloudTrail configuration. Ensures logging is also enabled.
       */
      cloudtrail?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create and delete snapshots images on volume groups for NetApp E-series storage arrays.
       */
      netapp_e_volume_copy?: {
        status: "present" | "absent";
        /**
         * Default: True
         *
         * Defines if a copy pair will be created if it does not exist.
         * If set to True destination_volume_id and source_volume_id are required.
         */
        create_copy_pair_if_does_not_exist?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Searches for all valid potential target and source volumes that could be used in a copy_pair
         * Mutually exclusive with volume_copy_pair_id, destination_volume_id and source_volume_id
         */
        search_volume_id?: string;
        /**
         * The url to the SANtricity WebServices Proxy or embedded REST API.
         */
        api_url: string;
        /**
         * The the id of a given volume copy pair
         * Mutually exclusive with destination_volume_id, source_volume_id, and search_volume_id
         * Can use to delete or check presence of volume pairs
         * Must specify this or (destination_volume_id and source_volume_id)
         */
        volume_copy_pair_id?: string;
        /**
         * The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_password?: string;
        /**
         * The the id of the volume copy source.
         * If used, must be paired with destination_volume_id
         * Mutually exclusive with volume_copy_pair_id, and search_volume_id
         */
        source_volume_id?: string;
        /**
         * The the id of the volume copy destination.
         * If used, must be paired with source_volume_id
         * Mutually exclusive with volume_copy_pair_id, and search_volume_id
         */
        destination_volume_id?: string;
        copy_priority?: number | string;
        onlineCopy?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_username?: string;
        /**
         * starts a re-copy or stops a copy in progress
         * Note: If you stop the initial file copy before it it done the copy pair will be destroyed
         * Requires volume_copy_pair_id
         */
        start_stop_copy?: "start" | "stop";
        /**
         * Default: True
         *
         * Should https certificates be validated?
         */
        validate_certs?: string;
        targetWriteProtected?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssid: string;
        [k: string]: any;
      };
      /**
       * Management of LXD containers
       */
      lxd_container?: {
        description?: string;
        /**
         * The source for the container (e.g. { "type": "image", "mode": "pull", "server": "https://images.linuxcontainers.org", "protocol": "lxd", "alias": "ubuntu/xenial/amd64" }). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-1)
         */
        source?: {
          [k: string]: any;
        };
        /**
         * Default: unix:/var/lib/lxd/unix.socket
         *
         * The unix domain socket path or the https URL for the LXD server.
         */
        url?: string;
        /**
         * The config for the container (e.g. {"limits.cpu": "2"}). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-1)
         * If the container already exists and its "config" value in metadata obtained from GET /1.0/containers/<name> U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#10containersname) are different, they this module tries to apply the configurations.
         * The key starts with 'volatile.' are ignored for this comparison.
         * Not all config values are supported to apply the existing container. Maybe you need to delete and recreate a container.
         */
        config?: {
          [k: string]: any;
        };
        /**
         * Default: "{}/.config/lxc/client.crt" .format(os.environ["HOME"])
         *
         * The client certificate file path.
         */
        cert_file?: string;
        /**
         * Whether or not the container is ephemeral (e.g. true or false). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-1)
         */
        ephemeral?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The archiecture for the container (e.g. "x86_64" or "i686"). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-1)
         */
        architecture?: string;
        /**
         * The devices for the container (e.g. { "rootfs": { "path": "/dev/kvm", "type": "unix-char" }). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-1)
         */
        devices?: {
          [k: string]: any;
        };
        /**
         * If this is true, the M(lxd_container) waits until IPv4 addresses are set to the all network interfaces in the container after starting or restarting.
         */
        wait_for_ipv4_addresses?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: started
         *
         * Define the state of a container.
         */
        state?: "started" | "stopped" | "restarted" | "absent" | "frozen";
        profiles?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: 30
         *
         * A timeout for changing the state of the container.
         * This is also used as a timeout for waiting until IPv4 addresses are set to the all network interfaces in the container after starting or restarting.
         */
        timeout?: number | string;
        /**
         * Default: "{}/.config/lxc/client.key" .format(os.environ["HOME"])
         *
         * The client certificate key file path.
         */
        key_file?: string;
        /**
         * The client trusted password.
         * You need to set this password on the LXD server before running this module using the following command. lxc config set core.trust_password <some random password> See U(https://www.stgraber.org/2016/04/18/lxd-api-direct-interaction/)
         * If trust_password is set, this module send a request for authentication before sending any requests.
         */
        trust_password?: string;
        /**
         * If this is true, the M(lxd_container) forces to stop the container when it stops or restarts the container.
         */
        force_stop?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of a container.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Get interface link status on HUAWEI CloudEngine switches.
       */
      ce_link_status?: {
        username?: string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * For the interface parameter, you can enter C(all) to display information about all interface, an interface type such as C(40GE) to display information about interfaces of the specified type, or full name of an interface such as C(40GE1/0/22) or C(vlanif10) to display information about the specific interface.
         */
        interface: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Creates or terminates Google Compute Engine (GCE) instances.  See U(https://cloud.google.com/compute) for an overview. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.
       */
      gce?: {
        [k: string]: any;
      };
      /**
       * Manages Gentoo packages
       */
      portage?: {
        [k: string]: any;
      };
      /**
       * The standard package manager for SmartOS, but also usable on NetBSD or any OS that uses C(pkgsrc).  (Home: U(http://pkgin.net/))
       */
      pkgin?: {
        [k: string]: any;
      };
      /**
       * Create or remove disk groups and disk pools for NetApp E-series storage arrays.
       */
      netapp_e_storagepool?: {
        /**
         * Default: gb
         *
         * The unit used to interpret size parameters
         */
        criteria_size_unit?: string;
        /**
         * Whether full disk encryption ability is required for drives to be added to the storage pool
         */
        criteria_drive_require_fde?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The minimum size of the storage pool (in size_unit). The pool will be expanded if this value exceeds itscurrent size.
         */
        criteria_min_usable_capacity?: number | string;
        /**
         * The ID of the array to manage (as configured on the web services proxy).
         */
        ssid: string;
        log_path?: string;
        remove_drives?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Whether to convert to a secure storage pool. Will only work if all drives in the pool are security capable.
         */
        secure_pool?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_password: string;
        /**
         * Only required when the requested state is 'present'.  The RAID level of the storage pool to be created.
         */
        raid_level?: "raidUnsupported" | "raidAll" | "raid0" | "raid1" | "raid3" | "raid5" | "raid6" | "raidDiskPool";
        /**
         * The minimum individual drive size (in size_unit) to consider when choosing drives for the storage pool.
         */
        criteria_drive_min_size?: number | string;
        /**
         * The name of the storage pool to manage
         */
        name: string;
        /**
         * Whether the specified storage pool should exist or not.
         * Note that removing a storage pool currently requires the removal of all defined volumes first.
         */
        state: "present" | "absent";
        /**
         * Prior to removing a storage pool, delete all volumes in the pool.
         */
        remove_volumes?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The type of disk (hdd or ssd) to use when searching for candidates to use.
         */
        criteria_drive_type?: "hdd" | "ssd";
        /**
         * The number of disks to use for building the storage pool. The pool will be expanded if this number exceeds the number of disks already in place
         */
        criteria_drive_count?: number | string;
        /**
         * The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_username: string;
        /**
         * Whether to erase secured disks before adding to storage pool
         */
        erase_secured_drives?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The interface type to use when selecting drives for the storage pool (no value means all interface types will be considered)
         */
        criteria_drive_interface_type?: "sas" | "sas4k" | "fibre" | "fibre520b" | "scsi" | "sata" | "pata";
        /**
         * Default: True
         *
         * Should https certificates be validated?
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Set the number of drives reserved by the storage pool for reconstruction operations. Only valide on raid disk pools.
         */
        reserve_drive_count?: number | string;
        /**
         * The url to the SANtricity WebServices Proxy or embedded REST API.
         */
        api_url: string;
        [k: string]: any;
      };
      /**
       * Retrieve facts for WAF ACLs, Rule , Conditions and Filters.
       */
      aws_waf_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage an AWS customer gateway
       */
      ec2_customer_gateway?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module gets the status of an asynchronous task.
       * This module is also supported for Windows targets.
       */
      async_status?: {
        /**
         * Job or task identifier
         */
        jid: string;
        /**
         * Default: status
         *
         * if C(status), obtain the status; if C(cleanup), clean up the async job cache located in C(~/.ansible_async/) for the specified job I(jid).
         */
        mode?: "status" | "cleanup";
        [k: string]: any;
      };
      /**
       * Manage node.js packages with Node Package Manager (npm)
       */
      npm?: {
        /**
         * The executable location for npm.
         * This is useful if you are using a version manager, such as nvm
         */
        executable?: string;
        /**
         * The name of a node.js library to install
         */
        name?: string;
        /**
         * Install the node.js library globally
         */
        global?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Use the --ignore-scripts flag when installing.
         */
        ignore_scripts?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * The state of the node.js library
         */
        state?: "present" | "absent" | "latest";
        /**
         * Install dependencies in production mode, excluding devDependencies
         */
        production?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The registry to install modules from.
         */
        registry?: string;
        /**
         * The version to be installed
         */
        version?: string;
        /**
         * The base path where to install the node.js libraries
         */
        path?: string;
        [k: string]: any;
      };
      /**
       * Manage the containers on the atomic host platform
       * Allows to manage the lifecycle of a container on the atomic host platform
       */
      atomic_container?: {
        /**
         * Name of the container
         */
        name: string;
        /**
         * The image to use to install the container
         */
        image: string;
        /**
         * Default: latest
         *
         * State of the container
         */
        state?: "present" | "absent" | "latest" | "rollback";
        /**
         * Default: None
         *
         * Values for the installation of the container.  This option is permitted only with mode 'user' or 'system'. The values specified here will be used at installation time as --set arguments for atomic install.
         */
        values?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: None
         *
         * Define if it is an user or a system container
         */
        mode?: "user" | "system";
        /**
         * Define the rootfs of the image
         */
        rootfs?: string;
        /**
         * Default: None
         *
         * Define the backend to use for the container
         */
        backend: "docker" | "ostree";
        [k: string]: any;
      };
      /**
       * Manages mount behavior for a specified ISO, VHD, or VHDX image on a Windows host. When C(state) is C(present), the image will be mounted under a system-assigned drive letter, which will be returned in the C(mount_path) value of the module result. Requires Windows 8+ or Windows Server 2012+.
       */
      win_disk_image?: {
        /**
         * Default: present
         *
         * whether the image should be present as a drive-letter mount or not.
         */
        state?: string;
        /**
         * path to an ISO, VHD, or VHDX image on the target Windows host (the file cannot reside on a network share)
         */
        image_path?: string;
        [k: string]: any;
      };
      /**
       * Create or Delete objects and containers from OpenStack
       */
      os_object?: {
        /**
         * The name of the container in which to create the object
         */
        container?: string;
        /**
         * Name to be give to the object. If omitted, operations will be on the entire container
         */
        name?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        /**
         * Path to local file to be uploaded.
         */
        filename?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: private
         *
         * desired container access level.
         */
        container_access?: string;
        [k: string]: any;
      };
      /**
       * Create, update and delete a resource group.
       */
      azure_rm_resourcegroup?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Remove a resource group and all associated resources. Use with state 'absent' to delete a resource group that contains resources.
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the resource group.
         */
        name: string;
        tags?: {
          [k: string]: any;
        };
        ad_user?: string;
        append_tags?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        cloud_environment?: string;
        secret?: string;
        /**
         * Default: present
         *
         * Assert the state of the resource group. Use 'present' to create or update and 'absent' to delete. When 'absent' a resource group containing resources will not be removed unless the force option is used.
         */
        state?: "absent" | "present";
        /**
         * Azure location for the resource group. Required when creating a new resource group. Cannot be changed once resource group is created.
         */
        location?: string;
        client_id?: string;
        subscription_id?: string;
        password?: string;
        tenant?: string;
        [k: string]: any;
      };
      /**
       * Manages port-channel specific configuration parameters.
       */
      nxos_portchannel?: {
        username?: string;
        save?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        /**
         * When true it forces port-channel members to match what is declared in the members param. This can be used to remove members.
         */
        force?: "true" | "false";
        /**
         * List of interfaces that will be managed in a given portchannel.
         */
        members?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        config?: string;
        /**
         * Min links required to keep portchannel up.
         */
        min_links?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Channel-group number for the port-channel.
         */
        group: string;
        include_defaults?: string;
        host?: string;
        /**
         * Default: True
         *
         * Mode for the port-channel, i.e. on, active, passive.
         */
        mode?: "active" | "passive" | "on";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * This module is used to configure ServiceEngine object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_serviceengine?: {
        /**
         * Vnic settings for serviceengine.
         */
        mgmt_vnic?: {
          [k: string]: any;
        };
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Flavor of serviceengine.
         */
        flavor?: string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * It is a reference to an object of type cloud.
         */
        cloud_ref?: string;
        /**
         * It is a reference to an object of type serviceenginegroup.
         */
        se_group_ref?: string;
        /**
         * Boolean flag to set container_mode.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        container_mode?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enum options - container_type_bridge, container_type_host, container_type_host_dpdk.
         * Default value when not specified in API or module is interpreted by Avi Controller as CONTAINER_TYPE_HOST.
         */
        container_type?: string;
        /**
         * It is a reference to an object of type vimgrhostruntime.
         */
        host_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        api_version?: string;
        username?: string;
        /**
         * Boolean flag to set controller_created.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        controller_created?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Inorder to disable se set this field appropriately.
         * Enum options - SE_STATE_ENABLED, SE_STATE_DISABLED_FOR_PLACEMENT, SE_STATE_DISABLED.
         * Default value when not specified in API or module is interpreted by Avi Controller as SE_STATE_ENABLED.
         */
        enable_state?: string;
        controller?: string;
        password?: string;
        tenant?: string;
        /**
         * Name of the object.
         * Default value when not specified in API or module is interpreted by Avi Controller as VM name unknown.
         */
        name?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * Enum options - default, vmware_esx, kvm, vmware_vsan, xen.
         */
        hypervisor?: string;
        /**
         * List of vnic.
         */
        data_vnics?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Seresources settings for serviceengine.
         */
        resources?: {
          [k: string]: any;
        };
        /**
         * Availability_zone of serviceengine.
         */
        availability_zone?: string;
        /**
         * Controller_ip of serviceengine.
         */
        controller_ip?: string;
        tenant_uuid?: string;
        [k: string]: any;
      };
      /**
       * Get facts for a specific managed disk or all managed disks.
       */
      azure_rm_managed_disk_facts?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        disk_size_gb?: number | string;
        /**
         * Limit results to a specific managed disk
         */
        name?: string;
        /**
         * Limit results to a specific resource group
         */
        resource_group?: string;
        /**
         * Limit results by providing a list of tags. Format tags as 'key' or 'key:value'.
         */
        tags?: string;
        ad_user?: string;
        append_tags?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        cloud_environment?: string;
        secret?: string;
        storage_account_type?: "Standard_LRS" | "Premium_LRS";
        state?: "present" | "absent";
        location?: string;
        client_id?: string;
        subscription_id?: string;
        password?: string;
        os_type?: "linux" | "windows";
        tenant?: string;
        [k: string]: any;
      };
      /**
       * Manages dns records via the Cloudflare API, see the docs: U(https://api.cloudflare.com/)
       */
      cloudflare_dns?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * An Ansible module to deploy blue print package on a set of servers in CenturyLink Cloud.
       */
      clc_blueprint_package?: {
        /**
         * A list of server Ids to deploy the blue print package.
         */
        server_ids:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * Whether to install or un-install the package. Currently it supports only "present" for install action.
         */
        state?: "present";
        /**
         * The dictionary of arguments required to deploy the blue print.
         */
        package_params?: {
          [k: string]: any;
        };
        /**
         * The package id of the blue print.
         */
        package_id: string;
        /**
         * Default: True
         *
         * Whether to wait for the tasks to finish before returning.
         */
        wait?: string;
        [k: string]: any;
      };
      /**
       * Create and modify issues in a JIRA instance.
       */
      jira?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Cisco NXOS configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with NXOS configuration sections in a deterministic way.  This module works with either CLI or NXAPI transports.
       */
      nxos_config?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create or destroy volumes on NetApp cDOT
       */
      na_cdot_volume?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manage Elastic Container Registry repositories
       */
      ecs_ecr?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Apstra AOS Blueprint module let you manage your Blueprint easily. You can create create and delete Blueprint by Name or ID. You can also use it to retrieve all data from a blueprint. This module is idempotent and support the I(check) mode. It's using the AOS REST API.
       */
      aos_blueprint?: {
        /**
         * Name of the Blueprint to manage. Only one of I(name) or I(id) can be set.
         */
        name?: string;
        /**
         * Default: present
         *
         * Indicate what is the expected state of the Blueprint.
         */
        state?: "present" | "absent" | "build-ready";
        /**
         * An existing AOS session as obtained by M(aos_login) module.
         */
        session: {
          [k: string]: any;
        };
        /**
         * When creating a blueprint, this value identifies a known AOS reference architecture value. I(Refer to AOS-server documentation for available values).
         */
        reference_arch?: string;
        /**
         * Default: 5
         *
         * When I(state=build-ready), this timeout identifies timeout in seconds to wait before declaring a failure.
         */
        timeout?: number | string;
        /**
         * AOS Id of the IP Pool to manage (can't be used to create a new IP Pool). Only one of I(name) or I(id) can be set.
         */
        id?: string;
        /**
         * When creating a blueprint, this value identifies, by name, an existing engineering design template within the AOS-server.
         */
        template?: string;
        [k: string]: any;
      };
      /**
       * Creates and removes VPN site-to-site gateways.
       */
      cs_vpn_gateway?: {
        /**
         * Account the VPN gateway is related to.
         */
        account?: string;
        api_key?: string;
        /**
         * Default: True
         *
         * Poll async jobs until job has finished.
         */
        poll_async?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        api_url?: string;
        api_http_method?: "get" | "post";
        api_secret?: string;
        api_timeout?: number | string;
        api_region?: string;
        /**
         * Name of the project the VPN gateway is related to.
         */
        project?: string;
        /**
         * Default: present
         *
         * State of the VPN gateway.
         */
        state?: "present" | "absent";
        /**
         * Name of the VPC.
         */
        vpc: string;
        /**
         * Domain the VPN gateway is related to.
         */
        domain?: string;
        /**
         * Name of the zone the VPC is related to.
         * If not set, default zone is used.
         */
        zone?: string;
        [k: string]: any;
      };
      /**
       * Installs packages using Web Platform Installer command-line (http://www.iis.net/learn/install/web-platform-installer/web-platform-installer-v4-command-line-webpicmdexe-rtw-release).
       * Must be installed and present in PATH (see win_chocolatey module; 'webpicmd' is the package name, and you must install 'lessmsi' first too)
       * Install IIS first (see win_feature module)
       */
      win_webpicmd?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * The C(tempfile) module creates temporary files and directories. C(mktemp) command takes different parameters on various systems, this module helps to avoid troubles related to that. Files/directories created by module are accessible only by creator. In case you need to make them world-accessible you need to use M(file) module.
       * For Windows targets, use the M(win_tempfile) module instead.
       */
      tempfile?: {
        /**
         * Location where temporary file or directory should be created. If path is not specified default system temporary directory will be used.
         */
        path?: string;
        /**
         * Default: ansible.
         *
         * Prefix of file/directory name created by module.
         */
        prefix?: string;
        /**
         * Suffix of file/directory name created by module.
         */
        suffix?: string;
        /**
         * Default: file
         *
         * Whether to create file or directory.
         */
        state?: "file" | "directory";
        [k: string]: any;
      };
      /**
       * Create or remove SSD caches on a NetApp E-Series storage array.
       */
      netapp_e_flashcache?: {
        /**
         * The minimum size (in size_units) of the ssd cache. The cache will be expanded if this exceeds the current size of the cache.
         */
        cache_size_min?: number | string;
        /**
         * The name of the SSD cache to manage
         */
        name: string;
        log_path?: string;
        /**
         * The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_password: string;
        /**
         * Default: filesystem
         *
         * The type of workload to optimize the cache for.
         */
        io_type?: "filesystem" | "database" | "media";
        /**
         * The minimum number of disks to use for building the cache. The cache will be expanded if this number exceeds the number of disks already in place
         */
        disk_count?: number | string;
        /**
         * Default: gb
         *
         * The unit to be applied to size arguments
         */
        size_unit?: "bytes" | "b" | "kb" | "mb" | "gb" | "tb" | "pb" | "eb" | "zb" | "yb";
        log_mode?: string;
        /**
         * Default: present
         *
         * Whether the specified SSD cache should exist or not.
         */
        state?: "present" | "absent";
        /**
         * The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_username: string;
        /**
         * The url to the SANtricity WebServices Proxy or embedded REST API.
         */
        api_url: string;
        /**
         * Default: True
         *
         * Should https certificates be validated?
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        disk_refs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        criteria_disk_phy_type?: "sas" | "sas4k" | "fibre" | "fibre520b" | "scsi" | "sata" | "pata";
        /**
         * The ID of the array to manage (as configured on the web services proxy).
         */
        ssid: string;
        [k: string]: any;
      };
      /**
       * Add or remove applications on a Webfaction host.  Further documentation at http://github.com/quentinsf/ansible-webfaction.
       */
      webfaction_app?: {
        /**
         * The name of the application
         */
        name: string;
        /**
         * IF the port should be opened
         */
        port_open?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The machine name to use (optional for accounts with only one machine)
         */
        machine?: string;
        /**
         * Default: present
         *
         * Whether the application should exist
         */
        state?: "present" | "absent";
        /**
         * Default: no
         *
         * Whether the app should restart with an autostart.cgi script
         */
        autostart?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The webfaction password to use
         */
        login_password: string;
        /**
         * The type of application to create. See the Webfaction docs at http://docs.webfaction.com/xmlrpc-api/apps.html for a list.
         */
        type: string;
        /**
         * The webfaction account to use
         */
        login_name: string;
        /**
         * Any extra parameters required by the app
         */
        extra_info?: string;
        [k: string]: any;
      };
      /**
       * Manages advanced ACL configurations on HUAWEI CloudEngine switches.
       */
      ce_acl_advance?: {
        /**
         * ACL step. The value is an integer ranging from 1 to 20. The default value is 5.
         */
        acl_step?: string;
        /**
         * Protocol type.
         */
        protocol?: "ip" | "icmp" | "igmp" | "ipinip" | "tcp" | "udp" | "gre" | "ospf";
        /**
         * Data packets can be filtered based on the priority field. The value is an integer ranging from 0 to 7.
         */
        precedence?: string;
        /**
         * Range type of the source port.
         */
        src_port_op?: "lt" | "eq" | "gt" | "range";
        /**
         * Flag of logging matched data packets.
         */
        log_flag?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of a time range in which an ACL rule takes effect.
         */
        time_range?: string;
        /**
         * Start port number of the source port. The value is an integer ranging from 0 to 65535.
         */
        src_port_begin?: string;
        /**
         * Type of packet fragmentation.
         */
        frag_type?: "fragment" | "clear_fragment";
        /**
         * Name of a destination port pool. The value is a string of 1 to 32 characters.
         */
        dest_port_pool_name?: string;
        /**
         * Name of a destination pool. The value is a string of 1 to 32 characters.
         */
        dest_pool_name?: string;
        /**
         * ACL description. The value is a string of 1 to 127 characters.
         */
        acl_description?: string;
        /**
         * Whether TTL Expired is matched, with the TTL value of 1.
         */
        ttl_expired?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * ICMP type. This parameter is available only when the packet protocol is ICMP. The value is an integer ranging from 0 to 255.
         */
        icmp_type?: string;
        port?: number | string;
        /**
         * ICMP name.
         */
        icmp_name?:
          | "unconfiged"
          | "echo"
          | "echo-reply"
          | "fragmentneed-DFset"
          | "host-redirect"
          | "host-tos-redirect"
          | "host-unreachable"
          | "information-reply"
          | "information-request"
          | "net-redirect"
          | "net-tos-redirect"
          | "net-unreachable"
          | "parameter-problem"
          | "port-unreachable"
          | "protocol-unreachable"
          | "reassembly-timeout"
          | "source-quench"
          | "source-route-failed"
          | "timestamp-reply"
          | "timestamp-request"
          | "ttl-exceeded"
          | "address-mask-reply"
          | "address-mask-request"
          | "custom";
        /**
         * Match established connections.
         */
        established?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Internet Group Management Protocol.
         */
        igmp_type?:
          | "host-query"
          | "mrouter-adver"
          | "mrouter-solic"
          | "mrouter-termi"
          | "mtrace-resp"
          | "mtrace-route"
          | "v1host-report"
          | "v2host-report"
          | "v2leave-group"
          | "v3host-report";
        /**
         * ToS value on which data packet filtering is based. The value is an integer ranging from 0 to 15.
         */
        tos?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent" | "delete_acl";
        /**
         * Source IP address mask. The value is an integer ranging from 1 to 32.
         */
        src_mask?: string;
        /**
         * Matching mode of basic ACL rules.
         */
        rule_action?: "permit" | "deny";
        /**
         * ACL number. The value is an integer ranging from 3000 to 3999.
         */
        acl_num?: string;
        /**
         * TCP flag mask value. The value is an integer ranging from 0 to 63.
         */
        tcp_flag_mask?: string;
        transport?: "cli";
        provider?: {
          [k: string]: any;
        };
        /**
         * End port number of the source port. The value is an integer ranging from 0 to 65535.
         */
        src_port_end?: string;
        /**
         * Destination IP address. The value is a string of 0 to 255 characters.The default value is 0.0.0.0. The value is in dotted decimal notation.
         */
        dest_ip?: string;
        /**
         * ICMP message code. Data packets can be filtered based on the ICMP message code. The value is an integer ranging from 0 to 255.
         */
        icmp_code?: string;
        /**
         * End port number of the destination port. The value is an integer ranging from 0 to 65535.
         */
        dest_port_end?: string;
        /**
         * ACL number or name. For a numbered rule group, the value ranging from 3000 to 3999 indicates a advance ACL. For a named rule group, the value is a string of 1 to 32 case-sensitive characters starting with a letter, spaces not supported.
         */
        acl_name: string;
        /**
         * Differentiated Services Code Point. The value is an integer ranging from 0 to 63.
         */
        dscp?: string;
        /**
         * Name of a basic ACL rule. The value is a string of 1 to 32 characters.
         */
        rule_name?: string;
        host?: string;
        password?: string;
        /**
         * Description about an ACL rule.
         */
        rule_description?: string;
        /**
         * Destination IP address mask. The value is an integer ranging from 1 to 32.
         */
        dest_mask?: string;
        /**
         * Name of a source port pool. The value is a string of 1 to 32 characters.
         */
        src_port_pool_name?: string;
        /**
         * Source IP address. The value is a string of 0 to 255 characters.The default value is 0.0.0.0. The value is in dotted decimal notation.
         */
        source_ip?: string;
        username?: string;
        /**
         * TCP flag value. The value is an integer ranging from 0 to 63.
         */
        syn_flag?: string;
        /**
         * VPN instance name. The value is a string of 1 to 31 characters.The default value is _public_.
         */
        vrf_name?: string;
        /**
         * Name of a source pool. The value is a string of 1 to 32 characters.
         */
        src_pool_name?: string;
        timeout?: number | string;
        /**
         * Start port number of the destination port. The value is an integer ranging from 0 to 65535.
         */
        dest_port_begin?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Range type of the destination port.
         */
        dest_port_op?: "lt" | "eq" | "gt" | "range";
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * ID of a basic ACL rule in configuration mode. The value is an integer ranging from 0 to 4294967294.
         */
        rule_id?: string;
        [k: string]: any;
      };
      /**
       * Publish a message on an MQTT topic.
       */
      mqtt?: {
        /**
         * Username to authenticate against the broker.
         */
        username?: string;
        /**
         * QoS (Quality of Service)
         */
        qos?: "0" | "1" | "2";
        /**
         * Default: 1883
         *
         * MQTT broker port number
         */
        port?: number | string;
        /**
         * Default: localhost
         *
         * MQTT broker address/name
         */
        server?: string;
        /**
         * MQTT topic name
         */
        topic: string;
        /**
         * Default: hostname + pid
         *
         * MQTT client identifier
         */
        client_id?: string;
        /**
         * Setting this flag causes the broker to retain (i.e. keep) the message so that applications that subsequently subscribe to the topic can received the last retained message immediately.
         */
        retain?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Password for C(username) to authenticate against the broker.
         */
        password?: string;
        /**
         * Payload. The special string C("None") may be used to send a NULL (i.e. empty) payload which is useful to simply notify with the I(topic) or to clear previously retained messages.
         */
        payload: string;
        [k: string]: any;
      };
      /**
       * Retrieve the attributes of a server certificate
       */
      iam_server_certificate_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module allows one to (re)generate OpenSSL certificate signing requests. It uses the pyOpenSSL python library to interact with openssl. This module supports the subjectAltName as well as the keyUsage and extendedKeyUsage extensions. Note: At least one of common_name or subject_alt_name must be specified. This module uses file common arguments to specify generated file permissions.
       */
      openssl_csr?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Module to manage VM pools in oVirt/RHV.
       */
      ovirt_vmpools?: {
        comment?: string;
        timeout?: number | string;
        /**
         * Name of the VM pool to manage.
         */
        name: string;
        /**
         * Description of the VM pool.
         */
        description?: string;
        poll_interval?: number | string;
        /**
         * Default: present
         *
         * Should the VM pool be present/absent.
         * Note that when C(state) is I(absent) all VMs in VM pool are stopped and removed.
         */
        state?: "present" | "absent";
        nested_attributes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Maximum number of VMs a single user can attach to from this pool.
         * Default value is set by engine.
         */
        vm_per_user?: number | string;
        /**
         * Name of the cluster, where VM pool should be created.
         */
        cluster?: string;
        fetch_nested?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Number of pre-started VMs defines the number of VMs in run state, that are waiting to be attached to Users.
         * Default value is set by engine.
         */
        prestarted?: number | string;
        auth: {
          [k: string]: any;
        };
        /**
         * Name of the template, which will be used to create VM pool.
         */
        template?: string;
        /**
         * Number of VMs in the pool.
         * Default value is set by engine.
         */
        vm_count?: number | string;
        /**
         * Type of the VM pool. Either manual or automatic.
         * C(manual) - The administrator is responsible for explicitly returning the virtual machine to the pool. The virtual machine reverts to the original base image after the administrator returns it to the pool.
         * C(Automatic) - When the virtual machine is shut down, it automatically reverts to its base image and is returned to the virtual machine pool.
         * Default value is set by engine.
         */
        type?: "manual" | "automatic";
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module allows one to (re)generate OpenSSL certificates. It implements a notion of provider (ie. C(selfsigned), C(acme), C(assertonly)) for your certificate. The 'assertonly' provider is intended for use cases where one is only interested in checking properties of a supplied certificate. Many properties that can be specified in this module are for validation of an existing or newly generated certificate. The proper place to specify them, if you want to receive a certificate with these properties is a CSR (Certificate Signing Request). It uses the pyOpenSSL python library to interact with OpenSSL.
       */
      openssl_certificate?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Sends arbitrary commands to a Dell OS9 node and returns the results read from the device. This  module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.
       * This module does not support running commands in configuration mode. Please use M(dellos9_config) to configure Dell OS9 devices.
       */
      dellos9_command?: {
        [k: string]: any;
      };
      /**
       * Manage packages on OpenBSD using the pkg tools.
       */
      openbsd_pkg?: {
        /**
         * C(present) will make sure the package is installed. C(latest) will make sure the latest version of the package is installed. C(absent) will make sure the specified package is not installed.
         */
        state: "absent" | "installed" | "latest" | "present" | "removed";
        /**
         * Build the package from source instead of downloading and installing a binary. Requires that the port source tree is already installed. Automatically builds and installs the 'sqlports' package, if it is not already installed.
         */
        build?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the package.
         */
        name: string;
        /**
         * Default: /usr/ports
         *
         * When used in combination with the 'build' option, allows overriding the default ports source directory.
         */
        ports_dir?: string;
        [k: string]: any;
      };
      /**
       * Manage SNAT pools on a BIG-IP.
       */
      bigip_snat_pool?: {
        /**
         * Default: present
         *
         * Whether the SNAT pool should exist or not.
         */
        state?: string;
        /**
         * Default: None
         *
         * List of members to put in the SNAT pool. When a C(state) of present is provided, this parameter is required. Otherwise, it is optional.
         */
        members?: string;
        /**
         * When C(yes), will only add members to the SNAT pool. When C(no), will replace the existing member list with the provided member list.
         */
        append?: string;
        /**
         * The name of the SNAT pool.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Collects a base set of device facts from a remote device that is running IOS XR.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.
       */
      iosxr_facts?: {
        username?: string;
        ssh_keyfile?: string;
        host?: string;
        /**
         * Default: !config
         *
         * When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, hardware, config, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(M(!)) to specify that a specific subset should not be collected.
         */
        gather_subset?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Add or remove flavors from OpenStack.
       */
      os_nova_flavor?: {
        /**
         * Default: auto
         *
         * ID for the flavor. This is optional as a unique UUID will be assigned if a value is not specified.
         */
        flavorid?: string;
        /**
         * Flavor name.
         */
        name?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        /**
         * Amount of memory, in MB.
         */
        ram?: string;
        /**
         * Ephemeral space size, in GB.
         */
        ephemeral?: string;
        /**
         * Number of virtual CPUs.
         */
        vcpus?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource. When I(state) is 'present', then I(ram), I(vcpus), and I(disk) are all required. There are no default values for those parameters.
         */
        state?: string;
        /**
         * Default: None
         *
         * Metadata dictionary
         */
        extra_specs?: string;
        /**
         * Swap space size, in MB.
         */
        swap?: string;
        /**
         * Default: 1.0
         *
         * RX/TX factor.
         */
        rxtx_factor?: string;
        /**
         * Default: True
         *
         * Make flavor accessible to the public.
         */
        is_public?: string;
        /**
         * Size of local disk, in GB.
         */
        disk?: string;
        [k: string]: any;
      };
      /**
       * This module allows to manage dns zones on a univention corporate server (UCS). It uses the python API of the UCS to create a new object or edit it.
       */
      udm_dns_zone?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Like M(win_file), M(win_reg_stat) will return whether the key/property exists.
       * It also returns the sub keys and properties of the key specified.
       * If specifying a property name through I(property), it will return the information specific for that property.
       */
      win_reg_stat?: {
        /**
         * The full registry key path including the hive to search for.
         */
        path?: string;
        /**
         * The registry property name to get information for, the return json will not include the sub_keys and properties entries for the I(key) specified.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Change ACL (Access Control List) inheritance and optionally copy inherited ACE's (Access Control Entry) to dedicated ACE's or vice versa.
       */
      win_acl_inheritance?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Create, update or delete a network security group. A security group contains Access Control List (ACL) rules that allow or deny network traffic to subnets or individual network interfaces. A security group is created with a set of default security rules and an empty set of security rules. Shape traffic flow by adding rules to the empty set of security rules.
       */
      azure_rm_securitygroup?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name of the resource group the security group belongs to.
         */
        resource_group: string;
        /**
         * Remove any existing rules not matching those defined in the rules parameters.
         */
        purge_rules?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        tags?: {
          [k: string]: any;
        };
        /**
         * Set of rules shaping traffic flow to or from a subnet or NIC. Each rule is a dictionary.
         */
        rules?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        ad_user?: string;
        append_tags?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        cloud_environment?: string;
        secret?: string;
        /**
         * The set of default rules automatically added to a security group at creation. In general default rules will not be modified. Modify rules to shape the flow of traffic to or from a subnet or NIC. See rules below for the makeup of a rule dict.
         */
        default_rules?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Remove any existing rules not matching those defined in the default_rules parameter.
         */
        purge_default_rules?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * Assert the state of the security group. Set to 'present' to create or update a security group. Set to 'absent' to remove a security group.
         */
        state?: "absent" | "present";
        /**
         * Default: resource_group location
         *
         * Valid azure location. Defaults to location of the resource group.
         */
        location?: string;
        client_id?: string;
        subscription_id?: string;
        password?: string;
        tenant?: string;
        /**
         * Name of the security group to operate on.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Creates or terminates ec2 instances.
       * C(state=restarted) was added in 2.2
       */
      ec2?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Adds or removes firewall rules from a gateway in a vca environment
       */
      vca_fw?: {
        /**
         * A list of firewall rules to be added to the gateway, Please see examples on valid entries
         */
        fw_rules?: string;
        [k: string]: any;
      };
      /**
       * Collects a base set of device facts from an Ordnance Virtual router over SSH. This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.
       */
      ordnance_facts?: {
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        username?: string;
        ssh_keyfile?: string;
        auth_pass?: string;
        host: string;
        /**
         * Default: !config
         *
         * When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, hardware, config, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(M(!)) to specify that a specific subset should not be collected.
         */
        gather_subset?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        port?: number | string;
        transport?: string;
        [k: string]: any;
      };
      /**
       * Manages global attributes of VXLAN and bridge domain on HUAWEI CloudEngine devices.
       */
      ce_vxlan_global?: {
        username?: string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Set the tunnel mode to VXLAN when configuring the VXLAN feature.
         */
        tunnel_mode_vxlan?: "enable" | "disable";
        /**
         * Eth-Trunk from load balancing VXLAN packets in optimized mode.
         */
        nvo3_eth_trunk_hash?: "enable" | "disable";
        /**
         * Loop prevention of VXLAN traffic in non-enhanced mode. When the device works in non-enhanced mode, inter-card forwarding of VXLAN traffic may result in loops.
         */
        nvo3_prevent_loops?: "enable" | "disable";
        /**
         * Enabling or disabling the VXLAN ACL extension function.
         */
        nvo3_acl_extend?: "enable" | "disable";
        /**
         * Specifies a bridge domain ID. The value is an integer ranging from 1 to 16777215.
         */
        bridge_domain_id?: string;
        /**
         * Configuring the Layer 3 VXLAN Gateway to Work in Non-loopback Mode.
         */
        nvo3_gw_enhanced?: "l2" | "l3";
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        timeout?: number | string;
        /**
         * Load balancing of VXLAN packets through ECMP in optimized mode.
         */
        nvo3_ecmp_hash?: "enable" | "disable";
        host?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Enabling or disabling the VXLAN service extension function.
         */
        nvo3_service_extend?: "enable" | "disable";
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * creates / deletes a Rackspace Public Cloud queue.
       */
      rax_queue?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * allows you to upload/delete templates in Proxmox VE cluster
       */
      proxmox_template?: {
        /**
         * Proxmox VE node, when you will operate with template
         */
        node?: string;
        /**
         * path to uploaded file
         * required only for C(state=present)
         */
        src?: string;
        /**
         * can be used only with C(state=present), exists template will be overwritten
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * the host of the Proxmox VE cluster
         */
        api_host: string;
        /**
         * the user to authenticate with
         */
        api_user: string;
        /**
         * the password to authenticate with
         * you can use PROXMOX_PASSWORD environment variable
         */
        api_password?: string;
        /**
         * Default: local
         *
         * target storage
         */
        storage?: string;
        /**
         * Default: 30
         *
         * timeout for operations
         */
        timeout?: number | string;
        /**
         * Default: present
         *
         * Indicate desired state of the template
         */
        state?: "present" | "absent";
        /**
         * Default: vztmpl
         *
         * content type
         * required only for C(state=present)
         */
        content_type?: "vztmpl" | "iso";
        /**
         * enable / disable https certificate verification
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * the template name
         * required only for states C(absent), C(info)
         */
        template?: string;
        [k: string]: any;
      };
      /**
       * Consumes docker compose to start, shutdown and scale services.
       * Works with compose versions 1 and 2.
       * Compose can be read from a docker-compose.yml (or .yaml) file or inline using the C(definition) option.
       * See the examples for more details.
       * Supports check mode.
       */
      docker_service?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages a VRF for an OSPF router.
       */
      nxos_ospf_vrf?: {
        username?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        /**
         * Specify the max interval for rate-limiting Link-State Advertisement (LSA) generation. Valid values are an integer, in milliseconds, or the keyword 'default'.
         */
        timer_throttle_lsa_max?: string;
        /**
         * Specify the maximum wait time between Shortest Path First (SPF) calculations. Valid values are an integer, in milliseconds, or the keyword 'default'.
         */
        timer_throttle_spf_max?: string;
        /**
         * Specify the hold interval for rate-limiting Link-State Advertisement (LSA) generation. Valid values are an integer, in milliseconds, or the keyword 'default'.
         */
        timer_throttle_lsa_hold?: string;
        include_defaults?: string;
        state?: "present" | "absent";
        /**
         * Specifies the reference bandwidth used to assign OSPF cost. Valid values are an integer, in Mbps, or the keyword 'default'.
         */
        auto_cost?: string;
        provider?: {
          [k: string]: any;
        };
        save?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        config?: string;
        /**
         * Router Identifier (ID) of the OSPF router VRF instance.
         */
        router_id?: string;
        /**
         * Setting to true will suppress routing update on interface. Valid values are 'true' and 'false'.
         */
        passive_interface?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify the default Metric value. Valid values are an integer or the keyword 'default'.
         */
        default_metric?: string;
        host?: string;
        /**
         * Default: default
         *
         * Name of the resource instance. Valid value is a string. The name 'default' is a valid VRF representing the global OSPF.
         */
        vrf?: string;
        /**
         * Specify initial Shortest Path First (SPF) schedule delay. Valid values are an integer, in milliseconds, or the keyword 'default'.
         */
        timer_throttle_spf_start?: string;
        password?: string;
        /**
         * Specify minimum hold time between Shortest Path First (SPF) calculations. Valid values are an integer, in milliseconds, or the keyword 'default'.
         */
        timer_throttle_spf_hold?: string;
        ssh_keyfile?: string;
        /**
         * Name of the OSPF instance.
         */
        ospf: string;
        /**
         * Controls the level of log messages generated whenever a neighbor changes state. Valid values are 'log', 'detail', and 'default'.
         */
        log_adjacency?: "log" | "detail" | "default";
        /**
         * Specify the start interval for rate-limiting Link-State Advertisement (LSA) generation. Valid values are an integer, in milliseconds, or the keyword 'default'.
         */
        timer_throttle_lsa_start?: string;
        timeout?: number | string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Retrieve facts about a image image from OpenStack.
       */
      os_image_facts?: {
        /**
         * Name or ID of the image
         */
        image?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        [k: string]: any;
      };
      /**
       * This module allows you to reset a switch's startup configuration. The method provides a way to reset the startup configuration to its factory settings. This is helpful when you want to move the switch to another topology as a new network device. This module uses SSH to manage network device configuration. The results of the operation can be viewed in results directory. For more information about this module from Lenovo and customizing it usage for your use cases, please visit U(http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_factory.html)
       */
      cnos_factory?: {
        [k: string]: any;
      };
      /**
       * This module can be used to configure VSAN clustering on an ESXi host
       */
      vmware_vsan_cluster?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Retrieve facts about one or more oVirt/RHV permissions.
       */
      ovirt_permissions_facts?: {
        /**
         * Authorization provider of the user/group. In previous versions of oVirt/RHV known as domain.
         */
        authz_name?: string;
        /**
         * Namespace of the authorization provider, where user/group resides.
         */
        namespace?: string;
        /**
         * Username of the user to manage. In most LDAPs it's I(uid) of the user, but in Active Directory you must specify I(UPN) of the user.
         */
        user_name?: string;
        /**
         * Name of the group to manage.
         */
        group_name?: string;
        [k: string]: any;
      };
      /**
       * Create an annotation event on the given annotation stream :name. If the annotation stream does not exist, it will be created automatically
       */
      librato_annotation?: {
        /**
         * The annotation stream name
         * If the annotation stream does not exist, it will be created automatically
         */
        name?: string;
        /**
         * See examples
         */
        links?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The title of an annotation is a string and may contain spaces
         * The title should be a short, high-level summary of the annotation e.g. v45 Deployment
         */
        title: string;
        /**
         * The unix timestamp indicating the the time at which the event referenced by this annotation started
         */
        start_time?: number | string;
        /**
         * A string which describes the originating source of an annotation when that annotation is tracked across multiple members of a population
         */
        source?: string;
        /**
         * The unix timestamp indicating the the time at which the event referenced by this annotation ended
         * For events that have a duration, this is a useful way to annotate the duration of the event
         */
        end_time?: number | string;
        /**
         * Librato account username
         */
        user: string;
        /**
         * Librato account api key
         */
        api_key: string;
        /**
         * The description contains extra meta-data about a particular annotation
         * The description should contain specifics on the individual annotation e.g. Deployed 9b562b2 shipped new feature foo!
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * Manages Cisco Ethernet Virtual Private Network (EVPN) VXLAN Network Identifier (VNI) configurations of a Nexus device.
       */
      nxos_evpn_vni?: {
        username?: string;
        save?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        /**
         * Sets the route-target 'import' extended communities.
         */
        route_target_export?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Enables/Disables route-target settings for both import and export target communities using a single property.
         */
        route_target_both?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        /**
         * The EVPN VXLAN Network Identifier.
         */
        vni: string;
        include_defaults?: string;
        host?: string;
        /**
         * The VPN Route Distinguisher (RD). The RD is combined with the IPv4 or IPv6 prefix learned by the PE router to create a globally unique address.
         */
        route_distinguisher?: string;
        /**
         * Sets the route-target 'import' extended communities.
         */
        route_target_import?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        config?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Create or destroy user roles
       */
      na_cdot_user_role?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manage S3 buckets in AWS, Ceph, Walrus and FakeS3
       */
      s3_bucket?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module will change the power plan of a Windows system to the defined string.
       * Windows defaults to C(balanced) which will cause CPU throttling. In some cases it can be preferable to change the mode to C(high performance) to increase CPU performance.
       */
      win_power_plan?: {
        /**
         * String value that indicates the desired power plan. The power plan must already be present on the system. Commonly there will be options for C(balanced) and C(high performance).
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Invokes a PowerShell DSC Configuration. Requires PowerShell version 5 (February release or newer).
       * Most of the parameters for this module are dynamic and will vary depending on the DSC Resource.
       */
      win_dsc?: {
        /**
         * Default: latest
         *
         * Can be used to configure the exact version of the dsc resource to be invoked.
         * Useful if the target node has multiple versions installed of the module containing the DSC resource.
         * If not specified, the module will follow standard Powershell convention and use the highest version available.
         */
        module_version?: string;
        /**
         * The DSC Resource to use. Must be accessible to PowerShell using any of the default paths.
         */
        resource_name?: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure Webhook object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_webhook?: {
        username?: string;
        /**
         * Callback url for the webhook.
         * Field introduced in 17.1.1.
         */
        callback_url?: string;
        /**
         * Field introduced in 17.1.1.
         */
        description?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         * Field introduced in 17.1.1.
         */
        tenant_ref?: string;
        controller?: string;
        /**
         * The name of the webhook profile.
         * Field introduced in 17.1.1.
         */
        name: string;
        /**
         * Verification token sent back with the callback asquery parameters.
         * Field introduced in 17.1.1.
         */
        verification_token?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        tenant?: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Uuid of the webhook profile.
         * Field introduced in 17.1.1.
         */
        uuid?: string;
        [k: string]: any;
      };
      /**
       * Create or delete or update firewall polices on Centurylink Cloud
       */
      clc_firewall_policy?: {
        /**
         * Default: None
         *
         * CLC alias for the destination account
         */
        destination_account_alias?: string;
        /**
         * Default: None
         *
         * The list of destination addresses for traffic on the terminating firewall. This is required when state is 'present'
         */
        destination?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: True
         *
         * Whether the firewall policy is enabled or disabled
         */
        enabled?: true | false;
        /**
         * Default: None
         *
         * The list  of source addresses for traffic on the originating firewall. This is required when state is 'present"
         */
        source?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * Whether to create or delete the firewall policy
         */
        state?: "present" | "absent";
        /**
         * Target datacenter for the firewall policy
         */
        location: string;
        /**
         * CLC alias for the source account
         */
        source_account_alias: string;
        /**
         * Default: None
         *
         * Id of the firewall policy. This is required to update or delete an existing firewall policy
         */
        firewall_policy_id?: string;
        /**
         * Default: None
         *
         * The list of ports associated with the policy. TCP and UDP can take in single ports or port ranges.
         */
        ports?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: True
         *
         * Whether to wait for the provisioning tasks to finish before returning.
         */
        wait?: string;
        [k: string]: any;
      };
      /**
       * This module allows you to work with interface related configurations. The operators used are overloaded to ensure control over switch interface configurations. Apart from the regular device connection related attributes, there are seven interface arguments that will perform further configurations. They are interfaceArg1, interfaceArg2, interfaceArg3, interfaceArg4, interfaceArg5, interfaceArg6, and interfaceArg7. For more details on how to use these arguments, see [Overloaded Variables]. Interface configurations are taken care at six contexts in a regular CLI. They are 1. Interface Name - Configurations 2. Ethernet Interface - Configurations 3. Loopback Interface Configurations 4. Management Interface Configurations 5. Port Aggregation - Configurations 6. VLAN Configurations This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run. For more information about this module from Lenovo and customizing it usage for your use cases, please visit U(http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_interface.html)
       */
      cnos_interface?: {
        /**
         * This specifies the attribute you specify subsequent to interface command
         */
        interfaceOption?: string;
        /**
         * This specifies the interface range in which the port aggregation is envisaged
         */
        interfaceRange?: string;
        /**
         * This is an overloaded interface fourth argument. Usage of this argument can be found is the User Guide referenced above.
         */
        interfaceArg4?: string;
        /**
         * This is an overloaded interface fifth argument. Usage of this argument can be found is the User Guide referenced above.
         */
        interfaceArg5?: string;
        /**
         * This is an overloaded interface sixth argument. Usage of this argument can be found is the User Guide referenced above.
         */
        interfaceArg6?: string;
        /**
         * This is an overloaded interface seventh argument. Usage of this argument can be found is the User Guide referenced above.
         */
        interfaceArg7?: string;
        /**
         * This is an overloaded interface first argument. Usage of this argument can be found is the User Guide referenced above.
         */
        interfaceArg1?: string;
        /**
         * This is an overloaded interface second argument. Usage of this argument can be found is the User Guide referenced above.
         */
        interfaceArg2?: string;
        /**
         * This is an overloaded interface third argument. Usage of this argument can be found is the User Guide referenced above.
         */
        interfaceArg3?: string;
        [k: string]: any;
      };
      /**
       * This module can allocate or release an EIP.
       * This module can associate/disassociate an EIP with instances or network interfaces.
       */
      ec2_eip?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage server entities configuration.
       * This module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.
       */
      netscaler_server?: {
        /**
         * Any information about the server.
         */
        comment?: string;
        /**
         * The netmask of the translation ip.
         */
        translationmask?: string;
        /**
         * Name for the server.
         * Must begin with an ASCII alphabetic or underscore C(_) character, and must contain only ASCII alphanumeric, underscore C(_), hash C(#), period C(.), space C( ), colon C(:), at C(@), equals C(=), and hyphen C(-) characters.
         * Can be changed after the name is created.
         * Minimum length = 1
         */
        name?: string;
        /**
         * Support IPv6 addressing mode. If you configure a server with the IPv6 addressing mode, you cannot use the server in the IPv4 addressing mode.
         */
        ipv6address?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        save_config?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 5
         *
         * Time, in seconds, for which the NetScaler appliance must wait, after DNS resolution fails, before sending the next DNS query to resolve the domain name.
         * Minimum value = C(5)
         * Maximum value = C(20939)
         */
        domainresolveretry?: number | string;
        state?: "present" | "absent";
        nitro_timeout?: number;
        /**
         * When set to C(true) the server state will be set to C(disabled).
         * When set to C(false) the server state will be set to C(enabled).
         * Note that due to limitations of the underlying NITRO API a C(disabled) state change alone does not cause the module result to report a changed status.
         */
        disabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        nitro_protocol?: "http" | "https";
        nsip: string;
        /**
         * IP address used to transform the server's DNS-resolved IP address.
         */
        translationip?: string;
        nitro_user: string;
        /**
         * Domain name of the server. For a domain based configuration, you must create the server first.
         * Minimum length = 1
         */
        domain?: string;
        /**
         * Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID, the entity becomes part of the default traffic domain, which has an ID of 0.
         * Minimum value = C(0)
         * Maximum value = C(4094)
         */
        td?: number;
        /**
         * IPv4 or IPv6 address of the server. If you create an IP address based server, you can specify the name of the server, instead of its IP address, when creating a service. Note: If you do not create a server entry, the server IP address that you enter when you create a service becomes the name of the server.
         */
        ipaddress?: string;
        nitro_pass: string;
        [k: string]: any;
      };
      /**
       * Runs I(puppet) agent or apply in a reliable manner
       */
      puppet?: {
        [k: string]: any;
      };
      /**
       * This module allows you to work with virtual Link Aggregation Groups (vLAG) related configurations. The operators used are overloaded to ensure control over switch vLAG configurations. Apart from the regular device connection related attributes, there are four vLAG arguments which are overloaded variables that will perform further configurations. They are vlagArg1, vlagArg2, vlagArg3, and vlagArg4. For more details on how to use these arguments, see [Overloaded Variables]. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run. For more information about this module from Lenovo and customizing it usage for your use cases, please visit U(http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_vlag.html)
       */
      cnos_vlag?: {
        /**
         * This is an overloaded vlag second argument. Usage of this argument can be found is the User Guide referenced above.
         */
        vlagArg2?: string;
        /**
         * This is an overloaded vlag third argument. Usage of this argument can be found is the User Guide referenced above.
         */
        vlagArg3?: string;
        /**
         * This is an overloaded vlag first argument. Usage of this argument can be found is the User Guide referenced above.
         */
        vlagArg1?: string;
        /**
         * This is an overloaded vlag fourth argument. Usage of this argument can be found is the User Guide referenced above.
         */
        vlagArg4?: string;
        [k: string]: any;
      };
      /**
       * Create, update or delete a network interface. When creating a network interface you must provide the name of an existing virtual network, the name of an existing subnet within the virtual network. A default security group and public IP address will be created automatically, or you can provide the name of an existing security group and public IP address. See the examples below for more details.
       */
      azure_rm_networkinterface?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module allows you to work with VLAN related configurations. The operators used are overloaded to ensure control over switch VLAN configurations. The first level of VLAN configuration allows to set up the VLAN range, the VLAN tag persistence, a VLAN access map and access map filter. After passing this level, there are five VLAN arguments that will perform further configurations. They are vlanArg1, vlanArg2, vlanArg3, vlanArg4, and vlanArg5. The value of vlanArg1 will determine the way following arguments will be evaluated. For more details on how to use these arguments, see [Overloaded Variables]. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run. For more information about this module from Lenovo and customizing it usage for your use cases, please visit U(http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_vlan.html)
       */
      cnos_vlan?: {
        /**
         * This is an overloaded vlan fifth argument. Usage of this argument can be found is the User Guide referenced above.
         */
        vlanArg5?: string;
        /**
         * This is an overloaded vlan fourth argument. Usage of this argument can be found is the User Guide referenced above.
         */
        vlanArg4?: string;
        /**
         * This is an overloaded vlan third argument. Usage of this argument can be found is the User Guide referenced above.
         */
        vlanArg3?: string;
        /**
         * This is an overloaded vlan second argument. Usage of this argument can be found is the User Guide referenced above.
         */
        vlanArg2?: string;
        /**
         * This is an overloaded vlan first argument. Usage of this argument can be found is the User Guide referenced above.
         */
        vlanArg1?: string;
        [k: string]: any;
      };
      /**
       * The M(proxysql_global_variables) module gets or sets the proxysql global variables.
       */
      proxysql_global_variables?: {
        /**
         * Default: 6032
         *
         * The port used to connect to ProxySQL admin interface.
         */
        login_port?: number | string;
        /**
         * Specify a config file from which login_user and login_password are to be read.
         */
        config_file?: string;
        /**
         * Default: None
         *
         * The username used to authenticate to ProxySQL admin interface.
         */
        login_user?: string;
        /**
         * Default: 127.0.0.1
         *
         * The host used to connect to ProxySQL admin interface.
         */
        login_host?: string;
        /**
         * Default: None
         *
         * The password used to authenticate to ProxySQL admin interface.
         */
        login_password?: string;
        /**
         * Defines a value the variable specified using I(variable) should be set to.
         */
        value?: string;
        login_unix_socket?: string;
        /**
         * Default: True
         *
         * Dynamically load mysql host config to runtime memory.
         */
        load_to_runtime?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * Save mysql host config to sqlite db on disk to persist the configuration.
         */
        save_to_disk?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Defines which variable should be returned, or if I(value) is specified which variable should be updated.
         */
        variable: string;
        [k: string]: any;
      };
      /**
       * Create or delete VNICs on Solaris/illumos systems.
       */
      dladm_vnic?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Use this module to add or remove hosts to a stacki front-end via API
       * U(https://github.com/StackIQ/stacki)
       */
      stacki_host?: {
        /**
         * IP Address for the primary network interface.
         */
        prim_intf_ip?: string;
        network?: string;
        /**
         * Username for authenticating with Stacki API, but if not specified, the environment variable C(stacki_user) is used instead.
         */
        stacki_user: string;
        /**
         * URL for the Stacki API Endpoint.
         */
        stacki_endpoint: string;
        /**
         * Name of the primary network interface.
         */
        prim_intf?: string;
        appliance?: string;
        rank?: number | string;
        rack?: number | string;
        /**
         * Password for authenticating with Stacki API, but if not specified, the environment variable C(stacki_password) is used instead.
         */
        stacki_password: string;
        state?: "present" | "absent";
        /**
         * Set value to True to force node into install state if it already exists in stacki.
         */
        force_install?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * MAC Address for the primary PXE boot network interface.
         */
        prim_intf_mac?: string;
        /**
         * Name of the host to be added to Stacki.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module is used to configure PKIProfile object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_pkiprofile?: {
        /**
         * Certificate revocation lists.
         */
        crls?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        username?: string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * When enabled, avi will not trust intermediate and root certs presented by a client.
         * Instead, only the chain certs configured in the certificate authority section will be used to verify trust of the client's cert.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        ignore_peer_chain?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        controller?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * This field describes the object's replication scope.
         * If the field is set to false, then the object is visible within the controller-cluster and its associated service-engines.
         * If the field is set to true, then the object is replicated across the federation.
         * Field introduced in 17.1.3.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        is_federated?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Creator name.
         */
        created_by?: string;
        /**
         * List of certificate authorities (root and intermediate) trusted that is used for certificate validation.
         */
        ca_certs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        tenant?: string;
        /**
         * When enabled, avi will only validate the revocation status of the leaf certificate using crl.
         * To enable validation for the entire chain, disable this option and provide all the relevant crls.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        validate_only_leaf_crl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * When enabled, avi will verify via crl checks that certificates in the trust chain have not been revoked.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        crl_check?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Name of the pki profile.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Create, update, delete snapshot groups for NetApp E-series storage arrays
       */
      netapp_e_snapshot_group?: {
        /**
         * Default: 20
         *
         * The size of the repository in relation to the size of the base volume
         */
        repo_pct?: number | string;
        ssid: string;
        /**
         * Default: medium
         *
         * The importance of the rollback operation.
         * This value is overridden by consistency group setting if this snapshot group is associated with a consistency group
         */
        rollback_priority?: "highest" | "high" | "medium" | "low" | "lowest";
        /**
         * Default: 30
         *
         * The automatic deletion indicator.
         * If non-zero, the oldest snapshot image will be automatically deleted when creating a new snapshot image to keep the total number of snapshot images limited to the number specified.
         * This value is overridden by the consistency group setting if this snapshot group is associated with a consistency group.
         */
        delete_limit?: number | string;
        /**
         * The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_password: string;
        /**
         * The name to give the snapshot group
         */
        name: string;
        /**
         * Whether to ensure the group is present or absent.
         */
        state: "present" | "absent";
        /**
         * The name of the storage pool on which to allocate the repository volume.
         */
        storage_pool_name?: string;
        /**
         * The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.
         */
        api_username: string;
        /**
         * The url to the SANtricity WebServices Proxy or embedded REST API.
         */
        api_url: string;
        /**
         * The name of the base volume or thin volume to use as the base for the new snapshot group.
         * If a snapshot group with an identical C(name) already exists but with a different base volume an error will be returned.
         */
        base_volume_name: string;
        /**
         * Default: purgepit
         *
         * The behavior on when the data repository becomes full.
         * This value is overridden by consistency group setting if this snapshot group is associated with a consistency group
         */
        full_policy?: "unknown" | "failbasewrites" | "purgepit";
        /**
         * Default: True
         *
         * Should https certificates be validated?
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 80
         *
         * The repository utilization warning threshold, as a percentage of the repository volume capacity.
         */
        warning_threshold?: number | string;
        [k: string]: any;
      };
      /**
       * Allows to post events to DataDog (www.datadoghq.com) service.
       * Uses http://docs.datadoghq.com/api/#events API.
       */
      datadog_event?: {
        /**
         * Default: now
         *
         * POSIX timestamp of the event.
         * Default value is now.
         */
        date_happened?: number | string;
        /**
         * Default: info
         *
         * Type of alert.
         */
        alert_type?: "error" | "warning" | "info" | "success";
        /**
         * The event title.
         */
        title: string;
        /**
         * The body of the event.
         */
        text: string;
        /**
         * Comma separated list of tags to apply to the event.
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Your DataDog app key.
         */
        app_key: string;
        /**
         * Default: normal
         *
         * The priority of the event.
         */
        priority?: "normal" | "low";
        /**
         * An arbitrary string to use for aggregation.
         */
        aggregation_key?: string;
        /**
         * Your DataDog API key.
         */
        api_key: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Tests reachability using ping from switch to a remote destination.
       */
      ios_ping?: {
        /**
         * Default: 5
         *
         * Number of packets to send.
         */
        count?: number | string;
        username?: string;
        ssh_keyfile?: string;
        /**
         * The IP Address or hostname (resolvable by switch) of the remote node.
         */
        dest: string;
        auth_pass?: string;
        /**
         * Default: present
         *
         * Determines if the expected result is success or fail.
         */
        state?: "absent" | "present";
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The source IP Address.
         */
        source?: string;
        host?: string;
        /**
         * Default: default
         *
         * The VRF to use for forwarding.
         */
        vrf?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Manage BIG-IP global settings.
       */
      bigip_sys_global?: {
        /**
         * Specifies whether the system displays an advisory message on the login screen.
         */
        security_banner?: string;
        /**
         * Specifies, when C(enabled), that the next time you reboot the system, the system boots to an ISO image on the network, rather than an internal media drive.
         */
        net_reboot?: string;
        /**
         * Specifies the text to present in the advisory banner.
         */
        banner_text?: string;
        /**
         * Specifies the number of seconds of inactivity before the system logs off a user that is logged on.
         */
        console_timeout?: string;
        /**
         * Specifies, when C(enabled), that the system suppresses informational text on the console during the boot cycle. When C(disabled), the system presents messages and informational text on the console during the boot cycle.
         */
        quiet_boot?: string;
        /**
         * Specifies whether or not to enable DHCP client on the management interface
         */
        mgmt_dhcp?: string;
        /**
         * Default: present
         *
         * The state of the variable on the system. When C(present), guarantees that an existing variable is set to C(value).
         */
        state?: string;
        /**
         * C(enable) or C(disabled) the Setup utility in the browser-based Configuration utility
         */
        gui_setup?: string;
        /**
         * Specifies, when C(enabled), that the system menu displays on the LCD screen on the front of the unit. This setting has no effect when used on the VE platform.
         */
        lcd_display?: string;
        [k: string]: any;
      };
      /**
       * Collects a base set of device facts from a remote device that is running eos.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.
       */
      eos_facts?: {
        username?: string;
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        auth_pass?: string;
        host?: string;
        /**
         * Default: !config
         *
         * When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, hardware, config, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(M(!)) to specify that a specific subset should not be collected.
         */
        gather_subset?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "eapi";
        [k: string]: any;
      };
      /**
       * The M(slack) module sends notifications to U(http://slack.com) via the Incoming WebHook integration
       */
      slack?: {
        /**
         * Default: Ansible
         *
         * This is the sender of the message.
         */
        username?: string;
        /**
         * Default: None
         *
         * Slack (sub)domain for your environment without protocol. (i.e. C(future500.slack.com)) In 1.8 and beyond, this is deprecated and may be ignored.  See token documentation for information.
         */
        domain?: string;
        /**
         * Default: None
         *
         * Define a list of attachments. This list mirrors the Slack JSON API. For more information, see https://api.slack.com/docs/attachments
         */
        attachments?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: normal
         *
         * Allow text to use default colors - use the default of 'normal' to not send a custom color bar at the start of the message
         */
        color?: "normal" | "good" | "warning" | "danger";
        /**
         * Url for the message sender's icon (default C(https://www.ansible.com/favicon.ico))
         */
        icon_url?: string;
        /**
         * Default: None
         *
         * Setting for the message parser at Slack
         */
        parse?: "full" | "none";
        /**
         * Slack integration token.  This authenticates you to the slack service. Prior to 1.8, a token looked like C(3Ffe373sfhRE6y42Fg3rvf4GlK).  In 1.8 and above, ansible adapts to the new slack API where tokens look like C(G922VJP24/D921DW937/3Ffe373sfhRE6y42Fg3rvf4GlK).  If tokens are in the new format then slack will ignore any value of domain.  If the token is in the old format the domain is required.  Ansible has no control of when slack will get rid of the old API.  When slack does that the old format will stop working.
         */
        token: string;
        /**
         * Default: None
         *
         * Emoji for the message sender. See Slack documentation for options. (if I(icon_emoji) is set, I(icon_url) will not be used)
         */
        icon_emoji?: string;
        /**
         * Default: 1
         *
         * Automatically create links for channels and usernames in I(msg).
         */
        link_names?: number | string;
        /**
         * Default: None
         *
         * Message to send.
         */
        msg?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * Channel to send the message to. If absent, the message goes to the channel selected for the I(token).
         */
        channel?: string;
        [k: string]: any;
      };
      /**
       * Manage packages with the XBPS package manager.
       */
      xbps?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * IPS packages are the native packages in Solaris 11 and higher.
       * This modules will configure which publishers a client will download IPS packages from.
       */
      pkg5_publisher?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Apstra AOS Device module let you manage your devices in AOS easily. You can approve devices and define in which state the device should be. Currently only the state I(normal) is supported but the goal is to extend this module with additional state. This module is idempotent and support the I(check) mode. It's using the AOS REST API.
       */
      aos_device?: {
        /**
         * The device serial-number; i.e. uniquely identifies the device in the AOS system. Only one of I(name) or I(id) can be set.
         */
        name?: string;
        /**
         * Default: normal
         *
         * Define in which state the device should be. Currently only I(normal) is supported but the goal is to add I(maint) and I(decomm).
         */
        state?: "normal";
        /**
         * An existing AOS session as obtained by M(aos_login) module.
         */
        session: {
          [k: string]: any;
        };
        /**
         * When approving a device using the I(approve) argument, it's possible define the location of the device.
         */
        location?: string;
        /**
         * Default: no
         *
         * The approve argument instruct the module to convert a device in quarantine mode into approved mode.
         */
        approve?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The AOS internal id for a device; i.e. uniquely identifies the device in the AOS system. Only one of I(name) or I(id) can be set.
         */
        id?: string;
        [k: string]: any;
      };
      /**
       * Manage the atomic host platform
       * Rebooting of Atomic host platform should be done outside this module
       */
      atomic_host?: {
        [k: string]: any;
      };
      /**
       * Manages VPN instance address family of HUAWEI CloudEngine switches.
       */
      ce_vrf_af?: {
        /**
         * VPN instance vpn target type.
         */
        vpn_target_type?: "export_extcommunity" | "import_extcommunity";
        username?: string;
        /**
         * Manage the state of the vpn target.
         */
        vpn_target_state?: "present" | "absent";
        /**
         * Is extend vpn or normal vpn.
         */
        evpn?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: v4
         *
         * VPN instance address family.
         */
        vrf_aftype?: "v4" | "v6";
        /**
         * VPN instance target value. Such as X.X.X.X:number<0-65535> or number<0-65535>:number<0-4294967295> or number<0-65535>.number<0-65535>:number<0-65535> or number<65536-4294967295>:number<0-65535> but not support 0:0 and 0.0:0.
         */
        vpn_target_value?: string;
        /**
         * Default: present
         *
         * Manage the state of the af.
         */
        state?: "present" | "absent";
        host?: string;
        /**
         * VPN instance route distinguisher,the RD used to distinguish same route prefix from different vpn. The RD must be setted before setting vpn_target_value.
         */
        route_distinguisher?: string;
        /**
         * VPN instance.
         */
        vrf: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Send code deploy and annotation events to Stackdriver
       */
      stackdriver?: {
        /**
         * The repository (or project) deployed
         */
        repository?: string;
        /**
         * Default: INFO
         *
         * one of INFO/WARN/ERROR, defaults to INFO if not supplied.  May affect display.
         */
        level?: "INFO" | "WARN" | "ERROR";
        /**
         * Default: Ansible
         *
         * The person or robot who the annotation should be attributed to.
         */
        annotated_by?: string;
        /**
         * Default: Ansible
         *
         * The person or robot responsible for deploying the code
         */
        deployed_by?: string;
        /**
         * The environment code was deployed to. (ie: development, staging, production)
         */
        deployed_to?: string;
        /**
         * id of an EC2 instance that this event should be attached to, which will limit the contexts where this event is shown
         */
        instance_id?: string;
        /**
         * API key.
         */
        key: string;
        /**
         * The contents of the annotation message, in plain text.  Limited to 256 characters. Required for annotation.
         */
        msg?: string;
        /**
         * Unix timestamp of where the event should appear in the timeline, defaults to now. Be careful with this.
         */
        event_epoch?: string;
        /**
         * The revision of the code that was deployed. Required for deploy events
         */
        revision_id?: string;
        /**
         * The type of event to send, either annotation or deploy
         */
        event: "annotation" | "deploy";
        [k: string]: any;
      };
      /**
       * This module provides declarative management of static IP routes on Juniper JUNOS network devices.
       */
      junos_static_route?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create or delete volumes and volume snapshots on Pure Storage FlashArray.
       */
      purefa_snap?: {
        /**
         * The name of the source volume.
         */
        name?: string;
        /**
         * Default: present
         *
         * Define whether the volume snapshot should exist or not.
         */
        state?: string;
        /**
         * Suffix of snapshot name.
         */
        suffix?: string;
        /**
         * Name of target volume if creating from snapshot.
         */
        target?: string;
        /**
         * Default: no
         *
         * Define whether to overwrite existing volume when creating from snapshot.
         */
        overwrite?: string;
        /**
         * Default: no
         *
         * Define whether to eradicate the snapshot on delete or leave in trash.
         */
        eradicate?: string;
        [k: string]: any;
      };
      /**
       * Manages filesystem user defined extended attributes, requires that they are enabled on the target filesystem and that the setfattr/getfattr utilities are present.
       */
      xattr?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manages MySQL server replication, slave, master status get and change master host.
       */
      mysql_replication?: {
        ssl_key?: string;
        /**
         * does the host uses GTID based replication or not
         */
        master_auto_position?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * same as mysql variable
         */
        master_ssl_cert?: string;
        login_user?: string;
        /**
         * same as mysql variable
         */
        master_port?: number | string;
        /**
         * same as mysql variable
         */
        master_host?: string;
        /**
         * same as mysql variable
         */
        master_ssl_ca?: string;
        /**
         * same as mysql variable
         */
        master_ssl_cipher?: string;
        /**
         * same as mysql variable
         */
        relay_log_file?: string;
        /**
         * same as mysql variable
         */
        master_log_pos?: number | string;
        connect_timeout?: number | string;
        /**
         * same as mysql variable
         */
        relay_log_pos?: number | string;
        /**
         * same as mysql variable
         */
        master_password?: string;
        config_file?: string;
        /**
         * same as mysql variable
         */
        master_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        login_host?: string;
        /**
         * same as mysql variable
         */
        master_ssl_capath?: string;
        login_unix_socket?: string;
        /**
         * same as mysql variable
         */
        master_connect_retry?: number | string;
        /**
         * same as mysql variable
         */
        master_user?: string;
        login_password?: string;
        /**
         * same as mysql variable
         */
        master_log_file?: string;
        login_port?: number | string;
        ssl_cert?: string;
        ssl_ca?: string;
        /**
         * same as mysql variable
         */
        master_ssl_key?: string;
        /**
         * Default: getslave
         *
         * module operating mode. Could be getslave (SHOW SLAVE STATUS), getmaster (SHOW MASTER STATUS), changemaster (CHANGE MASTER TO), startslave (START SLAVE), stopslave (STOP SLAVE), resetslave (RESET SLAVE), resetslaveall (RESET SLAVE ALL)
         */
        mode?: "getslave" | "getmaster" | "changemaster" | "stopslave" | "startslave" | "resetslave" | "resetslaveall";
        [k: string]: any;
      };
      /**
       * Gather facts about ec2 Auto Scaling Groups (ASGs) in AWS
       */
      ec2_asg_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add or Remove images from the OpenStack Image Repository
       */
      os_image?: {
        /**
         * Default: None
         *
         * The name of an existing ramdisk image that will be associated with this image
         */
        ramdisk?: string;
        /**
         * Default: None
         *
         * The name of an existing kernel image that will be associated with this image
         */
        kernel?: string;
        /**
         * Additional properties to be associated with this image
         */
        properties?: string;
        /**
         * Default: None
         *
         * Name that has to be given to the image
         */
        name?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        /**
         * Default: bare
         *
         * The format of the container
         */
        container_format?: string;
        /**
         * Default: None
         *
         * The minimum ram (in MB) required to boot this image
         */
        min_ram?: string;
        /**
         * Default: qcow2
         *
         * The format of the disk that is getting uploaded
         */
        disk_format?: string;
        /**
         * Default: None
         *
         * The path to the file which has to be uploaded
         */
        filename?: string;
        /**
         * Default: None
         *
         * The minimum disk space (in GB) required to boot this image
         */
        min_disk?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: None
         *
         * The owner of the image
         */
        owner?: string;
        /**
         * Default: yes
         *
         * Whether the image can be accessed publicly. Note that publicizing an image requires admin role by default.
         */
        is_public?: string;
        /**
         * Default: None
         *
         * The Id of the image
         */
        id?: string;
        [k: string]: any;
      };
      /**
       * Module to manage permissions of users/groups in oVirt/RHV
       */
      ovirt_permissions?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Create or delete VLAN interfaces on Solaris/illumos systems.
       */
      dladm_vlan?: {
        [k: string]: any;
      };
      /**
       * Manages Elasticsearch plugins.
       */
      elasticsearch_plugin?: {
        /**
         * Default: /usr/share/elasticsearch/bin/plugin
         *
         * Location of the plugin binary
         */
        plugin_bin?: string;
        /**
         * Default: None
         *
         * Proxy host to use during plugin installation
         */
        proxy_host?: string;
        /**
         * Default: None
         *
         * Set exact URL to download the plugin from (Only works for ES 1.x)
         */
        url?: string;
        /**
         * Default: None
         *
         * Proxy port to use during plugin installation
         */
        proxy_port?: string;
        /**
         * Default: present
         *
         * Desired state of a plugin.
         */
        state?: "present" | "absent";
        /**
         * Default: None
         *
         * Version of the plugin to be installed. If plugin exists with previous version, it will NOT be updated
         */
        version?: string;
        /**
         * Default: 1m
         *
         * Timeout setting: 30s, 1m, 1h...
         */
        timeout?: string;
        /**
         * Default: /usr/share/elasticsearch/plugins/
         *
         * Your configured plugin directory specified in Elasticsearch
         */
        plugin_dir?: string;
        /**
         * Name of the plugin to install. In ES 2.x, the name can be an url or file location
         */
        name: string;
        [k: string]: any;
      };
      /**
       * The M(proxysql_mysql_users) module adds or removes mysql users using the proxysql admin interface.
       */
      proxysql_mysql_users?: {
        /**
         * If there is no matching rule for the queries sent by this user, the traffic it generates is sent to the specified hostgroup. If omitted the proxysql database default for I(use_ssl) is 0.
         */
        default_hostgroup?: number | string;
        /**
         * Name of the user connecting to the mysqld or ProxySQL instance.
         */
        username: string;
        /**
         * Default: True
         *
         * If I(frontend) is set to C(True), this (username, password) pair is used for authenticating to the mysqld servers against any hostgroup.
         */
        frontend?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The schema to which the connection should change to by default.
         */
        default_schema?: string;
        /**
         * If this is set for the user with which the MySQL client is connecting to ProxySQL (thus a "frontend" user), transactions started within a hostgroup will remain within that hostgroup regardless of any other rules. If omitted the proxysql database default for I(transaction_persistent) is C(False).
         */
        transaction_persistent?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 6032
         *
         * The port used to connect to ProxySQL admin interface.
         */
        login_port?: number | string;
        /**
         * Default: None
         *
         * The username used to authenticate to ProxySQL admin interface.
         */
        login_user?: string;
        /**
         * Default: 127.0.0.1
         *
         * The host used to connect to ProxySQL admin interface.
         */
        login_host?: string;
        /**
         * Default: None
         *
         * The password used to authenticate to ProxySQL admin interface.
         */
        login_password?: string;
        /**
         * If I(use_ssl) is set to C(True), connections by this user will be made using SSL connections. If omitted the proxysql database default for I(use_ssl) is C(False).
         */
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * If I(backend) is set to C(True), this (username, password) pair is used for authenticating to the ProxySQL instance.
         */
        backend?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        login_unix_socket?: string;
        /**
         * Default: present
         *
         * When C(present) - adds the user, when C(absent) - removes the user.
         */
        state?: "present" | "absent";
        /**
         * If I(fast_forward) is set to C(True), I(fast_forward) will bypass the query processing layer (rewriting, caching) and pass through the query directly as is to the backend server. If omitted the proxysql database default for I(fast_forward) is C(False).
         */
        fast_forward?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * Dynamically load mysql host config to runtime memory.
         */
        load_to_runtime?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * Save mysql host config to sqlite db on disk to persist the configuration.
         */
        save_to_disk?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A user with I(active) set to C(False) will be tracked in the database, but will be never loaded in the in-memory data structures. If omitted the proxysql database default for I(active) is C(True).
         */
        active?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify a config file from which login_user and login_password are to be read.
         */
        config_file?: string;
        /**
         * Password of the user connecting to the mysqld or ProxySQL instance.
         */
        password?: string;
        /**
         * The maximum number of connections ProxySQL will open to the backend for this user. If omitted the proxysql database default for I(max_connections) is 10000.
         */
        max_connections?: number | string;
        [k: string]: any;
      };
      /**
       * OpenSwitch configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with ops configuration sections in a deterministic way.
       */
      ops_config?: {
        /**
         * The I(src) argument provides a path to the configuration file to load into the remote system.  The path can either be a full system path to the configuration file if the value starts with / or relative to the root of the implemented role or playbook. This argument is mutually exclusive with the I(lines) and I(parents) arguments.
         */
        src?: string;
        /**
         * The force argument instructs the module to not consider the current devices running-config.  When set to true, this will cause the module to push the contents of I(src) into the device without first checking if already configured.
         * Note this argument should be considered deprecated.  To achieve the equivalent, set the C(match=none) which is idempotent.  This argument will be removed in a future release.
         */
        force?: string;
        /**
         * The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.
         */
        after?: string;
        /**
         * The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.
         */
        lines?: string;
        /**
         * Default: line
         *
         * Instructs the module on the way to perform the configuration on the device.  If the replace argument is set to I(line) then the modified lines are pushed to the device in configuration mode.  If the replace argument is set to I(block) then the entire command block is pushed to the device in configuration mode if any line is not correct.
         */
        replace?: string;
        /**
         * The ordered set of parents that uniquely identify the section the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands.
         */
        parents?: string;
        /**
         * The C(save) argument instructs the module to save the running- config to the startup-config at the conclusion of the module running.  If check mode is specified, this argument is ignored.
         */
        save?: string;
        /**
         * The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task in a playbook.  The I(config) argument allows the implementer to pass in the configuration to use as the base config for comparison.
         */
        config?: string;
        /**
         * Default: line
         *
         * Instructs the module on the way to perform the matching of the set of commands against the current device config.  If match is set to I(line), commands are matched line by line.  If match is set to I(strict), command lines are matched with respect to position.  If match is set to I(exact), command lines must be an equal match.  Finally, if match is set to I(none), the module will not attempt to compare the source configuration with the running configuration on the remote device.
         */
        match?: string;
        /**
         * The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.
         */
        before?: string;
        [k: string]: any;
      };
      /**
       * This module provides configuration file management of VyOS devices.  It provides arguments for managing both the configuration file and state of the active configuration.   All configuration statements are based on `set` and `delete` commands in the device configuration.
       */
      vyos_config?: {
        /**
         * Default: configured by vyos_config
         *
         * Allows a commit description to be specified to be included when the configuration is committed.  If the configuration is not changed or committed, this argument is ignored.
         */
        comment?: string;
        /**
         * The C(src) argument specifies the path to the source config file to load.  The source config file can either be in bracket format or set format.  The source file can include Jinja2 template variables.
         */
        src?: string;
        ssh_keyfile?: string;
        /**
         * The C(save) argument controls whether or not changes made to the active configuration are saved to disk.  This is independent of committing the config.  When set to True, the active configuration is saved.
         */
        save?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The C(config) argument specifies the base configuration to use to compare against the desired configuration.  If this value is not specified, the module will automatically retrieve the current active configuration from the remote device.
         */
        config?: string;
        /**
         * The ordered set of configuration lines to be managed and compared with the existing configuration on the remote device.
         */
        lines?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        username?: string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        /**
         * The C(backup) argument will backup the current devices active configuration to the Ansible control host prior to making any changes.  The backup file will be located in the backup folder in the root of the playbook
         */
        backup?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        /**
         * Default: line
         *
         * The C(match) argument controls the method used to match against the current active configuration.  By default, the desired config is matched against the active config and the deltas are loaded.  If the C(match) argument is set to C(none) the active configuration is ignored and the configuration is always loaded.
         */
        match?: "line" | "none";
        [k: string]: any;
      };
      /**
       * Manage OpenStack Projects. Projects can be created, updated or deleted using this module. A project will be updated if I(name) matches an existing project and I(state) is present. The value for I(name) cannot be updated without deleting and re-creating the project.
       */
      os_project?: {
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: True
         *
         * Is the project enabled
         */
        enabled?: string;
        /**
         * Default: None
         *
         * Description for the project
         */
        description?: string;
        /**
         * Name for the project
         */
        name?: string;
        /**
         * Default: None
         *
         * Domain id to create the project in if the cloud supports domains. The domain_id parameter requires shade >= 1.8.0
         */
        domain_id?: string;
        [k: string]: any;
      };
      /**
       * Manage the SSHD settings of a BIG-IP
       */
      bigip_device_sshd?: {
        /**
         * Specifies the minimum SSHD message level to include in the system log.
         */
        log_level?: string;
        /**
         * Specifies the text to include on the pre-login banner that displays when a user attempts to login to the system using SSH.
         */
        banner_text?: string;
        /**
         * Specifies, if you have enabled SSH access, the IP address or address range for other systems that can use SSH to communicate with this system.
         */
        allow?: string;
        /**
         * Specifies the number of seconds before inactivity causes an SSH session to log out.
         */
        inactivity_timeout?: string;
        /**
         * Specifies, when checked C(enabled), that the system accepts SSH communications.
         */
        login?: string;
        /**
         * Whether to enable the banner or not.
         */
        banner?: string;
        /**
         * Port that you want the SSH daemon to run on.
         */
        port?: string;
        [k: string]: any;
      };
      /**
       * Manages ZFS file systems, volumes, clones and snapshots.
       */
      zfs?: {
        createparent?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Whether to create (C(present)), or remove (C(absent)) a file system, snapshot or volume. All parents/children will be created/destroyed as needed to reach the desired state.
         */
        state: "present" | "absent";
        /**
         * File system, snapshot or volume name e.g. C(rpool/myfs)
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Interacts with HTTP and HTTPS web services and supports Digest, Basic and WSSE HTTP authentication mechanisms.
       * For Windows targets, use the M(win_uri) module instead.
       */
      uri?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Collects facts from CloudEngine devices running the CloudEngine operating system.  Fact collection is supported over Cli transport.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.
       */
      ce_facts?: {
        username?: string;
        host?: string;
        /**
         * Default: !config
         *
         * When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, hardware, config, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(M(!)) to specify that a specific subset should not be collected.
         */
        gather_subset?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Manages snapshots for GCE instances. This module manages snapshots for the storage volumes of a GCE compute instance. If there are multiple volumes, each snapshot will be prepended with the disk name
       */
      gce_snapshot?: {
        /**
         * GCP service account email for the project where the instance resides
         */
        service_account_email?: string;
        /**
         * Default: all
         *
         * A list of disks to create snapshots for. If none is provided, all of the volumes will be snapshotted
         */
        disks?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The GCE instance to snapshot
         */
        instance_name: string;
        /**
         * Default: present
         *
         * Whether a snapshot should be C(present) or C(absent)
         */
        state?: "present" | "absent";
        /**
         * The name of the snapshot to manage
         */
        snapshot_name: string;
        /**
         * The path to the credentials file associated with the service account
         */
        credentials_file?: string;
        /**
         * The GCP project ID to use
         */
        project_id?: string;
        [k: string]: any;
      };
      /**
       * Manages configuration of an OSPF instance on HUAWEI CloudEngine switches.
       */
      ce_ospf?: {
        username?: string;
        /**
         * IPv4 address for configure next-hop address's weight. Valid values are a string, formatted as an IP address.
         */
        nexthop_addr?: string;
        /**
         * Specifies a process ID. The value is an integer ranging from 1 to 4294967295.
         */
        process_id: string;
        /**
         * Specifies the address of the network segment where the interface resides. The value is in dotted decimal notation.
         */
        addr?: string;
        /**
         * Specifies the area ID. The area with the area-id being 0 is a backbone area. Valid values are a string, formatted as an IP address (i.e. "0.0.0.0") or as an integer between 1 and 4294967295.
         */
        area?: string;
        /**
         * The maximum number of paths for forward packets over multiple paths. Valid value is an integer in the range from 1 to 64.
         */
        max_load_balance?: string;
        /**
         * Indicates the weight of the next hop. The smaller the value is, the higher the preference of the route is. It is an integer that ranges from 1 to 254.
         */
        nexthop_weight?: string;
        /**
         * IP network wildcard bits in decimal format between 0 and 32.
         */
        mask?: string;
        /**
         * Authentication key id when C(auth_mode) is 'hmac-sha256', 'md5' or 'hmac-md5. Valid value is an integer is in the range from 1 to 255.
         */
        auth_key_id?: string;
        /**
         * Specifies the authentication type.
         */
        auth_mode?: "none" | "hmac-sha256" | "md5" | "hmac-md5" | "simple";
        /**
         * Specifies a password for simple authentication. The value is a string of 1 to 8 characters.
         */
        auth_text_simple?: string;
        host?: string;
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Specifies a password for MD5, HMAC-MD5, or HMAC-SHA256 authentication. The value is a string of 1 to 255 case-sensitive characters, spaces not supported.
         */
        auth_text_md5?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Add or remove a static route.
       */
      win_route?: {
        /**
         * Default: 1
         *
         * Metric used by the static route.
         */
        metric?: string;
        /**
         * Destination IP address in CIDR format (ip address/prefix length)
         */
        destination?: string;
        /**
         * The gateway used by the static route.
         * If C(gateway) is not provided it will be set to C(0.0.0.0).
         */
        gateway?: string;
        /**
         * Default: present
         *
         * If present, it adds a network static route. If absent, it removes a network static route.
         */
        state?: string;
        [k: string]: any;
      };
      /**
       * Gathers facts from nginx from an URL having C(stub_status) enabled.
       */
      nginx_status_facts?: {
        /**
         * URL of the nginx status.
         */
        url: string;
        /**
         * Default: 10
         *
         * HTTP connection timeout in seconds.
         */
        timeout?: number | string;
        [k: string]: any;
      };
      /**
       * This is a wrapper module around keytool. Which can be used to import/remove certificates from a given java keystore.
       */
      java_cert?: {
        /**
         * Create keystore if it doesn't exist
         */
        keystore_create?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Imported certificate alias.
         */
        cert_alias?: string;
        /**
         * Default: keytool
         *
         * Path to keytool binary if not used we search in PATH for it.
         */
        executable?: string;
        /**
         * Password for importing from PKCS12 keystore.
         */
        pkcs12_password?: string;
        /**
         * Default: 443
         *
         * Port to connect to URL. This will be used to create server URL:PORT
         */
        cert_port?: number | string;
        /**
         * Default: 1
         *
         * Alias in the PKCS12 keystore.
         */
        pkcs12_alias?: string;
        /**
         * Default: present
         *
         * Defines action which can be either certificate import or removal.
         */
        state?: "present" | "absent";
        /**
         * Keystore password.
         */
        keystore_pass: string;
        /**
         * Local path to load certificate from. One of cert_url or cert_path is required to load certificate.
         */
        cert_path?: string;
        /**
         * Basic URL to fetch SSL certificate from. One of cert_url or cert_path is required to load certificate.
         */
        cert_url?: string;
        /**
         * Local path to load PKCS12 keystore from.
         */
        pkcs12_path?: string;
        /**
         * Path to keystore.
         */
        keystore_path?: string;
        [k: string]: any;
      };
      /**
       * This module will insert/update/remove a block of multi-line text surrounded by customizable marker lines.
       */
      blockinfile?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Pauses playbook execution for a set amount of time, or until a prompt is acknowledged. All parameters are optional. The default behavior is to pause with a prompt.
       * To pause/wait/sleep per host, use the M(wait_for) module.
       * You can use C(ctrl+c) if you wish to advance a pause earlier than it is set to expire or if you need to abort a playbook run entirely. To continue early press C(ctrl+c) and then C(c). To abort a playbook press C(ctrl+c) and then C(a).
       * The pause module integrates into async/parallelized playbooks without any special considerations (see Rolling Updates). When using pauses with the C(serial) playbook parameter (as in rolling updates) you are only prompted once for the current group of hosts.
       * This module is also supported for Windows targets.
       */
      pause?: {
        active_connection_states?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        host?: string;
        connect_timeout?: number | string;
        delay?: number | string;
        search_regex?: string;
        state?: "absent" | "drained" | "present" | "started" | "stopped";
        sleep?: number | string;
        timeout?: number | string;
        exclude_hosts?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        msg?: string;
        path?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Manages network device configurations over SSH or NXAPI.  This module allows implementers to work with the device running-config.  It provides a way to push a set of commands onto a network device by evaluating the current running-config and only pushing configuration commands that are not already configured.  The config source can be a set of commands or a template.
       */
      nxos_template?: {
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        username?: string;
        ssh_keyfile?: string;
        /**
         * The force argument instructs the module to not consider the current devices running-config.  When set to true, this will cause the module to push the contents of I(src) into the device without first checking if already configured.
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The path to the config source.  The source can be either a file with config or a template that will be merged during runtime.  By default the task will search for the source file in role or playbook root folder in templates directory.
         */
        src?: string;
        /**
         * The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task in a playbook.  The I(config) argument allows the implementer to pass in the configuration to use as the base config for comparison.
         */
        config?: string;
        auth_pass?: string;
        /**
         * The module, by default, will collect the current device running-config to use as a base for comparisons to the commands in I(src).  Setting this value to true will cause the module to issue the command C(show running-config all) to include all device settings.
         */
        include_defaults?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        host: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        /**
         * When this argument is configured true, the module will backup the running-config from the node prior to making any changes. The backup file will be written to backup_{{ hostname }} in the root of the playbook directory.
         */
        backup?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: string;
        [k: string]: any;
      };
      /**
       * Retrieve the facts about one or more of the Fibre Channel Networks from OneView.
       */
      oneview_fc_network_facts?: {
        username?: string;
        image_streamer_hostname?: string;
        /**
         * Fibre Channel Network name.
         */
        name?: string;
        hostname?: string;
        params?: {
          [k: string]: any;
        };
        password?: string;
        config?: string;
        api_version?: number | string;
        [k: string]: any;
      };
      /**
       * Add, modify and delete group within IPA server
       */
      ipa_group?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Apply an authcode to a device.
       * The authcode should have been previously registered on the Palo Alto Networks support portal.
       * The device should have Internet access.
       */
      panos_lic?: {
        /**
         * Default: admin
         *
         * username for authentication
         */
        username?: string;
        /**
         * IP address (or hostname) of PAN-OS device
         */
        ip_address: string;
        /**
         * password for authentication
         */
        password: string;
        /**
         * Default: false
         *
         * whether to apply authcode even if device is already licensed
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * authcode to be applied
         */
        auth_code?: string;
        [k: string]: any;
      };
      /**
       * Create, update and delete records.
       */
      exo_dns_record?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module offers the ability to set the VNI and mapped to the BD, and configure an ingress replication list on HUAWEI CloudEngine devices.
       */
      ce_vxlan_tunnel?: {
        username?: string;
        /**
         * Specifies a VXLAN network identifier (VNI) ID. The value is an integer ranging from 1 to 16000000.
         */
        vni_id?: string;
        /**
         * Specifies the working mode of an NVE interface.
         */
        nve_mode?: "mode-l2" | "mode-l3";
        /**
         * Specifies an IP address for a source VTEP. The value is in dotted decimal notation.
         */
        source_ip?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Specifies a bridge domain ID. The value is an integer ranging from 1 to 16777215.
         */
        bridge_domain_id?: string;
        /**
         * Specifies the number of an NVE interface. The value ranges from 1 to 2.
         */
        nve_name?: string;
        /**
         * Specifies the IP address of a remote VXLAN tunnel endpoints (VTEP). The value is in dotted decimal notation.
         */
        peer_list_ip?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        host?: string;
        /**
         * The operation type of routing protocol.
         */
        protocol_type?: "bgp" | "null";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Manages configuration of an Protocol Independent Multicast (PIM) static rendezvous point (RP) address instance.
       */
      nxos_pim_rp_address?: {
        username?: string;
        /**
         * Group range is treated in PIM bidirectional mode.
         */
        bidir?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        state?: "present" | "absent";
        /**
         * Route map policy for static RP. Valid values are route-map policy names.
         */
        route_map?: string;
        /**
         * Configures a Protocol Independent Multicast (PIM) static rendezvous point (RP) address. Valid values are unicast addresses.
         */
        rp_address: string;
        /**
         * Group range for static RP. Valid values are multicast addresses.
         */
        group_list?: string;
        /**
         * Prefix list policy for static RP. Valid values are prefix-list policy names.
         */
        prefix_list?: string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * This module allows you to work with the running configuration of a switch. It provides a way to execute a set of CNOS commands on a switch by evaluating the current running configuration and executing the commands only if the specific settings have not been already configured. The configuration source can be a set of commands or a template written in the Jinja2 templating language. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run. For more information about this module from Lenovo and customizing it usage for your use cases, please visit U(http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_template.html)
       */
      cnos_template?: {
        /**
         * This specifies the path to the CNOS command file which needs to be applied. This usually comes from the commands folder. Generally this file is the output of the variables applied on a template file. So this command is preceded by a template module. Note The command file must contain the Ansible keyword {{ inventory_hostname }} in its filename to ensure that the command file is unique for each switch and condition. If this is omitted, the command file will be overwritten during iteration. For example, commandfile=./commands/clos_leaf_bgp_{{ inventory_hostname }}_commands.txt
         */
        commandfile?: string;
        [k: string]: any;
      };
      /**
       * Add or remove Pulp repos from a remote host.
       */
      pulp_repo?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Ordnance router configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with these configuration sections in a deterministic way.
       */
      ordnance_config?: {
        [k: string]: any;
      };
      /**
       * Sends a text message to a phone number through the Twilio messaging API.
       */
      twilio?: {
        /**
         * user's Twilio authentication token
         */
        auth_token: string;
        /**
         * one or more phone numbers to send the text message to, format +15551112222
         */
        to_number: string;
        /**
         * user's Twilio account token found on the account page
         */
        account_sid: string;
        /**
         * the Twilio number to send the text message from, format +15551112222
         */
        from_number: string;
        /**
         * the body of the text message
         */
        msg: string;
        /**
         * a URL with a picture, video or sound clip to send with an MMS (multimedia message) instead of a plain SMS
         */
        media_url?: string;
        [k: string]: any;
      };
      /**
       * Manages STP configurations on HUAWEI CloudEngine switches.
       */
      ce_stp?: {
        /**
         * Enable loop protection on the current port.
         */
        loop_protection?: "enable" | "disable";
        /**
         * Set the path cost of the current port. The default instance is 0.
         */
        cost?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Configure the TC BPDU protection function for an MSTP process.
         */
        tc_protection?: "enable" | "disable";
        port?: number | string;
        transport?: "cli";
        /**
         * Set an operation mode for the current MSTP process. The mode can be STP, RSTP, or MSTP.
         */
        stp_mode?: "stp" | "rstp" | "mstp";
        /**
         * Enable root protection on the current port.
         */
        root_protection?: "enable" | "disable";
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        provider?: {
          [k: string]: any;
        };
        username?: string;
        /**
         * STP convergence mode. Fast means set STP aging mode to Fast. Normal means set STP aging mode to Normal.
         */
        stp_converge?: "fast" | "normal";
        /**
         * Set the current port as an edge port.
         */
        edged_port?: "enable" | "disable";
        /**
         * Configure BPDU protection on an edge port. This function prevents network flapping caused by attack packets.
         */
        bpdu_protection?: "enable" | "disable";
        host?: string;
        /**
         * Enable or disable STP on a switch.
         */
        stp_enable?: "enable" | "disable";
        /**
         * Interface name. If the value is C(all), will apply configuration to all interfaces. if the value is a special name, only support input the full name.
         */
        interface?: string;
        password?: string;
        /**
         * Set the time the MSTP device takes to handle the maximum number of TC BPDUs and immediately refresh forwarding entries. The value is an integer ranging from 1 to 600, in seconds.
         */
        tc_protection_interval?: string;
        /**
         * Set the maximum number of TC BPDUs that the MSTP can handle. The value is an integer ranging from 1 to 255. The default value is 1 on the switch.
         */
        tc_protection_threshold?: string;
        /**
         * Specify a port as a BPDU filter port.
         */
        bpdu_filter?: "enable" | "disable";
        timeout?: number | string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Perform server actions on an existing compute instance from OpenStack. This module does not return any data other than changed true/false. When I(action) is 'rebuild', then I(image) parameter is required.
       */
      os_server_action?: {
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        /**
         * Image the server should be rebuilt with
         */
        image?: string;
        /**
         * Name or ID of the instance
         */
        server?: string;
        /**
         * Default: 180
         *
         * The amount of time the module should wait for the instance to perform the requested action.
         */
        timeout?: string;
        /**
         * Default: present
         *
         * Perform the given action. The lock and unlock actions always return changed as the servers API does not provide lock status.
         */
        action?: string;
        /**
         * Default: yes
         *
         * If the module should wait for the instance action to be performed.
         */
        wait?: string;
        [k: string]: any;
      };
      /**
       * This module will let you create PagerDuty maintenance windows
       */
      pagerduty?: {
        [k: string]: any;
      };
      /**
       * Manage binary packages for FreeBSD using 'pkgng' which is available in versions after 9.0.
       */
      pkgng?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Create and renew SSL certificates with Let's Encrypt. Let’s Encrypt is a free, automated, and open certificate authority (CA), run for the public’s benefit. For details see U(https://letsencrypt.org). The current implementation supports the http-01, tls-sni-02 and dns-01 challenges.
       * To use this module, it has to be executed at least twice. Either as two different tasks in the same run or during multiple runs.
       * Between these two tasks you have to fulfill the required steps for the choosen challenge by whatever means necessary. For http-01 that means creating the necessary challenge file on the destination webserver. For dns-01 the necessary dns record has to be created. tls-sni-02 requires you to create a SSL certificate with the appropriate subjectAlternativeNames. It is I(not) the responsibility of this module to perform these steps.
       * For details on how to fulfill these challenges, you might have to read through U(https://tools.ietf.org/html/draft-ietf-acme-acme-02#section-7)
       * Although the defaults are choosen so that the module can be used with the Let's Encrypt CA, the module can be used with any service using the ACME protocol.
       */
      letsencrypt?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Send a SMS message via nexmo
       */
      nexmo?: {
        [k: string]: any;
      };
      /**
       * Create, update, and delete MCP 1.0 & 2.0 networks
       */
      dimensiondata_network?: {
        /**
         * Default: ESSENTIALS
         *
         * The service plan, either "ESSENTIALS" or "ADVANCED".
         * MCP 2.0 Only.
         */
        service_plan?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * The name of the network domain to create.
         */
        name?: string;
        /**
         * Additional description of the network domain.
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * Configure a .deb package using debconf-set-selections. Or just query existing selections.
       */
      debconf?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Create a security profile group
       */
      panos_pg?: {
        /**
         * Default: None
         *
         * name of the wildfire analysis profile
         */
        wildfire?: string;
        /**
         * Default: admin
         *
         * username for authentication
         */
        username?: string;
        /**
         * Default: None
         *
         * name of the data filtering profile
         */
        data_filtering?: string;
        /**
         * Default: None
         *
         * name of the file blocking profile
         */
        file_blocking?: string;
        /**
         * name of the security profile group
         */
        pg_name: string;
        /**
         * Default: None
         *
         * name of the vulnerability profile
         */
        vulnerability?: string;
        /**
         * Default: None
         *
         * name of the spyware profile
         */
        spyware?: string;
        /**
         * Default: None
         *
         * name of the url filtering profile
         */
        url_filtering?: string;
        /**
         * Default: None
         *
         * name of the anti-virus profile
         */
        virus?: string;
        /**
         * Default: True
         *
         * commit if changed
         */
        commit?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * password for authentication
         */
        password: string;
        /**
         * IP address (or hostname) of PAN-OS device
         */
        ip_address: string;
        [k: string]: any;
      };
      /**
       * Retrieve facts about one or more oVirt/RHV networks.
       */
      ovirt_networks_facts?: {
        /**
         * Search term which is accepted by oVirt/RHV search backend.
         * For example to search network starting with string vlan1 use: name=vlan1*
         */
        pattern?: string;
        [k: string]: any;
      };
      /**
       * Configures a bond interface on Cumulus Linux To configure a bridge port use the cl_bridge module. To configure any other type of interface use the cl_interface module. Follow the guidelines for bonding found in the Cumulus User Guide at U(http://docs.cumulusnetworks.com).
       */
      cl_bond?: {
        /**
         * Default: 1
         *
         * The lacp rate.
         */
        lacp_rate?: number | string;
        /**
         * Specify a unique clag_id for every dual connected bond on each peer switch. The value must be between 1 and 65535 and must be the same on both peer switches in order for the bond to be considered dual-connected.
         */
        clag_id?: string;
        /**
         * Default: layer3+4
         *
         * Transmit load balancing algorithm. As of Cumulus Linux 2.5 only I(layer3+4) policy is supported.
         */
        xmit_hash_policy?: string;
        /**
         * Enables admin edge port.
         */
        mstpctl_portadminedge?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: 1
         *
         * Minimum number of links.
         */
        min_links?: number | string;
        /**
         * Description of the port.
         */
        alias_name?: string;
        /**
         * Enables BPDU Guard on a port in vlan-aware mode.
         */
        mstpctl_bpduguard?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: ['/etc/network/interfaces.d']
         *
         * Interface directory location.
         */
        location?: string;
        /**
         * List of IPv6 addresses to configure on the interface. In the form I(X:X:X::X/YYY).
         */
        ipv6?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * In vlan-aware mode, lists VLANs defined under the interface.
         */
        vids?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Enables bridge assurance in vlan-aware mode.
         */
        mstpctl_portnetwork?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * List of IPv4 addresses to configure on the interface. In the form I(X.X.X.X/YY).
         */
        ipv4?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Define IPv4 virtual IP used by the Cumulus Linux VRR feature.
         */
        virtual_ip?: string;
        /**
         * Default: 100
         *
         * The mii link monitoring interval.
         */
        miimon?: number | string;
        /**
         * Define Ethernet mac associated with Cumulus Linux VRR feature.
         */
        virtual_mac?: string;
        /**
         * Activate all interfaces for bypass. It is recommended to configure all_active instead of using bypass_priority.
         */
        lacp_bypass_all_active?: number | string;
        /**
         * Period for enabling LACP bypass. Max value is 900.
         */
        lacp_bypass_period?: number | string;
        /**
         * Enable LACP bypass.
         */
        lacp_bypass_allow?: number | string;
        /**
         * List of ports and priorities. Example I("swp1=10, swp2=20").
         */
        lacp_bypass_priority?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Configures the port to use DHCP. To enable this feature use the option I(dhcp).
         */
        addr_method?: "" | "dhcp";
        /**
         * Name of the interface.
         */
        name: string;
        /**
         * Set MTU. Configure Jumbo Frame by setting MTU to I(9000).
         */
        mtu?: string;
        /**
         * In vlan-aware mode, defines vlan that is the untagged vlan.
         */
        pvid?: string;
        /**
         * Default: 802.3ad
         *
         * The bond mode, as of Cumulus Linux 2.5 only LACP bond mode is supported.
         */
        mode?: string;
        /**
         * Bond members.
         */
        slaves:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        [k: string]: any;
      };
      /**
       * Create, update, or destroy Ansible Tower job templates. See U(https://www.ansible.com/tower) for an overview.
       */
      tower_job_template?: {
        /**
         * The network_credential to use for the job_template.
         */
        network_credential?: string;
        ask_limit?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Propmt user for inventory on launch.
         */
        ask_inventory?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The job_type to use for the job_template.
         */
        job_type: "run" | "check" | "scan";
        /**
         * Prompt user for job type on launch.
         */
        ask_job_type?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Allow provisioning callbacks using this host config key.
         */
        host_config_key?: string;
        /**
         * The skip_tags to use for the job_template.
         */
        skip_tags?: string;
        /**
         * Playbook to use for the job_template.
         */
        playbook: string;
        /**
         * Username for your Tower instance.
         */
        tower_username?: string;
        /**
         * The job_tags to use for the job_template.
         */
        job_tags?: string;
        /**
         * Default: present
         *
         * Desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Inventory to use for the job_template.
         */
        inventory?: string;
        /**
         * Path to the extra_vars yaml file.
         */
        extra_vars_path?: string;
        /**
         * The number of parallel or simultaneous processes to use while executing the playbook.
         */
        forks?: number | string;
        /**
         * Cloud_credential to use for the job_template.
         */
        cloud_credential?: string;
        /**
         * Should become_enabled.
         */
        become_enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Description to use for the job_template.
         */
        description?: string;
        /**
         * URL to your Tower instance.
         */
        tower_host?: string;
        /**
         * Password for your Tower instance.
         */
        tower_password?: string;
        /**
         * Path to the Tower config file. See notes.
         */
        tower_config_file?: string;
        /**
         * Machine_credential to use for the job_template.
         */
        machine_credential?: string;
        /**
         * Prompt user for credential on launch.
         */
        ask_credential?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Name to use for the job_template.
         */
        name: string;
        /**
         * Control the output level Ansible produces as the playbook runs.
         */
        verbosity?: "verbose" | "debug";
        /**
         * Project to use for the job_template.
         */
        project: string;
        /**
         * Prompt user for extra_vars on launch.
         */
        ask_extra_vars?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A host pattern to further constrain the list of hosts managed or affected by the playbook
         */
        limit?: string;
        /**
         * Prompt user for job tags on launch.
         */
        ask_tags?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: True
         *
         * Dis/allow insecure connections to Tower. If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        tower_verify_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Create, update, or destroy Ansible Tower labels. See U(https://www.ansible.com/tower) for an overview.
       */
      tower_label?: {
        /**
         * Name to use for the label.
         */
        name: string;
        /**
         * URL to your Tower instance.
         */
        tower_host?: string;
        /**
         * Username for your Tower instance.
         */
        tower_username?: string;
        /**
         * Default: present
         *
         * Desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Password for your Tower instance.
         */
        tower_password?: string;
        /**
         * Path to the Tower config file. See notes.
         */
        tower_config_file?: string;
        /**
         * Organization the label should be applied to.
         */
        organization: string;
        /**
         * Default: True
         *
         * Dis/allow insecure connections to Tower. If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        tower_verify_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * You can wait for a set amount of time C(timeout), this is the default if nothing is specified.
       * Waiting for a port to become available is useful for when services are not immediately available after their init scripts return which is true of certain Java application servers.
       * You can wait for a file to exist or not exist on the filesystem.
       * This module can also be used to wait for a regex match string to be present in a file.
       * You can wait for active connections to be closed before continuing on a local port.
       */
      win_wait_for?: {
        /**
         * Default: started
         *
         * When checking a port, C(started) will ensure the port is open, C(stopped) will check that is it closed and C(drained) will check for active connections.
         * When checking for a file or a search string C(present) or C(started) will ensure that the file or string is present, C(absent) will check that the file or search string is absent or removed.
         */
        state?: string;
        /**
         * Default: 5
         *
         * The maximum number of seconds to wait for a connection to happen before closing and retrying.
         */
        connect_timeout?: string;
        /**
         * The number of seconds to wait before starting to poll.
         */
        delay?: string;
        /**
         * Default: 127.0.0.1
         *
         * A resolvable hostname or IP address to wait for.
         * If C(state=drained) then it will only check for connections on the IP specified, you can use '0.0.0.0' to use all host IPs.
         */
        host?: string;
        /**
         * Default: 1
         *
         * Number of seconds to sleep between checks.
         */
        sleep?: string;
        /**
         * Default: 300
         *
         * The maximum number of seconds to wait for.
         */
        timeout?: string;
        /**
         * The list of hosts or IPs to ignore when looking for active TCP connections when C(state=drained).
         */
        exclude_hosts?: string;
        /**
         * Can be used to match a string in a file.
         * If C(state) is present or started then it will wait until the regex matches.
         * If C(state) is absent then it will wait until the regex does not match.
         * Defaults to a multiline regex.
         */
        search_regex?: string;
        /**
         * The path to a file on the filesystem to check.
         * If C(state) is present or started then it will wait until the file exists.
         * If C(state) is absent then it will wait until the file does not exist.
         */
        path?: string;
        /**
         * The port number to poll on C(host).
         */
        port?: string;
        [k: string]: any;
      };
      /**
       * Create or destroy users.
       */
      na_cdot_user?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manages Layer 2 switchport interfaces on HUAWEI CloudEngine switches.
       */
      ce_switchport?: {
        /**
         * If C(mode=trunk), used as the trunk native VLAN ID, in the range from 1 to 4094.
         */
        native_vlan?: string;
        /**
         * If C(mode=access), used as the access VLAN ID, in the range from 1 to 4094.
         */
        access_vlan?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent" | "unconfigured";
        /**
         * If C(mode=trunk), used as the VLAN range to ADD or REMOVE from the trunk, such as 2-10 or 2,5,10-15, etc.
         */
        trunk_vlans?: string;
        username?: string;
        host?: string;
        /**
         * The link type of an interface.
         */
        mode?: "access" | "trunk";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Full name of the interface, i.e. 40GE1/0/22.
         */
        interface: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Create host groups if they do not exist.
       * Delete existing host groups if they exist.
       */
      zabbix_group?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manages local Windows user accounts
       * For non-Windows targets, use the M(user) module instead.
       */
      win_user?: {
        /**
         * Default: always
         *
         * C(always) will update passwords if they differ.  C(on_create) will only set the password for newly created users.
         */
        update_password?: string;
        /**
         * C(yes) will set the password to never expire.  C(no) will allow the password to expire.
         */
        password_never_expires?: string;
        /**
         * Name of the user to create, remove or modify.
         */
        name?: string;
        /**
         * Default: replace
         *
         * If C(replace), the user is added as a member of each group in I(groups) and removed from any other groups.  If C(add), the user is added to each group in I(groups) where not already a member.  If C(remove), the user is removed from each group in I(groups).
         */
        groups_action?: string;
        /**
         * C(yes) will require the user to change their password at next login. C(no) will clear the expired password flag.
         */
        password_expired?: string;
        /**
         * Default: present
         *
         * When C(present), creates or updates the user account.  When C(absent), removes the user account if it exists.  When C(query) (new in 1.9), retrieves the user account details without making any changes.
         */
        state?: string;
        /**
         * Adds or removes the user from this comma-separated lis of groups, depending on the value of I(groups_action). When I(groups_action) is C(replace) and I(groups) is set to the empty string ('groups='), the user is removed from all groups.
         */
        groups?: string;
        /**
         * C(yes) will disable the user account.  C(no) will clear the disabled flag.
         */
        account_disabled?: string;
        /**
         * Full name of the user
         */
        fullname?: string;
        /**
         * Optionally set the user's password to this (plain text) value.
         */
        password?: string;
        /**
         * C(no) will unlock the user account if locked.
         */
        account_locked?: string;
        /**
         * C(yes) will prevent the user from changing their password.  C(no) will allow the user to change their password.
         */
        user_cannot_change_password?: string;
        /**
         * Description of the user
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * Sends arbitrary commands to an OpenSwitch node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.
       */
      ops_command?: {
        /**
         * Default: 10
         *
         * Specifies the number of retries a command should by tried before it is considered failed. The command is run on the target device every retry and evaluated against the I(wait_for) conditions.
         */
        retries?: string;
        /**
         * List of commands to send to the remote ops device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retires as expired.
         */
        commands?: string;
        /**
         * List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.
         */
        wait_for?: string;
        /**
         * Default: all
         *
         * The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy.  Valid values are C(all) or C(any).  If the value is set to C(all) then all conditionals in the I(wait_for) must be satisfied.  If the value is set to C(any) then only one of the values must be satisfied.
         */
        match?: string;
        /**
         * Default: 1
         *
         * Configures the interval in seconds to wait between I(retries) of the command. If the command does not pass the specified conditions, the interval indicates how long to wait before trying the command again.
         */
        interval?: string;
        [k: string]: any;
      };
      /**
       * Add, modify or delete an IPA HBAC rule using IPA API.
       */
      ipa_hbacrule?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manages Homebrew packages
       */
      homebrew?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add or remove kernel modules.
       */
      modprobe?: {
        /**
         * Default: present
         *
         * Whether the module should be present or absent.
         */
        state?: "present" | "absent";
        /**
         * Modules parameters.
         */
        params?: string;
        /**
         * Name of kernel module to manage.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * Gather facts for Rackspace Cloud Servers.
       */
      rax_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create, update and remove hosts.
       */
      cs_host?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      ));
      /**
       * Gets various details related to AWS VPC Peers
       */
      ec2_vpc_peering_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage domains on Rackspace Cloud DNS
       */
      rax_dns?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages BGP neighbor Address-family configurations on HUAWEI CloudEngine switches.
       */
      ce_bgp_neighbor_af?: {
        /**
         * Specify the IPv4 filtering policy applied to the routes received from a specified peer. The value is a string of 1 to 169 characters.
         */
        import_pref_filt_name?: string;
        /**
         * Default: no_use
         *
         * If the value is true, advertised IRB routes are distinguished. If the value is false, advertised IRB routes are not distinguished.
         */
        advertise_irb?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * If the value is true, the function to replace a specified peer's AS number in the AS-Path attribute with the local AS number is enabled. If the value is false, the function to replace a specified peer's AS number in the AS-Path attribute with the local AS number is disabled.
         */
        substitute_as_enable?: "no_use" | "true" | "false";
        /**
         * Assign a preferred value for the routes learned from a specified peer. The value is an integer ranging from 0 to 65535.
         */
        preferred_value?: string;
        /**
         * Default: no_use
         *
         * If the value is true, the extended community attribute is advertised to peers. If the value is false, the extended community attribute is not advertised to peers.
         */
        advertise_ext_community?: "no_use" | "true" | "false";
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * null, Null. matchall, Advertise the default route if all matching conditions are met. matchany, Advertise the default route if any matching condition is met.
         */
        default_rt_match_mode?: "null" | "matchall" | "matchany";
        /**
         * Default: no_use
         *
         * Redirect ip.
         */
        redirect_ip?: "no_use" | "true" | "false";
        /**
         * Configure the maximum number of routes that can be accepted from a peer. The value is an integer ranging from 1 to 4294967295.
         */
        route_limit?: string;
        port?: number | string;
        transport?: "cli";
        /**
         * Apply an AS_Path-based filtering policy to the routes received from a specified peer. The value is an integer ranging from 1 to 256.
         */
        import_as_path_filter?: string;
        /**
         * Default: no_use
         *
         * If the value is true, sent BGP update messages carry only the public AS number but do not carry private AS numbers. If the value is false, sent BGP update messages can carry private AS numbers.
         */
        public_as_only_force?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * If the value is true, vpls enable. If the value is false, vpls disable.
         */
        vpls_enable?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * If the value is true, repetitive local AS numbers are allowed. If the value is false, repetitive local AS numbers are not allowed.
         */
        allow_as_loop_enable?: "no_use" | "true" | "false";
        /**
         * Specify the IPv4 filtering policy applied to the routes to be advertised to a specified peer. The value is a string of 1 to 169 characters.
         */
        export_pref_filt_name?: string;
        /**
         * A routing strategy based on the AS path list for routing received by a designated peer.
         */
        import_as_path_name_or_num?: string;
        /**
         * Address family type of a BGP instance.
         */
        af_type: "ipv4uni" | "ipv4multi" | "ipv4vpn" | "ipv6uni" | "ipv6vpn" | "evpn";
        state?: "present" | "absent";
        /**
         * ORF mode. null, Default value. receive, ORF for incoming packets. send, ORF for outgoing packets. both, ORF for incoming and outgoing packets.
         */
        orf_mode?: "null" | "receive" | "send" | "both";
        /**
         * null, The next hop is not changed. local, The next hop is changed to the local IP address. invariable, Prevent the device from changing the next hop of each imported IGP route when advertising it to its BGP peers.
         */
        nexthop_configure?: "null" | "local" | "invariable";
        /**
         * Default: no_use
         *
         * If the value is true, the extended community attribute in the peer route information is discarded. If the value is false, the extended community attribute in the peer route information is not discarded.
         */
        discard_ext_community?: "no_use" | "true" | "false";
        /**
         * The number of addPath advertise route. The value is an integer ranging from 2 to 64.
         */
        adv_add_path_num?: string;
        /**
         * Default: no_use
         *
         * If the value is true, the system stores all route update messages received from all peers (groups) after BGP connection setup. If the value is false, the system stores only BGP update messages that are received from peers and pass the configured import policy.
         */
        keep_all_routes?: "no_use" | "true" | "false";
        /**
         * ORF Type. The value is an integer ranging from 0 to 65535.
         */
        orftype?: string;
        /**
         * Specify the name of a used policy. The value is a string. The value is a string of 1 to 40 characters.
         */
        default_rt_adv_policy?: string;
        username?: string;
        /**
         * Application of a AS path list based filtering policy to the routing of a specified peer.
         */
        export_as_path_name_or_num?: string;
        /**
         * Default: no_use
         *
         * If the value is true, Non-standard capability codes are used during capability negotiation. If the value is false, RFC-defined standard ORF capability codes are used during capability negotiation.
         */
        is_nonstd_ipprefix_mod?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * If the value is true, the address prefix-based Outbound Route Filter (ORF) capability is enabled for peers. If the value is false, the address prefix-based Outbound Route Filter (ORF) capability is disabled for peers.
         */
        ipprefix_orf_enable?: "no_use" | "true" | "false";
        provider?: {
          [k: string]: any;
        };
        /**
         * Default: no_use
         *
         * If the value is true, Application results of route announcement. If the value is false, Routing application results are not notified.
         */
        origin_as_valid?: "no_use" | "true" | "false";
        /**
         * Specify the percentage of routes when a router starts to generate an alarm. The value is an integer ranging from 1 to 100.
         */
        route_limit_percent?: string;
        /**
         * IPv4 or IPv6 peer connection address.
         */
        remote_address: string;
        /**
         * null, Null. receive, Support receiving Add-Path routes. send, Support sending Add-Path routes. both, Support receiving and sending Add-Path routes.
         */
        add_path_mode?: "null" | "receive" | "send" | "both";
        /**
         * Default: no_use
         *
         * If the value is true, the local device functions as the route reflector and a peer functions as a client of the route reflector. If the value is false, the route reflector and client functions are not configured.
         */
        reflect_client?: "no_use" | "true" | "false";
        host?: string;
        /**
         * Default: no_use
         *
         * If the value is true, advertised ARP routes are distinguished. If the value is false, advertised ARP routes are not distinguished.
         */
        advertise_arp?: "no_use" | "true" | "false";
        /**
         * Specify the filtering policy applied to the routes learned from a peer. The value is a string of 1 to 40 characters.
         */
        import_rt_policy_name?: string;
        /**
         * Default: no_use
         *
         * Public as only skip peer as.
         */
        public_as_only_skip_peer_as?: "no_use" | "true" | "false";
        /**
         * Specify the filtering policy applied to the routes to be advertised to a peer. The value is a string of 1 to 40 characters.
         */
        export_rt_policy_name?: string;
        /**
         * Default: no_use
         *
         * If the value is true, sent BGP update messages carry only the public AS number but do not carry private AS numbers. If the value is false, sent BGP update messages can carry private AS numbers.
         */
        public_as_only?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * Redirect ip vaildation.
         */
        redirect_ip_vaildation?: "no_use" | "true" | "false";
        password?: string;
        /**
         * Apply an IPv4 ACL-based filtering policy to the routes received from a specified peer. The value is a string of 1 to 32 characters.
         */
        import_acl_name_or_num?: string;
        /**
         * Set the maximum number of repetitive local AS number. The value is an integer ranging from 1 to 10.
         */
        allow_as_loop_limit?: string;
        /**
         * Specify the value of the idle-timeout timer to automatically reestablish the connections after they are cut off when the number of routes exceeds the set threshold. The value is an integer ranging from 1 to 1200.
         */
        route_limit_idle_timeout?: string;
        /**
         * Apply an AS_Path-based filtering policy to the routes to be advertised to a specified peer. The value is an integer ranging from 1 to 256.
         */
        export_as_path_filter?: string;
        /**
         * Default: no_use
         *
         * If the value is true, enable vpls-ad. If the value is false, disable vpls-ad.
         */
        vpls_ad_disable?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * If the value is true, When the vpnv4 multicast neighbor receives and updates the message, the message has no label. If the value is false, When the vpnv4 multicast neighbor receives and updates the message, the message has label.
         */
        update_pkt_standard_compatible?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * Limited use public as number.
         */
        public_as_only_limited?: "no_use" | "true" | "false";
        /**
         * Noparameter, After the number of received routes exceeds the threshold and the timeout timer expires,no action. AlertOnly, An alarm is generated and no additional routes will be accepted if the maximum number of routes allowed have been received. IdleForever, The connection that is interrupted is not automatically re-established if the maximum number of routes allowed have been received. IdleTimeout, After the number of received routes exceeds the threshold and the timeout timer expires, the connection that is interrupted is automatically re-established.
         */
        route_limit_type?: "noparameter" | "alertOnly" | "idleForever" | "idleTimeout";
        /**
         * Apply an IPv4 ACL-based filtering policy to the routes to be advertised to a specified peer. The value is a string of 1 to 32 characters.
         */
        export_acl_name_or_num?: string;
        /**
         * Configure the Site-of-Origin (SoO) extended community attribute. The value is a string of 3 to 21 characters.
         */
        soostring?: string;
        /**
         * Default: no_use
         *
         * Private as replaced by public as number.
         */
        public_as_only_replace?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * If the value is true, the remote next-hop attribute is advertised to peers. If the value is false, the remote next-hop attribute is not advertised to any peers.
         */
        advertise_remote_nexthop?: "no_use" | "true" | "false";
        /**
         * Name of a BGP instance. The name is a case-sensitive string of characters. The BGP instance can be used only after the corresponding VPN instance is created.
         */
        vrf_name: string;
        /**
         * Default: no_use
         *
         * If the value is true, the community attribute is advertised to peers. If the value is false, the community attribute is not advertised to peers.
         */
        advertise_community?: "no_use" | "true" | "false";
        timeout?: number | string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: no_use
         *
         * If the value is true, the function to advertise default routes to peers is enabled. If the value is false, the function to advertise default routes to peers is disabled.
         */
        default_rt_adv_enable?: "no_use" | "true" | "false";
        /**
         * Specify the minimum interval at which Update packets are sent. The value is an integer, in seconds. The value is an integer ranging from 0 to 600.
         */
        rt_updt_interval?: string;
        [k: string]: any;
      };
      /**
       * Configure an RR in BGP-EVPN address family view on HUAWEI CloudEngine switches.
       */
      ce_evpn_bgp_rr?: {
        username?: string;
        /**
         * Specifies the number of the AS, in integer format. The value is an integer that ranges from 1 to 4294967295.
         */
        as_number: string;
        /**
         * Default: enable
         *
         * Enable or disable the BGP-EVPN address family.
         */
        bgp_evpn_enable?: "enable" | "disable";
        /**
         * Specify the peer type.
         */
        peer_type?: "group_name" | "ipv4_address";
        /**
         * Enable or disable the VPN-Target filtering.
         */
        policy_vpn_target?: "enable" | "disable";
        /**
         * Configure the local device as the route reflector and the peer or peer group as the client of the route reflector.
         */
        reflect_client?: "enable" | "disable";
        host?: string;
        /**
         * Specifies the name of a BGP instance. The value of instance-name can be an integer 1 or a string of 1 to 31.
         */
        bgp_instance?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Specifies the IPv4 address or the group name of a peer.
         */
        peer?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Module to manage users in oVirt/RHV.
       */
      ovirt_users?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * The M(proxysql_global_variables) module writes the proxysql configuration settings between layers. Currently this module will always report a changed state, so should typically be used with WHEN however this will change in a future version when the CHECKSUM table commands are available for all tables in proxysql.
       */
      proxysql_manage_config?: {
        /**
         * Default: 6032
         *
         * The port used to connect to ProxySQL admin interface.
         */
        login_port?: number | string;
        /**
         * FROM - denotes we're reading values FROM the supplied I(config_layer) and writing to the next layer. TO - denotes we're reading from the previous layer and writing TO the supplied I(config_layer)."
         */
        direction: "FROM" | "TO";
        /**
         * Specify a config file from which login_user and login_password are to be read.
         */
        config_file?: string;
        /**
         * The I(config_settings) specifies which configuration we're writing.
         *
         * Possible choices:
         * MYSQL USERS
         * MYSQL SERVERS
         * MYSQL QUERY RULES
         * MYSQL VARIABLES
         * ADMIN VARIABLES
         * SCHEDULER
         */
        config_settings: string;
        /**
         * Default: None
         *
         * The username used to authenticate to ProxySQL admin interface.
         */
        login_user?: string;
        /**
         * Default: 127.0.0.1
         *
         * The host used to connect to ProxySQL admin interface.
         */
        login_host?: string;
        login_unix_socket?: string;
        /**
         * Default: None
         *
         * The password used to authenticate to ProxySQL admin interface.
         */
        login_password?: string;
        /**
         * RUNTIME - represents the in-memory data structures of ProxySQL used by the threads that are handling the requests. MEMORY - (sometimes also referred as main) represents the in-memory SQLite3 database. DISK - represents the on-disk SQLite3 database. CONFIG - is the classical config file. You can only LOAD FROM the config file.
         */
        config_layer: "MEMORY" | "DISK" | "RUNTIME" | "CONFIG";
        /**
         * The supplied I(action) combines with the supplied I(direction) to provide the semantics of how we want to move the I(config_settings) between the I(config_layers).
         */
        action: "LOAD" | "SAVE";
        [k: string]: any;
      };
      /**
       * Manages BFD session view configuration on HUAWEI CloudEngine devices.
       */
      ce_bfd_view?: {
        /**
         * Specifies the local discriminator of a BFD session. The value is an integer that ranges from 1 to 16384.
         */
        local_discr?: number | string;
        username?: string;
        /**
         * Specifies the WTR time of a BFD session. The value is an integer that ranges from 1 to 60, in minutes. The default value is 0.
         */
        wtr_interval?: number | string;
        /**
         * Specifies the remote discriminator of a BFD session. The value is an integer that ranges from 1 to 4294967295.
         */
        remote_discr?: number | string;
        /**
         * Specifies the description of a BFD session. The value is a string of 1 to 51 case-sensitive characters with spaces.
         */
        description?: string;
        /**
         * Enables the BFD session to enter the AdminDown state. By default, a BFD session is enabled. The default value is bool type.
         */
        admin_down?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specifies a priority for BFD control packets. The value is an integer ranging from 0 to 7. The default value is 7, which is the highest priority.
         */
        tos_exp?: number | string;
        /**
         * Specifies the local detection multiplier of a BFD session. The value is an integer that ranges from 3 to 50.
         */
        detect_multi?: number | string;
        /**
         * Default: present
         *
         * Determines whether the config should be present or not on the device.
         */
        state?: "present" | "absent";
        /**
         * Specifies the minimum interval for receiving BFD packets. The value is an integer that ranges from 50 to 1000, in milliseconds.
         */
        min_tx_interval?: number | string;
        /**
         * Specifies the minimum interval for sending BFD packets. The value is an integer that ranges from 50 to 1000, in milliseconds.
         */
        min_rx_interval?: number | string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specifies the name of a BFD session. The value is a string of 1 to 15 case-sensitive characters without spaces.
         */
        session_name: string;
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * Create/delete a droplet in DigitalOcean and optionally wait for it to be 'running', or deploy an SSH key.
       */
      digital_ocean?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add or remove users to RabbitMQ and assign permissions
       */
      rabbitmq_user?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Retrieve facts about ports from OpenStack.
       */
      os_port_facts?: {
        /**
         * Unique name or ID of a port.
         */
        port?: string;
        /**
         * A dictionary of meta data to use for further filtering. Elements of this dictionary will be matched against the returned port dictionaries. Matching is currently limited to strings within the port dictionary, or strings within nested dictionaries.
         */
        filters?: string;
        [k: string]: any;
      };
      /**
       * Manage which I(sensu channels) a machine should subscribe to
       */
      sensu_subscription?: {
        /**
         * Default: /etc/sensu/conf.d/subscriptions.json
         *
         * Path to the subscriptions json file
         */
        path?: string;
        /**
         * Default: present
         *
         * Whether the machine should subscribe or unsubscribe from the channel
         */
        state?: "present" | "absent";
        /**
         * Create a backup file (if yes), including the timestamp information so you
         * can get the original file back if you somehow clobbered it incorrectly.
         */
        backup?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The name of the channel
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module creates, removes or resizes AIX logical volumes. Inspired by lvol module.
       */
      aix_lvol?: {
        /**
         * Comma separated list of physical volumes e.g. C(hdisk1,hdisk2).
         */
        pvs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: jfs2
         *
         * The type of the logical volume.
         */
        lv_type?: string;
        /**
         * The volume group this logical volume is part of.
         */
        vg: string;
        /**
         * Default: 1
         *
         * The number of copies of the logical volume. Maximum copies are 3.
         */
        copies?: string;
        /**
         * The name of the logical volume.
         */
        lv: string;
        /**
         * Default: present
         *
         * Control if the logical volume exists. If C(present) and the volume does not already exist then the C(size) option is required.
         */
        state?: "absent" | "present";
        /**
         * Default: maximum
         *
         * Sets the interphysical volume allocation policy. C(maximum) allocates logical partitions across the maximum number of physical volumes. C(minimum) allocates logical partitions across the minimum number of physical volumes.
         */
        policy?: "maximum" | "minimum";
        /**
         * Free-form options to be passed to the mklv command.
         */
        opts?: string;
        /**
         * The size of the logical volume with one of the [MGT] units.
         */
        size?: string;
        [k: string]: any;
      };
      /**
       * This module asserts that given expressions are true with an optional custom message.
       * This module is also supported for Windows targets.
       */
      assert?: {
        active_connection_states?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        host?: string;
        connect_timeout?: number | string;
        delay?: number | string;
        search_regex?: string;
        state?: "absent" | "drained" | "present" | "started" | "stopped";
        sleep?: number | string;
        timeout?: number | string;
        exclude_hosts?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The customized message used for a failing assertion
         */
        msg?: string;
        path?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Manages Ethernet Virtual Private Network (EVPN) VXLAN Network Identifier (VNI) configurations on HUAWEI CloudEngine switches.
       */
      ce_evpn_bd_vni?: {
        username?: string;
        password?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Add VPN targets to both the import and export VPN target lists of a BD EVPN instance. The format is the same as route_distinguisher.
         */
        vpn_target_both?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Add VPN targets to the import VPN target list of a BD EVPN instance. The format is the same as route_distinguisher.
         */
        vpn_target_import?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Specify an existed bridge domain (BD).The value is an integer ranging from 1 to 16777215.
         */
        bridge_domain_id: string;
        /**
         * Add VPN targets to the export VPN target list of a BD EVPN instance. The format is the same as route_distinguisher.
         */
        vpn_target_export?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        host?: string;
        /**
         * Configures a route distinguisher (RD) for a BD EVPN instance. The format of an RD can be as follows
         * 1) 2-byte AS number:4-byte user-defined number, for example, 1:3. An AS number is an integer ranging from 0 to 65535, and a user-defined number is an integer ranging from 0 to 4294967295. The AS and user-defined numbers cannot be both 0s. This means that an RD cannot be 0:0.
         * 2) Integral 4-byte AS number:2-byte user-defined number, for example, 65537:3. An AS number is an integer ranging from 65536 to 4294967295, and a user-defined number is an integer ranging from 0 to 65535.
         * 3) 4-byte AS number in dotted notation:2-byte user-defined number, for example, 0.0:3 or 0.1:0. A 4-byte AS number in dotted notation is in the format of x.y, where x and y are integers ranging from 0 to 65535.
         * 4) A user-defined number is an integer ranging from 0 to 65535. The AS and user-defined numbers cannot be both 0s. This means that an RD cannot be 0.0:0.
         * 5) 32-bit IP address:2-byte user-defined number. For example, 192.168.122.15:1. An IP address ranges from 0.0.0.0 to 255.255.255.255, and a user-defined number is an integer ranging from 0 to 65535.
         * 6) 'auto' specifies the RD that is automatically generated.
         */
        route_distinguisher?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: enable
         *
         * Create or delete an EVPN instance for a VXLAN in BD view.
         */
        evpn?: "enable" | "disable";
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        [k: string]: any;
      };
      /**
       * This module provides declarative management of Interfaces on Juniper JUNOS network devices.
       */
      junos_interface?: {
        username?: string;
        /**
         * Default: 10
         *
         * Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state argument which are I(state) with values C(up)/C(down), I(tx_rate) and I(rx_rate).
         */
        delay?: number | string;
        ssh_keyfile?: string;
        /**
         * Description of Interface.
         */
        description?: string;
        /**
         * Default: auto
         *
         * Interface link status.
         */
        duplex?: "full" | "half" | "auto";
        /**
         * Configure interface link status.
         */
        enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: present
         *
         * State of the Interface configuration, C(up) idicates present and operationally up and C(down) indicates present and operationally C(down)
         */
        state?: "present" | "absent" | "up" | "down";
        /**
         * Maximum size of transmit packet.
         */
        mtu?: number | string;
        /**
         * Receiver rate in bits per second (bps).
         */
        rx_rate?: string;
        /**
         * List of Interfaces definitions.
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        host?: string;
        /**
         * Transmit rate in bits per second (bps).
         */
        tx_rate?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * Default: True
         *
         * Specifies whether or not the configuration is active or deactivated
         */
        active?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        /**
         * Interface link speed.
         */
        speed?: string;
        port?: number | string;
        transport?: string;
        /**
         * Name of the Interface.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Module to manage storage domains in oVirt/RHV
       */
      ovirt_storage_domains?: {
        [k: string]: any;
      };
      /**
       * Create, update, or delete a Direct Connect connection between a network and a specific AWS Direct Connect location. Upon creation the connection may be added to a link aggregation group or established as a standalone connection. The connection may later be associated or disassociated with a link aggregation group.
       */
      aws_direct_connect_connection?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module can be used to add/remove a resource pool to/from vCenter
       */
      vmware_resource_pool?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Set and/or get members' attributes of an Apache httpd 2.4 mod_proxy balancer pool, using HTTP POST and GET requests. The httpd mod_proxy balancer-member status page has to be enabled and accessible, as this module relies on parsing this page. This module supports ansible check_mode, and requires BeautifulSoup python module.
       */
      apache2_mod_proxy?: {
        /**
         * Use https to access balancer management page.
         */
        tls?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * (ipv4|ipv6|fqdn):port of the Apache httpd 2.4 mod_proxy balancer pool.
         */
        balancer_vhost: string;
        /**
         * Default: /balancer-manager/
         *
         * Suffix of the balancer pool url required to access the balancer pool status page (e.g. balancer_vhost[:port]/balancer_url_suffix).
         */
        balancer_url_suffix?: string;
        /**
         * Default: None
         *
         * (ipv4|ipv6|fqdn) of the balancer member to get or to set attributes to. Port number is autodetected and should not be specified here. If undefined, apache2_mod_proxy module will return a members list of dictionaries of all the current balancer pool members' attributes.
         */
        member_host?: string;
        /**
         * Default: None
         *
         * Desired state of the member host. (absent|disabled),drained,hot_standby,ignore_errors can be simultaneously invoked by separating them with a comma (e.g. state=drained,ignore_errors).
         */
        state?: string;
        /**
         * Default: True
         *
         * Validate ssl/tls certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module is used to configure AnalyticsProfile object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_analyticsprofile?: {
        /**
         * Time window (in secs) within which only unique health change events should occur.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1209600.
         */
        hs_event_throttle_window?: number | string;
        /**
         * Tolerated client to avi round trip time(rtt) factor.
         * It is a multiple of apdex_rtt_tolerated_factor.
         * Allowed values are 1-1000.
         * Default value when not specified in API or module is interpreted by Avi Controller as 4.0.
         */
        apdex_rtt_tolerated_factor?: number;
        /**
         * Disable node (service engine) level analytics forvs metrics.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        disable_se_analytics?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A connection between avi and server is considered lossy when more than this percentage of packets are retransmitted due to timeout.
         * Allowed values are 1-100.
         * Default value when not specified in API or module is interpreted by Avi Controller as 20.
         */
        conn_server_lossy_timeo_rexmt_threshold?: number | string;
        /**
         * Tolerated client to avi round trip time(rtt) factor.
         * It is a multiple of apdex_rtt_tolerated_factor.
         * Allowed values are 1-1000.
         * Default value when not specified in API or module is interpreted by Avi Controller as 4.0.
         */
        apdex_server_rtt_tolerated_factor?: number;
        /**
         * Score assigned when rc4 algorithm is used for encryption.
         * Allowed values are 0-5.
         * Default value when not specified in API or module is interpreted by Avi Controller as 2.5.
         */
        hs_security_encalgo_score_rc4?: number;
        /**
         * Score assigned when supporting tls1.2 encryption protocol.
         * Allowed values are 0-5.
         * Default value when not specified in API or module is interpreted by Avi Controller as 5.0.
         */
        hs_security_tls12_score?: number;
        /**
         * Exclude server tcp reset from errors.
         * It is common for applications like ms exchange.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        exclude_server_tcp_reset_as_error?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Dos connection rate below which the dos security assessment will not kick in.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1000.
         */
        hs_min_dos_rate?: number | string;
        /**
         * Exclude queries to domains that did not have configured services/records from the list of errors.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        exclude_no_dns_record_as_error?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Exclude invalid dns queries from the list of errors.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        exclude_invalid_dns_query_as_error?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Maximum penalty that may be deducted from health score for high resource utilization.
         * Allowed values are 0-100.
         * Default value when not specified in API or module is interpreted by Avi Controller as 25.
         */
        hs_max_resources_penalty?: number | string;
        /**
         * A connection between client and avi is considered lossy when more than this percentage of packets are retransmitted.
         * Allowed values are 1-100.
         * Default value when not specified in API or module is interpreted by Avi Controller as 50.
         */
        conn_lossy_total_rexmt_threshold?: number | string;
        /**
         * Configure to stream logs to an external server.
         * Field introduced in 17.1.1.
         */
        client_log_streaming_config?: {
          [k: string]: any;
        };
        /**
         * Threshold number of connections in 5min, below which apdexr, apdexc, rum_apdex, and other network quality metrics are not computed.
         * Default value when not specified in API or module is interpreted by Avi Controller as 10.0.
         */
        hs_pscore_traffic_threshold_l4_client?: number;
        /**
         * Penalty for allowing weak signature algorithm(s).
         * Allowed values are 0-5.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1.0.
         */
        hs_security_weak_signature_algo_penalty?: number;
        /**
         * Exclude queries to gslb services that have no available members from the list of errors.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        exclude_no_valid_gs_member_as_error?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A server http response is considered satisfied if latency is less than the satisfactory latency threshold.
         * The response is considered tolerated when it is greater than satisfied but less than the tolerated latency factor * s_latency.
         * Greater than this number and the server response is considered frustrated.
         * Allowed values are 1-30000.
         * Default value when not specified in API or module is interpreted by Avi Controller as 400.
         */
        apdex_server_response_threshold?: number | string;
        /**
         * Score assigned when the minimum cipher strength is greater than equal to 128 bits.
         * Allowed values are 0-5.
         * Default value when not specified in API or module is interpreted by Avi Controller as 5.0.
         */
        hs_security_cipherscore_ge128b?: number;
        /**
         * Block of http response codes to be excluded from being classified as an error.
         * Enum options - AP_HTTP_RSP_4XX, AP_HTTP_RSP_5XX.
         */
        resp_code_block?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Adds free performance score credits to health score.
         * It can be used for compensating health score for known slow applications.
         * Allowed values are 0-100.
         * Default value when not specified in API or module is interpreted by Avi Controller as 0.
         */
        hs_performance_boost?: number | string;
        /**
         * Uuid of the analytics profile.
         */
        uuid?: string;
        /**
         * Exclude dns queries to domains outside the domains configured in the dns application profile from the list of errors.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        exclude_invalid_dns_domain_as_error?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * List of http status codes to be excluded from being classified as an error.
         * Error connections or responses impacts health score, are included as significant logs, and may be classified as part of a dos attack.
         */
        exclude_http_error_codes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Maximum penalty that may be deducted from health score for anomalies.
         * Allowed values are 0-100.
         * Default value when not specified in API or module is interpreted by Avi Controller as 10.
         */
        hs_max_anomaly_penalty?: number | string;
        /**
         * Score assigned when supporting tls1.1 encryption protocol.
         * Allowed values are 0-5.
         * Default value when not specified in API or module is interpreted by Avi Controller as 5.0.
         */
        hs_security_tls11_score?: number;
        /**
         * Virtual service threshold factor for tolerated page load time (plt) as multiple of apdex_rum_threshold.
         * Allowed values are 1-1000.
         * Default value when not specified in API or module is interpreted by Avi Controller as 4.0.
         */
        apdex_rum_tolerated_factor?: number;
        /**
         * Exclude queries to gslb services that are operationally down from the list of errors.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        exclude_gs_down_as_error?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Server tolerated response latency factor.
         * Servermust response within this factor times the satisfactory threshold (apdex_server_response_threshold) to be considered tolerated.
         * Allowed values are 1-1000.
         * Default value when not specified in API or module is interpreted by Avi Controller as 4.0.
         */
        apdex_server_response_tolerated_factor?: number;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Disable analytics on backend servers.
         * This may be desired in container environment when there are large number of  ephemeral servers.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        disable_server_analytics?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Exclude persistence server changed while load balancing' from the list of errors.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        exclude_persistence_change_as_error?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Exclude client closed connection before an http request could be completed from being classified as an error.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        exclude_client_close_before_request_as_error?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Penalty for allowing non-pfs handshakes.
         * Allowed values are 0-5.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1.0.
         */
        hs_security_nonpfs_penalty?: number;
        /**
         * Penalty for not enabling hsts.
         * Allowed values are 0-5.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1.0.
         */
        hs_security_hsts_penalty?: number;
        /**
         * Deprecated.
         * Allowed values are 0-5.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1.0.
         */
        hs_security_selfsignedcert_penalty?: number;
        /**
         * A connection between avi and server is considered lossy when more than this percentage of packets are retransmitted.
         * Allowed values are 1-100.
         * Default value when not specified in API or module is interpreted by Avi Controller as 50.
         */
        conn_server_lossy_total_rexmt_threshold?: number | string;
        /**
         * A connection between client and avi is considered lossy when more than this percentage of packets are retransmitted due to timeout.
         * Allowed values are 1-100.
         * Default value when not specified in API or module is interpreted by Avi Controller as 20.
         */
        conn_lossy_timeo_rexmt_threshold?: number | string;
        api_version?: string;
        username?: string;
        /**
         * Score assigned when the certificate expires in more than 30 days.
         * Allowed values are 0-5.
         * Default value when not specified in API or module is interpreted by Avi Controller as 5.0.
         */
        hs_security_certscore_gt30d?: number;
        /**
         * User defined description for the object.
         */
        description?: string;
        /**
         * Score assigned when supporting ssl3.0 encryption protocol.
         * Allowed values are 0-5.
         * Default value when not specified in API or module is interpreted by Avi Controller as 3.5.
         */
        hs_security_ssl30_score?: number;
        /**
         * A connection between avi and server is considered lossy when more than this percentage of out of order packets are received.
         * Allowed values are 1-100.
         * Default value when not specified in API or module is interpreted by Avi Controller as 50.
         */
        conn_server_lossy_ooo_threshold?: number | string;
        /**
         * Configure which logs are sent to the avi controller from ses and how they are processed.
         */
        client_log_config?: {
          [k: string]: any;
        };
        /**
         * Score assigned when the minimum cipher strength is 0 bits.
         * Allowed values are 0-5.
         * Default value when not specified in API or module is interpreted by Avi Controller as 0.0.
         */
        hs_security_cipherscore_eq000b?: number;
        /**
         * Score assigned when the certificate expires in less than or equal to 30 days.
         * Allowed values are 0-5.
         * Default value when not specified in API or module is interpreted by Avi Controller as 4.0.
         */
        hs_security_certscore_le30d?: number;
        /**
         * Threshold number of connections in 5min, below which apdexr, apdexc, rum_apdex, and other network quality metrics are not computed.
         * Default value when not specified in API or module is interpreted by Avi Controller as 10.0.
         */
        hs_pscore_traffic_threshold_l4_server?: number;
        /**
         * Exclude 'server unanswered syns' from the list of errors.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        exclude_syn_retransmit_as_error?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * List of http status code ranges to be excluded from being classified as an error.
         */
        ranges?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        controller?: string;
        /**
         * Satisfactory client to avi round trip time(rtt).
         * Allowed values are 1-2000.
         * Default value when not specified in API or module is interpreted by Avi Controller as 125.
         */
        apdex_server_rtt_threshold?: number | string;
        /**
         * Exclude server dns error response from the list of errors.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        exclude_server_dns_error_as_error?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Score assigned when the certificate expires in less than or equal to 7 days.
         * Allowed values are 0-5.
         * Default value when not specified in API or module is interpreted by Avi Controller as 2.0.
         */
        hs_security_certscore_le07d?: number;
        password?: string;
        tenant?: string;
        /**
         * A client connection is considered lossy when percentage of times a packet could not be trasmitted due to tcp zero window is above this threshold.
         * Allowed values are 0-100.
         * Default value when not specified in API or module is interpreted by Avi Controller as 2.
         */
        conn_lossy_zero_win_size_event_threshold?: number | string;
        /**
         * If a client is able to load a page in less than the satisfactory latency threshold, the pageload is considered satisfied.
         * It is considered tolerated if it is greater than satisfied but less than the tolerated latency multiplied by satisifed latency.
         * Greater than this number and the client's request is considered frustrated.
         * A pageload includes the time for dns lookup, download of all http objects, and page render time.
         * Allowed values are 1-30000.
         * Default value when not specified in API or module is interpreted by Avi Controller as 5000.
         */
        apdex_rum_threshold?: number | string;
        /**
         * The name of the analytics profile.
         */
        name: string;
        /**
         * Penalty for allowing certificates with invalid chain.
         * Allowed values are 0-5.
         * Default value when not specified in API or module is interpreted by Avi Controller as 1.0.
         */
        hs_security_chain_invalidity_penalty?: number;
        /**
         * Score assigned when no algorithm is used for encryption.
         * Allowed values are 0-5.
         * Default value when not specified in API or module is interpreted by Avi Controller as 0.0.
         */
        hs_security_encalgo_score_none?: number;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Client tolerated response latency factor.
         * Client must receive a response within this factor times the satisfactory threshold (apdex_response_threshold) to be considered tolerated.
         * Allowed values are 1-1000.
         * Default value when not specified in API or module is interpreted by Avi Controller as 4.0.
         */
        apdex_response_tolerated_factor?: number;
        tenant_uuid?: string;
        /**
         * Exclude tcp resets by client from the list of potential errors.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        exclude_tcp_reset_as_error?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Maximum penalty that may be deducted from health score based on security assessment.
         * Allowed values are 0-100.
         * Default value when not specified in API or module is interpreted by Avi Controller as 100.
         */
        hs_max_security_penalty?: number | string;
        /**
         * A server connection is considered lossy when percentage of times a packet could not be trasmitted due to tcp zero window is above this threshold.
         * Allowed values are 0-100.
         * Default value when not specified in API or module is interpreted by Avi Controller as 2.
         */
        conn_server_lossy_zero_win_size_event_threshold?: number | string;
        /**
         * A connection between client and avi is considered lossy when more than this percentage of out of order packets are received.
         * Allowed values are 1-100.
         * Default value when not specified in API or module is interpreted by Avi Controller as 50.
         */
        conn_lossy_ooo_threshold?: number | string;
        /**
         * Score assigned when the minimum cipher strength is less than 128 bits.
         * Allowed values are 0-5.
         * Default value when not specified in API or module is interpreted by Avi Controller as 3.5.
         */
        hs_security_cipherscore_lt128b?: number;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * Score assigned when supporting tls1.0 encryption protocol.
         * Allowed values are 0-5.
         * Default value when not specified in API or module is interpreted by Avi Controller as 5.0.
         */
        hs_security_tls10_score?: number;
        /**
         * Score assigned when the certificate has expired.
         * Allowed values are 0-5.
         * Default value when not specified in API or module is interpreted by Avi Controller as 0.0.
         */
        hs_security_certscore_expired?: number;
        /**
         * If a client receives an http response in less than the satisfactory latency threshold, the request is considered satisfied.
         * It is considered tolerated if it is not satisfied and less than tolerated latency factor multiplied by the satisfactory latency threshold.
         * Greater than this number and the client's request is considered frustrated.
         * Allowed values are 1-30000.
         * Default value when not specified in API or module is interpreted by Avi Controller as 500.
         */
        apdex_response_threshold?: number | string;
        /**
         * Satisfactory client to avi round trip time(rtt).
         * Allowed values are 1-2000.
         * Default value when not specified in API or module is interpreted by Avi Controller as 250.
         */
        apdex_rtt_threshold?: number | string;
        /**
         * Exclude unsupported dns queries from the list of errors.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        exclude_unsupported_dns_query_as_error?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module provides declarative management of node system attributes on Cisco IOS XR devices.  It provides an option to configure host system parameters or remove those parameters from the device active configuration.
       */
      iosxr_system?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * The C(lookup_source) argument provides one or more source interfaces to use for performing DNS lookups.  The interface provided in C(lookup_source) must be a valid interface configured on the device.
         */
        lookup_source?: string;
        /**
         * Provides the list of domain suffixes to append to the hostname for the purpose of doing name resolution. This argument accepts a list of names and will be reconciled with the current active configuration on the running node.
         */
        domain_search?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Configure the device hostname parameter. This option takes an ASCII string value.
         */
        hostname?: string;
        /**
         * Configure the IP domain name on the remote device to the provided value. Value should be in the dotted name form and will be appended to the C(hostname) to create a fully-qualified domain name.
         */
        domain_name?: string;
        host?: string;
        /**
         * Default: present
         *
         * State of the configuration values in the device's current active configuration.  When set to I(present), the values should be configured in the device active configuration and when set to I(absent) the values should not be in the device active configuration
         */
        state?: "present" | "absent";
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * The C(name_serves) argument accepts a list of DNS name servers by way of either FQDN or IP address to use to perform name resolution lookups.  This argument accepts wither a list of DNS servers See examples.
         */
        name_servers?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        port?: number | string;
        /**
         * Provides administrative control for enabling or disabling DNS lookups.  When this argument is set to True, lookups are performed and when it is set to False, lookups are not performed.
         */
        lookup_enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Adds or removes SSH authorized keys for particular user accounts
       */
      authorized_key?: {
        /**
         * Default: None
         *
         * Change the comment on the public key. Rewriting the comment is useful in cases such as fetching it from GitHub or GitLab.
         * If no comment is specified, the existing comment will be kept.
         */
        comment?: string;
        /**
         * Default: no
         *
         * Whether to remove all other non-specified keys from the authorized_keys file. Multiple keys can be specified in a single C(key) string value by separating them by newlines.
         * This option is not loop aware, so if you use C(with_) , it will be exclusive per iteration of the loop, if you want multiple keys in the file you need to pass them all to C(key) in a single batch as mentioned above.
         */
        exclusive?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A string of ssh key options to be prepended to the key in the authorized_keys file
         */
        key_options?: string;
        /**
         * Default: present
         *
         * Whether the given key (with the given key_options) should or should not be in the file
         */
        state?: "present" | "absent";
        /**
         * The username on the remote host whose authorized_keys file will be modified
         */
        user: string;
        /**
         * The SSH public key(s), as a string or (since 1.9) url (https://github.com/username.keys)
         */
        key: string;
        /**
         * Default: (homedir)+/.ssh/authorized_keys
         *
         * Alternate path to the authorized_keys file
         */
        path?: string;
        unique?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: yes
         *
         * This only applies if using a https url as the source of the keys. If set to C(no), the SSL certificates will not be validated.
         * This should only set to C(no) used on personally controlled sites using self-signed certificates as it avoids verifying the source site.
         * Prior to 2.1 the code worked as if this was set to C(yes).
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: yes
         *
         * Whether this module should manage the directory of the authorized key file.  If set, the module will create the directory, as well as set the owner and permissions of an existing directory. Be sure to set C(manage_dir=no) if you are using an alternate directory for authorized_keys, as set with C(path), since you could lock yourself out of SSH access. See the example below.
         */
        manage_dir?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage VMware ESXi DNS Configuration
       */
      vmware_dns_config?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Use this module to schedule a command or script file to run once in the future.
       * All jobs are executed in the 'a' queue.
       */
      at?: {
        /**
         * The count of units in the future to execute the command or script file.
         */
        count?: number | string;
        /**
         * Default: present
         *
         * The state dictates if the command or script file should be evaluated as present(added) or absent(deleted).
         */
        state?: "present" | "absent";
        /**
         * A command to be executed in the future.
         */
        command?: string;
        /**
         * The type of units in the future to execute the command or script file.
         */
        units?: "minutes" | "hours" | "days" | "weeks";
        /**
         * If a matching job is present a new job will not be added.
         */
        unique?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * An existing script file to be executed in the future.
         */
        script_file?: string;
        [k: string]: any;
      };
      /**
       * Manage route domains on a BIG-IP
       */
      bigip_routedomain?: {
        /**
         * The eviction policy to use with this route domain. Apply an eviction policy to provide customized responses to flow overflows and slow flows on the route domain.
         */
        flow_eviction_policy?: string;
        /**
         * Service policy to associate with the route domain.
         */
        service_policy?: string;
        /**
         * Specifies descriptive text that identifies the route domain.
         */
        description?: string;
        /**
         * Specifies the route domain the system searches when it cannot
         * find a route in the configured domain.
         *
         */
        parent?: string;
        /**
         * The maximum number of concurrent connections allowed for the route domain. Setting this to C(0) turns off connection limits.
         */
        connection_limit?: string;
        /**
         * Specifies whether the system enforces cross-routing restrictions or not.
         */
        strict?: string;
        /**
         * Default: present
         *
         * Whether the route domain should exist or not.
         */
        state?: string;
        /**
         * Dynamic routing protocols for the system to use in the route domain.
         */
        routing_protocol?: string;
        /**
         * The bandwidth controller for the route domain.
         */
        bwc_policy?: string;
        /**
         * VLANs for the system to use in the route domain
         */
        vlans?: string;
        /**
         * The unique identifying integer representing the route domain.
         */
        id?: string;
        [k: string]: any;
      };
      /**
       * Installs or uninstalls a Windows MSI file that is already located on the target server.
       */
      win_msi?: {
        /**
         * Additional arguments to pass to the msiexec.exe command.
         */
        extra_args?: string;
        /**
         * Path to a file removed by uninstalling the MSI to prevent from attempting to re-uninstall the package on every run.
         */
        removes?: string;
        /**
         * Path to a file created by installing the MSI to prevent from attempting to reinstall the package on every run.
         */
        creates?: string;
        /**
         * Default: present
         *
         * Whether the MSI file should be installed or uninstalled.
         */
        state?: string;
        /**
         * File system path to the MSI file to install
         */
        path?: string;
        /**
         * Default: no
         *
         * Specify whether to wait for install or uninstall to complete before continuing.
         */
        wait?: string;
        [k: string]: any;
      };
      /**
       * Manages virtual machines supported by I(libvirt).
       */
      virt?: {
        [k: string]: any;
      };
      /**
       * Wraps the msg.exe command in order to send messages to Windows hosts.
       */
      win_msg?: {
        /**
         * Default: Hello world!
         *
         * The text of the message to be displayed.
         * The message must be less than 256 characters.
         */
        msg?: string;
        /**
         * Default: *
         *
         * Who to send the message to. Can be a username, sessionname or sessionid.
         */
        to?: string;
        /**
         * Default: no
         *
         * Whether to wait for users to respond.  Module will only wait for the number of seconds specified in display_seconds or 10 seconds if not specified. However, if I(wait) is true, the message is sent to each logged on user in turn, waiting for the user to either press 'ok' or for the timeout to elapse before moving on to the next user.
         */
        wait?: string;
        /**
         * Default: 10
         *
         * How long to wait for receiver to acknowledge message, in seconds.
         */
        display_seconds?: string;
        [k: string]: any;
      };
      /**
       * Manage monitoring policies on Cisco ACI fabrics.
       * More information from the internal APIC class I(mon:EPGPol) at U(https://developer.cisco.com/media/mim-ref/MO-monEPGPol.html).
       */
      aci_epg_monitoring_policy?: {
        [k: string]: any;
      } & ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * This module is used to configure SeProperties object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_seproperties?: {
        username?: string;
        /**
         * Seagentproperties settings for seproperties.
         */
        se_agent_properties?: {
          [k: string]: any;
        };
        /**
         * Unique object identifier of the object.
         * Default value when not specified in API or module is interpreted by Avi Controller as default.
         */
        uuid?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * Seruntimeproperties settings for seproperties.
         */
        se_runtime_properties?: {
          [k: string]: any;
        };
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        controller?: string;
        /**
         * Sebootupproperties settings for seproperties.
         */
        se_bootup_properties?: {
          [k: string]: any;
        };
        tenant?: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        [k: string]: any;
      };
      /**
       * Create, update and delete VPCs.
       */
      cs_vpc?: {
        [k: string]: any;
      };
      /**
       * Change an administrative parameter on a MongoDB server.
       */
      mongodb_parameter?: {
        /**
         * Default: 27017
         *
         * The port to connect to
         */
        login_port?: number | string;
        /**
         * The username used to authenticate with
         */
        login_user?: string;
        /**
         * Default: localhost
         *
         * The host running the database
         */
        login_host?: string;
        /**
         * The password used to authenticate with
         */
        login_password?: string;
        /**
         * MongoDB administrative parameter to modify
         */
        param: string;
        /**
         * Whether to use an SSL connection when connecting to the database
         */
        ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: str
         *
         * Define the parameter value (str, int)
         */
        param_type?: "str" | "int";
        /**
         * MongoDB administrative parameter value to set
         */
        value: string;
        /**
         * The database where login credentials are stored
         */
        login_database?: string;
        /**
         * Replica set to connect to (automatically connects to primary for writes)
         */
        replica_set?: string;
        [k: string]: any;
      };
      /**
       * Notify Rollbar about app deployments (see https://rollbar.com/docs/deploys_other/)
       */
      rollbar_deployment?: {
        /**
         * Deploy comment (e.g. what is being deployed).
         */
        comment?: string;
        /**
         * Rollbar username of the user who deployed.
         */
        rollbar_user?: string;
        /**
         * Default: https://api.rollbar.com/api/1/deploy/
         *
         * Optional URL to submit the notification to.
         */
        url?: string;
        /**
         * Name of the environment being deployed, e.g. 'production'.
         */
        environment: string;
        /**
         * Your project access token.
         */
        token: string;
        /**
         * User who deployed.
         */
        user?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Revision number/sha being deployed.
         */
        revision: string;
        [k: string]: any;
      };
      /**
       * creates / deletes a Linode Public Cloud instance and optionally waits for it to be 'running'.
       */
      linode?: {
        [k: string]: any;
      };
      /**
       * Manages PIM interface configuration settings.
       */
      nxos_pim_interface?: {
        /**
         * Type of policy mapped to C(jp_policy_in).
         */
        jp_type_in?: "prefix" | "routemap";
        /**
         * Hello interval in milliseconds for this interface.
         */
        hello_interval?: number | string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Configures interface to be a boundary of a PIM domain.
         */
        border?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        /**
         * Authentication for hellos on this interface.
         */
        hello_auth_key?: string;
        dr_prio?: string;
        /**
         * Policy for join-prune messages (outbound).
         */
        jp_policy_out?: string;
        /**
         * Default: present
         *
         * Manages desired state of the resource.
         */
        state?: "present" | "absent" | "default";
        provider?: {
          [k: string]: any;
        };
        /**
         * Policy for join-prune messages (inbound).
         */
        jp_policy_in?: string;
        username?: string;
        /**
         * Default: True
         *
         * Enable/disable sparse-mode on the interface.
         */
        sparse?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        host?: string;
        /**
         * Configures a neighbor policy for filtering adjacencies.
         */
        neighbor_policy?: string;
        /**
         * Full name of the interface such as Ethernet1/33.
         */
        interface: string;
        password?: string;
        ssh_keyfile?: string;
        /**
         * Type of policy mapped to neighbor_policy.
         */
        neighbor_type?: "prefix" | "routemap";
        timeout?: number | string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Type of policy mapped to C(jp_policy_out).
         */
        jp_type_out?: "prefix" | "routemap";
        [k: string]: any;
      };
      /**
       * Interface to the Network Command Line Utility, developed to make it easier to configure operating systems running ifupdown2 and Quagga, such as Cumulus Linux. Command documentation is available at U(https://docs.cumulusnetworks.com/display/DOCS/Network+Command+Line+Utility)
       */
      nclu?: {
        /**
         * A list of strings containing the net commands to run. Mutually exclusive with I(template).
         */
        commands?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: Ansible-originated commit
         *
         * Commit description that will be recorded to the commit log if I(commit) or I(atomic) are true.
         */
        description?: string;
        /**
         * Boolean. When true, perform a 'net abort' before the block. This cleans out any uncommitted changes in the buffer. Mutually exclusive with I(atomic).
         */
        abort?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * When true, equivalent to both I(commit) and I(abort) being true. Mutually exclusive with I(commit) and I(atomic).
         */
        atomic?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A single, multi-line string with jinja2 formatting. This string will be broken by lines, and each line will be run through net. Mutually exclusive with I(commands).
         */
        template?: string;
        /**
         * When true, performs a 'net commit' at the end of the block. Mutually exclusive with I(atomic).
         */
        commit?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Create or delete Server Groups at Centurylink Centurylink Cloud
       */
      clc_group?: {
        /**
         * The name of the Server Group
         */
        name: string;
        /**
         * The parent group of the server group. If parent is not provided, it creates the group at top level.
         */
        parent?: string;
        /**
         * A description of the Server Group
         */
        description?: string;
        /**
         * Default: present
         *
         * Whether to create or delete the group
         */
        state?: "present" | "absent";
        /**
         * Datacenter to create the group in. If location is not provided, the group gets created in the default datacenter associated with the account
         */
        location?: string;
        /**
         * Default: True
         *
         * Whether to wait for the tasks to finish before returning.
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage Infinity IPAM using REST API
       */
      infinity?: {
        /**
         * Username to access Infinity
         * The user must have Rest API privileges
         */
        username: string;
        /**
         * Network bitmask (e.g. 255.255.255.220) or CIDR format (e.g., /26)
         */
        network_size?: string;
        /**
         * Default: -1
         *
         * the parent network id for a given network
         */
        network_location?: number | string;
        /**
         * Default: 4
         *
         * Network family defined by Infinity, e.g. IPv4, IPv6 and Dual stack
         */
        network_family?: "4" | "6" | "dual";
        /**
         * Network ID
         */
        network_id?: string;
        /**
         * IP Address for a reservation or a release
         */
        ip_address?: string;
        /**
         * Network address with CIDR format (e.g., 192.168.310.0)
         */
        network_address?: string;
        /**
         * Infinity server_ip with IP address
         */
        server_ip: string;
        /**
         * Action to perform
         */
        action:
          | "get_network"
          | "reserve_next_available_ip"
          | "release_ip"
          | "delete_network"
          | "reserve_network"
          | "release_network"
          | "add_network"
          | "get_network_id";
        /**
         * Infinity password
         */
        password: string;
        /**
         * The name of a network
         */
        network_name?: string;
        /**
         * Default: lan
         *
         * Network type defined by Infinity
         */
        network_type?: "lan" | "shared_lan" | "supernet";
        [k: string]: any;
      };
      /**
       * Similar to the M(facter) module, this runs the I(Ohai) discovery program (U(http://wiki.opscode.com/display/chef/Ohai)) on the remote host and returns JSON inventory data. I(Ohai) data is a bit more verbose and nested than I(facter).
       */
      ohai?: {
        [k: string]: any;
      };
      /**
       * Find the folder path(s) for a VM by name or UUID
       */
      vmware_guest_find?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manages BGP peer configurations on HUAWEI CloudEngine switches.
       */
      ce_bgp_neighbor?: {
        /**
         * The value can be Connect-only, Listen-only, or Both.
         */
        connect_mode?: "listenOnly" | "connectOnly" | "null";
        /**
         * Default: no_use
         *
         * Add the global AS number to the Update packets to be advertised.
         */
        prepend_global_as?: "no_use" | "true" | "false";
        /**
         * Maximum number of hops in an indirect EBGP connection. The value is an ranging from 1 to 255.
         */
        ebgp_max_hop?: string;
        /**
         * Default: no_use
         *
         * If the value is true, the session with a specified peer is torn down and all related routing entries are cleared. If the value is false, the session with a specified peer is retained.
         */
        is_ignore?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * Add the Fake AS number to received Update packets.
         */
        prepend_fake_as?: "no_use" | "true" | "false";
        /**
         * Specify the Keychain authentication name used when BGP peers establish a TCP connection. The value is a string of 1 to 47 case-insensitive characters.
         */
        key_chain_name?: string;
        /**
         * Default: no_use
         *
         * If the value is true, the system is enabled to preferentially use the single-hop mode for BFD session setup between IBGP peers. If the value is false, the system is disabled from preferentially using the single-hop mode for BFD session setup between IBGP peers.
         */
        is_single_hop?: "no_use" | "true" | "false";
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli";
        /**
         * Default: no_use
         *
         * If the value is true, the router has all extended capabilities. If the value is false, the router does not have all extended capabilities.
         */
        conventional?: "no_use" | "true" | "false";
        /**
         * AS number of a peer. The value is a string of 1 to 11 characters.
         */
        remote_as: string;
        /**
         * Specify the Hold time of a peer or peer group. The value is 0 or an integer ranging from 3 to 65535.
         */
        hold_time?: string;
        /**
         * Specify the minimum interval at which BFD packets are sent. The value is an integer ranging from 50 to 1000, in milliseconds.
         */
        tx_interval?: string;
        /**
         * The character string in a password identifies the contents of the password, spaces not supported. The value is a string of 1 to 255 characters.
         */
        pswd_cipher_text?: string;
        /**
         * Name of a source interface that sends BGP packets. The value is a string of 1 to 63 characters.
         */
        local_if_name?: string;
        /**
         * Specify the minimum interval at which BFD packets are received. The value is an integer ranging from 50 to 1000, in milliseconds.
         */
        rx_interval?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        provider?: {
          [k: string]: any;
        };
        /**
         * Name of a BGP instance. The name is a case-sensitive string of characters. The BGP instance can be used only after the corresponding VPN instance is created.
         */
        vrf_name: string;
        /**
         * Default: no_use
         *
         * If the value is true, the EBGP peer can use either a fake AS number or the actual AS number. If the value is false, the EBGP peer can only use a fake AS number.
         */
        dual_as?: "no_use" | "true" | "false";
        username?: string;
        /**
         * Description of a peer, which can be letters or digits. The value is a string of 1 to 80 characters.
         */
        description?: string;
        /**
         * Default: no_use
         *
         * If the value is true, BGP is enabled to record peer session status and event information. If the value is false, BGP is disabled from recording peer session status and event information.
         */
        is_log_change?: "no_use" | "true" | "false";
        /**
         * Specify the Keepalive time of a peer or peer group. The value is an integer ranging from 0 to 21845. The default value is 60.
         */
        keep_alive_time?: string;
        /**
         * Fake AS number that is specified for a local peer. The value is a string of 1 to 11 characters.
         */
        fake_as?: string;
        four_byte_as?: "no_use" | "true" | "false";
        host?: string;
        /**
         * Specify the Min hold time of a peer or peer group.
         */
        min_hold_time?: string;
        /**
         * Specify the detection multiplier. The default value is 3. The value is an integer ranging from 3 to 50.
         */
        multiplier?: string;
        password?: string;
        /**
         * Enable GTSM on a peer or peer group. The valid-TTL-Value parameter is used to specify the number of TTL hops to be detected. The value is an integer ranging from 1 to 255.
         */
        valid_ttl_hops?: string;
        /**
         * Default: no_use
         *
         * If the value is true, peers are enabled to inherit the BFD function from the peer group. If the value is false, peers are disabled to inherit the BFD function from the peer group.
         */
        is_bfd_block?: "no_use" | "true" | "false";
        /**
         * Maximum TCP MSS value used for TCP connection establishment for a peer. The value is an integer ranging from 176 to 4096.
         */
        tcp_MSS?: string;
        /**
         * ConnectRetry interval. The value is an integer ranging from 1 to 65535.
         */
        conn_retry_time?: string;
        /**
         * Default: no_use
         *
         * If the value is true, BGP is enabled to advertise REFRESH packets. If the value is false, the route refresh function is enabled.
         */
        route_refresh?: "no_use" | "true" | "false";
        /**
         * Connection address of a peer, which can be an IPv4 or IPv6 address.
         */
        peer_addr: string;
        /**
         * Default: no_use
         *
         * If the value is true, BFD is enabled. If the value is false, BFD is disabled.
         */
        is_bfd_enable?: "no_use" | "true" | "false";
        /**
         * Default: no_use
         *
         * If the value is true, peer create MPLS Local IFNET disable. If the value is false, peer create MPLS Local IFNET enable.
         */
        mpls_local_ifnet_disable?: "no_use" | "true" | "false";
        /**
         * Enable BGP peers to establish a TCP connection and perform the Message Digest 5 (MD5) authentication for BGP messages.
         */
        pswd_type?: "null" | "cipher" | "simple";
        timeout?: number | string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Get facts for a specific security group or all security groups within a resource group.
       */
      azure_rm_securitygroup_facts?: {
        profile?: string;
        cli_default_profile?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Only show results for a specific security group.
         */
        name?: string;
        /**
         * Name of the resource group to use.
         */
        resource_group: string;
        /**
         * Limit results by providing a list of tags. Format tags as 'key' or 'key:value'.
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        ad_user?: string;
        cloud_environment?: string;
        secret?: string;
        client_id?: string;
        subscription_id?: string;
        password?: string;
        tenant?: string;
        [k: string]: any;
      };
      /**
       * Creates/Removes a gateway interface from the router, used to associate a external network with a router to route external traffic.
       */
      quantum_router_gateway?: {
        /**
         * Default: None
         *
         * Name of the region
         */
        region_name?: string;
        availability_zone?: string;
        /**
         * Default: None
         *
         * Name of the external network which should be attached to the router.
         */
        network_name: string;
        /**
         * Default: yes
         *
         * The tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone URL for authentication
         */
        auth_url?: string;
        /**
         * Default: yes
         *
         * Password of login user
         */
        login_password: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Default: None
         *
         * Name of the router to which the gateway should be attached.
         */
        router_name: string;
        [k: string]: any;
      };
      /**
       * IPS packages are the native packages in Solaris 11 and higher.
       */
      pkg5?: {
        [k: string]: any;
      };
      /**
       * This module is used to configure Network object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_network?: {
        username?: string;
        /**
         * List of subnet.
         */
        configured_subnets?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * It is a reference to an object of type vrfcontext.
         */
        vrf_context_ref?: string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * When selected, excludes all discovered subnets in this network from consideration for virtual service placement.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        exclude_discovered_subnets?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * It is a reference to an object of type vimgrnwruntime.
         */
        vimgrnw_ref?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        /**
         * Boolean flag to set synced_from_se.
         * Default value when not specified in API or module is interpreted by Avi Controller as False.
         */
        synced_from_se?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Select the ip address management scheme for this network.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        dhcp_enabled?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * It is a reference to an object of type cloud.
         */
        cloud_ref?: string;
        controller?: string;
        /**
         * Boolean flag to set vcenter_dvs.
         * Default value when not specified in API or module is interpreted by Avi Controller as True.
         */
        vcenter_dvs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        tenant?: string;
        password?: string;
        tenant_uuid?: string;
        api_version?: string;
        /**
         * Name of the object.
         */
        name: string;
        [k: string]: any;
      };
      /**
       * This module creates file system.
       */
      filesystem?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Associates or disassociates a specific floating IP with a particular instance
       */
      quantum_floating_ip_associate?: {
        /**
         * Default: None
         *
         * name of the region
         */
        region_name?: string;
        availability_zone?: string;
        /**
         * Default: None
         *
         * name of the instance to which the public IP should be assigned
         */
        instance_name: string;
        /**
         * Default: True
         *
         * the tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: present
         *
         * indicates the desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * the keystone url for authentication
         */
        auth_url?: string;
        /**
         * Default: yes
         *
         * password of login user
         */
        login_password: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Default: None
         *
         * floating ip that should be assigned to the instance
         */
        ip_address: string;
        [k: string]: any;
      };
      /**
       * Manages a Django application using the I(manage.py) application frontend to I(django-admin). With the I(virtualenv) parameter, all management commands will be executed by the given I(virtualenv) installation.
       */
      django_manage?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Execute vrouter-create, vrouter-delete, vrouter-modify command.
       * Each fabric, cluster, standalone switch, or virtual network (VNET) can provide its tenants with a virtual router (vRouter) service that forwards traffic between networks and implements Layer 3 protocols.
       * C(vrouter-create) creates a new vRouter service.
       * C(vrouter-delete) deletes a vRouter service.
       * C(vrouter-modify) modifies a vRouter service.
       */
      pn_vrouter?: {
        /**
         * Specify how OSPF routes are redistributed.
         */
        pn_ospf_redistribute?: "static" | "connected" | "bgp" | "rip";
        /**
         * Specify the name of the vRouter.
         */
        pn_name: string;
        /**
         * Target switch(es) to run the CLI on.
         */
        pn_cliswitch?: string;
        /**
         * State the action to perform. Use 'present' to create vrouter, 'absent' to delete vrouter and 'update' to modify vrouter.
         */
        state: "present" | "absent" | "update";
        /**
         * Provide login password if user is not root.
         */
        pn_clipassword?: string;
        /**
         * Specify how BGP routes are redistributed.
         */
        pn_bgp_redistribute?: "static" | "connected" | "rip" | "ospf";
        /**
         * Specify if the vRouter uses software or hardware.
         * Note that if you specify hardware as router type, you cannot assign IP addresses using DHCP. You must specify a static IP address.
         */
        pn_router_type?: "hardware" | "software";
        /**
         * Specifies the VRRP ID for a hardware vrouter.
         */
        pn_hw_vrrp_id?: number | string;
        /**
         * Specify the name of the VNET.
         * Required for vrouter-create.
         */
        pn_vnet?: string;
        /**
         * Specify other OSPF options as a whitespaces separated string within single quotes ''.
         */
        pn_ospf_options?: string;
        /**
         * Specify how RIP routes are redistributed.
         */
        pn_rip_redistribute?: "static" | "connected" | "ospf" | "bgp";
        /**
         * Specify other BGP options as a whitespaces separated string within single quotes ''.
         */
        pn_bgp_options?: string;
        /**
         * Specify the vRouter IP address.
         */
        pn_router_id?: string;
        /**
         * Specify the maximum number of paths for BGP. This is a number between 1 and 255 or 0 to unset.
         */
        pn_bgp_max_paths?: number | string;
        /**
         * Specify to enable or disable vRouter service.
         */
        pn_service_state?: "enable" | "disable";
        /**
         * Specify if the vRouter is a dedicated or shared VNET service.
         */
        pn_service_type?: "dedicated" | "shared";
        /**
         * Provide login username if user is not root.
         */
        pn_cliusername?: string;
        pn_vrrp_track_port?: string;
        /**
         * Specify the Autonomous System Number(ASN) if the vRouter runs Border Gateway Protocol(BGP).
         */
        pn_bgp_as?: number | string;
        [k: string]: any;
      };
      /**
       * Manages TCL iApp templates on a BIG-IP. This module will allow you to deploy iApp templates to the BIG-IP and manage their lifecycle. The conventional way to use this module is to import new iApps as needed or by extracting the contents of the iApp archive that is provided at downloads.f5.com and then importing all the iApps with this module. This module can also update existing iApps provided that the source of the iApp changed while the name stayed the same. Note however that this module will not reconfigure any services that may have been created using the C(bigip_iapp_service) module. iApps are normally not updated in production. Instead, new versions are deployed and then existing services are changed to consume that new template. As such, the ability to update templates in-place requires the C(force) option to be used.
       */
      bigip_iapp_template?: {
        /**
         * Sets the contents of an iApp template directly to the specified value. This is for simple values, but can be used with lookup plugins for anything complex or with formatting. C(content) must be provided when creating new templates.
         */
        content?: string;
        /**
         * Default: present
         *
         * Whether the iRule should exist or not.
         */
        state?: string;
        /**
         * Default: Common
         *
         * Device partition to manage resources on.
         */
        partition?: string;
        /**
         * Specifies whether or not to force the uploading of an iApp. When C(yes), will force update the iApp even if there are iApp services using it. This will not update the running service though. Use C(bigip_iapp_service) to do that. When C(no), will update the iApp only if there are no iApp services using the template.
         */
        force?: string;
        /**
         * The name of the iApp template that you want to delete. This option is only available when specifying a C(state) of C(absent) and is provided as a way to delete templates that you may no longer have the source of.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Creates and deletes DNS records in Amazons Route53 service
       */
      route53?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Allows you to create or remove a volume from a ProfitBricks datacenter. This module has a dependency on profitbricks >= 1.0.0
       */
      profitbricks_volume?: {
        /**
         * Default: 1
         *
         * The number of volumes you wish to create.
         */
        count?: number | string;
        /**
         * The datacenter in which to create the volumes.
         */
        datacenter?: string;
        /**
         * Public SSH keys allowing access to the virtual machine.
         */
        ssh_keys?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environement variable.
         */
        subscription_user?: string;
        /**
         * Password set for the administrative user.
         */
        image_password?: string;
        /**
         * Default: UNKNOWN
         *
         * The licence type for the volume. This is used when the image is non-standard.
         */
        licence_type?: string;
        /**
         * Default: True
         *
         * Whether or not to increment a single number in the name for created virtual machines.
         */
        auto_increment?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The system image ID for the volume, e.g. a3eae284-a2fe-11e4-b187-5f1f641608c8. This can also be a snapshot image ID.
         */
        image?: string;
        /**
         * list of instance ids, currently only used when state='absent' to remove instances.
         */
        instance_ids?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The name of the volumes. You can enumerate the names using auto_increment.
         */
        name?: string;
        /**
         * THe ProfitBricks password. Overrides the PB_PASSWORD environement variable.
         */
        subscription_password?: string;
        /**
         * Default: present
         *
         * create or terminate datacenters
         */
        state?: string;
        /**
         * Default: 600
         *
         * how long before wait gives up, in seconds
         */
        wait_timeout?: number | string;
        /**
         * Default: VIRTIO
         *
         * The bus type.
         */
        bus?: "IDE" | "VIRTIO";
        /**
         * Default: yes
         *
         * wait for the datacenter to be created before returning
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: HDD
         *
         * The disk type of the volume.
         */
        disk_type?: "HDD" | "SSD";
        server?: string;
        /**
         * Default: 10
         *
         * The size of the volume.
         */
        size?: number | string;
        [k: string]: any;
      };
      /**
       * This module allows for the manipulation of GNOME 2 Configuration via gconftool-2.  Please see the gconftool-2(1) man pages for more details.
       */
      gconftool2?: {
        /**
         * Access the config database directly, bypassing server.  If direct is specified then the config_source must be specified as well. See man gconftool-2(1)
         */
        direct?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Preference keys typically have simple values such as strings, integers, or lists of strings and integers. This is ignored if the state is "get". See man gconftool-2(1)
         */
        value?: string;
        /**
         * Specify a configuration source to use rather than the default path. See man gconftool-2(1)
         */
        config_source?: string;
        /**
         * The action to take upon the key/value.
         */
        state: "get" | "present" | "absent";
        /**
         * The type of value being set. This is ignored if the state is "get".
         */
        value_type?: "int" | "bool" | "float" | "string";
        /**
         * A GConf preference key is an element in the GConf repository that corresponds to an application preference. See man gconftool-2(1)
         */
        key: string;
        [k: string]: any;
      };
      /**
       * Gather facts about ELB target groups in AWS
       */
      elb_target_group_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module manipulates files privileges using the Linux capabilities(7) system.
       */
      capabilities?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manages Layer 3 attributes for IPv4 and IPv6 interfaces.
       */
      nxos_ip_interface?: {
        username?: string;
        timeout?: number | string;
        password?: string;
        /**
         * IPv4 or IPv6 Address.
         */
        addr?: string;
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Subnet mask for IPv4 or IPv6 Address in decimal format.
         */
        mask?: string;
        /**
         * Default: present
         *
         * Specify desired state of the resource.
         */
        state?: "present" | "absent";
        /**
         * Allow to configure IPv4 secondary addresses on interface.
         */
        allow_secondary?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        include_defaults?: string;
        host?: string;
        ssh_keyfile?: string;
        config?: string;
        version?: "v4" | "v6";
        provider?: {
          [k: string]: any;
        };
        /**
         * Full name of interface, i.e. Ethernet1/1, vlan10.
         */
        interface: string;
        /**
         * Route tag for IPv4 or IPv6 Address in integer format.
         */
        tag?: number | string;
        save?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Gather facts about EC2 Elastic Load Balancers in AWS
       */
      ec2_elb_facts?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Uses .net Environment to set or remove environment variables and can set at User, Machine or Process level.
       * User level environment variables will be set, but not available until the user has logged off and on again.
       */
      win_environment?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manages SNMP contact information.
       */
      nxos_snmp_contact?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Default: present
         *
         * Manage the state of the resource.
         */
        state?: "present" | "absent";
        host?: string;
        /**
         * Contact information.
         */
        contact: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Notify Honeybadger.io about app deployments (see http://docs.honeybadger.io/article/188-deployment-tracking)
       */
      honeybadger_deployment?: {
        /**
         * Default: None
         *
         * URL of the project repository
         */
        repo?: string;
        /**
         * Default: https://api.honeybadger.io/v1/deploys
         *
         * Optional URL to submit the notification to.
         */
        url?: string;
        /**
         * The environment name, typically 'production', 'staging', etc.
         */
        environment: string;
        /**
         * API token.
         */
        token: string;
        /**
         * Default: None
         *
         * The username of the person doing the deployment
         */
        user?: string;
        /**
         * Default: yes
         *
         * If C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * A hash, number, tag, or other identifier showing what revision was deployed
         */
        revision?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of logging on Cisco IOS XR devices.
       */
      iosxr_logging?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * If value of C(dest) is I(file) it indicates file-name, for I(user) it indicates username and for I(host) indicates the host name to be notified.
         */
        name?: string;
        /**
         * Default: debugging
         *
         * Set logging severity levels.
         */
        level?: string;
        /**
         * Destination of the logs.
         */
        dest?: "on" | "hostnameprefix" | "console" | "monitor" | "buffered";
        /**
         * Default: local7
         *
         * Set logging facility.
         */
        facility?: string;
        /**
         * Default: present
         *
         * State of the logging configuration.
         */
        state?: "present" | "absent";
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of logging definitions.
         */
        aggregate?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        port?: number | string;
        /**
         * Default: 307200
         *
         * Size of buffer. The acceptable value is in range from 307200 to 125000000 bytes.
         */
        size?: number | string;
        [k: string]: any;
      };
      /**
       * Uses boto3 to set TTL.
       * requires botocore version 1.5.24 or higher.
       */
      dynamodb_ttl?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Grant and revoke roles in either project or domain context for OpenStack Identity Users.
       */
      os_user_role?: {
        /**
         * ID of the domain to scope the role association to. Valid only with keystone version 3, and required if I(project) is not specified.
         */
        domain?: string;
        /**
         * Name or ID for the group. Valid only with keystone version 3. If I(group) is not specified, then I(user) is required. Both may not be specified.
         */
        group?: string;
        /**
         * Name or ID of the project to scope the role assocation to. If you are using keystone version 2, then this value is required.
         */
        project?: string;
        /**
         * Default: present
         *
         * Should the roles be present or absent on the user.
         */
        state?: string;
        /**
         * Name or ID for the role.
         */
        role?: string;
        /**
         * Name or ID for the user. If I(user) is not specified, then I(group) is required. Both may not be specified.
         */
        user?: string;
        [k: string]: any;
      };
      /**
       * Allows for the management of server certificates
       */
      iam_cert?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Add or Remove a floating IP to an instance
       */
      quantum_floating_ip?: {
        /**
         * Default: None
         *
         * Name of the region
         */
        region_name?: string;
        availability_zone?: string;
        /**
         * Default: yes
         *
         * Password of login user
         */
        login_password: string;
        /**
         * Default: None
         *
         * The name of the instance to which the IP address should be assigned
         */
        instance_name: string;
        /**
         * Default: yes
         *
         * The tenant name of the login user
         */
        login_tenant_name?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the resource
         */
        state?: "present" | "absent";
        /**
         * Default: http://127.0.0.1:35357/v2.0/
         *
         * The keystone url for authentication
         */
        auth_url?: string;
        /**
         * Default: None
         *
         * The name of the network of the port to associate with the floating ip. Necessary when VM multiple networks.
         */
        internal_network_name?: string;
        /**
         * Default: admin
         *
         * login username to authenticate to keystone
         */
        login_username?: string;
        /**
         * Default: None
         *
         * Name of the network from which IP has to be assigned to VM. Please make sure the network is an external network
         */
        network_name: string;
        [k: string]: any;
      };
      /**
       * Apstra AOS Logical Device module let you manage your Logical Devices easily. You can create create and delete Logical Device by Name, ID or by using a JSON File. This module is idempotent and support the I(check) mode. It's using the AOS REST API.
       */
      aos_logical_device?: {
        /**
         * Datastructure of the Logical Device to create. The data can be in YAML / JSON or directly a variable. It's the same datastructure that is returned on success in I(value).
         */
        content?: string;
        /**
         * Default: present
         *
         * Indicate what is the expected state of the Logical Device (present or not).
         */
        state?: "present" | "absent";
        /**
         * An existing AOS session as obtained by M(aos_login) module.
         */
        session: {
          [k: string]: any;
        };
        /**
         * AOS Id of the Logical Device to manage (can't be used to create a new Logical Device), Only one of I(name), I(id) or I(content) can be set.
         */
        id?: string;
        /**
         * Name of the Logical Device to manage. Only one of I(name), I(id) or I(content) can be set.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Connect to external virtual and physical domains by using attachable Access Entity Profiles (AEP) on Cisco ACI fabrics.
       * More information from the internal APIC class I(infra:AttEntityP) at U(https://developer.cisco.com/media/mim-ref/MO-infraAttEntityP.html).
       */
      aci_aep?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        };
      /**
       * This module is used to configure BackupConfiguration object
       * more examples at U(https://github.com/avinetworks/devops)
       */
      avi_backupconfiguration?: {
        username?: string;
        /**
         * Unique object identifier of the object.
         */
        uuid?: string;
        /**
         * Directory at remote destination with write permission for ssh user.
         */
        remote_directory?: string;
        /**
         * Avi controller URL of the object.
         */
        url?: string;
        controller?: string;
        /**
         * It is a reference to an object of type tenant.
         */
        tenant_ref?: string;
        /**
         * Remote destination.
         */
        remote_hostname?: string;
        /**
         * Name of backup configuration.
         */
        name: string;
        /**
         * Passphrase of backup configuration.
         */
        backup_passphrase?: string;
        /**
         * Default: present
         *
         * The state that should be applied on the entity.
         */
        state?: "absent" | "present";
        api_version?: string;
        /**
         * Rotate the backup files based on this count.
         * Allowed values are 1-20.
         * Default value when not specified in API or module is interpreted by Avi Controller as 4.
         */
        maximum_backups_stored?: number | string;
        /**
         * Remote backup.
         */
        upload_to_remote_host?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        tenant?: string;
        password?: string;
        /**
         * Prefix of the exported configuration file.
         * Field introduced in 17.1.1.
         */
        backup_file_prefix?: string;
        tenant_uuid?: string;
        /**
         * Access credentials for remote destination.
         * It is a reference to an object of type cloudconnectoruser.
         */
        ssh_user_ref?: string;
        /**
         * Local backup.
         */
        save_local?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Manage initial Contract Subjects on Cisco ACI fabrics.
       * More information from the internal APIC class I(vz:Subj) at U(https://developer.cisco.com/media/mim-ref/MO-vzSubj.html).
       */
      aci_contract_subject?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        )) & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        } & {
          [k: string]: any;
        };
      /**
       * Send a message to Campfire.
       * Messages with newlines will result in a "Paste" message being sent.
       */
      campfire?: {
        /**
         * The message body.
         */
        msg: string;
        /**
         * API token.
         */
        token: string;
        /**
         * The subscription name to use.
         */
        subscription: string;
        /**
         * Room number to which the message should be sent.
         */
        room: string;
        /**
         * Send a notification sound before the message.
         */
        notify?:
          | "56k"
          | "bell"
          | "bezos"
          | "bueller"
          | "clowntown"
          | "cottoneyejoe"
          | "crickets"
          | "dadgummit"
          | "dangerzone"
          | "danielsan"
          | "deeper"
          | "drama"
          | "greatjob"
          | "greyjoy"
          | "guarantee"
          | "heygirl"
          | "horn"
          | "horror"
          | "inconceivable"
          | "live"
          | "loggins"
          | "makeitso"
          | "noooo"
          | "nyan"
          | "ohmy"
          | "ohyeah"
          | "pushit"
          | "rimshot"
          | "rollout"
          | "rumble"
          | "sax"
          | "secret"
          | "sexyback"
          | "story"
          | "tada"
          | "tmyk"
          | "trololo"
          | "trombone"
          | "unix"
          | "vuvuzela"
          | "what"
          | "whoomp"
          | "yeah"
          | "yodel";
        [k: string]: any;
      };
      /**
       * This module manage affinity labels in oVirt/RHV. It can also manage assignments of those labels to hosts and VMs.
       */
      ovirt_affinity_label?: {
        /**
         * Name of the affinity label to manage.
         */
        name: string;
        poll_interval?: number | string;
        /**
         * Default: present
         *
         * Should the affinity label be present or absent.
         */
        state?: "present" | "absent";
        nested_attributes?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Name of the cluster where vms and hosts resides.
         */
        cluster?: string;
        fetch_nested?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * List of the hosts names, which should have assigned this affinity label.
         */
        hosts?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        auth: {
          [k: string]: any;
        };
        timeout?: number | string;
        /**
         * List of the VMs names, which should have assigned this affinity label.
         */
        vms?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Copy a file to the flash (or bootflash) remote network device on NXOS devices.
       */
      nxos_file_copy?: {
        /**
         * Remote file path of the copy. Remote directories must exist. If omitted, the name of the local file will be used.
         */
        remote_file?: string;
        /**
         * Path to local file. Local directory must exist.
         */
        local_file?: string;
        /**
         * The remote file system of the device. If omitted, devices that support a file_system parameter will use their default values.
         */
        file_system?: string;
        [k: string]: any;
      };
      /**
       * Add or Remove rule from an existing security group
       */
      os_security_group_rule?: {
        /**
         * Default: ingress
         *
         * The direction in which the security group rule is applied. Not all providers support egress.
         */
        direction?: string;
        /**
         * Default: None
         *
         * IP protocols TCP UDP ICMP 112 (VRRP)
         */
        protocol?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        /**
         * Source IP address(es) in CIDR notation (exclusive with remote_group)
         */
        remote_ip_prefix?: string;
        /**
         * Default: None
         *
         * Ending port
         */
        port_range_max?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Default: None
         *
         * Starting port
         */
        port_range_min?: string;
        /**
         * Default: IPv4
         *
         * Must be IPv4 or IPv6, and addresses represented in CIDR must match the ingress or egress rules. Not all providers support IPv6.
         */
        ethertype?: string;
        /**
         * Name or ID of the security group
         */
        security_group?: string;
        /**
         * Name or ID of the Security group to link (exclusive with remote_ip_prefix)
         */
        remote_group?: string;
        [k: string]: any;
      };
      /**
       * Get facts for one storage account or all storage accounts within a resource group.
       */
      azure_rm_storageaccount_facts?: {
        [k: string]: any;
      };
      /**
       * Enable, disable, and set weights for HAProxy backend servers using socket commands.
       */
      haproxy?: {
        /**
         * Default: /var/run/haproxy.sock
         *
         * Path to the HAProxy socket file.
         */
        socket?: string;
        /**
         * The value passed in argument. If the value ends with the `%` sign, then the new weight will be relative to the initially configured weight. Relative weights are only permitted between 0 and 100% and absolute weights are permitted between 0 and 256.
         */
        weight?: string;
        /**
         * Default: 5
         *
         * Number of seconds to wait between retries.
         */
        wait_interval?: number | string;
        /**
         * Desired state of the provided backend host.
         */
        state: "enabled" | "disabled";
        /**
         * Default: auto-detected
         *
         * Name of the HAProxy backend pool.
         */
        backend?: string;
        /**
         * Default: 25
         *
         * Number of times to check for status after changing the state.
         */
        wait_retries?: number | string;
        /**
         * Name of the backend host to change.
         */
        host: string;
        /**
         * Fail whenever trying to enable/disable a backend host that does not exist
         */
        fail_on_not_found?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * When disabling a server, immediately terminate all the sessions attached to the specified server. This can be used to terminate long-running sessions after a server is put into maintenance mode.
         */
        shutdown_sessions?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Wait until the server reports a status of 'UP' when `state=enabled`, or status of 'MAINT' when `state=disabled`.
         */
        wait?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * This module offers the ability to set a configuration checkpoint file or rollback to a configuration checkpoint file on Cisco NXOS switches.
       */
      nxos_rollback?: {
        /**
         * Name of checkpoint file to create. Mutually exclusive with rollback_to.
         */
        checkpoint_file?: string;
        username?: string;
        ssh_keyfile?: string;
        config?: string;
        /**
         * Name of checkpoint file to rollback to. Mutually exclusive with checkpoint_file.
         */
        rollback_to?: string;
        save?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        include_defaults?: string;
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * This module fetches data from the metadata API in CloudStack. The module must be called from within the instance itself.
       */
      cs_facts?: {
        /**
         * Filter for a specific fact.
         */
        filter?:
          | "cloudstack_service_offering"
          | "cloudstack_availability_zone"
          | "cloudstack_public_hostname"
          | "cloudstack_public_ipv4"
          | "cloudstack_local_hostname"
          | "cloudstack_local_ipv4"
          | "cloudstack_instance_id"
          | "cloudstack_user_data";
        [k: string]: any;
      };
      /**
       * This module fetches data from the instance metadata endpoint in ec2 as per http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html. The module must be called from within the EC2 instance itself.
       */
      ec2_metadata_facts?: {
        [k: string]: any;
      };
      /**
       * Manage an AWS Application Elastic Load Balancer. See U(https://aws.amazon.com/blogs/aws/new-aws-application-load-balancer/) for details.
       */
      elb_application_lb?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Create or Destroy a Backend Service.  See U(https://cloud.google.com/compute/docs/load-balancing/http/backend-service) for an overview. Full install/configuration instructions for the Google Cloud modules can be found in the comments of ansible/test/gce_tests.py.
       */
      gcp_backend_service?: {
        /**
         * The protocol this Backend Service uses to communicate with backends. Possible values are HTTP, HTTPS, TCP, and SSL. The default is HTTP.
         */
        protocol?: "HTTP" | "HTTPS" | "SSL" | "TCP";
        /**
         * If true, enable Cloud CDN for this Backend Service.
         */
        enable_cdn?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Service account email
         */
        service_account_email?: string;
        service_account_permissions?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        pem_file?: string;
        /**
         * Default: present
         *
         * Desired state of the resource
         */
        state?: "absent" | "present";
        /**
         * List of backends that make up the backend service. A backend is made up of an instance group and optionally several other parameters.  See U(https://cloud.google.com/compute/docs/reference/latest/backendServices) for details.
         */
        backends:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Name of the port on the managed instance group (MIG) that backend services can forward data to. Required for external load balancing.
         */
        port_name?: string;
        /**
         * How many seconds to wait for the backend before considering it a failed request. Default is 30 seconds. Valid range is 1-86400.
         */
        timeout?: number | string;
        /**
         * Path to the JSON file associated with the service account email.
         */
        credentials_file?: string;
        /**
         * List of healthchecks. Only one healthcheck is supported.
         */
        healthchecks:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Name of the Backend Service.
         */
        backend_service_name: string;
        /**
         * GCE project ID.
         */
        project_id?: string;
        [k: string]: any;
      };
      /**
       * Write log entries to a given event log from a specified source.
       */
      win_eventlog_entry?: {
        /**
         * A numeric task category associated with the category message file for the log source.
         */
        category?: string;
        /**
         * Name of the event log to write an entry to.
         */
        log?: string;
        /**
         * The numeric event identifier for the entry.
         * Value must be between 0 and 65535.
         */
        event_id?: string;
        /**
         * Indicates the entry being written to the log is of a specific type.
         */
        entry_type?: string;
        /**
         * Name of the log source to indicate where the entry is from.
         */
        source?: string;
        /**
         * Binary data associated with the log entry.
         * Value must be a comma-separated array of 8-bit unsigned integers (0 to 255).
         */
        raw_data?: string;
        /**
         * The message for the given log entry.
         */
        message?: string;
        [k: string]: any;
      };
      /**
       * Attach or Detach volumes from OpenStack VM's
       */
      os_server_volume?: {
        /**
         * Name or id of volume you want to attach to a server
         */
        volume?: string;
        /**
         * Default: None
         *
         * Device you want to attach. Defaults to auto finding a device name.
         */
        device?: string;
        /**
         * Default: present
         *
         * Should the resource be present or absent.
         */
        state?: string;
        /**
         * Ignored. Present for backwards compatibility
         */
        availability_zone?: string;
        /**
         * Name or ID of server you want to attach a volume to
         */
        server?: string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of Interfaces on network devices.
       */
      net_interface?: {
        /**
         * Default: 10
         *
         * Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state argument which are I(state) with values C(up)/C(down), I(tx_rate) and I(rx_rate).
         */
        delay?: string;
        /**
         * Name of the Interface.
         */
        name?: string;
        /**
         * Default: auto
         *
         * Interface link status
         */
        duplex?: string;
        /**
         * Configure interface link status.
         */
        enabled?: string;
        /**
         * Maximum size of transmit packet.
         */
        mtu?: string;
        /**
         * Receiver rate in bits per second (bps).
         */
        rx_rate?: string;
        /**
         * Purge Interfaces not defined in the aggregate parameter. This applies only for logical interface.
         */
        purge?: string;
        /**
         * Default: present
         *
         * State of the Interface configuration, C(up) indicates present and operationally up and C(down) indicates present and operationally C(down)
         */
        state?: string;
        /**
         * List of Interfaces definitions.
         */
        aggregate?: string;
        /**
         * Interface link speed.
         */
        speed?: string;
        /**
         * Transmit rate in bits per second (bps).
         */
        tx_rate?: string;
        /**
         * Description of Interface.
         */
        description?: string;
        [k: string]: any;
      };
      /**
       * Creates or terminates ecs services.
       */
      ecs_service?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Waits for a total of C(timeout) seconds.
       * Retries the transport connection after a timeout of C(connect_timeout).
       * Tests the transport connection every C(sleep) seconds.
       * This module makes use of internal ansible transport (and configuration) and the ping/win_ping module to guarantee correct end-to-end functioning.
       * This module is also supported for Windows targets.
       */
      wait_for_connection?: {
        /**
         * Default: 600
         *
         * Maximum number of seconds to wait for.
         */
        timeout?: number | string;
        ipv6?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        debug?: number | string;
        password: string;
        minutes?: number | string;
        port?: number | string;
        multi_key?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Return a list of files based on specified criteria.
       * Multiple criteria are AND'd together.
       * For non-Windows targets, use the M(find) module instead.
       */
      win_find?: {
        /**
         * List of paths of directories to search for files or folders in. This can be supplied as a single path or a list of paths.
         */
        paths?: string;
        /**
         * Default: file
         *
         * Type of file to search for.
         */
        file_type?: string;
        /**
         * Default: sha1
         *
         * Algorithm to determine the checksum of a file. Will throw an error if the host is unable to use specified algorithm.
         */
        checksum_algorithm?: string;
        /**
         * Select files or folders whose age is equal to or greater than the specified time. Use a negative age to find files equal to or less than the specified time. You can choose seconds, minutes, hours, days or weeks by specifying the first letter of an of those words (e.g., "2s", "10d", 1w").
         */
        age?: string;
        /**
         * Default: no
         *
         * Will recursively descend into the directory looking for files or folders.
         */
        recurse?: string;
        /**
         * Default: mtime
         *
         * Choose the file property against which we compare C(age). The default attribute we compare with is the last modification time.
         */
        age_stamp?: string;
        /**
         * One or more (powershell or regex) patterns to compare filenames with. The type of pattern matching is controlled by C(use_regex) option. The patterns retrict the list of files or folders to be returned based on the filenames. For a file to be matched it only has to match with one pattern in a list provided.
         */
        patterns?: string;
        /**
         * Default: yes
         *
         * Whether to return a checksum of the file in the return info (default sha1), use C(checksum_algorithm) to change from the default.
         */
        get_checksum?: string;
        /**
         * Default: no
         *
         * Will set patterns to run as a regex check if true.
         */
        use_regex?: string;
        /**
         * Default: no
         *
         * Set this to true to follow symlinks in the path. This needs to be used in conjunction with C(recurse).
         */
        follow?: string;
        /**
         * Default: no
         *
         * Set this to include hidden files or folders.
         */
        hidden?: string;
        /**
         * Select files or folders whose size is equal to or greater than the specified size. Use a negative value to find files equal to or less than the specified size. You can specify the size with a suffix of the byte type i.e. kilo = k, mega = m... Size is not evaluated for symbolic links.
         */
        size?: string;
        [k: string]: any;
      };
      /**
       * Add and delete vCenter license keys.
       */
      vcenter_license?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Collects facts from Cisco Nexus devices running the NX-OS operating system.  Fact collection is supported over both Cli and Nxapi transports.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.
       */
      nxos_facts?: {
        username?: string;
        ssh_keyfile?: string;
        host?: string;
        /**
         * Default: !config
         *
         * When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, hardware, config, legacy, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(M(!)) to specify that a specific subset should not be collected.
         */
        gather_subset?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        use_ssl?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        password?: string;
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        port?: number | string;
        transport?: "cli" | "nxapi";
        [k: string]: any;
      };
      /**
       * Create/delete/reconfigure a guest VM through VMware vSphere. This module has a dependency on pysphere >= 1.7
       */
      vsphere_guest?: {
        /**
         * Default: None
         *
         * The name of the resource_pool to create the VM in.
         */
        resource_pool?: string;
        /**
         * Desired hardware version identifier (for example, "vmx-08" for vms that needs to be managed with vSphere Client). Note that changing hardware version of existing vm is not supported.
         */
        vm_hw_version?: string;
        /**
         * The hostname of the vcenter server the module will connect to, to create the guest.
         */
        vcenter_hostname?: string;
        /**
         * Default: no
         *
         * Boolean. Allows you to run commands which may alter the running state of a guest. Also used to reconfigure and destroy.
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The virtual server name you wish to manage.
         */
        guest: string;
        /**
         * A key, value list of disks and their sizes and which datastore to keep it in.
         */
        vm_disk?: {
          [k: string]: any;
        };
        /**
         * Dictionary which includes datacenter and hostname on which the VM should be created. For standalone ESXi hosts, ha-datacenter should be used as the datacenter name
         */
        esxi?: {
          [k: string]: any;
        };
        /**
         * A key, value list of nics, their types and what network to put them on.
         */
        vm_nic?: {
          [k: string]: any;
        };
        /**
         * A key, value list of VM config settings. Must include ['memory_mb', 'num_cpus', 'osid', 'scsi'].
         */
        vm_hardware?: {
          [k: string]: any;
        };
        /**
         * Specifies if the VM should be deployed from a template (mutually exclusive with 'state' parameter). No guest customization changes to hardware such as CPU, RAM, NICs or Disks can be applied when launching from template.
         */
        from_template?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Username to connect to vcenter as.
         */
        username?: string;
        /**
         * Default: None
         *
         * The name of the cluster to create the VM in. By default this is derived from the host you tell the module to build the guest on.
         */
        cluster?: string;
        /**
         * Default: present
         *
         * Indicate desired state of the vm. 'reconfigured' only applies changes to 'vm_cdrom', 'memory_mb', and 'num_cpus' in vm_hardware parameter. The 'memory_mb' and 'num_cpus' changes are applied to powered-on vms when hot-plugging is enabled for the guest.
         */
        state?: "present" | "powered_off" | "absent" | "powered_on" | "restarted" | "reconfigured";
        /**
         * Gather facts from vCenter on a particular VM
         */
        vmware_guest_facts?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A key, value pair of any extra values you want set or changed in the vmx file of the VM. Useful to set advanced options on the VM.
         */
        vm_extra_config?: {
          [k: string]: any;
        };
        /**
         * Default: True
         *
         * Specifies if the VM should be powered on after the clone.
         */
        power_on_after_clone?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Password of the user to connect to vcenter as.
         */
        password?: string;
        /**
         * Default: True
         *
         * Validate SSL certs.  Note, if running on python without SSLContext support (typically, python < 2.7.9) you will have to set this to C(no) as pysphere does not support validating certificates on older python. Prior to 2.1, this module would always validate on python >= 2.7.9 and never validate on python <= 2.7.8.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * Name of the source template to deploy from
         */
        template_src?: string;
        /**
         * Default: none
         *
         * A string that when specified, will create a linked clone copy of the VM. Snapshot must already be taken in vCenter.
         */
        snapshot_to_clone?: string;
        [k: string]: any;
      };
      /**
       * Unzips compressed files and archives. For extracting any compression types other than .zip, the PowerShellCommunityExtensions (PSCX) Module is required.  This module (in conjunction with PSCX) has the ability to recursively unzip files within the src zip file provided and also functionality for many other compression types. If the destination directory does not exist, it will be created before unzipping the file.  Specifying rm parameter will force removal of the src file after extraction.
       */
      win_unzip?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Manipulate SNMP trap information on a BIG-IP.
       */
      bigip_snmp_trap?: {
        /**
         * Specifies to which Simple Network Management Protocol (SNMP) version the trap destination applies.
         */
        snmp_version?: string;
        /**
         * Specifies the name of the trap network. This option is not supported in versions of BIG-IP < 12.1.0. If used on versions < 12.1.0, it will simply be ignored.
         */
        network?: string;
        /**
         * Specifies the address for the trap destination. This can be either an IP address or a hostname.
         */
        destination?: string;
        /**
         * Specifies the community name for the trap destination.
         */
        community?: string;
        /**
         * Default: present
         *
         * When C(present), ensures that the cloud connector exists. When C(absent), ensures that the cloud connector does not exist.
         */
        state?: string;
        /**
         * Specifies the port for the trap destination.
         */
        port?: string;
        /**
         * Name of the SNMP configuration endpoint.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Runs getent against one of it's various databases and returns information into the host's facts, in a getent_<database> prefixed variable
       */
      getent?: {
        /**
         * Default: True
         *
         * If a supplied key is missing this will make the task fail if True
         */
        fail_key?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: None
         *
         * character used to split the database values into lists/arrays such as ':' or '	', otherwise  it will try to pick one depending on the database
         */
        split?: string;
        /**
         * key from which to return values from the specified database, otherwise the full contents are returned.
         */
        key?: string;
        /**
         * the name of a getent database supported by the target system (passwd, group, hosts, etc).
         */
        database: string;
        [k: string]: any;
      };
      /**
       * This module will actively managed vCloud Air vApp instances.  Instances can be created and deleted as well as both deployed and undeployed.
       */
      vca_vapp?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Manages Mercurial (hg) repositories. Supports SSH, HTTP/S and local address.
       */
      hg?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) & {
        [k: string]: any;
      };
      /**
       * Installs or uninstalls a package.
       * Optionally uses a product_id to check if the package needs installing. You can find product ids for installed programs in the windows registry either in C(HKLM:Software\Microsoft\Windows\CurrentVersion\Uninstall) or for 32 bit programs C(HKLM:Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall)
       */
      win_package?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Add and remove nic to and from network
       */
      cs_instance_nic?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * This module creates, removes or resizes volume groups.
       */
      lvg?: {
        /**
         * Additional options to pass to C(vgcreate) when creating the volume group.
         */
        vg_options?: string;
        /**
         * List of comma-separated devices to use as physical devices in this volume group. Required when creating or resizing volume group.
         * The module will take care of running pvcreate if needed.
         */
        pvs?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: no
         *
         * If yes, allows to remove volume group with logical volumes.
         */
        force?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The name of the volume group.
         */
        vg: string;
        /**
         * Default: present
         *
         * Control if the volume group exists.
         */
        state?: "present" | "absent";
        /**
         * Default: 4
         *
         * The size of the physical extent in megabytes. Must be a power of 2.
         */
        pesize?: number | string;
        [k: string]: any;
      };
      /**
       * This module provides declarative management of the local usernames configured on network devices. It allows playbooks to manage either individual usernames or the aggregate of usernames in the current running config. It also supports purging usernames from the configuration that are not explicitly defined.
       */
      ios_user?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage an AWS Application Elastic Load Balancer target group. See U(http://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html) for details.
       */
      elb_target_group?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Retrieve facts about one or more oVirt/RHV virtual machine network interfaces.
       */
      ovirt_nics_facts?: {
        /**
         * Name of the VM where NIC is attached.
         */
        vm?: string;
        /**
         * Name of the NIC, can be used as glob expression.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Collects a base set of device facts from a remote device that is running IOS.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.
       */
      ios_facts?: {
        username?: string;
        authorize?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        ssh_keyfile?: string;
        auth_pass?: string;
        host?: string;
        /**
         * Default: !config
         *
         * When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, hardware, config, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(M(!)) to specify that a specific subset should not be collected.
         */
        gather_subset?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        password?: string;
        port?: number | string;
        [k: string]: any;
      };
      /**
       * Manage Python library dependencies. To use this module, one of the following keys is required: C(name) or C(requirements).
       */
      pip?: {
        /**
         * An optional path to a I(virtualenv) directory to install into. It cannot be specified together with the 'executable' parameter (added in 2.1). If the virtualenv does not exist, it will be created before installing packages. The optional virtualenv_site_packages, virtualenv_command, and virtualenv_python options affect the creation of the virtualenv.
         */
        virtualenv?: string;
        /**
         * Default: no
         *
         * Whether the virtual environment will inherit packages from the global site-packages directory.  Note that if this setting is changed on an already existing virtual environment it will not have any effect, the environment must be deleted and newly created.
         */
        virtualenv_site_packages?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The explicit executable or a pathname to the executable to be used to run pip for a specific version of Python installed in the system. For example C(pip-3.3), if there are both Python 2.7 and 3.3 installations in the system and you want to run pip for the Python 3.3 installation. It cannot be specified together with the 'virtualenv' parameter (added in 2.1). By default, it will take the appropriate version for the python interpreter use by ansible, e.g. pip3 on python 3, and pip2 or pip on python 2.
         */
        executable?: string;
        /**
         * cd into this directory before running the command
         */
        chdir?: string;
        /**
         * The path to a pip requirements file, which should be local to the remote system. File can be specified as a relative path if using the chdir option.
         */
        requirements?: string;
        /**
         * The name of a Python library to install or the url of the remote package.
         * As of 2.2 you can supply a list of names.
         */
        name?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * The Python executable used for creating the virtual environment. For example C(python3.5), C(python2.7). When not specified, the Python version used to run the ansible module is used. This parameter should not be used when C(virtualenv_command) is using C(pyvenv) or the C(-m venv) module.
         */
        virtualenv_python?: string;
        /**
         * The system umask to apply before installing the pip package. This is useful, for example, when installing on systems that have a very restrictive umask by default (e.g., 0077) and you want to pip install packages which are to be used by all users. Note that this requires you to specify desired umask mode in octal, with a leading 0 (e.g., 0077).
         */
        umask?: string;
        /**
         * Pass the editable flag.
         */
        editable?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Default: virtualenv
         *
         * The command or a pathname to the command to create the virtual environment with. For example C(pyvenv), C(virtualenv), C(virtualenv2), C(~/bin/virtualenv), C(/usr/local/bin/virtualenv).
         */
        virtualenv_command?: string;
        use_mirrors?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Extra arguments passed to pip.
         */
        extra_args?: string;
        /**
         * Default: present
         *
         * The state of module
         * The 'forcereinstall' option is only available in Ansible 2.1 and above.
         */
        state?: "present" | "absent" | "latest" | "forcereinstall";
        /**
         * The version number to install of the Python library specified in the I(name) parameter
         */
        version?: string;
        [k: string]: any;
      };
      /**
       * Retrieve facts about one or more oVirt/RHV users.
       */
      ovirt_users_facts?: {
        /**
         * Search term which is accepted by oVirt/RHV search backend.
         * For example to search user X use following pattern: name=X
         */
        pattern?: string;
        [k: string]: any;
      };
      /**
       * Set the initial port attribute defined in the Cumulus Linux ports.conf, file. This module does not do any error checking at the moment. Be careful to not include ports that do not exist on the switch. Carefully read the original ports.conf file for any exceptions or limitations. For more details go the Configure Switch Port Attribute Documentation at U(http://docs.cumulusnetworks.com).
       */
      cl_ports?: {
        /**
         * List of 40G ports that will be unganged to run as 4 10G ports.
         */
        speed_4_by_10g?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * List of ports to run initial run at 10G.
         */
        speed_10g?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * List of ports to run initial run at 40G.
         */
        speed_40g?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * List of 10G ports that will be ganged to form a 40G port.
         */
        speed_40g_div_4?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        [k: string]: any;
      };
      /**
       * Read the AWS documentation for Network ACLS U(http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html)
       */
      ec2_vpc_nacl?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * This module provides declarative management of node system attributes on Juniper JUNOS devices.  It provides an option to configure host system parameters or remove those parameters from the device active configuration.
       */
      junos_system?: {
        username?: string;
        ssh_keyfile?: string;
        /**
         * Default: present
         *
         * State of the configuration values in the device's current active configuration.  When set to I(present), the values should be configured in the device active configuration and when set to I(absent) the values should not be in the device active configuration
         */
        state?: "present" | "absent";
        /**
         * Provides the list of domain suffixes to append to the hostname for the purpose of doing name resolution. This argument accepts a list of names and will be reconciled with the current active configuration on the running node.
         */
        domain_search?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Configure the device hostname parameter. This option takes an ASCII string value.
         */
        hostname?: string;
        /**
         * Configure the IP domain name on the remote device to the provided value. Value should be in the dotted name form and will be appended to the C(hostname) to create a fully-qualified domain name.
         */
        domain_name?: string;
        /**
         * Default: True
         *
         * Specifies whether or not the configuration is active or deactivated
         */
        active?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        host?: string;
        timeout?: number | string;
        provider?: {
          [k: string]: any;
        };
        /**
         * List of DNS name servers by IP address to use to perform name resolution lookups.  This argument accepts either a list of DNS servers See examples.
         */
        name_servers?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        password?: string;
        port?: number | string;
        transport?: string;
        [k: string]: any;
      };
      /**
       * Create and remove Docker secrets in a Swarm environment. Similar to `docker secret create` and `docker secret rm`.
       * Adds to the metadata of new secrets 'ansible_key', an encrypted hash representation of the data, which is then used
       * in future runs to test if a secret has changed.
       * If 'ansible_key is not present, then a secret will not be updated unless the C(force) option is set.
       * Updates to secrets are performed by removing the secret and creating it again.
       */
      docker_secret?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Control Linux encrypted block devices that are set up during system boot in C(/etc/crypttab).
       */
      crypttab?: {
        /**
         * Name of the encrypted block device as it appears in the C(/etc/crypttab) file, or optionaly prefixed with C(/dev/mapper/), as it appears in the filesystem. I(/dev/mapper/) will be stripped from I(name).
         */
        name: string;
        /**
         * Path to the underlying block device or file, or the UUID of a block-device prefixed with I(UUID=)
         */
        backing_device?: string;
        /**
         * Use I(present) to add a line to C(/etc/crypttab) or update it's definition if already present. Use I(absent) to remove a line with matching I(name). Use I(opts_present) to add options to those already present; options with different values will be updated. Use I(opts_absent) to remove options from the existing set.
         */
        state: "present" | "absent" | "opts_present" | "opts_absent";
        /**
         * Default: /etc/crypttab
         *
         * Path to file to use instead of C(/etc/crypttab). This might be useful in a chroot environment.
         */
        path?: string;
        /**
         * Default: none
         *
         * Encryption password, the path to a file containing the pasword, or 'none' or '-' if the password should be entered at boot.
         */
        password?: string;
        /**
         * A comma-delimited list of options. See C(crypttab(5) ) for details.
         */
        opts?: string;
        [k: string]: any;
      };
      /**
       * This module can be used to join nodes to a cluster, check the status of the cluster.
       */
      riak?: {
        /**
         * Default: riak@127.0.0.1
         *
         * The target node for certain operations (join, ping)
         */
        target_node?: string;
        /**
         * Default: /etc/riak
         *
         * The path to the riak configuration directory
         */
        config_dir?: string;
        /**
         * Default: None
         *
         * Waits for a riak service to come online before continuing.
         */
        wait_for_service?: "kv";
        /**
         * Default: 127.0.0.1:8098
         *
         * The ip address and port that is listening for Riak HTTP queries
         */
        http_conn?: string;
        /**
         * Number of seconds to wait for all nodes to agree on the ring.
         */
        wait_for_ring?: number | string;
        /**
         * Number of seconds to wait for handoffs to complete.
         */
        wait_for_handoffs?: number | string;
        /**
         * The command you would like to perform against the cluster.
         */
        command?: "ping" | "kv_test" | "join" | "plan" | "commit";
        /**
         * Default: yes
         *
         * If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        [k: string]: any;
      };
      /**
       * Retrieves facts for a file similar to the linux/unix 'stat' command.
       * For Windows targets, use the M(win_stat) module instead.
       */
      stat?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manage local users on an ESXi host
       */
      vmware_local_user_manager?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * This module can manage Kubernetes resources on an existing cluster using the Kubernetes server API. Users can specify in-line API data, or specify an existing Kubernetes YAML file. Currently, this module, Only supports HTTP Basic Auth Only supports 'strategic merge' for update, http://goo.gl/fCPYxT SSL certs are not working, use 'validate_certs=off' to disable
       */
      kubernetes?: {
        [k: string]: any;
      } & {
        [k: string]: any;
      };
      /**
       * Manages F5 BIG-IP LTM tcp monitors via iControl SOAP API.
       */
      bigip_monitor_tcp_echo?: {
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          });
      /**
       * Execute trunk-create or trunk-delete command.
       * Trunks can be used to aggregate network links at Layer 2 on the local switch. Use this command to create a new trunk.
       */
      pn_trunk?: {
        /**
         * Specify the name for the trunk configuration.
         */
        pn_name: string;
        /**
         * Specify the LACP fallback timeout in seconds. The range is between 30 and 60 seconds with a default value of 50 seconds.
         */
        pn_lacp_fallback_timeout?: string;
        /**
         * Specify the LACP time out as slow (30 seconds) or fast (4seconds). The default value is slow.
         */
        pn_lacp_timeout?: string;
        /**
         * Host facing port control setting.
         */
        pn_host?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify the MAC address of the port.
         */
        pn_port_macaddr?: string;
        /**
         * Specify the LACP fallback mode as bundles or individual.
         */
        pn_lacp_fallback?: "bundle" | "individual";
        /**
         * Specify if the port participates in routing on the network.
         */
        pn_routing?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify if the configuration receives mirrored traffic.
         */
        pn_mirror_receive?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify an egress port data rate limit for the configuration.
         */
        pn_egress_rate_limit?: string;
        /**
         * State the action to perform. Use 'present' to create trunk, 'absent' to delete trunk and 'update' to modify trunk.
         */
        state: "present" | "absent" | "update";
        /**
         * Specify a broadcast level in percent. The default value is 100%.
         */
        pn_broadcast_level?: string;
        /**
         * Target switch(es) to run the cli on.
         */
        pn_cliswitch?: string;
        /**
         * Specify an unknown multicast level in percent. The default value is 100%.
         */
        pn_unknown_mcast_level?: string;
        /**
         * Specify an unknown unicast level in percent. The default value is 100%.
         */
        pn_unknown_ucast_level?: string;
        /**
         * Specify loopback if you want to use loopback.
         */
        pn_loopback?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify the port speed or disable the port.
         */
        pn_speed?: "disable" | "10m" | "100m" | "1g" | "2.5g" | "10g" | "40g";
        /**
         * Specify if the switch is an edge switch.
         */
        pn_edge_switch?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify if the port can receive jumbo frames.
         */
        pn_jumbo?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Provide login password if user is not root.
         */
        pn_clipassword?: string;
        /**
         * Specify the port number(s) for the link(s) to aggregate into the trunk.
         * Required for trunk-create.
         */
        pn_ports?: string;
        /**
         * Provide login username if user is not root.
         */
        pn_cliusername?: string;
        /**
         * Specify the LACP mode for the configuration.
         */
        pn_lacp_mode?: "off" | "passive" | "active";
        /**
         * Specify a list of looping vlans.
         */
        pn_loopvlans?: string;
        /**
         * Specify the LACP priority. This is a number between 1 and 65535 with a default value of 32768.
         */
        pn_lacp_priority?: number | string;
        /**
         * Specify if pause frames are sent.
         */
        pn_pause?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * Specify a description for the trunk configuration.
         */
        pn_description?: string;
        [k: string]: any;
      };
      /**
       * Modify IP address properties on Solaris/illumos systems.
       */
      ipadm_addrprop?: ({
        [k: string]: any;
      } & (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          }
      )) &
        ({
          [k: string]: any;
        } & (
          | {
              [k: string]: any;
            }
          | {
              [k: string]: any;
            }
        ));
      /**
       * Retrieve the facts about one or more of the Ethernet Networks from OneView.
       */
      oneview_ethernet_network_facts?: {
        username?: string;
        image_streamer_hostname?: string;
        /**
         * Ethernet Network name.
         */
        name?: string;
        hostname?: string;
        params?: {
          [k: string]: any;
        };
        password?: string;
        config?: string;
        /**
         * List with options to gather additional facts about an Ethernet Network and related resources. Options allowed: C(associatedProfiles) and C(associatedUplinkGroups).
         */
        options?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        api_version?: number | string;
        [k: string]: any;
      };
      /**
       * Create/delete DigitalOcean SSH keys.
       */
      digital_ocean_sshkey?: {
        [k: string]: any;
      };
      /**
       * Allows for the creation and removal of volume to host mappings for NetApp E-series storage arrays.
       */
      netapp_e_lun_mapping?: {
        /**
         * The storage system array identifier.
         */
        ssid?: string;
        /**
         * The name of host or hostgroup you wish to assign to the mapping
         * If omitted, the default hostgroup is used.
         * If the supplied I(volume_name) is associated with a different target, it will be updated to what is supplied here.
         */
        target?: string;
        /**
         * The username used to authenticate against the API. This can optionally be set via an environment variable, API_USERNAME
         */
        api_username: string;
        /**
         * The password used to authenticate against the API. This can optionally be set via an environment variable, API_PASSWORD
         */
        api_password: string;
        /**
         * Whether the target is a host or group.
         * Required if supplying an explicit target.
         */
        target_type?: "host" | "group";
        /**
         * Present will ensure the mapping exists, absent will remove the mapping.
         * All parameters I(lun), I(target), I(target_type) and I(volume_name) must still be supplied.
         */
        state: "present" | "absent";
        /**
         * The name of the volume you wish to include in the mapping.
         */
        volume_name: string;
        /**
         * Default: True
         *
         * Should https certificates be validated?
         */
        validate_certs?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The LUN number you wish to give the mapping
         * If the supplied I(volume_name) is associated with a different LUN, it will be updated to what is supplied here.
         */
        lun?: number | string;
        /**
         * The full API url. Example: http://ENDPOINT:8080/devmgr/v2
         * This can optionally be set via an environment variable, API_URL
         */
        api_url: string;
        [k: string]: any;
      };
      /**
       * Manages monitors within Datadog
       * Options like described on http://docs.datadoghq.com/api/
       */
      datadog_monitor?: {
        /**
         * A boolean indicating whether tagged users will be notified on changes to this monitor.
         */
        notify_audit?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * A boolean indicating whether changes to this monitor should be restricted to the creator or admins.
         */
        locked?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The number of hours of the monitor not reporting data before it will automatically resolve from a triggered state.
         */
        timeout_h?: string;
        /**
         * Default: None
         *
         * A list of tags to associate with your monitor when creating or updating. This can help you categorize and filter monitors.
         */
        tags?:
          | string
          | any[]
          | {
              [k: string]: any;
            };
        /**
         * Default: {'warning': 1, 'ok': 1, 'critical': 1}
         *
         * A dictionary of thresholds by status. This option is only available for service checks and metric alerts. Because each of them can have multiple thresholds, we don't define them directly in the query.
         */
        thresholds?: {
          [k: string]: any;
        };
        /**
         * Dictionary of scopes to timestamps or None. Each scope will be muted until the given POSIX timestamp or forever if the value is None.
         */
        silenced?: {
          [k: string]: any;
        };
        /**
         * Your DataDog app key.
         */
        app_key: string;
        /**
         * A boolean indicating whether this monitor will notify when data stops reporting..
         */
        notify_no_data?:
          | boolean
          | (0 | 1)
          | (
              | "yes"
              | "no"
              | "Yes"
              | "No"
              | "YES"
              | "NO"
              | "on"
              | "off"
              | "On"
              | "Off"
              | "ON"
              | "OFF"
              | "1"
              | "0"
              | "true"
              | "false"
              | "True"
              | "FalseTRUE"
              | "FALSE");
        /**
         * The number of minutes after the last notification before a monitor will re-notify on the current status. It will only re-notify if it's not resolved.
         */
        renotify_interval?: string;
        /**
         * The designated state of the monitor.
         */
        state: string;
        /**
         * A message to include with a re-notification. Supports the '@username' notification we allow elsewhere. Not applicable if renotify_interval is None
         */
        escalation_message?: string;
        /**
         * The monitor query to notify on with syntax varying depending on what type of monitor you are creating.
         */
        query?: string;
        /**
         * A message to include with notifications for this monitor. Email notifications can be sent to specific users by using the same '@username' notation as events. Monitor message template variables can be accessed by using double square brackets, i.e '[[' and ']]'.
         */
        message?: string;
        /**
         * Your DataDog API key.
         */
        api_key: string;
        /**
         * The type of the monitor.
         * The 'event alert'is available starting at Ansible 2.1
         */
        type?: string;
        /**
         * Default: 2x timeframe for metric, 2 minutes for service
         *
         * The number of minutes before a monitor will notify when data stops reporting. Must be at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
         */
        no_data_timeframe?: string;
        /**
         * The name of the alert.
         */
        name: string;
        [k: string]: any;
      };
      [k: string]: any;
    })[];

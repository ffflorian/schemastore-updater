/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type FConsumer = {
  [k: string]: unknown | undefined;
} & {
  acls?: ACLGroup[];
  basicauth_credentials?: BasicAuth[];
  created_at?: number;
  custom_id?: string;
  hmacauth_credentials?: HMACAuth[];
  id?: string;
  jwt_secrets?: JWTAuth[];
  keyauth_credentials?: KeyAuth[];
  mtls_auth_credentials?: MTLSAuth[];
  oauth2_credentials?: Oauth2Credential[];
  plugins?: FPlugin[];
  tags?: string[];
  username?: string;
};
export type FRoute = FRoute1 & {
  created_at?: number;
  destinations?: CIDRPort[];
  headers?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: string[];
  };
  hosts?: string[];
  https_redirect_status_code?: number;
  id?: string;
  methods?: string[];
  name?: string;
  path_handling?: string;
  paths?: string[];
  plugins?: FPlugin1[];
  preserve_host?: boolean;
  protocols?: string[];
  regex_priority?: number;
  request_buffering?: boolean;
  response_buffering?: boolean;
  service?: Service;
  snis?: string[];
  sources?: CIDRPort[];
  strip_path?: boolean;
  tags?: string[];
  updated_at?: number;
};
export type FRoute1 = {
  [k: string]: unknown | undefined;
};
export type FService = FService1 & {
  ca_certificates?: string[];
  client_certificate?: string;
  connect_timeout?: number;
  created_at?: number;
  enabled?: boolean;
  host?: string;
  id?: string;
  name?: string;
  path?: string;
  plugins?: FPlugin[];
  port?: number;
  protocol?: string;
  read_timeout?: number;
  retries?: number;
  routes?: FRoute2[];
  tags?: string[];
  tls_verify?: boolean;
  tls_verify_depth?: number;
  updated_at?: number;
  url?: string;
  write_timeout?: number;
};
export type FService1 = {
  [k: string]: unknown | undefined;
};
export type FRoute2 = {
  [k: string]: unknown | undefined;
} & {
  created_at?: number;
  destinations?: CIDRPort[];
  headers?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: string[];
  };
  hosts?: string[];
  https_redirect_status_code?: number;
  id?: string;
  methods?: string[];
  name?: string;
  path_handling?: string;
  paths?: string[];
  plugins?: FPlugin1[];
  preserve_host?: boolean;
  protocols?: string[];
  regex_priority?: number;
  request_buffering?: boolean;
  response_buffering?: boolean;
  service?: Service;
  snis?: string[];
  sources?: CIDRPort[];
  strip_path?: boolean;
  tags?: string[];
  updated_at?: number;
};
export type FService2 = {
  [k: string]: unknown | undefined;
} & {
  ca_certificates?: string[];
  client_certificate?: string;
  connect_timeout?: number;
  created_at?: number;
  enabled?: boolean;
  host?: string;
  id?: string;
  name?: string;
  path?: string;
  plugins?: FPlugin[];
  port?: number;
  protocol?: string;
  read_timeout?: number;
  retries?: number;
  routes?: FRoute2[];
  tags?: string[];
  tls_verify?: boolean;
  tls_verify_depth?: number;
  updated_at?: number;
  url?: string;
  write_timeout?: number;
};

export interface KongJsonSchema {
  _format_version?: string;
  _info?: Info;
  _konnect?: Konnect;
  _plugin_configs?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      [k: string]: unknown | undefined;
    };
  };
  _transform?: boolean;
  _workspace?: string;
  ca_certificates?: FCACertificate[];
  certificates?: FCertificate[];
  consumers?: FConsumer[];
  plugins?: FPlugin[];
  rbac_roles?: FRBACRole[];
  routes?: FRoute[];
  service_packages?: FServicePackage[];
  services?: FService2[];
  upstreams?: FUpstream[];
}
export interface Info {
  defaults?: KongDefaults;
  select_tags?: string[];
}
export interface KongDefaults {
  route?: Route;
  service?: Service1;
  target?: Target;
  upstream?: Upstream1;
}
export interface Route {
  created_at?: number;
  destinations?: CIDRPort[];
  headers?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: string[];
  };
  hosts?: string[];
  https_redirect_status_code?: number;
  id?: string;
  methods?: string[];
  name?: string;
  path_handling?: string;
  paths?: string[];
  preserve_host?: boolean;
  protocols?: string[];
  regex_priority?: number;
  request_buffering?: boolean;
  response_buffering?: boolean;
  service?: Service;
  snis?: string[];
  sources?: CIDRPort1[];
  strip_path?: boolean;
  tags?: string[];
  updated_at?: number;
}
export interface CIDRPort {
  ip?: string;
  port?: number;
}
export interface Service {
  ca_certificates?: string[];
  client_certificate?: Certificate;
  connect_timeout?: number;
  created_at?: number;
  enabled?: boolean;
  host?: string;
  id?: string;
  name?: string;
  path?: string;
  port?: number;
  protocol?: string;
  read_timeout?: number;
  retries?: number;
  tags?: string[];
  tls_verify?: boolean;
  tls_verify_depth?: number;
  updated_at?: number;
  url?: string;
  write_timeout?: number;
}
export interface Certificate {
  cert?: string;
  cert_alt?: string;
  created_at?: number;
  id?: string;
  key?: string;
  key_alt?: string;
  snis?: string[];
  tags?: string[];
}
export interface CIDRPort1 {
  ip?: string;
  port?: number;
}
export interface Service1 {
  ca_certificates?: string[];
  client_certificate?: Certificate;
  connect_timeout?: number;
  created_at?: number;
  enabled?: boolean;
  host?: string;
  id?: string;
  name?: string;
  path?: string;
  port?: number;
  protocol?: string;
  read_timeout?: number;
  retries?: number;
  tags?: string[];
  tls_verify?: boolean;
  tls_verify_depth?: number;
  updated_at?: number;
  url?: string;
  write_timeout?: number;
}
export interface Target {
  created_at?: number;
  id?: string;
  tags?: string[];
  target?: string;
  upstream?: Upstream;
  weight?: number;
}
export interface Upstream {
  algorithm?: string;
  client_certificate?: Certificate1;
  created_at?: number;
  hash_fallback?: string;
  hash_fallback_header?: string;
  hash_on?: string;
  hash_on_cookie?: string;
  hash_on_cookie_path?: string;
  hash_on_header?: string;
  healthchecks?: Healthcheck;
  host_header?: string;
  id?: string;
  name?: string;
  slots?: number;
  tags?: string[];
}
export interface Certificate1 {
  cert?: string;
  cert_alt?: string;
  created_at?: number;
  id?: string;
  key?: string;
  key_alt?: string;
  snis?: string[];
  tags?: string[];
}
export interface Healthcheck {
  active?: ActiveHealthcheck;
  passive?: PassiveHealthcheck;
  threshold?: number;
}
export interface ActiveHealthcheck {
  concurrency?: number;
  healthy?: Healthy;
  http_path?: string;
  https_sni?: string;
  https_verify_certificate?: boolean;
  timeout?: number;
  type?: string;
  unhealthy?: Unhealthy;
}
export interface Healthy {
  http_statuses?: number[];
  interval?: number;
  successes?: number;
}
export interface Unhealthy {
  http_failures?: number;
  http_statuses?: number[];
  interval?: number;
  tcp_failures?: number;
  timeouts?: number;
}
export interface PassiveHealthcheck {
  healthy?: Healthy1;
  type?: string;
  unhealthy?: Unhealthy1;
}
export interface Healthy1 {
  http_statuses?: number[];
  interval?: number;
  successes?: number;
}
export interface Unhealthy1 {
  http_failures?: number;
  http_statuses?: number[];
  interval?: number;
  tcp_failures?: number;
  timeouts?: number;
}
export interface Upstream1 {
  algorithm?: string;
  client_certificate?: Certificate1;
  created_at?: number;
  hash_fallback?: string;
  hash_fallback_header?: string;
  hash_on?: string;
  hash_on_cookie?: string;
  hash_on_cookie_path?: string;
  hash_on_header?: string;
  healthchecks?: Healthcheck;
  host_header?: string;
  id?: string;
  name?: string;
  slots?: number;
  tags?: string[];
}
export interface Konnect {
  runtime_group_name?: string;
}
export interface FCACertificate {
  cert: string;
  cert_digest?: string;
  created_at?: number;
  id?: string;
  tags?: string[];
}
export interface FCertificate {
  cert: string;
  created_at?: number;
  id: string;
  key: string;
  snis?: {
    name?: string;
    [k: string]: unknown | undefined;
  }[];
  tags?: string[];
}
export interface ACLGroup {
  consumer?: Consumer;
  created_at?: number;
  group: string;
  id?: string;
  tags?: string[];
}
export interface Consumer {
  created_at?: number;
  custom_id?: string;
  id?: string;
  tags?: string[];
  username?: string;
}
export interface BasicAuth {
  consumer?: Consumer;
  created_at?: number;
  id?: string;
  password: string;
  tags?: string[];
  username: string;
}
export interface HMACAuth {
  consumer?: Consumer;
  created_at?: number;
  id?: string;
  secret: string;
  tags?: string[];
  username: string;
}
export interface JWTAuth {
  algorithm: string;
  consumer?: Consumer;
  created_at?: number;
  id?: string;
  key: string;
  rsa_public_key?: string;
  secret: string;
  tags?: string[];
}
export interface KeyAuth {
  consumer?: Consumer;
  created_at?: number;
  id?: string;
  key: string;
  tags?: string[];
  ttl?: number;
}
export interface MTLSAuth {
  ca_certificate?: CACertificate;
  consumer?: Consumer;
  created_at?: number;
  id: string;
  subject_name: string;
  tags?: string[];
}
export interface CACertificate {
  cert?: string;
  cert_digest?: string;
  created_at?: number;
  id?: string;
  tags?: string[];
}
export interface Oauth2Credential {
  client_id: string;
  client_secret: string;
  consumer?: Consumer;
  created_at?: number;
  hash_secret?: boolean;
  id?: string;
  name: string;
  redirect_uris?: string[];
  tags?: string[];
}
export interface FPlugin {
  _config?: string;
  config?: {
    [k: string]: unknown | undefined;
  };
  consumer?: string;
  created_at?: number;
  enabled?: boolean;
  id?: string;
  name: string;
  ordering?: PluginOrdering;
  protocols?: string[];
  route?: string;
  run_on?: string;
  service?: string;
  tags?: string[];
}
export interface PluginOrdering {
  after?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: string[];
  };
  before?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: string[];
  };
}
export interface FRBACRole {
  comment?: string;
  created_at?: number;
  endpoint_permissions?: FRBACEndpointPermission[];
  id?: string;
  is_default?: boolean;
  name: string;
}
export interface FRBACEndpointPermission {
  actions?: string[];
  comment?: string;
  created_at?: number;
  endpoint: string;
  negative?: boolean;
  role?: RBACRole;
  workspace: string;
}
export interface RBACRole {
  comment?: string;
  created_at?: number;
  id?: string;
  is_default?: boolean;
  name?: string;
}
export interface FPlugin1 {
  _config?: string;
  config?: {
    [k: string]: unknown | undefined;
  };
  consumer?: string;
  created_at?: number;
  enabled?: boolean;
  id?: string;
  name: string;
  ordering?: PluginOrdering;
  protocols?: string[];
  route?: string;
  run_on?: string;
  service?: string;
  tags?: string[];
}
export interface FServicePackage {
  description?: string;
  document?: FDocument;
  id?: string;
  name: string;
  versions?: FServiceVersion[];
}
export interface FDocument {
  id?: string;
  path?: string;
  published?: boolean;
}
export interface FServiceVersion {
  document?: FDocument1;
  id?: string;
  implementation?: Implementation;
  version: string;
}
export interface FDocument1 {
  id?: string;
  path?: string;
  published?: boolean;
}
export interface Implementation {
  kong: Kong;
  type: string;
}
export interface Kong {
  service?: FService;
}
export interface FUpstream {
  algorithm?: string;
  client_certificate?: Certificate1;
  created_at?: number;
  hash_fallback?: string;
  hash_fallback_header?: string;
  hash_on?: string;
  hash_on_cookie?: string;
  hash_on_cookie_path?: string;
  hash_on_header?: string;
  healthchecks?: Healthcheck1;
  host_header?: string;
  id?: string;
  name: string;
  slots?: number;
  tags?: string[];
  targets?: FTarget[];
}
export interface Healthcheck1 {
  active?: ActiveHealthcheck;
  passive?: PassiveHealthcheck;
  threshold?: number;
}
export interface FTarget {
  created_at?: number;
  id?: string;
  tags?: string[];
  target: string;
  upstream?: Upstream;
  weight?: number;
}

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * These permissions apply to all environments defined in this deployment project
 */
export type DefaultEnvironmentPermissions = Permission[];
export type Deployment = string | DeploymentProjects;
/**
 * These permissions apply to the deployment project
 */
export type DeploymentPermissions = Permission[];
/**
 * Builds and deployments are normally run on the Bamboo agent’s native operating system
 */
export type Docker =
  | string
  | {
      image: string;
      volumes?: {
        [k: string]: unknown;
      };
      "use-default-volumes"?: boolean;
      [k: string]: unknown;
    };
/**
 * Permissions specific to an environment
 */
export type EnvironmentPermissions = {
  /**
   * This interface was referenced by `undefined`'s JSON-Schema definition
   * via the `patternProperty` "[a-zA-Z0-9\s+_-]".
   */
  [k: string]: Permission[];
}[];
export type Events =
  | "plan-failed"
  | "plan-completed"
  | "plan-status-changed"
  | "plan-comment-added"
  | "plan-responsibility-changed"
  | "job-completed"
  | "job-status-changed"
  | "job-failed"
  | "job-error"
  | "job-first-failed"
  | "job-hung"
  | "job-queue-timeout"
  | "job-queued-without-capable-agents";
export type PlanPermissions = Permission[];
export type Triggers = (
  | (
      | number
      | {
          period?: number;
          [k: string]: unknown;
        }
    )
  | (
      | string
      | {
          expression?: string;
          [k: string]: unknown;
        }
    )
  | (
      | "remote"
      | {
          remote?: string;
          [k: string]: unknown;
        }
      | {
          remote?: {
            ip?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        }
    )
)[];
export type PredefinedTask = "inject-variables" | "clean" | "checkout" | "artifact-download";
export type Script =
  | string
  | {
      script?: string;
      [k: string]: unknown;
    };
export type TestParser = "junit" | "mstest" | "nunit" | "mocha" | "testng";

/**
 * Full spec reference: https://docs.atlassian.com/bamboo-specs-docs/7.2.4/specs.html
 */
export interface BambooCISpecification {
  "default-environment-permissions"?: DefaultEnvironmentPermissions;
  deployment?: Deployment;
  "deployment-permissions"?: DeploymentPermissions;
  docker?: Docker;
  "environment-permissions"?: EnvironmentPermissions;
  /**
   * An environment represents the servers or groups of servers where the software release has been deployed to, and the tasks that are needed for the deployment to work smoothly
   */
  environments?: string[];
  labels?: string;
  notifications?: {
    recipients?: (
      | string
      | {
          users?: string[];
          emails?: string[];
          [k: string]: unknown;
        }
    )[];
    events?: (
      | Events
      | {
          [k: string]: unknown;
        }
    )[];
    [k: string]: unknown;
  }[];
  plan?: Plan;
  "plan-permissions"?: PlanPermissions;
  /**
   * You can define how releases should be named when they are created by Bamboo
   */
  "release-naming"?: ReleaseNaming | string;
  stages?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "[a-zA-Z0-9\s+_-]".
     */
    [k: string]: string[] | Stage;
  }[];
  triggers?: Triggers;
  variables?: KeyValue;
  version?: number;
  [k: string]: Job;
}
/**
 * Plan permissions allow a user to control access to the functions of the build plan.
 */
export interface Permission {
  groups?: string | string[];
  permissions?:
    | ("view" | "edit" | "build" | "admin" | "clone" | "deploy")[]
    | ("view" | "edit" | "build" | "admin" | "clone" | "deploy");
  roles?: string[];
  users?: string[];
  [k: string]: unknown;
}
/**
 * A deployment project in Bamboo is a container for holding the software project you are deploying: releases that have been built and tested, and the environments to which releases are deployed
 */
export interface DeploymentProjects {
  name?: string;
  "source-plan"?: string;
  [k: string]: unknown;
}
/**
 * A plan defines everything about your continuous integration build process in Bamboo.
 */
export interface Plan {
  "project-key"?: string;
  key?: string;
  name?: string;
  [k: string]: unknown;
}
export interface ReleaseNaming {
  "next-version-name"?: string;
  "applies-to-branches"?: boolean;
  "auto-increment"?: boolean;
  "auto-increment-variables"?: string | string[];
  [k: string]: unknown;
}
/**
 * Stages group jobs to individual steps within a plan’s build process.
 */
export interface Stage {
  /**
   * Will await for execution by user
   */
  manual?: boolean;
  /**
   * Will be executed regardless of other stages state (pass or fail)
   */
  final?: boolean;
  jobs?: string[];
}
/**
 * Variables specific to a deployment environment
 */
export interface KeyValue {
  /**
   * This interface was referenced by `KeyValue`'s JSON-Schema definition
   * via the `patternProperty` "[a-zA-Z0-9_]".
   */
  [k: string]: string | number | boolean;
}
/**
 * A job is a single build unit within a plan and is made up of one or more tasks.
 */
export interface Job {
  docker?: Docker;
  "final-tasks"?: unknown[];
  key?: string;
  other?: {
    "clean-working-dir"?: boolean;
    [k: string]: unknown;
  };
  requirements?: (
    | string
    | {
        /**
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` ".".
         */
        [k: string]: string;
      }
  )[];
  tasks?: (
    | PredefinedTask
    | Script
    | {
        interpreter?: string;
        clean?: {
          [k: string]: unknown;
        };
        checkout?: {
          repository?: string;
          path?: string;
          "force-clean-build"?: boolean & string;
          [k: string]: unknown;
        };
        "inject-variables"?:
          | string
          | {
              file?: string;
              scope?: string;
              namespace?: string;
            };
        /**
         * The Test Results Parser task in Bamboo parses test data
         */
        "test-parser"?:
          | TestParser
          | {
              type: TestParser;
              "ignore-time"?: boolean;
              "test-results"?: string[];
              [k: string]: unknown;
            };
        scripts?: [Script, ...Script[]];
        [k: string]: unknown;
      }
  )[];
  [k: string]: unknown;
}

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface JSONSchemaForVisualStudioSFileNestingFeature {
  /**
   * Determines if this is the root nesting config file and no further inheritance is required.
   */
  root?: boolean;
  /**
   * Contains a collection of nesting rule providers specified in the order to be applied.
   */
  dependentFileProviders?: {
    /**
     * Add nesting rules in the order to be applied by corresponding provider, where each rule entry has a form 'child: collection of potential parents'.
     */
    add?: Providers;
    /**
     * Remove specified nesting rules if they are merged from higher level nesting settings.
     */
    remove?: Providers | "*";
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface Providers {
  /**
   * If this exist, files with an additional extension should nest under file without additional extension. Example: file.html.css nest under file.html
   */
  addedExtension?: {
    [k: string]: unknown;
  };
  /**
   * If this exists, files with "extra" extension part in the file name should nest under files without it, but having same name and last extension. Example: file.min.js nest under file.js.
   */
  pathSegment?: {
    /**
     * Add nesting rules in the order to be applied by corresponding provider, where each rule entry has a form 'child: collection of potential parents'.
     */
    add?: {
      ".*"?: FileExtension[];
      [k: string]: unknown;
    };
    /**
     * Remove specified nesting rules if they are merged from higher level nesting settings.
     */
    remove?:
      | {
          [k: string]: FileExtension[];
        }
      | "*";
  };
  /**
   * Nest files with specific extensions under other specific extensions
   */
  extensionToExtension?: {
    /**
     * Add nesting rules in the order to be applied by corresponding provider, where each rule entry has a form 'child: collection of potential parents'.
     */
    add?: ExtExt;
    /**
     * Remove specified nesting rules if they are merged from higher level nesting settings.
     */
    remove?: ExtExt | "*";
  };
  /**
   * Nest specific file names under other specific file names
   */
  fileToFile?: {
    /**
     * Add nesting rules in the order to be applied by corresponding provider, where each rule entry has a form 'child: collection of potential parents'.
     */
    add?: FileFile;
    /**
     * Remove specified nesting rules if they are merged from higher level nesting settings.
     */
    remove?: FileFile | "*";
  };
  /**
   * Nest files with specified suffixes under files with specified extensions.
   */
  fileSuffixToExtension?: {
    /**
     * Add nesting rules in the order to be applied by corresponding provider, where each rule entry has a form 'child: collection of potential parents'.
     */
    add?: FileExt;
    /**
     * Remove specified nesting rules if they are merged from higher level nesting settings.
     */
    remove?: FileExt | "*";
  };
  /**
   * A greedy version of 'extensionToExtension' and has * as the only child key
   */
  allExtensions?: {
    /**
     * Add nesting rules in the order to be applied by corresponding provider, where each rule entry has a form 'child: collection of potential parents'.
     */
    add?: {
      ".*"?: FileExtension[];
      [k: string]: unknown;
    };
    /**
     * Remove specified nesting rules if they are merged from higher level nesting settings.
     */
    remove?:
      | {
          ".*"?: FileExtension[];
          [k: string]: unknown;
        }
      | "*";
  };
  [k: string]: unknown;
}
export interface FileExtension {
  [k: string]: unknown;
}
export interface ExtExt {
  /**
   * This interface was referenced by `ExtExt`'s JSON-Schema definition
   * via the `patternProperty` "^(\.[^/\\]+|\*)$".
   */
  [k: string]: FileExtension[];
}
export interface FileFile {
  /**
   * This interface was referenced by `FileFile`'s JSON-Schema definition
   * via the `patternProperty` "^[^/\\|:><"?\*]+$".
   */
  [k: string]: FileName[];
}
export interface FileName {
  [k: string]: unknown;
}
export interface FileExt {
  /**
   * This interface was referenced by `FileExt`'s JSON-Schema definition
   * via the `patternProperty` "^([^/\\|:><"?\*]+|\*)$".
   */
  [k: string]: FileExtension[];
}

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The URL to the plugin's site
 */
export type Website = string;
export type PluginName = string;
/**
 * Optional permission attributes.
 */
export type Permission1 = {
  /**
   * A short description of what this permission allows.
   */
  description?: string;
  /**
   * The default state for the permission.
   */
  default?: true | false | "op" | "not op";
  /**
   * Allows other permissions to be set as a relation to the parent permission.
   */
  children?:
    | string[]
    | {
        [k: string]: Permission1;
      };
  [k: string]: unknown;
} & (
  | boolean
  | {
      /**
       * A short description of what this permission allows.
       */
      description?: string;
      /**
       * The default state for the permission.
       */
      default?: true | false | "op" | "not op";
      /**
       * Allows other permissions to be set as a relation to the parent permission.
       */
      children?:
        | string[]
        | {
            [k: string]: Permission1;
          };
      [k: string]: unknown;
    }
);

export interface JSONSchemaForBukkitPluginYAML {
  /**
   * The unique name of plugin.
   */
  name: string;
  /**
   * The plugin's initial class file.
   */
  main: string;
  /**
   * A plugin revision identifier.
   */
  version: string | number;
  /**
   * Human readable plugin summary.
   */
  description?: string;
  /**
   * The plugin author.
   */
  author?: string;
  /**
   * The plugin contributors.
   */
  authors?: string[];
  website?: Website;
  /**
   * The token to prefix plugin log entries.
   */
  prefix?: string;
  /**
   * Set to true if this plugin uses a database.
   */
  database?: boolean;
  /**
   * The phase of server-startup this plugin will load during.
   */
  load?: "STARTUP" | "POSTWORLD";
  /**
   * Other required plugins.
   */
  depend?: PluginName[];
  /**
   * Other plugins that add functionality.
   */
  softdepend?: PluginName[];
  /**
   * A list of plugins should be loaded after this plugin.
   */
  loadbefore?: PluginName[];
  /**
   * The commands the plugin will register
   */
  commands?: {
    [k: string]: Command;
  };
  /**
   * The permissions the plugin will register
   */
  permissions?: {
    [k: string]: Permission;
  };
  /**
   * Gives the default default state of permissions registered for the plugin.
   */
  "default-permission"?: true | false | "op" | "not op";
  /**
   * The concepts that the plugin acknowledges.
   */
  awareness?: string[];
  /**
   * Gives the API version which this plugin is designed to support.
   */
  "api-version"?: string | number;
  /**
   * A list of libraries the server should download and supply to the plugin when loading it.
   */
  libraries?: string[];
  [k: string]: unknown;
}
/**
 * Optional command attributes.
 */
export interface Command {
  /**
   * A user-friendly description for a command.
   */
  description?: string;
  /**
   * Alternate command names a user may use instead.
   */
  aliases?: string | unknown[];
  /**
   * The permission required to use the command.
   */
  permission?: string;
  /**
   * A no-permission message.
   */
  "permission-message"?: string;
  /**
   * A short description of how to use this command.
   */
  usage?: string;
  [k: string]: unknown;
}
/**
 * Optional permission attributes.
 */
export interface Permission {
  /**
   * A short description of what this permission allows.
   */
  description?: string;
  /**
   * The default state for the permission.
   */
  default?: true | false | "op" | "not op";
  /**
   * Allows other permissions to be set as a relation to the parent permission.
   */
  children?:
    | string[]
    | {
        [k: string]: Permission1;
      };
  [k: string]: unknown;
}

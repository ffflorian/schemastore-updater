/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type GocriticChecks =
  | "appendAssign"
  | "appendCombine"
  | "argOrder"
  | "assignOp"
  | "badCall"
  | "badCond"
  | "badLock"
  | "badRegexp"
  | "boolExprSimplify"
  | "builtinShadow"
  | "builtinShadowDecl"
  | "captLocal"
  | "caseOrder"
  | "codegenComment"
  | "commentFormatting"
  | "commentedOutCode"
  | "commentedOutImport"
  | "defaultCaseOrder"
  | "deferUnlambda"
  | "deferInLoop"
  | "deprecatedComment"
  | "docStub"
  | "dupArg"
  | "dupBranchBody"
  | "dupCase"
  | "dupImport"
  | "dupSubExpr"
  | "elseif"
  | "emptyDecl"
  | "emptyFallthrough"
  | "emptyStringTest"
  | "equalFold"
  | "evalOrder"
  | "exitAfterDefer"
  | "exposedSyncMutex"
  | "externalErrorReassign"
  | "filepathJoin"
  | "flagDeref"
  | "flagName"
  | "hexLiteral"
  | "httpNoBody"
  | "hugeParam"
  | "ifElseChain"
  | "importShadow"
  | "indexAlloc"
  | "initClause"
  | "ioutilDeprecated"
  | "mapKey"
  | "methodExprCall"
  | "nestingReduce"
  | "newDeref"
  | "nilValReturn"
  | "octalLiteral"
  | "offBy1"
  | "paramTypeCombine"
  | "preferDecodeRune"
  | "preferFilepathJoin"
  | "preferFprint"
  | "preferStringWriter"
  | "preferWriteByte"
  | "ptrToRefParam"
  | "rangeExprCopy"
  | "rangeValCopy"
  | "redundantSprint"
  | "regexpMust"
  | "regexpPattern"
  | "regexpSimplify"
  | "returnAfterHttpError"
  | "ruleguard"
  | "singleCaseSwitch"
  | "sliceClear"
  | "sloppyLen"
  | "sloppyReassign"
  | "sloppyTypeAssert"
  | "sortSlice"
  | "sprintfQuotedString"
  | "sqlQuery"
  | "stringConcatSimplify"
  | "stringXbytes"
  | "suspiciousSorting"
  | "switchTrue"
  | "syncMapLoadAndDelete"
  | "timeExprSimplify"
  | "tooManyResultsChecker"
  | "truncateCmp"
  | "typeAssertChain"
  | "typeDefFirst"
  | "typeSwitchVar"
  | "typeUnparen"
  | "underef"
  | "unlabelStmt"
  | "unlambda"
  | "unnamedResult"
  | "unnecessaryBlock"
  | "unnecessaryDefer"
  | "unslice"
  | "valSwap"
  | "weakCond"
  | "whyNoLint"
  | "wrapperFunc"
  | "yodaStyleExpr";
export type GocriticTags = "diagnostic" | "style" | "performance" | "experimental" | "opinionated" | "security";
export type GosecRules =
  | "G101"
  | "G102"
  | "G103"
  | "G104"
  | "G106"
  | "G107"
  | "G108"
  | "G109"
  | "G110"
  | "G111"
  | "G112"
  | "G113"
  | "G114"
  | "G201"
  | "G202"
  | "G203"
  | "G204"
  | "G301"
  | "G302"
  | "G303"
  | "G304"
  | "G305"
  | "G306"
  | "G307"
  | "G401"
  | "G402"
  | "G403"
  | "G404"
  | "G501"
  | "G502"
  | "G503"
  | "G504"
  | "G505"
  | "G601";
export type GovetAnalyzers =
  | "asmdecl"
  | "assign"
  | "atomic"
  | "atomicalign"
  | "bools"
  | "buildtag"
  | "cgocall"
  | "composites"
  | "copylocks"
  | "deepequalerrors"
  | "errorsas"
  | "fieldalignment"
  | "findcall"
  | "framepointer"
  | "httpresponse"
  | "ifaceassert"
  | "loopclosure"
  | "lostcancel"
  | "nilfunc"
  | "nilness"
  | "printf"
  | "reflectvaluecompare"
  | "shadow"
  | "shift"
  | "sigchanyzer"
  | "sortslice"
  | "stdmethods"
  | "stringintconv"
  | "structtag"
  | "testinggoroutine"
  | "tests"
  | "unmarshal"
  | "unreachable"
  | "unsafeptr"
  | "unusedresult"
  | "unusedwrite";
/**
 * Linters usable.
 */
export type Linters =
  | (
      | "asasalint"
      | "asciicheck"
      | "bidichk"
      | "bodyclose"
      | "containedctx"
      | "contextcheck"
      | "cyclop"
      | "deadcode"
      | "decorder"
      | "depguard"
      | "dogsled"
      | "dupl"
      | "dupword"
      | "durationcheck"
      | "errcheck"
      | "errchkjson"
      | "errname"
      | "errorlint"
      | "execinquery"
      | "exhaustive"
      | "exhaustivestruct"
      | "exhaustruct"
      | "exportloopref"
      | "forbidigo"
      | "forcetypeassert"
      | "funlen"
      | "gci"
      | "gochecknoglobals"
      | "gochecknoinits"
      | "gocognit"
      | "goconst"
      | "gocritic"
      | "gocyclo"
      | "godot"
      | "godox"
      | "goerr113"
      | "gofmt"
      | "gofumpt"
      | "goheader"
      | "goimports"
      | "golint"
      | "gomnd"
      | "gomoddirectives"
      | "gomodguard"
      | "goprintffuncname"
      | "gosec"
      | "gosimple"
      | "govet"
      | "grouper"
      | "ifshort"
      | "importas"
      | "ineffassign"
      | "interfacebloat"
      | "interfacer"
      | "ireturn"
      | "lll"
      | "loggercheck"
      | "maintidx"
      | "makezero"
      | "maligned"
      | "misspell"
      | "nakedret"
      | "nestif"
      | "nilerr"
      | "nilnil"
      | "nlreturn"
      | "noctx"
      | "nolintlint"
      | "nonamedreturns"
      | "nosnakecase"
      | "nosprintfhostport"
      | "paralleltest"
      | "prealloc"
      | "predeclared"
      | "promlinter"
      | "reassign"
      | "revive"
      | "rowserrcheck"
      | "scopelint"
      | "sqlclosecheck"
      | "staticcheck"
      | "structcheck"
      | "stylecheck"
      | "tagliatelle"
      | "tenv"
      | "testableexamples"
      | "testpackage"
      | "thelper"
      | "tparallel"
      | "typecheck"
      | "unconvert"
      | "unparam"
      | "unused"
      | "usestdlibvars"
      | "varcheck"
      | "varnamelen"
      | "wastedassign"
      | "whitespace"
      | "wrapcheck"
      | "wsl"
    )
  | string;
export type TheRuleName = string;

export interface GolangciLint {
  /**
   * Options for analysis running,
   */
  run?: {
    /**
     * Number of concurrent runners. Defaults to the number of available CPU cores.
     */
    concurrency?: number;
    /**
     * Timeout for the analysis.
     */
    timeout?: string;
    /**
     * Exit code when at least one issue was found.
     */
    "issue-exit-code"?: number;
    /**
     * Enable inclusion of test files.
     */
    tests?: boolean;
    /**
     * List of build tags to pass to all linters.
     */
    "build-tags"?: string[];
    /**
     * Which directories to skip: issues from them won't be reported.
     */
    "skip-dirs"?: string[];
    /**
     * Enable skipping of directories "vendor", "third_party", "testdata", "examples", "Godeps", and "builtin".
     */
    "skip-dirs-use-default"?: boolean;
    /**
     * Which files to skip: they will be analyzed, but issues from them will not be reported.
     */
    "skip-files"?: string[];
    /**
     * Option to pass to "go list -mod={option}".
     * See "go help modules" for more information.
     */
    "modules-download-mode"?: "mod" | "readonly" | "vendor";
    /**
     * Allow multiple parallel golangci-lint instances running. If disabled, golangci-lint acquires file lock on start.
     */
    "allow-parallel-runners"?: boolean;
    /**
     * Targeted Go version.
     */
    go?: string;
    [k: string]: unknown;
  };
  /**
   * Output configuration options.
   */
  output?: {
    /**
     * Output format to use.
     */
    format?: string;
    /**
     * Print lines of code with issue.
     */
    "print-issued-lines"?: boolean;
    /**
     * Print linter name in the end of issue text.
     */
    "print-linter-name"?: boolean;
    /**
     * Make issues output unique by line.
     */
    "unique-by-line"?: boolean;
    /**
     * Add a prefix to the output file references.
     */
    "path-prefix"?: string;
    [k: string]: unknown;
  };
  /**
   * All available settings of specific linters.
   */
  "linters-settings"?: {
    dupword?: {
      /**
       * Keywords for detecting duplicate words. If this list is not empty, only the words defined in this list will be detected.
       */
      keywords?: string[];
      [k: string]: unknown;
    };
    asasalint?: {
      /**
       * To specify a set of function names to exclude.
       */
      exclude?: string[];
      /**
       * To enable/disable the asasalint builtin exclusions of function names.
       */
      "use-builtin-exclusions"?: boolean;
      /**
       * Ignore *_test.go files.
       */
      "ignore-test"?: boolean;
      [k: string]: unknown;
    };
    bidichk?: {
      /**
       * Disallow: LEFT-TO-RIGHT-EMBEDDING
       */
      "left-to-right-embedding"?: boolean;
      /**
       * Disallow: RIGHT-TO-LEFT-EMBEDDING
       */
      "right-to-left-embedding"?: boolean;
      /**
       * Disallow: POP-DIRECTIONAL-FORMATTING
       */
      "pop-directional-formatting"?: boolean;
      /**
       * Disallow: LEFT-TO-RIGHT-OVERRIDE
       */
      "left-to-right-override"?: boolean;
      /**
       * Disallow: RIGHT-TO-LEFT-OVERRIDE
       */
      "right-to-left-override"?: boolean;
      /**
       * Disallow: LEFT-TO-RIGHT-ISOLATE
       */
      "left-to-right-isolate"?: boolean;
      /**
       * Disallow: RIGHT-TO-LEFT-ISOLATE
       */
      "right-to-left-isolate"?: boolean;
      /**
       * Disallow: FIRST-STRONG-ISOLATE
       */
      "first-strong-isolate"?: boolean;
      /**
       * Disallow: POP-DIRECTIONAL-ISOLATE
       */
      "pop-directional-isolate"?: boolean;
      [k: string]: unknown;
    };
    cyclop?: {
      /**
       * Should the linter execute on test files as well
       */
      "skip-tests"?: boolean;
      /**
       * Max complexity the function can have
       */
      "max-complexity"?: number;
      /**
       * Max average complexity in package
       */
      "package-average"?: number;
      [k: string]: unknown;
    };
    decorder?: {
      "dec-order"?: ("type" | "const" | "var" | "func")[];
      /**
       * Order of declarations is not checked
       */
      "disable-dec-order-check"?: boolean;
      /**
       * Allow init func to be anywhere in file
       */
      "disable-init-func-first-check"?: boolean;
      /**
       * Multiple global type, const and var declarations are allowed
       */
      "disable-dec-num-check"?: boolean;
      [k: string]: unknown;
    };
    depguard?: {
      /**
       * List kind (`allowlist` or `denylist`)
       */
      "list-type"?: "allowlist" | "denylist" | "blacklist" | "whitelist";
      /**
       * Whether to check the list against the standard lib.
       */
      "include-go-root"?: boolean;
      /**
       * List of packages for the list type specified.
       */
      packages?: string[];
      /**
       * Specify a mapping from packages to the error message to display.
       */
      "packages-with-error-message"?: {
        /**
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^.*$".
         */
        [k: string]: string;
      }[];
      /**
       * Specify rules by which the linter ignores certain files for consideration.
       */
      "ignore-file-rules"?: string[];
      "additional-guards"?: {
        "list-type"?: unknown;
        "include-go-root"?: boolean;
        /**
         * List of packages for the list type specified.
         */
        packages?: string[];
        /**
         * Specify rules by which the linter ignores certain files for consideration.
         */
        "ignore-file-rules"?: string[];
        [k: string]: unknown;
      }[];
      [k: string]: unknown;
    };
    dogsled?: {
      /**
       * Check assignments with too many blank identifiers.
       */
      "max-blank-identifiers"?: number;
      [k: string]: unknown;
    };
    dupl?: {
      /**
       * Tokens count to trigger issue.
       */
      threshold?: number;
      [k: string]: unknown;
    };
    errcheck?: {
      /**
       * Report about not checking errors in type assertions, i.e.: `a := b.(MyStruct)`
       */
      "check-type-assertions"?: boolean;
      /**
       * Report about assignment of errors to blank identifier
       */
      "check-blank"?: boolean;
      /**
       * DEPRECATED: use `exclude-functions` instead. Comma-separated list of pairs of the form "pkg:regex".
       */
      ignore?: string;
      /**
       * DEPRECATED: use `exclude-functions` instead. Path to a file containing a list of functions to exclude from checking.
       */
      exclude?: string;
      /**
       * List of functions to exclude from checking, where each entry is a single function to exclude
       */
      "exclude-functions"?: string[];
      /**
       * To disable the errcheck built-in exclude list
       */
      "disable-default-exclusions"?: boolean;
      [k: string]: unknown;
    };
    errchkjson?: {
      "check-error-free-encoding"?: boolean;
      /**
       * Issue on struct that doesn't have exported fields.
       */
      "report-no-exported"?: boolean;
      [k: string]: unknown;
    };
    errorlint?: {
      /**
       * Check whether fmt.Errorf uses the %w verb for formatting errors
       */
      errorf?: boolean;
      /**
       * Check for plain type assertions and type switches.
       */
      asserts?: boolean;
      /**
       * Check for plain error comparisons
       */
      comparison?: boolean;
      [k: string]: unknown;
    };
    exhaustive?: {
      /**
       * Program elements to check for exhaustiveness.
       */
      check?: string[];
      /**
       * Check switch statements in generated files
       */
      "check-generated"?: boolean;
      /**
       * Only run exhaustive check on switches with "//exhaustive:enforce" comment.
       */
      "explicit-exhaustive-switch"?: boolean;
      /**
       * Only run exhaustive check on map literals with "//exhaustive:enforce" comment.
       */
      "explicit-exhaustive-map"?: boolean;
      /**
       * Presence of `default` case in switch statements satisfies exhaustiveness, even if all enum members are not listed.
       */
      "default-signifies-exhaustive"?: boolean;
      /**
       * Enum members matching `regex` do not have to be listed in switch statements to satisfy exhaustiveness
       */
      "ignore-enum-members"?: string;
      /**
       * Consider enums only in package scopes, not in inner scopes.
       */
      "package-scope-only"?: boolean;
      [k: string]: unknown;
    };
    exhaustivestruct?: {
      /**
       * Struct Patterns is list of expressions to match struct packages (written using `path` matching syntax)
       */
      "struct-patterns"?: string[];
      [k: string]: unknown;
    };
    exhaustruct?: {
      /**
       * List of regular expressions to match struct packages and names.
       */
      include?: string[];
      /**
       * List of regular expressions to exclude struct packages and names from check.
       */
      exclude?: string[];
      [k: string]: unknown;
    };
    forbidigo?: {
      /**
       * Exclude code in godoc examples.
       */
      exclude_godoc_examples?: boolean;
      /**
       * List of identifiers to forbid (written using `regexp`)
       */
      forbid?: string[];
      [k: string]: unknown;
    };
    funlen?: {
      /**
       * Limit lines number per function.
       */
      lines?: number;
      /**
       * Limit statements number per function
       */
      statements?: number;
      [k: string]: unknown;
    };
    gci?: {
      /**
       * DEPRECATED: use 'sections' and 'prefix(github.com/org/project)' instead.
       */
      "local-prefixes"?: string;
      /**
       * Section configuration to compare against.
       */
      sections?: string[];
      /**
       * Skip generated files.
       */
      "skip-generated"?: boolean;
      /**
       * Enable custom order of sections.
       */
      "custom-order"?: boolean;
      [k: string]: unknown;
    };
    gocognit?: {
      /**
       * Minimal code complexity to report (we recommend 10-20).
       */
      "min-complexity"?: number;
      [k: string]: unknown;
    };
    goconst?: {
      /**
       * Look for existing constants matching the values
       */
      "match-constant"?: boolean;
      /**
       * Minimum length of string constant.
       */
      "min-len"?: number;
      /**
       * Minimum occurrences count to trigger.
       */
      "min-occurrences"?: number;
      /**
       * Ignore test files.
       */
      "ignore-tests"?: boolean;
      /**
       * Ignore when constant is not used as function argument
       */
      "ignore-calls"?: boolean;
      /**
       * Search also for duplicated numbers.
       */
      numbers?: boolean;
      /**
       * Minimum value, only works with `numbers`
       */
      min?: number;
      /**
       * Maximum value, only works with `numbers`
       */
      max?: number;
      [k: string]: unknown;
    };
    gocritic?: {
      /**
       * Which checks should be enabled. By default, a list of stable checks is used. To see it, run `GL_DEBUG=gocritic golangci-lint run`.
       */
      "enabled-checks"?: GocriticChecks[];
      /**
       * Which checks should be disabled.
       */
      "disabled-checks"?: GocriticChecks[];
      /**
       * Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
       */
      "enabled-tags"?: GocriticTags[];
      /**
       * Disable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
       */
      "disabled-tags"?: GocriticTags[];
      /**
       * Settings passed to gocritic. Properties must be valid and enabled check names.
       */
      settings?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    gocyclo?: {
      /**
       * Minimum code complexity to report (we recommend 10-20).
       */
      "min-complexity"?: number;
      [k: string]: unknown;
    };
    godot?: {
      /**
       * Comments to be checked.
       */
      scope?: "declarations" | "toplevel" | "all";
      /**
       * List of regexps for excluding particular comment lines from check.
       */
      exclude?: string[];
      /**
       * Check that each sentence ends with a period.
       */
      period?: boolean;
      /**
       * Check that each sentence starts with a capital letter.
       */
      capital?: boolean;
      /**
       * DEPRECATED: Check all top-level comments, not only declarations.
       */
      "check-all"?: boolean;
      [k: string]: unknown;
    };
    godox?: {
      /**
       * Report any comments starting with one of theses keywords. This is useful for TODO or FIXME comments that might be left in the code accidentally and should be resolved before merging.
       */
      keywords?: string[];
      [k: string]: unknown;
    };
    gofmt?: {
      /**
       * Simplify code.
       */
      simplify?: boolean;
      /**
       * Apply the rewrite rules to the source before reformatting.
       */
      "rewrite-rules"?: {
        pattern?: string;
        replacement?: string;
      }[];
      [k: string]: unknown;
    };
    interfacebloat?: {
      /**
       * The maximum number of methods allowed for an interface.
       */
      max?: number;
      [k: string]: unknown;
    };
    gofumpt?: {
      /**
       * Choose whether or not to use the extra rules that are disabled by default.
       */
      "extra-rules"?: boolean;
      /**
       * Select the Go version to target.
       */
      "lang-version"?: string;
      /**
       *  Module path which contains the source code being formatted.
       */
      "module-path"?: string;
      [k: string]: unknown;
    };
    goheader?: {
      values?: {
        /**
         * Constants to use in the template.
         */
        const?: {
          /**
           * Value for the constant.
           *
           * This interface was referenced by `undefined`'s JSON-Schema definition
           * via the `patternProperty` "^.+$".
           */
          [k: string]: string;
        };
        /**
         * Regular expressions to use in your template.
         */
        regexp?: {
          /**
           * This interface was referenced by `undefined`'s JSON-Schema definition
           * via the `patternProperty` "^.+$".
           */
          [k: string]: string;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    } & (
      | {
          /**
           * Template to put on top of every file.
           */
          template: string;
          [k: string]: unknown;
        }
      | {
          /**
           * Path to the file containing the template source.
           */
          "template-path": string;
          [k: string]: unknown;
        }
    );
    goimports?: {
      /**
       * Put imports beginning with prefix after 3rd-party packages. It is a comma-separated list of prefixes.
       */
      "local-prefixes"?: string;
      [k: string]: unknown;
    };
    golint?: {
      /**
       * Minimum confidence for issues.
       */
      "min-confidence"?: number;
      [k: string]: unknown;
    };
    gomnd?: {
      settings?: {
        mnd?: {
          /**
           * Comma-separated list of file patterns to exclude from the analysis.
           */
          "ignored-files"?: string;
          /**
           * Comma-separated list of function patterns to exclude from the analysis.
           */
          "ignored-functions"?: string;
          /**
           * Comma-separated list of numbers to exclude from the analysis.
           */
          "ignored-numbers"?: string;
          /**
           * The list of enabled checks.
           */
          checks?: ("argument" | "case" | "condition" | "operation" | "return" | "assign")[];
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      /**
       * List of file patterns to exclude from analysis.
       */
      "ignored-files"?: string[];
      /**
       * Comma-separated list of function patterns to exclude from the analysis.
       */
      "ignored-functions"?: string[];
      /**
       * List of numbers to exclude from analysis.
       */
      "ignored-numbers"?: string[];
      /**
       * The list of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.
       */
      checks?: ("argument" | "case" | "condition" | "operation" | "return" | "assign")[];
      [k: string]: unknown;
    };
    gomodguard?: {
      allowed?: {
        /**
         * List of allowed modules.
         */
        modules?: string[];
        /**
         * List of allowed module domains.
         */
        domains?: string[];
        [k: string]: unknown;
      };
      blocked?: {
        /**
         * List of blocked modules.
         */
        modules?: {
          /**
           * This interface was referenced by `undefined`'s JSON-Schema definition
           * via the `patternProperty` "^.+$".
           */
          [k: string]: {
            /**
             * Recommended modules that should be used instead.
             */
            recommendations?: string[];
            /**
             * Reason why the recommended module should be used.
             */
            reason?: string;
            [k: string]: unknown;
          };
        }[];
        /**
         * List of blocked module version constraints.
         */
        versions?: {
          /**
           * This interface was referenced by `undefined`'s JSON-Schema definition
           * via the `patternProperty` "^.*$".
           */
          [k: string]: {
            /**
             * Version constraint.
             */
            version?: string;
            /**
             * Reason why the version constraint exists.
             */
            reason: string;
            [k: string]: unknown;
          };
        }[];
        /**
         * Raise lint issues if loading local path with replace directive
         */
        local_replace_directives?: boolean;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    gosimple?: {
      /**
       * Targeted Go version
       */
      go?: string;
      checks?: ("all" | string)[];
      [k: string]: unknown;
    };
    gosec?: {
      /**
       * To select a subset of rules to run
       */
      includes?: GosecRules[];
      /**
       * To specify a set of rules to explicitly exclude
       */
      excludes?: GosecRules[];
      /**
       * Exclude generated files
       */
      "exclude-generated"?: boolean;
      /**
       * Filter out the issues with a lower severity than the given value
       */
      severity?: "low" | "medium" | "high";
      /**
       * Filter out the issues with a lower confidence than the given value
       */
      confidence?: "low" | "medium" | "high";
      /**
       * To specify the configuration of rules
       */
      config?: {
        [k: string]: unknown;
      };
      /**
       * Concurrency value
       */
      concurrency?: number;
      [k: string]: unknown;
    };
    govet?: {
      /**
       * Report shadowed variables.
       */
      "check-shadowing"?: boolean;
      /**
       * Settings per analyzer. Map of analyzer name to specific settings.
       * Run `go tool vet help` to find out more.
       */
      settings?: {
        /**
         * Run `go tool vet help <analyzer>` to see all settings.
         *
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^.*$".
         */
        [k: string]: {
          [k: string]: unknown;
        };
      };
      /**
       * Enable analyzers by name.
       */
      enable?: GovetAnalyzers[];
      /**
       * Disable analyzers by name.
       */
      disable?: GovetAnalyzers[];
      /**
       * Enable all analyzers.
       */
      "enable-all"?: boolean;
      /**
       * Disable all analyzers.
       */
      "disable-all"?: boolean;
      [k: string]: unknown;
    };
    grouper?: {
      "const-require-single-const"?: boolean;
      "const-require-grouping"?: boolean;
      "import-require-single-const"?: boolean;
      "import-require-grouping"?: boolean;
      "type-require-single-const"?: boolean;
      "type-require-grouping"?: boolean;
      "var-require-single-const"?: boolean;
      "var-require-grouping"?: boolean;
      [k: string]: unknown;
    };
    ifshort?: {
      /**
       * maximum length of variable declaration measured in numbers of lines, after which the linter won't suggest using short syntax. Has precedence over max-decl-chars
       */
      "max-decl-lines"?: number;
      /**
       * maximum length of variable declaration measured in number of characters, after which the linter won't suggest using short syntax.
       */
      "max-decl-chars"?: number;
      [k: string]: unknown;
    };
    importas?: {
      /**
       * Do not allow unaliased imports of aliased packages.
       */
      "no-unaliased"?: boolean;
      /**
       * Do not allow non-required aliases.
       */
      "no-extra-aliases"?: boolean;
      /**
       * List of aliases
       */
      alias?: {
        /**
         * Package path e.g. knative.dev/serving/pkg/apis/autoscaling/v1alpha1
         */
        pkg: string;
        /**
         * Package alias e.g. autoscalingv1alpha1
         */
        alias: string;
        [k: string]: unknown;
      }[];
      [k: string]: unknown;
    };
    /**
     * Use either `reject` or `allow` properties for interfaces matching.
     */
    ireturn?: {
      [k: string]: unknown;
    };
    lll?: {
      /**
       * Width of "\t" in spaces.
       */
      "tab-width"?: number;
      /**
       * Maximum allowed line length, lines longer will be reported.
       */
      "line-length"?: number;
      [k: string]: unknown;
    };
    /**
     * Maintainability index https://docs.microsoft.com/en-us/visualstudio/code-quality/code-metrics-maintainability-index-range-and-meaning?view=vs-2022
     */
    maintidx?: {
      /**
       * Minimum accatpable maintainability index level (see https://docs.microsoft.com/en-us/visualstudio/code-quality/code-metrics-maintainability-index-range-and-meaning?view=vs-2022)
       */
      under?: number;
      [k: string]: unknown;
    };
    makezero?: {
      /**
       * Allow only slices initialized with a length of zero.
       */
      "suggest-new"?: boolean;
      [k: string]: unknown;
    };
    loggercheck?: {
      /**
       * Allow check for the github.com/go-kit/log library.
       */
      kitlog?: boolean;
      /**
       * Allow check for the k8s.io/klog/v2 library.
       */
      klog?: boolean;
      /**
       * Allow check for the github.com/go-logr/logr library.
       */
      logr?: boolean;
      /**
       * Allow check for the "sugar logger" from go.uber.org/zap library.
       */
      zap?: boolean;
      /**
       * Require all logging keys to be inlined constant strings.
       */
      "require-string-key"?: boolean;
      /**
       * Require printf-like format specifier (%s, %d for example) not present.
       */
      "no-printf-like"?: boolean;
      /**
       * List of custom rules to check against, where each rule is a single logger pattern, useful for wrapped loggers.
       */
      rules?: string[];
      [k: string]: unknown;
    };
    maligned?: {
      /**
       * Whether to print struct with more effective memory layout.
       */
      "suggest-new"?: boolean;
      [k: string]: unknown;
    };
    /**
     * Correct spellings using locale preferences for US or UK. Default is to use a neutral variety of English.
     */
    misspell?: {
      locale?: "US" | "UK";
      /**
       * List of words to ignore.
       */
      "ignore-words"?: string[];
      [k: string]: unknown;
    };
    nakedret?: {
      /**
       * Report if a function has more lines of code than this value and it has naked returns.
       */
      "max-func-lines"?: number;
      [k: string]: unknown;
    };
    nestif?: {
      /**
       * Minimum complexity of "if" statements to report.
       */
      "min-complexity"?: number;
      [k: string]: unknown;
    };
    nilnil?: {
      /**
       * Order of return types to check.
       */
      "checked-types"?: ("ptr" | "func" | "iface" | "map" | "chan")[];
      [k: string]: unknown;
    };
    nlreturn?: {
      /**
       * set block size that is still ok
       */
      "block-size"?: number;
      [k: string]: unknown;
    };
    nolintlint?: {
      /**
       * Enable to ensure that nolint directives are all used.
       */
      "allow-unused"?: boolean;
      /**
       * Exclude these linters from requiring an explanation.
       */
      "allow-no-explanation"?: Linters[];
      /**
       * Enable to require an explanation of nonzero length after each nolint directive.
       */
      "require-explanation"?: boolean;
      /**
       * Enable to require nolint directives to mention the specific linter being suppressed.
       */
      "require-specific"?: boolean;
      [k: string]: unknown;
    };
    reassign?: {
      patterns?: string[];
      [k: string]: unknown;
    };
    nonamedreturns?: {
      /**
       * Report named error if it is assigned inside defer.
       */
      "report-error-in-defer"?: boolean;
      [k: string]: unknown;
    };
    paralleltest?: {
      /**
       * Ignore missing calls to `t.Parallel()` and only report incorrect uses of it.
       */
      "ignore-missing"?: boolean;
      [k: string]: unknown;
    };
    /**
     * We do not recommend using this linter before doing performance profiling.
     * For most programs usage of `prealloc` will be premature optimization.
     */
    prealloc?: {
      /**
       * Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
       */
      simple?: boolean;
      /**
       * Report preallocation suggestions on range loops.
       */
      "range-loops"?: boolean;
      /**
       * Report preallocation suggestions on for loops.
       */
      "for-loops"?: boolean;
      [k: string]: unknown;
    };
    predeclared?: {
      /**
       * Comma-separated list of predeclared identifiers to not report on.
       */
      ignored?: string;
      /**
       * Include method names and field names (i.e., qualified names) in checks.
       */
      q?: boolean;
      [k: string]: unknown;
    };
    promlinter?: {
      strict?: unknown;
      "disabled-linters"?: (
        | "Help"
        | "MetricUnits"
        | "Counter"
        | "HistogramSummaryReserved"
        | "MetricTypeInName"
        | "ReservedChars"
        | "CamelCase"
        | "UnitAbbreviations"
      )[];
      [k: string]: unknown;
    };
    revive?: {
      "max-open-files"?: number;
      "ignore-generated-header"?: boolean;
      confidence?: number;
      severity?: "warning" | "error";
      "enable-all-rules"?: boolean;
      rules?: {
        name: TheRuleName;
        disabled?: boolean;
        severity?: "warning" | "error";
        arguments?: unknown[];
        [k: string]: unknown;
      }[];
      [k: string]: unknown;
    };
    rowserrcheck?: {
      packages?: string[];
      [k: string]: unknown;
    };
    staticcheck?: {
      /**
       * Targeted Go version
       */
      go?: string;
      checks?: ("all" | string)[];
      [k: string]: unknown;
    };
    stylecheck?: {
      /**
       * Targeted Go version
       */
      go?: string;
      checks?: ("all" | string)[];
      /**
       * By default, ST1001 forbids all uses of dot imports in non-test packages. This setting allows setting a whitelist of import paths that can be dot-imported anywhere.
       */
      "dot-import-whitelist"?: string[];
      /**
       * ST1013 recommends using constants from the net/http package instead of hard-coding numeric HTTP status codes. This setting specifies a list of numeric status codes that this check does not complain about.
       */
      "http-status-code-whitelist"?: (
        | "100"
        | "101"
        | "102"
        | "103"
        | "200"
        | "201"
        | "202"
        | "203"
        | "204"
        | "205"
        | "206"
        | "207"
        | "208"
        | "226"
        | "300"
        | "301"
        | "302"
        | "303"
        | "304"
        | "305"
        | "306"
        | "307"
        | "308"
        | "400"
        | "401"
        | "402"
        | "403"
        | "404"
        | "405"
        | "406"
        | "407"
        | "408"
        | "409"
        | "410"
        | "411"
        | "412"
        | "413"
        | "414"
        | "415"
        | "416"
        | "417"
        | "418"
        | "421"
        | "422"
        | "423"
        | "424"
        | "425"
        | "426"
        | "428"
        | "429"
        | "431"
        | "451"
        | "500"
        | "501"
        | "502"
        | "503"
        | "504"
        | "505"
        | "506"
        | "507"
        | "508"
        | "510"
        | "511"
      )[];
      /**
       * ST1003 check, among other things, for the correct capitalization of initialisms. The set of known initialisms can be configured with this option.
       */
      initialisms?: string[];
      [k: string]: unknown;
    };
    tagliatelle?: {
      case?: {
        /**
         * Use the struct field name to check the name of the struct tag.
         */
        "use-field-name"?: boolean;
        rules?: {
          /**
           * This interface was referenced by `undefined`'s JSON-Schema definition
           * via the `patternProperty` "^.+$".
           */
          [k: string]:
            | "camel"
            | "pascal"
            | "kebab"
            | "snake"
            | "goCamel"
            | "goPascal"
            | "goKebab"
            | "goSnake"
            | "upper"
            | "lower";
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    tenv?: {
      /**
       * The option `all` will run against whole test files (`_test.go`) regardless of method/function signatures.
       */
      all?: boolean;
      [k: string]: unknown;
    };
    testpackage?: {
      /**
       * Files with names matching this regular expression are skipped.
       */
      "skip-regexp"?: string;
      /**
       * List of packages that don't end with _test that tests are allowed to be in.
       */
      "allow-packages"?: string[];
      [k: string]: unknown;
    };
    thelper?: {
      test?: {
        /**
         * Check if `t.Helper()` begins helper function.
         */
        begin?: boolean;
        /**
         * Check if *testing.T is first param of helper function.
         */
        first?: boolean;
        /**
         * Check if *testing.T param has t name.
         */
        name?: boolean;
        [k: string]: unknown;
      };
      benchmark?: {
        /**
         * Check if `b.Helper()` begins helper function.
         */
        begin?: boolean;
        /**
         * Check if *testing.B is first param of helper function.
         */
        first?: boolean;
        /**
         * Check if *testing.B param has b name.
         */
        name?: boolean;
        [k: string]: unknown;
      };
      tb?: {
        /**
         * Check if `tb.Helper()` begins helper function.
         */
        begin?: boolean;
        /**
         * Check if *testing.TB is first param of helper function.
         */
        first?: boolean;
        /**
         * Check if *testing.TB param has tb name.
         */
        name?: boolean;
        [k: string]: unknown;
      };
      fuzz?: {
        /**
         * Check if `f.Helper()` begins helper function.
         */
        begin?: boolean;
        /**
         * Check if *testing.F is first param of helper function.
         */
        first?: boolean;
        /**
         * Check if *testing.F param has f name.
         */
        name?: boolean;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    unparam?: {
      /**
       * Inspect exported functions. Set to true if no external program/library imports your code.
       *
       * WARNING: if you enable this setting, unparam will report a lot of false-positives in text editors:
       * if it's called for subdir of a project it can't find external interfaces. All text editor integrations
       * with golangci-lint call it on a directory with the changed file.
       */
      "check-exported"?: boolean;
      [k: string]: unknown;
    };
    varcheck?: {
      /**
       * Check usage of exported variables
       */
      "exported-fields"?: boolean;
      [k: string]: unknown;
    };
    varnamelen?: {
      /**
       * Variables used in at most this N-many lines will be ignored.
       */
      "max-distance"?: number;
      /**
       * The minimum length of a variable's name that is considered `long`.
       */
      "min-name-length"?: number;
      /**
       * Check method receiver names.
       */
      "check-receiver"?: boolean;
      /**
       * Check named return values.
       */
      "check-return"?: boolean;
      /**
       * Check type parameters.
       */
      "check-type-param"?: boolean;
      /**
       * Ignore `ok` variables that hold the bool return value of a type assertion
       */
      "ignore-type-assert-ok"?: boolean;
      /**
       * Ignore `ok` variables that hold the bool return value of a map index.
       */
      "ignore-map-index-ok"?: boolean;
      /**
       * Ignore `ok` variables that hold the bool return value of a channel receive.
       */
      "ignore-chan-recv-ok"?: boolean;
      /**
       * Optional list of variable names that should be ignored completely.
       */
      "ignore-names"?: string[];
      /**
       * Optional list of variable declarations that should be ignored completely.
       */
      "ignore-decls"?: string[];
      [k: string]: unknown;
    };
    whitespace?: {
      /**
       * Enforces newlines (or comments) after every multi-line if statement
       */
      "multi-if"?: boolean;
      /**
       * Enforces newlines (or comments) after every multi-line function signature
       */
      "multi-func"?: boolean;
      [k: string]: unknown;
    };
    wrapcheck?: {
      /**
       * An array of strings which specify substrings of signatures to ignore.
       */
      ignoreSigs?: string[];
      /**
       * An array of strings which specify regular expressions of signatures to ignore.
       */
      ignoreSigRegexps?: string[];
      /**
       * An array of glob patterns which, if any match the package of the function returning the error, will skip wrapcheck analysis for this error.
       */
      ignorePackageGlobs?: string[];
      /**
       * An array of glob patterns which, if matched to an underlying interface name, will ignore unwrapped errors returned from a function whose call is defined on the given interface.
       */
      ignoreInterfaceRegexps?: string[];
      [k: string]: unknown;
    };
    wsl?: {
      /**
       * Controls if you may cuddle assignments and anything without needing an empty line between them.
       */
      "allow-assign-and-anything"?: boolean;
      /**
       * Allow calls and assignments to be cuddled as long as the lines have any matching variables, fields or types.
       */
      "allow-assign-and-call"?: boolean;
      /**
       * Allow declarations (var) to be cuddled.
       */
      "allow-cuddle-declarations"?: boolean;
      /**
       * Allow multiline assignments to be cuddled.
       */
      "allow-multiline-assign"?: boolean;
      /**
       * Allow leading comments to be separated with empty lines.
       */
      "allow-separated-leading-comment"?: boolean;
      /**
       * Allow trailing comments in ending of blocks.
       */
      "allow-trailing-comment"?: boolean;
      /**
       * Force newlines in end of case at this limit (0 = never).
       */
      "force-case-trailing-whitespace"?: number;
      /**
       * A list of call idents that everything can be cuddled with.
       */
      "allow-cuddle-with-calls"?: string[];
      /**
       * AllowCuddleWithRHS is a list of right hand side variables that is allowed to be cuddled with anything.
       */
      "allow-cuddle-with-rhs"?: string[];
      /**
       * When enforce-err-cuddling is enabled this is a list of names used for error variables to check for in the conditional.
       */
      "error-variable-names"?: string[];
      /**
       * Causes an error when an If statement that checks an error variable doesn't cuddle with the assignment of that variable.
       */
      "enforce-err-cuddling"?: boolean;
      /**
       * If true, append is only allowed to be cuddled if appending value is matching variables, fields or types on line above.
       */
      "strict-append"?: boolean;
      [k: string]: unknown;
    };
    /**
     * The custom section can be used to define linter plugins to be loaded at runtime. See README of golangci-lint for more information.
     * Each custom linter should have a unique name.
     */
    custom?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^.*$".
       */
      [k: string]: {
        /**
         * The path to the plugin *.so. Can be absolute or local.
         */
        path: string;
        /**
         * The description of the linter, for documentation purposes only.
         */
        description?: string;
        /**
         * Intended to point to the repo location of the linter, for documentation purposes only.
         */
        "original-url"?: string;
        [k: string]: unknown;
      };
    };
    [k: string]: unknown;
  };
  linters?: {
    /**
     * List of enabled linters.
     */
    enable?: Linters[];
    /**
     * List of disabled linters.
     */
    disable?: Linters[];
    /**
     * Whether to enable all linters. You can re-disable them with `disable` explicitly.
     */
    "enable-all"?: boolean;
    /**
     * Whether to disable all linters. You can re-enable them with `enable` explicitly.
     */
    "disable-all"?: boolean;
    /**
     * Allow to use different presets of linters
     */
    presets?: (
      | "bugs"
      | "comment"
      | "complexity"
      | "error"
      | "format"
      | "import"
      | "metalinter"
      | "module"
      | "performance"
      | "sql"
      | "style"
      | "test"
      | "unused"
    )[];
    /**
     * Enable run of fast linters.
     */
    fast?: boolean;
    [k: string]: unknown;
  };
  issues?: {
    /**
     * List of regular expressions of issue texts to exclude.
     * But independently from this option we use default exclude patterns. Their usage can be controlled through `exclude-use-default`.
     */
    exclude?: string[];
    /**
     * Exclude configuration per-path, per-linter, per-text and per-source
     */
    "exclude-rules"?: {
      path?: string;
      linters?: Linters[];
      text?: string;
      source?: string;
      [k: string]: unknown;
    }[];
    /**
     * Independently from option `exclude` we use default exclude patterns. This behavior can be disabled by this option.
     */
    "exclude-use-default"?: boolean;
    /**
     * If set to true, exclude and exclude-rules regular expressions become case sensitive.
     */
    "exclude-case-sensitive"?: boolean;
    /**
     * The list of ids of default excludes to include or disable.
     */
    include?: string[];
    /**
     * Maximum issues count per one linter. Set to 0 to disable.
     */
    "max-issues-per-linter"?: number;
    /**
     * Maximum count of issues with the same text. Set to 0 to disable.
     */
    "max-same-issues"?: number;
    /**
     * Show only new issues: if there are unstaged changes or untracked files, only those changes are analyzed, else only changes in HEAD~ are analyzed.
     */
    new?: boolean;
    /**
     * Show only new issues created after this git revision.
     */
    "new-from-rev"?: string;
    /**
     * Show only new issues created in git patch with this file path.
     */
    "new-from-patch"?: string;
    [k: string]: unknown;
  };
  severity?: {
    /**
     * Set the default severity for issues. If severity rules are defined and the issues do not match or no severity is provided to the rule this will be the default severity applied. Severities should match the supported severity names of the selected out format.
     */
    "default-severity"?: string;
    /**
     * If set to true, severity-rules regular expressions become case sensitive.
     */
    "case-sensitive"?: boolean;
    /**
     * When a list of severity rules are provided, severity information will be added to lint issues. Severity rules have the same filtering capability as exclude rules except you are allowed to specify one matcher per severity rule.
     * Only affects out formats that support setting severity information.
     */
    rules?: ((IssueMatchPath | IssueMatchSource | IssueMatchLinters | IssueMatchText) & {
      severity?: string;
      [k: string]: unknown;
    })[];
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface IssueMatchPath {
  path?: string;
  severity?: {
    [k: string]: unknown;
  };
}
export interface IssueMatchSource {
  source?: string;
  severity?: {
    [k: string]: unknown;
  };
}
export interface IssueMatchLinters {
  linters?: Linters[];
  severity?: {
    [k: string]: unknown;
  };
}
export interface IssueMatchText {
  text?: string;
  severity?: {
    [k: string]: unknown;
  };
}

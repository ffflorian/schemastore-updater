/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Long name of your project.
 */
export type TheNameSchema = string;
/**
 * Prefix used for CBA macros and the release directory name.
 */
export type ThePrefixSchema = string;
/**
 * Author of the project.
 */
export type TheAuthorSchema = string;
/**
 * HEMTT will look for ```addons/main/script_version.hpp``` and use it for the version number. If you are not using the CBA project structure or do not have that file you can add a version number in the HEMTT project file.
 */
export type TheVersionSchema = string;
export type TheItemsSchema = string;
/**
 * HEMTT will copy the files to the release directory after a successful release build. Supports glob patterns.
 */
export type TheFilesSchema = TheItemsSchema[];
export type TheItemsSchema1 = string;
/**
 * HEMTT will include matching relative or absolute paths when building.
 */
export type TheIncludeSchema = TheItemsSchema1[];
export type TheItemsSchema2 = string;
/**
 * HEMTT will exclude matching files when building.
 */
export type TheExcludeSchema = TheItemsSchema2[];
export type TheItemsSchema3 = string;
/**
 * HEMTT will build the specified addons from the ./optionals folder.
 */
export type TheOptionalsSchema = TheItemsSchema3[];
/**
 * HEMTT will by default build optionals into their own mod folders, which can be directly launched by the user. This can be turned off to build optional PBOs directly into optionals folder.
 */
export type TheFolderOptionalsSchema = boolean;
export type TheItemsSchema4 = string;
/**
 * HEMTT will skip building the specified addons.
 */
export type TheSkipSchema = TheItemsSchema4[];
export type TheItemsSchema5 = string;
/**
 * HEMTT will apply specified header extensions to each PBO. Supports templating.
 */
export type TheHeaderextsSchema = TheItemsSchema5[];
/**
 * HEMTT will use the specified mod name (without @) to form @mod folder. Supports templating.
 */
export type TheModnameSchema = string;
/**
 * HEMTT will use the specified key name for .bikey and .biprivatekey names. Supports templating.
 */
export type TheKeynameSchema = string;
/**
 * HEMTT will use the specified signature name as part of the full signature (.bisign) name. Supports templating.
 */
export type TheSignameSchema = string;
/**
 * HEMTT will use the specified signature version. Currently Supported: V2, V3 (Experimental).
 */
export type TheSigversionSchema = number;
/**
 * If set to true, HEMTT will use (and re-use) releases/keys/{keyname}.biprivatekey. It will be generated if it doesn't exist. The default behaviour is to generate a new private key each time and discard it immediately. HEMTT strongly recommends that you only re-use the key if you are making a client-side mod where it will not matter if clients are running different versions of the mod.
 */
export type TheReusePrivateKeySchema = boolean;
export type TheItemsSchema6 = string;
export type ThePostbuildSchema = TheItemsSchema6[];
export type TheItemsSchema7 = string;
export type ThePrebuildSchema = TheItemsSchema7[];
export type TheItemsSchema8 = string;
export type TheReleasebuildSchema = TheItemsSchema8[];
export type TheSchema = TheSchema1 & TheSchema2;
export type TheSchema1 = ParallelRequiresForeachToBeTrue;
export type ParallelRequiresForeachToBeTrue =
  | {
      [k: string]: unknown;
    }
  | {
      foreach: true;
      [k: string]: unknown;
    };
export type TheItemsSchema9 = string;
export type TheStepsSchema = TheItemsSchema9[];
export type TheItemsSchema10 = string;
/**
 * steps_windows and steps_linux can be used to run different steps on the respective platforms.
 */
export type TheStepsLinuxSchema = TheItemsSchema10[];
export type TheItemsSchema11 = string;
/**
 * steps_windows and steps_linux can be used to run different steps on the respective platforms.
 */
export type TheStepsWindowsSchema = TheItemsSchema11[];
/**
 * All output is hidden by default. Setting show_output will display the command being executed and its output.
 */
export type TheShowOutputSchema = boolean;
/**
 * Scripts can be ran for each addons. Inside prebuild the script will be ran for each addon that HEMTT will build, including addons that will be skipped if they are already built. Inside postbuild and releasebuild only addons that were successfully built with be used, excluding addons that were skipped for being up to date.
 */
export type TheForeachSchema = boolean;
/**
 * Requires foreach to be true. If a script is thread safe parallel can be used to process multiple addons at a time.
 */
export type TheParallelSchema = boolean;

/**
 * The hemtt.json or hemtt.toml file is used to configure your HEMTT Project. All examples are done using JSON, but both files support every feature of HEMTT. hemtt.toml will be used if both files are present.
 */
export interface TheRootSchema {
  name: TheNameSchema;
  prefix: ThePrefixSchema;
  author: TheAuthorSchema;
  version?: TheVersionSchema;
  files?: TheFilesSchema;
  include?: TheIncludeSchema;
  exclude?: TheExcludeSchema;
  optionals?: TheOptionalsSchema;
  folder_optionals?: TheFolderOptionalsSchema;
  skip?: TheSkipSchema;
  headerexts?: TheHeaderextsSchema;
  modname?: TheModnameSchema;
  keyname?: TheKeynameSchema;
  signame?: TheSignameSchema;
  sigversion?: TheSigversionSchema;
  reuse_private_key?: TheReusePrivateKeySchema;
  postbuild?: ThePostbuildSchema;
  prebuild?: ThePrebuildSchema;
  releasebuild?: TheReleasebuildSchema;
  scripts?: TheScriptsSchema;
  [k: string]: unknown;
}
export interface TheScriptsSchema {
  [k: string]: TheSchema;
}
export interface TheSchema2 {
  steps?: TheStepsSchema;
  steps_linux?: TheStepsLinuxSchema;
  steps_windows?: TheStepsWindowsSchema;
  show_output?: TheShowOutputSchema;
  foreach?: TheForeachSchema;
  parallel?: TheParallelSchema;
  [k: string]: unknown;
}

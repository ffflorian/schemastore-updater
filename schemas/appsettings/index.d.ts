/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface JSONSchemaASPNETCoreSAppsettingsJsonFile {
  [k: string]: any;
}
/**
 * Settings for WebOptimizer.Core
 *
 * This interface was referenced by `JSONSchemaASPNETCoreSAppsettingsJsonFile`'s JSON-Schema definition
 * via the `patternProperty` "^WebOptimizer$".
 *
 * This interface was referenced by `JSONSchemaASPNETCoreSAppsettingsJsonFile`'s JSON-Schema definition
 * via the `patternProperty` "^webOptimizer$".
 *
 * This interface was referenced by `JSONSchemaASPNETCoreSAppsettingsJsonFile`'s JSON-Schema definition
 * via the `patternProperty` "^weboptimizer$".
 */
export interface WebOptimizer {
  /**
   * Determines if the "cache-control" HTTP headers should be set and if conditional GET (304) requests should be supported. This could be helpful to disable while in development mode.
   */
  enableCaching?: boolean;
  /**
   * Determines if `<script>` and `<link>` elements should point to the bundled path or a reference per source file should be created. This is helpful to disable when in development mode.
   */
  enableTagHelperBundling?: boolean;
  [k: string]: any;
}
/**
 * Definitions for WebEssentials.AspNetCore.CdnTagHelpers
 *
 * This interface was referenced by `JSONSchemaASPNETCoreSAppsettingsJsonFile`'s JSON-Schema definition
 * via the `patternProperty` "^(cdn|Cdn)$".
 */
export interface Cdn {
  /**
   * An absolute URL used as a prefix for static resources
   */
  url?: string;
  /**
   * If true, injects a <link rel='dns-prefetch'> tag that speeds up DNS resolution to the CDN.
   */
  prefetch?: boolean;
  [k: string]: any;
}
/**
 * This interface was referenced by `JSONSchemaASPNETCoreSAppsettingsJsonFile`'s JSON-Schema definition
 * via the `patternProperty` "^(pwa|PWA|Pwa)$".
 */
export interface Pwa {
  /**
   * The cache identifier of the service worker (can be any string). Change this property to force the service worker to reload in browsers.
   */
  cacheId?: string;
  /**
   * The route to the page to show when offline.
   */
  offlineRoute?: string;
  /**
   * Determines if a script that registers the service worker should be injected into the bottom of the HTML page.
   */
  registerServiceWorker?: boolean;
  /**
   * Determines if a meta tag that points to the web manifest should be inserted at the end of the head element.
   */
  registerWebmanifest?: boolean;
  /**
   * A comma separated list of routes to pre-cache when service worker installs in the browser.
   */
  routesToPreCache?: string;
  /**
   * Selects one of the predefined service worker types.
   */
  strategy?: "cacheFirst" | "cacheFirstSafe" | "minimal" | "networkFirst";
  [k: string]: any;
}

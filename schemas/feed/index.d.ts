/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Uri = string;
export type Item =
  | {
      [k: string]: any;
    }
  | {
      [k: string]: any;
    }
  | {
      [k: string]: any;
    };

export interface JSONSchemaForTheJSONFeedFormat {
  author?: Author;
  /**
   * Provides more detail, beyond the title, on what the feed is about. A feed reader may display this text.
   */
  description?: string;
  /**
   * Says whether or not the feed is finished — that is, whether or not it will ever update again. A feed for a temporary event, such as an instance of the Olympics, could expire. If the value is true, then it’s expired. Any other value, or the absence of expired, means the feed may continue to update.
   */
  expired?: boolean;
  /**
   * The URL of an image for the feed suitable to be used in a source list. It should be square and relatively small, but not smaller than 64 x 64 (so that it can look good on retina displays). As with icon, this image should use transparency where appropriate, since it may be rendered on a non-white background.
   */
  favicon?: Uri;
  /**
   * The URL of the feed, and serves as the unique identifier for the feed. As with 'home_page_url', this should be considered required for feeds on the public web.
   */
  feed_url?: {
    [k: string]: any;
  };
  /**
   * The URL of the resource that the feed describes. This resource may or may not actually be a “home” page, but it should be an HTML page. If a feed is published on the public web, this should be considered as required. But it may not make sense in the case of a file created on a desktop computer, when that file is not shared or is shared only privately.
   */
  home_page_url?: Uri;
  /**
   * Describes endpoints that can be used to subscribe to real-time notifications from the publisher of this feed
   */
  hubs?: {
    /**
     * Describes the protocol used to talk with the hub, such as "rssCloud" or "WebSub".
     */
    type: string;
    url: Uri;
    [k: string]: any;
  }[];
  /**
   * The URL of an image for the feed suitable to be used in a timeline, much the way an avatar might be used. It should be square and relatively large — such as 512 x 512 — so that it can be scaled-down and so that it can look good on retina displays. It should use transparency where appropriate, since it may be rendered on a non-white background.
   */
  icon?: Uri;
  items: Item[];
  /**
   * The URL of a feed that provides the next n items, where n is determined by the publisher. This allows for pagination, but with the expectation that reader software is not required to use it and probably won’t use it very often. next_url must not be the same as feed_url, and it must not be the same as a previous next_url (to avoid infinite loops).
   */
  next_url?: Uri;
  /**
   * The name of the feed, which will often correspond to the name of the website (blog, for instance), though not necessarily.
   */
  title: string;
  /**
   * A description of the purpose of the feed. This is for the use of people looking at the raw JSON, and should be ignored by feed readers
   */
  user_comment?: string;
  /**
   * The URL of the version of the format the feed uses. This should appear at the very top, though we recognize that not all JSON generators allow for ordering.
   */
  version: "https://jsonfeed.org/version/1" | Uri;
  [k: string]: Extension;
}
/**
 * Specifies the feed author
 */
export interface Author {
  /**
   * the URL for an image for the author. As with icon, it should be square and relatively large — such as 512 x 512 — and should use transparency where appropriate, since it may be rendered on a non-white background.
   */
  avatar?: Uri;
  /**
   * Is the author's name
   */
  name?: string;
  /**
   * Is the URL of a site owned by the author. It could be a blog, micro-blog, Twitter account, and so on. Ideally the linked-to page provides a way to contact the author, but that’s not required.
   */
  url?: Uri;
  [k: string]: Extension;
}
/**
 * Custom extension to the JSON Feed format
 *
 * This interface was referenced by `Author`'s JSON-Schema definition
 * via the `patternProperty` "^_[a-zA-Z]([^.]+)$".
 *
 * This interface was referenced by `JSONSchemaForTheJSONFeedFormat`'s JSON-Schema definition
 * via the `patternProperty` "^_[a-zA-Z]([^.]+)$".
 */
export interface Extension {
  /**
   * A description or URL to description of the custom extension.
   */
  about?: string;
  [k: string]: any;
}

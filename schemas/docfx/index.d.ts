/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Defines the source projects to have metadata generated.
 */
export type FileMappingSrc = string | string[] | FileMappingItem[];
/**
 * The file glob pattern collection, with path relative to property `src`/`cwd` if value is set.
 */
export type Files = string | string[];
/**
 * The file glob pattern collection for files that should be excluded, with path relative to property `src`/`cwd` if value is set.
 */
export type Exclude = string | string[];
/**
 * If set to true, DocFX would not fetch Git related information for articles.
 */
export type DisableGitFeatures = boolean;
/**
 * Metadata section defines an array of source projects and their output folder.
 */
export type MetadataConfig = MetadataConfigItem[];
/**
 * Contains all the files to generate documentation, including metadata `yml` files and conceptual `md` files.
 */
export type FileMappingContent = string | string[] | FileMappingItem[];
/**
 * Contains all the resource files that conceptual and metadata files dependent on, e.g. image files.
 */
export type FileMappingResource = string | string[] | FileMappingItem[];
/**
 * Contains all the conceptual files which contains yaml header with `uid` and is intended to override the existing metadata `yml` files.
 */
export type FileMappingOverwrite = string | string[] | FileMappingItem[];
/**
 * [Obsoleted] Contains `rpk` files that define the external references.
 */
export type FileMappingExternalReferences = string | string[] | FileMappingItem[];
/**
 * Specifies the urls of xrefmap used by content files. Currently, it supports following scheme: http, https, ftp, file, embedded.
 */
export type Xref = string | string[];
/**
 * Specify a list of JSON file path containing globalMetadata settings, as similar to `{"key":"value"}`.
 */
export type GlobalMetadataFiles = string | string[];
/**
 * Specify a list of JSON file path containing fileMetadata settings, as similar to `{"key":"value"}`.
 */
export type FileMetadataFiles = string | string[];
/**
 * The latter ones will override the former ones if the name of the file inside the template collides. If omitted, embedded default template will be used.
 */
export type Template = string | string[];
/**
 * The themes applied to the documentation. Theme is used to customize the styles generated by `template`. It can be a string or an array. The latter ones will override the former ones if the name of the file inside the template collides. If omitted, no theme will be applied, the default theme inside the template will be used.
 */
export type Theme = string | string[];

export interface DocFxConfigurationFile {
  metadata?: MetadataConfig;
  build?: BuildConfig;
  [k: string]: unknown;
}
export interface MetadataConfigItem {
  src: FileMappingSrc;
  /**
   * Defines the output folder of the generated metadata files.
   */
  dest: string;
  disableGitFeatures?: DisableGitFeatures;
  /**
   * If set to true, disables default API visibility filter rule.
   */
  disableDefaultFilter?: boolean;
  /**
   * If set to true, it would disable incremental build.
   */
  force?: boolean;
  /**
   * If set to true, DocFX would not render triple-slash-comments in source code as markdown.
   */
  shouldSkipMarkup?: boolean;
  raw?: boolean;
  /**
   * Defines the filter configuration file.
   */
  filter?: string;
  /**
   *  If set to true, DocFX would keep ` in comment id instead of replacing it with -.
   */
  useCompatibilityFileName?: boolean;
}
export interface FileMappingItem {
  /**
   * The name of current item, the value is not used for now.
   */
  name?: string;
  files: Files;
  exclude?: Exclude;
  /**
   * Defines the root folder for the source files, it has the same meaning as `cwd`
   */
  src?: string;
  /**
   * [Obsoleted] Defines the root folder for the source files, it has the same meaning as `src`
   */
  cwd?: string;
  /**
   * The destination folder for the files if copy/transform is used.
   */
  dest?: string;
  /**
   * Version name for the current file-mapping item.
   * If not set, treat the current file-mapping item as in default version.
   * Mappings with the same version name will be built together.
   * Cross reference doesn't support cross different versions.
   */
  version?: string;
  /**
   * The Root TOC Path used for navbar in current version, relative to output root.
   * If not set, will use the toc in output root in current version if exists.
   */
  rootTocPath?: string;
  /**
   * Pattern match will be case sensitive.
   * By default the pattern is case insensitive.
   */
  case?: boolean;
  /**
   * Disable pattern begin with `!` to mean negate.
   * By default the usage is enabled.
   */
  noNegate?: boolean;
  /**
   * Disable `{a,b}c` => `["ac", "bc"]`. By default the usage is enabled.
   */
  noExpand?: boolean;
  /**
   * Disable the usage of `\` to escape values.
   * By default the usage is enabled.
   */
  noEscape?: boolean;
  /**
   * Disable the usage of `**` to match everything including `/` when it is the beginning of the pattern or is after `/`.
   * By default the usage is enable.
   */
  noGlobStar?: boolean;
  /**
   * Allow files start with `.` to be matched even if `.` is not explicitly specified in the pattern.
   * By default files start with `.` will not be matched by `*` unless the pattern starts with `.`.
   */
  dot?: boolean;
}
/**
 * Build section defines configuration values for the build command.
 */
export interface BuildConfig {
  content?: FileMappingContent;
  resource?: FileMappingResource;
  overwrite?: FileMappingOverwrite;
  externalReference?: FileMappingExternalReferences;
  xref?: Xref;
  dest?: string;
  /**
   * Contains metadata that will be applied to every file, in key-value pair format.
   */
  globalMetadata?: {
    [k: string]: unknown;
  };
  globalMetadataFiles?: GlobalMetadataFiles;
  /**
   * Contains metadata that will be applied to specific files.
   */
  fileMetadata?: {
    [k: string]: unknown;
  };
  fileMetadataFiles?: FileMetadataFiles;
  template?: Template;
  theme?: Theme;
  postProcessors?: string | string[];
  serve?: boolean;
  force?: boolean;
  /**
   * Force to re-process the documentation in post processors. It will be cascaded from force option.
   */
  forcePostProcess?: boolean;
  /**
   * Run in debug mode. With debug mode, raw model and view model will be exported automatically when it encounters error when applying templates. If not specified, it is false.
   */
  debug?: boolean;
  /**
   * The output folder for files generated for debugging purpose when in debug mode. If not specified, it is ${TempPath}/docfx.
   */
  debugOutput?: string;
  /**
   * Specify the port of the hosted website.
   */
  port?: string;
  /**
   * If set to true, data model to run template script will be extracted in `.raw.json` extension.
   */
  exportRawModel?: boolean;
  /**
   * Specify the output folder for the raw model. If not set, the raw model will be generated to the same folder as the output documentation.
   */
  rawModelOutputFolder?: string;
  /**
   * If set to true, data model to apply template will be extracted in `.view.json` extension.
   */
  exportViewModel?: boolean;
  /**
   * Specify the output folder for the view model. If not set, the view model will be generated to the same folder as the output documentation.
   */
  viewModelOutputFolder?: string;
  /**
   * If set to true, template will not be actually applied to the documents. This option is always used with `--exportRawModel` or `--exportViewModel`, so that only raw model files or view model files are generated.
   */
  dryRun?: boolean;
  /**
   * Set the max parallelism, 0 (default) is same as the count of CPU cores.
   */
  maxParallelism?: number;
  /**
   * Set the LRU cached model count (approximately the same as the count of input files). By default, it is 8192 for 64bit and 3072 for 32bit process. With LRU cache enabled, memory usage decreases and time consumed increases. If set to 0, Lru cache is disabled.
   */
  lruSize?: number;
  /**
   * Set the name of markdown engine, default is dfm, and another build-in engine is gfm.
   */
  markdownEngineName?: string;
  /**
   * Set the parameters for markdown engine.
   */
  markdownEngineProperties?: {
    [k: string]: unknown;
  };
  /**
   * Disable default lang keyword, e.g. `null`.
   */
  noLangKeyword?: boolean;
  intermediateFolder?: string;
  changesFile?: string;
  disableGitFeatures?: DisableGitFeatures;
  /**
   * If set to true, DocFX does not copy file to the output folder. Instead, it saves a link_to_path property inside manifest.json.
   */
  keepFileLink?: boolean;
  /**
   * If set to true, cleans up historical cache data when building.
   */
  cleanupCacheHistory?: boolean;
}

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * (optional) override the default file types to run on. See https://pre-commit.com/#filtering-files-with-types.
 */
export type FileTypes = (
  | (
      | "adobe-illustrator"
      | "alpm"
      | "apinotes"
      | "asar"
      | "asciidoc"
      | "ash"
      | "asm"
      | "aspectj"
      | "audio"
      | "avif"
      | "awk"
      | "babelrc"
      | "bash"
      | "batch"
      | "bats"
      | "bazel"
      | "bazelrc"
      | "bib"
      | "binary"
      | "bitmap"
      | "bowerrc"
      | "browserslistrc"
      | "bzip2"
      | "c"
      | "c#"
      | "c++"
      | "c2hs"
      | "cbsd"
      | "clojure"
      | "clojurescript"
      | "cmake"
      | "codespellrc"
      | "coffee"
      | "coveragerc"
      | "crystal"
      | "csh"
      | "cson"
      | "csproj"
      | "css"
      | "csslintrc"
      | "csv"
      | "cuda"
      | "cython"
      | "dart"
      | "dash"
      | "def"
      | "diff"
      | "directory"
      | "dockerfile"
      | "dockerignore"
      | "dotenv"
      | "dtd"
      | "editorconfig"
      | "edn"
      | "ejs"
      | "eot"
      | "eps"
      | "erb"
      | "executable"
      | "expect"
      | "file"
      | "fish"
      | "flake8"
      | "gdscript"
      | "geojson"
      | "gherkin"
      | "gif"
      | "gitattributes"
      | "gitconfig"
      | "gitignore"
      | "gitlint"
      | "gitmodules"
      | "go"
      | "go-mod"
      | "go-sum"
      | "gotmpl"
      | "gpx"
      | "graphql"
      | "groovy"
      | "gyb"
      | "gyp"
      | "gzip"
      | "handlebars"
      | "haskell"
      | "hcl"
      | "header"
      | "hgrc"
      | "html"
      | "icalendar"
      | "icns"
      | "icon"
      | "idl"
      | "idris"
      | "image"
      | "inc"
      | "ini"
      | "inl"
      | "ino"
      | "inx"
      | "jade"
      | "jar"
      | "java"
      | "java-properties"
      | "javascript"
      | "jenkins"
      | "jinja"
      | "jpeg"
      | "jshintrc"
      | "json"
      | "json5"
      | "jsonnet"
      | "jsx"
      | "jupyter"
      | "kml"
      | "kotlin"
      | "ksh"
      | "lean"
      | "lektor"
      | "lektorproject"
      | "less"
      | "liquid"
      | "literate-haskell"
      | "lua"
      | "mailmap"
      | "makefile"
      | "manifest"
      | "map"
      | "markdown"
      | "mdx"
      | "mention-bot"
      | "meson"
      | "mib"
      | "modulemap"
      | "musescore"
      | "myst"
      | "ngdoc"
      | "nim"
      | "nimble"
      | "nix"
      | "non-executable"
      | "npmignore"
      | "nunjucks"
      | "objective-c"
      | "objective-c++"
      | "ocaml"
      | "otf"
      | "p12"
      | "pdbrc"
      | "pdf"
      | "pem"
      | "perl"
      | "php"
      | "pkgbuild"
      | "plain-text"
      | "plantuml"
      | "plist"
      | "png"
      | "pofile"
      | "powershell"
      | "prettierignore"
      | "prisma"
      | "proto"
      | "puppet"
      | "purescript"
      | "pyi"
      | "pylintrc"
      | "pypirc"
      | "pyproj"
      | "python"
      | "python2"
      | "python3"
      | "pyz"
      | "qml"
      | "r"
      | "relax-ng"
      | "rst"
      | "ruby"
      | "rust"
      | "salt"
      | "sass"
      | "sbt"
      | "scala"
      | "scheme"
      | "scss"
      | "sh"
      | "shell"
      | "sln"
      | "socket"
      | "solidity"
      | "spec"
      | "sql"
      | "stylus"
      | "svelte"
      | "svg"
      | "swf"
      | "swift"
      | "swiftdeps"
      | "symlink"
      | "system-verilog"
      | "tar"
      | "tcsh"
      | "terraform"
      | "tex"
      | "text"
      | "thrift"
      | "tiff"
      | "toml"
      | "ts"
      | "tsv"
      | "tsx"
      | "ttf"
      | "twig"
      | "twisted"
      | "txsprofile"
      | "urdf"
      | "vb"
      | "vbproj"
      | "vcxproj"
      | "vdx"
      | "verilog"
      | "vhdl"
      | "vim"
      | "vtl"
      | "vue"
      | "wav"
      | "webp"
      | "wheel"
      | "wkt"
      | "woff"
      | "woff2"
      | "wsgi"
      | "xhtml"
      | "xml"
      | "xquery"
      | "xsd"
      | "xsl"
      | "yaml"
      | "yamllint"
      | "yang"
      | "yin"
      | "zcml"
      | "zig"
      | "zip"
      | "zpt"
      | "zsh"
    )
  | string
)[];
/**
 * (optional) override the default file types to run on (OR). See Filtering files with types. new in 2.9.0.
 */
export type FileTypes1 = (
  | (
      | "adobe-illustrator"
      | "alpm"
      | "apinotes"
      | "asar"
      | "asciidoc"
      | "ash"
      | "asm"
      | "aspectj"
      | "audio"
      | "avif"
      | "awk"
      | "babelrc"
      | "bash"
      | "batch"
      | "bats"
      | "bazel"
      | "bazelrc"
      | "bib"
      | "binary"
      | "bitmap"
      | "bowerrc"
      | "browserslistrc"
      | "bzip2"
      | "c"
      | "c#"
      | "c++"
      | "c2hs"
      | "cbsd"
      | "clojure"
      | "clojurescript"
      | "cmake"
      | "codespellrc"
      | "coffee"
      | "coveragerc"
      | "crystal"
      | "csh"
      | "cson"
      | "csproj"
      | "css"
      | "csslintrc"
      | "csv"
      | "cuda"
      | "cython"
      | "dart"
      | "dash"
      | "def"
      | "diff"
      | "directory"
      | "dockerfile"
      | "dockerignore"
      | "dotenv"
      | "dtd"
      | "editorconfig"
      | "edn"
      | "ejs"
      | "eot"
      | "eps"
      | "erb"
      | "executable"
      | "expect"
      | "file"
      | "fish"
      | "flake8"
      | "gdscript"
      | "geojson"
      | "gherkin"
      | "gif"
      | "gitattributes"
      | "gitconfig"
      | "gitignore"
      | "gitlint"
      | "gitmodules"
      | "go"
      | "go-mod"
      | "go-sum"
      | "gotmpl"
      | "gpx"
      | "graphql"
      | "groovy"
      | "gyb"
      | "gyp"
      | "gzip"
      | "handlebars"
      | "haskell"
      | "hcl"
      | "header"
      | "hgrc"
      | "html"
      | "icalendar"
      | "icns"
      | "icon"
      | "idl"
      | "idris"
      | "image"
      | "inc"
      | "ini"
      | "inl"
      | "ino"
      | "inx"
      | "jade"
      | "jar"
      | "java"
      | "java-properties"
      | "javascript"
      | "jenkins"
      | "jinja"
      | "jpeg"
      | "jshintrc"
      | "json"
      | "json5"
      | "jsonnet"
      | "jsx"
      | "jupyter"
      | "kml"
      | "kotlin"
      | "ksh"
      | "lean"
      | "lektor"
      | "lektorproject"
      | "less"
      | "liquid"
      | "literate-haskell"
      | "lua"
      | "mailmap"
      | "makefile"
      | "manifest"
      | "map"
      | "markdown"
      | "mdx"
      | "mention-bot"
      | "meson"
      | "mib"
      | "modulemap"
      | "musescore"
      | "myst"
      | "ngdoc"
      | "nim"
      | "nimble"
      | "nix"
      | "non-executable"
      | "npmignore"
      | "nunjucks"
      | "objective-c"
      | "objective-c++"
      | "ocaml"
      | "otf"
      | "p12"
      | "pdbrc"
      | "pdf"
      | "pem"
      | "perl"
      | "php"
      | "pkgbuild"
      | "plain-text"
      | "plantuml"
      | "plist"
      | "png"
      | "pofile"
      | "powershell"
      | "prettierignore"
      | "prisma"
      | "proto"
      | "puppet"
      | "purescript"
      | "pyi"
      | "pylintrc"
      | "pypirc"
      | "pyproj"
      | "python"
      | "python2"
      | "python3"
      | "pyz"
      | "qml"
      | "r"
      | "relax-ng"
      | "rst"
      | "ruby"
      | "rust"
      | "salt"
      | "sass"
      | "sbt"
      | "scala"
      | "scheme"
      | "scss"
      | "sh"
      | "shell"
      | "sln"
      | "socket"
      | "solidity"
      | "spec"
      | "sql"
      | "stylus"
      | "svelte"
      | "svg"
      | "swf"
      | "swift"
      | "swiftdeps"
      | "symlink"
      | "system-verilog"
      | "tar"
      | "tcsh"
      | "terraform"
      | "tex"
      | "text"
      | "thrift"
      | "tiff"
      | "toml"
      | "ts"
      | "tsv"
      | "tsx"
      | "ttf"
      | "twig"
      | "twisted"
      | "txsprofile"
      | "urdf"
      | "vb"
      | "vbproj"
      | "vcxproj"
      | "vdx"
      | "verilog"
      | "vhdl"
      | "vim"
      | "vtl"
      | "vue"
      | "wav"
      | "webp"
      | "wheel"
      | "wkt"
      | "woff"
      | "woff2"
      | "wsgi"
      | "xhtml"
      | "xml"
      | "xquery"
      | "xsd"
      | "xsl"
      | "yaml"
      | "yamllint"
      | "yang"
      | "yin"
      | "zcml"
      | "zig"
      | "zip"
      | "zpt"
      | "zsh"
    )
  | string
)[];
/**
 * (optional) file types to exclude.
 */
export type FileTypes2 = (
  | (
      | "adobe-illustrator"
      | "alpm"
      | "apinotes"
      | "asar"
      | "asciidoc"
      | "ash"
      | "asm"
      | "aspectj"
      | "audio"
      | "avif"
      | "awk"
      | "babelrc"
      | "bash"
      | "batch"
      | "bats"
      | "bazel"
      | "bazelrc"
      | "bib"
      | "binary"
      | "bitmap"
      | "bowerrc"
      | "browserslistrc"
      | "bzip2"
      | "c"
      | "c#"
      | "c++"
      | "c2hs"
      | "cbsd"
      | "clojure"
      | "clojurescript"
      | "cmake"
      | "codespellrc"
      | "coffee"
      | "coveragerc"
      | "crystal"
      | "csh"
      | "cson"
      | "csproj"
      | "css"
      | "csslintrc"
      | "csv"
      | "cuda"
      | "cython"
      | "dart"
      | "dash"
      | "def"
      | "diff"
      | "directory"
      | "dockerfile"
      | "dockerignore"
      | "dotenv"
      | "dtd"
      | "editorconfig"
      | "edn"
      | "ejs"
      | "eot"
      | "eps"
      | "erb"
      | "executable"
      | "expect"
      | "file"
      | "fish"
      | "flake8"
      | "gdscript"
      | "geojson"
      | "gherkin"
      | "gif"
      | "gitattributes"
      | "gitconfig"
      | "gitignore"
      | "gitlint"
      | "gitmodules"
      | "go"
      | "go-mod"
      | "go-sum"
      | "gotmpl"
      | "gpx"
      | "graphql"
      | "groovy"
      | "gyb"
      | "gyp"
      | "gzip"
      | "handlebars"
      | "haskell"
      | "hcl"
      | "header"
      | "hgrc"
      | "html"
      | "icalendar"
      | "icns"
      | "icon"
      | "idl"
      | "idris"
      | "image"
      | "inc"
      | "ini"
      | "inl"
      | "ino"
      | "inx"
      | "jade"
      | "jar"
      | "java"
      | "java-properties"
      | "javascript"
      | "jenkins"
      | "jinja"
      | "jpeg"
      | "jshintrc"
      | "json"
      | "json5"
      | "jsonnet"
      | "jsx"
      | "jupyter"
      | "kml"
      | "kotlin"
      | "ksh"
      | "lean"
      | "lektor"
      | "lektorproject"
      | "less"
      | "liquid"
      | "literate-haskell"
      | "lua"
      | "mailmap"
      | "makefile"
      | "manifest"
      | "map"
      | "markdown"
      | "mdx"
      | "mention-bot"
      | "meson"
      | "mib"
      | "modulemap"
      | "musescore"
      | "myst"
      | "ngdoc"
      | "nim"
      | "nimble"
      | "nix"
      | "non-executable"
      | "npmignore"
      | "nunjucks"
      | "objective-c"
      | "objective-c++"
      | "ocaml"
      | "otf"
      | "p12"
      | "pdbrc"
      | "pdf"
      | "pem"
      | "perl"
      | "php"
      | "pkgbuild"
      | "plain-text"
      | "plantuml"
      | "plist"
      | "png"
      | "pofile"
      | "powershell"
      | "prettierignore"
      | "prisma"
      | "proto"
      | "puppet"
      | "purescript"
      | "pyi"
      | "pylintrc"
      | "pypirc"
      | "pyproj"
      | "python"
      | "python2"
      | "python3"
      | "pyz"
      | "qml"
      | "r"
      | "relax-ng"
      | "rst"
      | "ruby"
      | "rust"
      | "salt"
      | "sass"
      | "sbt"
      | "scala"
      | "scheme"
      | "scss"
      | "sh"
      | "shell"
      | "sln"
      | "socket"
      | "solidity"
      | "spec"
      | "sql"
      | "stylus"
      | "svelte"
      | "svg"
      | "swf"
      | "swift"
      | "swiftdeps"
      | "symlink"
      | "system-verilog"
      | "tar"
      | "tcsh"
      | "terraform"
      | "tex"
      | "text"
      | "thrift"
      | "tiff"
      | "toml"
      | "ts"
      | "tsv"
      | "tsx"
      | "ttf"
      | "twig"
      | "twisted"
      | "txsprofile"
      | "urdf"
      | "vb"
      | "vbproj"
      | "vcxproj"
      | "vdx"
      | "verilog"
      | "vhdl"
      | "vim"
      | "vtl"
      | "vue"
      | "wav"
      | "webp"
      | "wheel"
      | "wkt"
      | "woff"
      | "woff2"
      | "wsgi"
      | "xhtml"
      | "xml"
      | "xquery"
      | "xsd"
      | "xsl"
      | "yaml"
      | "yamllint"
      | "yang"
      | "yin"
      | "zcml"
      | "zig"
      | "zip"
      | "zpt"
      | "zsh"
    )
  | string
)[];
/**
 * (optional) confines the hook to the commit, merge-commit, push, prepare-commit-msg, commit-msg, post-checkout, post-commit or manual stage. See https://pre-commit.com/#confining-hooks-to-run-at-certain-stages.
 */
export type Stages = (
  | "commit"
  | "merge-commit"
  | "push"
  | "prepare-commit-msg"
  | "commit-msg"
  | "post-checkout"
  | "post-commit"
  | "post-merge"
  | "post-rewrite"
  | "pre-commit"
  | "pre-merge-commit"
  | "pre-push"
  | "pre-rebase"
  | "manual"
)[];
/**
 * (optional: default (all stages)) a configuration-wide default for the stages property of hooks. This will only override individual hooks that do not set stages.
 */
export type Stages1 = (
  | "commit"
  | "merge-commit"
  | "push"
  | "prepare-commit-msg"
  | "commit-msg"
  | "post-checkout"
  | "post-commit"
  | "post-merge"
  | "post-rewrite"
  | "pre-commit"
  | "pre-merge-commit"
  | "pre-push"
  | "pre-rebase"
  | "manual"
)[];

export interface JSONSchemaForPreCommitConfigYaml {
  /**
   * pre-commit.ci specific settings. See https://pre-commit.ci/#configuration
   */
  ci?: {
    /**
     * custom commit message for PR autofixes
     */
    autofix_commit_msg?: string;
    /**
     * whether to autofix pull requests. when disabled, comment "pre-commit.ci autofix" on a pull request to manually trigger auto-fixing
     */
    autofix_prs?: boolean;
    /**
     * branch to send autoupdate PRs to. by default, pre-commit.ci will update the default branch of the repository.
     */
    autoupdate_branch?: string;
    /**
     * custom commit message for autoupdate PRs
     */
    autoupdate_commit_msg?: string;
    /**
     * control when the autoupdate runs
     */
    autoupdate_schedule?: "weekly" | "monthly" | "quarterly";
    /**
     * which hook ids to be skipped when running under pre-commit.ci
     */
    skip?: string[];
    /**
     * whether to recursive check out submodules
     */
    submodules?: boolean;
    [k: string]: unknown | undefined;
  };
  /**
   * A list of repository mappings. See https://pre-commit.com/#pre-commit-configyaml---repos.
   */
  repos: (MetaRepo | LocalRepo | UriRepo)[];
  /**
   * (optional: default {}) a mapping from language to the default language_version that should be used for that language. This will only override individual hooks that do not set language_version.
   */
  default_language_version?: {
    [k: string]: string | undefined;
  };
  default_stages?: Stages1;
  /**
   * (optional: default '') global file include pattern.
   */
  files?: string;
  /**
   * (optional: default ^$) global file exclude pattern.
   */
  exclude?: string;
  /**
   * (optional: default false) set to true to have pre-commit stop running hooks after the first failure.
   */
  fail_fast?: boolean;
  /**
   * (optional: default '0') require a minimum version of pre-commit.
   */
  minimum_pre_commit_version?: string;
  [k: string]: unknown | undefined;
}
export interface MetaRepo {
  /**
   * meta hooks
   */
  repo?: "meta";
  hooks?: {
    id: "check-hooks-apply" | "check-useless-excludes" | "identity";
    [k: string]: unknown | undefined;
  }[];
  [k: string]: unknown | undefined;
}
export interface LocalRepo {
  /**
   * local hooks
   */
  repo?: "local";
  hooks?: HookDefinition[];
  [k: string]: unknown | undefined;
}
export interface HookDefinition {
  /**
   * which hook from the repository to use.
   */
  id: string;
  /**
   * (optional) allows the hook to be referenced using an additional id when using pre-commit run <hookid>.
   */
  alias?: string;
  /**
   * (optional) override the name of the hook - shown during hook execution.
   */
  name: string;
  /**
   * (optional) Tells pre-commit on how to install the hook. See https://pre-commit.com/#supported-languages
   */
  language:
    | (
        | "conda"
        | "coursier"
        | "dart"
        | "docker"
        | "docker_image"
        | "dotnet"
        | "fail"
        | "golang"
        | "lua"
        | "node"
        | "perl"
        | "python"
        | "python_venv"
        | "r"
        | "ruby"
        | "rust"
        | "swift"
        | "pygrep"
        | "script"
        | "system"
      )
    | string;
  /**
   * (optional) override the language version for the hook. See https://pre-commit.com/#overriding-language-version.
   */
  language_version?: string;
  /**
   * (optional) override the default pattern for files to run on.
   */
  files?: string;
  /**
   * (optional) Override default command to execute for the hook.
   */
  entry: string;
  /**
   * (optional) file exclude pattern.
   */
  exclude?: string;
  types?: FileTypes;
  types_or?: FileTypes1;
  exclude_types?: FileTypes2;
  /**
   * (optional) list of additional parameters to pass to the hook.
   */
  args?: string[];
  stages?: Stages;
  /**
   * (optional) a list of dependencies that will be installed in the environment where this hook gets run. One useful application is to install plugins for hooks such as eslint.
   */
  additional_dependencies?: string[];
  /**
   * (optional) if true, this hook will run even if there are no matching files.
   */
  always_run?: boolean;
  /**
   * (optional) if true, forces the output of the hook to be printed even when the hook passes.
   */
  verbose?: boolean;
  /**
   * (optional) if present, the hook output will additionally be written to a file.
   */
  log_file?: string;
  /**
   * (optional) if false, this hook will be called only once without being called for each matching file.
   */
  pass_filenames?: boolean;
  [k: string]: unknown | undefined;
}
export interface UriRepo {
  /**
   * the repository url to git clone from
   */
  repo?: string;
  /**
   * the revision or tag to clone at (previously sha).
   */
  rev?: string;
  /**
   * A list of hook mappings. See https://pre-commit.com/#pre-commit-configyaml---hooks.
   */
  hooks?: HookDefinition1[];
  [k: string]: unknown | undefined;
}
export interface HookDefinition1 {
  /**
   * which hook from the repository to use.
   */
  id?: string;
  /**
   * (optional) allows the hook to be referenced using an additional id when using pre-commit run <hookid>.
   */
  alias?: string;
  /**
   * (optional) override the name of the hook - shown during hook execution.
   */
  name?: string;
  /**
   * (optional) Tells pre-commit on how to install the hook. See https://pre-commit.com/#supported-languages
   */
  language?:
    | (
        | "conda"
        | "coursier"
        | "dart"
        | "docker"
        | "docker_image"
        | "dotnet"
        | "fail"
        | "golang"
        | "lua"
        | "node"
        | "perl"
        | "python"
        | "python_venv"
        | "r"
        | "ruby"
        | "rust"
        | "swift"
        | "pygrep"
        | "script"
        | "system"
      )
    | string;
  /**
   * (optional) override the language version for the hook. See https://pre-commit.com/#overriding-language-version.
   */
  language_version?: string;
  /**
   * (optional) override the default pattern for files to run on.
   */
  files?: string;
  /**
   * (optional) Override default command to execute for the hook.
   */
  entry?: string;
  /**
   * (optional) file exclude pattern.
   */
  exclude?: string;
  types?: FileTypes;
  types_or?: FileTypes1;
  exclude_types?: FileTypes2;
  /**
   * (optional) list of additional parameters to pass to the hook.
   */
  args?: string[];
  stages?: Stages;
  /**
   * (optional) a list of dependencies that will be installed in the environment where this hook gets run. One useful application is to install plugins for hooks such as eslint.
   */
  additional_dependencies?: string[];
  /**
   * (optional) if true, this hook will run even if there are no matching files.
   */
  always_run?: boolean;
  /**
   * (optional) if true, forces the output of the hook to be printed even when the hook passes.
   */
  verbose?: boolean;
  /**
   * (optional) if present, the hook output will additionally be written to a file.
   */
  log_file?: string;
  /**
   * (optional) if false, this hook will be called only once without being called for each matching file.
   */
  pass_filenames?: boolean;
  [k: string]: unknown | undefined;
}

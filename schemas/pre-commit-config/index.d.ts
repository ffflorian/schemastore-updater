/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A list of file types to run on combined via logical `and` of the current hook
 * https://pre-commit.com/#pre-commit-configyaml---hooks
 */
export type FileTypes = (
  | "adobe-illustrator"
  | "alpm"
  | "apinotes"
  | "asar"
  | "asciidoc"
  | "ash"
  | "asm"
  | "aspectj"
  | "audio"
  | "avif"
  | "awk"
  | "babelrc"
  | "bash"
  | "batch"
  | "bats"
  | "bazel"
  | "bazelrc"
  | "bib"
  | "binary"
  | "bitmap"
  | "bowerrc"
  | "browserslistrc"
  | "bzip2"
  | "c"
  | "c#"
  | "c++"
  | "c2hs"
  | "cbsd"
  | "clojure"
  | "clojurescript"
  | "cmake"
  | "codespellrc"
  | "coffee"
  | "coveragerc"
  | "crystal"
  | "csh"
  | "cson"
  | "csproj"
  | "css"
  | "csslintrc"
  | "csv"
  | "cuda"
  | "cython"
  | "dart"
  | "dash"
  | "def"
  | "diff"
  | "directory"
  | "dockerfile"
  | "dockerignore"
  | "dotenv"
  | "dtd"
  | "editorconfig"
  | "edn"
  | "ejs"
  | "eot"
  | "eps"
  | "erb"
  | "executable"
  | "expect"
  | "file"
  | "fish"
  | "flake8"
  | "gdscript"
  | "geojson"
  | "gherkin"
  | "gif"
  | "gitattributes"
  | "gitconfig"
  | "gitignore"
  | "gitlint"
  | "gitmodules"
  | "go"
  | "go-mod"
  | "go-sum"
  | "gotmpl"
  | "gpx"
  | "graphql"
  | "groovy"
  | "gyb"
  | "gyp"
  | "gzip"
  | "handlebars"
  | "haskell"
  | "hcl"
  | "header"
  | "hgrc"
  | "html"
  | "icalendar"
  | "icns"
  | "icon"
  | "idl"
  | "idris"
  | "image"
  | "inc"
  | "ini"
  | "inl"
  | "ino"
  | "inx"
  | "jade"
  | "jar"
  | "java"
  | "java-properties"
  | "javascript"
  | "jenkins"
  | "jinja"
  | "jpeg"
  | "jshintrc"
  | "json"
  | "json5"
  | "jsonnet"
  | "jsx"
  | "jupyter"
  | "kml"
  | "kotlin"
  | "ksh"
  | "lean"
  | "lektor"
  | "lektorproject"
  | "less"
  | "liquid"
  | "literate-haskell"
  | "lua"
  | "mailmap"
  | "makefile"
  | "manifest"
  | "map"
  | "markdown"
  | "mdx"
  | "mention-bot"
  | "mib"
  | "modulemap"
  | "musescore"
  | "myst"
  | "ngdoc"
  | "nim"
  | "nimble"
  | "nix"
  | "non-executable"
  | "npmignore"
  | "nunjucks"
  | "objective-c"
  | "objective-c++"
  | "ocaml"
  | "otf"
  | "p12"
  | "pdbrc"
  | "pdf"
  | "pem"
  | "perl"
  | "php"
  | "pkgbuild"
  | "plain-text"
  | "plantuml"
  | "plist"
  | "png"
  | "pofile"
  | "powershell"
  | "prettierignore"
  | "prisma"
  | "proto"
  | "puppet"
  | "purescript"
  | "pyi"
  | "pylintrc"
  | "pypirc"
  | "pyproj"
  | "python"
  | "python2"
  | "python3"
  | "pyz"
  | "qml"
  | "r"
  | "relax-ng"
  | "rst"
  | "ruby"
  | "rust"
  | "salt"
  | "sass"
  | "sbt"
  | "scala"
  | "scheme"
  | "scss"
  | "sh"
  | "shell"
  | "sln"
  | "socket"
  | "solidity"
  | "spec"
  | "sql"
  | "stylus"
  | "svelte"
  | "svg"
  | "swf"
  | "swift"
  | "swiftdeps"
  | "symlink"
  | "system-verilog"
  | "tar"
  | "tcsh"
  | "terraform"
  | "tex"
  | "text"
  | "thrift"
  | "tiff"
  | "toml"
  | "ts"
  | "tsv"
  | "tsx"
  | "ttf"
  | "twig"
  | "twisted"
  | "txsprofile"
  | "urdf"
  | "vb"
  | "vbproj"
  | "vcxproj"
  | "vdx"
  | "verilog"
  | "vhdl"
  | "vim"
  | "vtl"
  | "vue"
  | "wav"
  | "webp"
  | "wheel"
  | "wkt"
  | "woff"
  | "woff2"
  | "wsgi"
  | "xhtml"
  | "xml"
  | "xquery"
  | "xsd"
  | "xsl"
  | "yaml"
  | "yamllint"
  | "yang"
  | "yin"
  | "zcml"
  | "zig"
  | "zip"
  | "zpt"
  | "zsh"
)[];
/**
 * A list of file types to run on combined via logical `or` of the current hook
 * https://pre-commit.com/#pre-commit-configyaml---hooks
 */
export type FileTypes1 = (
  | "adobe-illustrator"
  | "alpm"
  | "apinotes"
  | "asar"
  | "asciidoc"
  | "ash"
  | "asm"
  | "aspectj"
  | "audio"
  | "avif"
  | "awk"
  | "babelrc"
  | "bash"
  | "batch"
  | "bats"
  | "bazel"
  | "bazelrc"
  | "bib"
  | "binary"
  | "bitmap"
  | "bowerrc"
  | "browserslistrc"
  | "bzip2"
  | "c"
  | "c#"
  | "c++"
  | "c2hs"
  | "cbsd"
  | "clojure"
  | "clojurescript"
  | "cmake"
  | "codespellrc"
  | "coffee"
  | "coveragerc"
  | "crystal"
  | "csh"
  | "cson"
  | "csproj"
  | "css"
  | "csslintrc"
  | "csv"
  | "cuda"
  | "cython"
  | "dart"
  | "dash"
  | "def"
  | "diff"
  | "directory"
  | "dockerfile"
  | "dockerignore"
  | "dotenv"
  | "dtd"
  | "editorconfig"
  | "edn"
  | "ejs"
  | "eot"
  | "eps"
  | "erb"
  | "executable"
  | "expect"
  | "file"
  | "fish"
  | "flake8"
  | "gdscript"
  | "geojson"
  | "gherkin"
  | "gif"
  | "gitattributes"
  | "gitconfig"
  | "gitignore"
  | "gitlint"
  | "gitmodules"
  | "go"
  | "go-mod"
  | "go-sum"
  | "gotmpl"
  | "gpx"
  | "graphql"
  | "groovy"
  | "gyb"
  | "gyp"
  | "gzip"
  | "handlebars"
  | "haskell"
  | "hcl"
  | "header"
  | "hgrc"
  | "html"
  | "icalendar"
  | "icns"
  | "icon"
  | "idl"
  | "idris"
  | "image"
  | "inc"
  | "ini"
  | "inl"
  | "ino"
  | "inx"
  | "jade"
  | "jar"
  | "java"
  | "java-properties"
  | "javascript"
  | "jenkins"
  | "jinja"
  | "jpeg"
  | "jshintrc"
  | "json"
  | "json5"
  | "jsonnet"
  | "jsx"
  | "jupyter"
  | "kml"
  | "kotlin"
  | "ksh"
  | "lean"
  | "lektor"
  | "lektorproject"
  | "less"
  | "liquid"
  | "literate-haskell"
  | "lua"
  | "mailmap"
  | "makefile"
  | "manifest"
  | "map"
  | "markdown"
  | "mdx"
  | "mention-bot"
  | "mib"
  | "modulemap"
  | "musescore"
  | "myst"
  | "ngdoc"
  | "nim"
  | "nimble"
  | "nix"
  | "non-executable"
  | "npmignore"
  | "nunjucks"
  | "objective-c"
  | "objective-c++"
  | "ocaml"
  | "otf"
  | "p12"
  | "pdbrc"
  | "pdf"
  | "pem"
  | "perl"
  | "php"
  | "pkgbuild"
  | "plain-text"
  | "plantuml"
  | "plist"
  | "png"
  | "pofile"
  | "powershell"
  | "prettierignore"
  | "prisma"
  | "proto"
  | "puppet"
  | "purescript"
  | "pyi"
  | "pylintrc"
  | "pypirc"
  | "pyproj"
  | "python"
  | "python2"
  | "python3"
  | "pyz"
  | "qml"
  | "r"
  | "relax-ng"
  | "rst"
  | "ruby"
  | "rust"
  | "salt"
  | "sass"
  | "sbt"
  | "scala"
  | "scheme"
  | "scss"
  | "sh"
  | "shell"
  | "sln"
  | "socket"
  | "solidity"
  | "spec"
  | "sql"
  | "stylus"
  | "svelte"
  | "svg"
  | "swf"
  | "swift"
  | "swiftdeps"
  | "symlink"
  | "system-verilog"
  | "tar"
  | "tcsh"
  | "terraform"
  | "tex"
  | "text"
  | "thrift"
  | "tiff"
  | "toml"
  | "ts"
  | "tsv"
  | "tsx"
  | "ttf"
  | "twig"
  | "twisted"
  | "txsprofile"
  | "urdf"
  | "vb"
  | "vbproj"
  | "vcxproj"
  | "vdx"
  | "verilog"
  | "vhdl"
  | "vim"
  | "vtl"
  | "vue"
  | "wav"
  | "webp"
  | "wheel"
  | "wkt"
  | "woff"
  | "woff2"
  | "wsgi"
  | "xhtml"
  | "xml"
  | "xquery"
  | "xsd"
  | "xsl"
  | "yaml"
  | "yamllint"
  | "yang"
  | "yin"
  | "zcml"
  | "zig"
  | "zip"
  | "zpt"
  | "zsh"
)[];
/**
 * A list of file types to exclude of the current hook
 * https://pre-commit.com/#pre-commit-configyaml---hooks
 */
export type FileTypes2 = (
  | "adobe-illustrator"
  | "alpm"
  | "apinotes"
  | "asar"
  | "asciidoc"
  | "ash"
  | "asm"
  | "aspectj"
  | "audio"
  | "avif"
  | "awk"
  | "babelrc"
  | "bash"
  | "batch"
  | "bats"
  | "bazel"
  | "bazelrc"
  | "bib"
  | "binary"
  | "bitmap"
  | "bowerrc"
  | "browserslistrc"
  | "bzip2"
  | "c"
  | "c#"
  | "c++"
  | "c2hs"
  | "cbsd"
  | "clojure"
  | "clojurescript"
  | "cmake"
  | "codespellrc"
  | "coffee"
  | "coveragerc"
  | "crystal"
  | "csh"
  | "cson"
  | "csproj"
  | "css"
  | "csslintrc"
  | "csv"
  | "cuda"
  | "cython"
  | "dart"
  | "dash"
  | "def"
  | "diff"
  | "directory"
  | "dockerfile"
  | "dockerignore"
  | "dotenv"
  | "dtd"
  | "editorconfig"
  | "edn"
  | "ejs"
  | "eot"
  | "eps"
  | "erb"
  | "executable"
  | "expect"
  | "file"
  | "fish"
  | "flake8"
  | "gdscript"
  | "geojson"
  | "gherkin"
  | "gif"
  | "gitattributes"
  | "gitconfig"
  | "gitignore"
  | "gitlint"
  | "gitmodules"
  | "go"
  | "go-mod"
  | "go-sum"
  | "gotmpl"
  | "gpx"
  | "graphql"
  | "groovy"
  | "gyb"
  | "gyp"
  | "gzip"
  | "handlebars"
  | "haskell"
  | "hcl"
  | "header"
  | "hgrc"
  | "html"
  | "icalendar"
  | "icns"
  | "icon"
  | "idl"
  | "idris"
  | "image"
  | "inc"
  | "ini"
  | "inl"
  | "ino"
  | "inx"
  | "jade"
  | "jar"
  | "java"
  | "java-properties"
  | "javascript"
  | "jenkins"
  | "jinja"
  | "jpeg"
  | "jshintrc"
  | "json"
  | "json5"
  | "jsonnet"
  | "jsx"
  | "jupyter"
  | "kml"
  | "kotlin"
  | "ksh"
  | "lean"
  | "lektor"
  | "lektorproject"
  | "less"
  | "liquid"
  | "literate-haskell"
  | "lua"
  | "mailmap"
  | "makefile"
  | "manifest"
  | "map"
  | "markdown"
  | "mdx"
  | "mention-bot"
  | "mib"
  | "modulemap"
  | "musescore"
  | "myst"
  | "ngdoc"
  | "nim"
  | "nimble"
  | "nix"
  | "non-executable"
  | "npmignore"
  | "nunjucks"
  | "objective-c"
  | "objective-c++"
  | "ocaml"
  | "otf"
  | "p12"
  | "pdbrc"
  | "pdf"
  | "pem"
  | "perl"
  | "php"
  | "pkgbuild"
  | "plain-text"
  | "plantuml"
  | "plist"
  | "png"
  | "pofile"
  | "powershell"
  | "prettierignore"
  | "prisma"
  | "proto"
  | "puppet"
  | "purescript"
  | "pyi"
  | "pylintrc"
  | "pypirc"
  | "pyproj"
  | "python"
  | "python2"
  | "python3"
  | "pyz"
  | "qml"
  | "r"
  | "relax-ng"
  | "rst"
  | "ruby"
  | "rust"
  | "salt"
  | "sass"
  | "sbt"
  | "scala"
  | "scheme"
  | "scss"
  | "sh"
  | "shell"
  | "sln"
  | "socket"
  | "solidity"
  | "spec"
  | "sql"
  | "stylus"
  | "svelte"
  | "svg"
  | "swf"
  | "swift"
  | "swiftdeps"
  | "symlink"
  | "system-verilog"
  | "tar"
  | "tcsh"
  | "terraform"
  | "tex"
  | "text"
  | "thrift"
  | "tiff"
  | "toml"
  | "ts"
  | "tsv"
  | "tsx"
  | "ttf"
  | "twig"
  | "twisted"
  | "txsprofile"
  | "urdf"
  | "vb"
  | "vbproj"
  | "vcxproj"
  | "vdx"
  | "verilog"
  | "vhdl"
  | "vim"
  | "vtl"
  | "vue"
  | "wav"
  | "webp"
  | "wheel"
  | "wkt"
  | "woff"
  | "woff2"
  | "wsgi"
  | "xhtml"
  | "xml"
  | "xquery"
  | "xsd"
  | "xsl"
  | "yaml"
  | "yamllint"
  | "yang"
  | "yin"
  | "zcml"
  | "zig"
  | "zip"
  | "zpt"
  | "zsh"
)[];
/**
 * A stage of the current hook
 * https://pre-commit.com/#pre-commit-configyaml---hooks
 */
export type Stages = (
  | "commit"
  | "merge-commit"
  | "push"
  | "prepare-commit-msg"
  | "commit-msg"
  | "post-checkout"
  | "post-commit"
  | "post-merge"
  | "post-rewrite"
  | "manual"
)[];
/**
 * The default stages of the current project
 * https://pre-commit.com/#pre-commit-configyaml---top-level
 */
export type Stages1 = (
  | "commit"
  | "merge-commit"
  | "push"
  | "prepare-commit-msg"
  | "commit-msg"
  | "post-checkout"
  | "post-commit"
  | "post-merge"
  | "post-rewrite"
  | "manual"
)[];

export interface JSONSchemaForPreCommitConfigYaml {
  /**
   * pre-commit.ci specific settings
   * https://pre-commit.ci/#configuration
   */
  ci?: {
    /**
     * A commit message for pull request autofixes
     * https://pre-commit.ci/#configuration
     */
    autofix_commit_msg?: string;
    /**
     * Whether to autofix pull requests
     * https://pre-commit.ci/#configuration
     */
    autofix_prs?: boolean;
    /**
     * A branch to send pull request's autoupdate to
     * https://pre-commit.ci/#configuration
     */
    autoupdate_branch?: string;
    /**
     * A commit message for autoupdate pull requests
     * https://pre-commit.ci/#configuration
     */
    autoupdate_commit_msg?: string;
    /**
     * An autoupdate frequency
     * https://pre-commit.ci/#configuration
     */
    autoupdate_schedule?: "weekly" | "monthly" | "quarterly";
    /**
     * List of skipped hook's ids
     * https://pre-commit.ci/#configuration
     */
    skip?: string[];
    /**
     * Whether to recursively check out submodules
     * https://pre-commit.ci/#configuration
     */
    submodules?: boolean;
    [k: string]: unknown | undefined;
  };
  /**
   * Repository mappings of the current project
   * https://pre-commit.com/#pre-commit-configyaml---top-level
   */
  repos: (MetaRepo | LocalRepo | UriRepo)[];
  /**
   * Mappings for the default language versions of the current project
   * https://pre-commit.com/#pre-commit-configyaml---top-level
   */
  default_language_version?: {
    [k: string]: string | undefined;
  };
  default_stages?: Stages1;
  /**
   * A file include pattern of the current project
   * https://pre-commit.com/#pre-commit-configyaml---top-level
   */
  files?: string;
  /**
   * A file exclude pattern of the current project
   * https://pre-commit.com/#pre-commit-configyaml---top-level
   */
  exclude?: string;
  /**
   * Whether stop running hooks after a first failure
   * https://pre-commit.com/#pre-commit-configyaml---top-level
   */
  fail_fast?: boolean;
  /**
   * A minimum version of pre-commit
   * https://pre-commit.com/#pre-commit-configyaml---top-level
   */
  minimum_pre_commit_version?: string;
  [k: string]: unknown | undefined;
}
export interface MetaRepo {
  repo?: "meta";
  hooks?: {
    id: "check-hooks-apply" | "check-useless-excludes" | "identity";
    [k: string]: unknown | undefined;
  }[];
  [k: string]: unknown | undefined;
}
export interface LocalRepo {
  /**
   * A list of local hooks
   * https://pre-commit.com/#2-add-a-pre-commit-configuration
   */
  repo?: "local";
  hooks?: HookDefinition[];
  [k: string]: unknown | undefined;
}
export interface HookDefinition {
  /**
   * An identifier of the current hook
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  id: string;
  /**
   * An additional identifier of the current hook for `pre-commit run <hookid>`
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  alias?: string;
  /**
   * A name of the current hook
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  name: string;
  /**
   * A language version of the current hook
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  language_version?: string;
  /**
   * A pattern to include files to run on of the current hook
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  files?: string;
  /**
   * A pattern to exclude files from `files` to run on of the current hook
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  exclude?: string;
  types?: FileTypes;
  types_or?: FileTypes1;
  exclude_types?: FileTypes2;
  /**
   * List of additional parameters to pass to the current hook
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  args?: string[];
  stages?: Stages;
  /**
   * A list of additional_dependencies of the current hook
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  additional_dependencies?: string[];
  /**
   * Run the current hook when no files matched
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  always_run?: boolean;
  /**
   * Display an output of the current hook even it passes
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  verbose?: boolean;
  /**
   * A command of the current hook
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  entry: string;
  /**
   * A log file of the current hook
   */
  log_file?: string;
  /**
   * A language the current hook is written in
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  language:
    | "conda"
    | "coursier"
    | "dart"
    | "docker"
    | "docker_image"
    | "dotnet"
    | "fail"
    | "golang"
    | "lua"
    | "node"
    | "perl"
    | "python"
    | "python_venv"
    | "r"
    | "ruby"
    | "rust"
    | "swift"
    | "pygrep"
    | "script"
    | "system";
  /**
   * Whether to pass filenames to the current hook or not
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  pass_filenames?: boolean;
  [k: string]: unknown | undefined;
}
export interface UriRepo {
  /**
   * A repository url
   * https://pre-commit.com/#2-add-a-pre-commit-configuration
   */
  repo?: string;
  /**
   * A revision or tag to clone at
   * https://pre-commit.com/#2-add-a-pre-commit-configuration
   */
  rev?: string;
  /**
   * A list of hook mappings
   * https://pre-commit.com/#pre-commit-configyaml---hooks.
   */
  hooks?: HookDefinition1[];
  [k: string]: unknown | undefined;
}
export interface HookDefinition1 {
  /**
   * An identifier of the current hook
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  id?: string;
  /**
   * An additional identifier of the current hook for `pre-commit run <hookid>`
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  alias?: string;
  /**
   * A name of the current hook
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  name?: string;
  /**
   * A language version of the current hook
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  language_version?: string;
  /**
   * A pattern to include files to run on of the current hook
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  files?: string;
  /**
   * A pattern to exclude files from `files` to run on of the current hook
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  exclude?: string;
  types?: FileTypes;
  types_or?: FileTypes1;
  exclude_types?: FileTypes2;
  /**
   * List of additional parameters to pass to the current hook
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  args?: string[];
  stages?: Stages;
  /**
   * A list of additional_dependencies of the current hook
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  additional_dependencies?: string[];
  /**
   * Run the current hook when no files matched
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  always_run?: boolean;
  /**
   * Display an output of the current hook even it passes
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  verbose?: boolean;
  /**
   * A command of the current hook
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  entry?: string;
  /**
   * A log file of the current hook
   */
  log_file?: string;
  /**
   * A language the current hook is written in
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  language?:
    | "conda"
    | "coursier"
    | "dart"
    | "docker"
    | "docker_image"
    | "dotnet"
    | "fail"
    | "golang"
    | "lua"
    | "node"
    | "perl"
    | "python"
    | "python_venv"
    | "r"
    | "ruby"
    | "rust"
    | "swift"
    | "pygrep"
    | "script"
    | "system";
  /**
   * Whether to pass filenames to the current hook or not
   * https://pre-commit.com/#pre-commit-configyaml---hooks
   */
  pass_filenames?: boolean;
  [k: string]: unknown | undefined;
}

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type RepoType = "hg" | "git" | "svn" | "bzr";
export type Url = string;
/**
 * Info about a plugin/repository outside this one.
 */
export type OtherRepository = OtherRepository1 & {
  /**
   * Primary homepage of the plugin.
   */
  homepage?: string;
  "addon-info"?: JSONSchemaForVimPluginAddonInfoJsonMetadataFiles1;
  [k: string]: unknown;
};
export type OtherRepository1 =
  | {}
  | {
      type?: "" | "archive";
      url?: Url;
      /**
       * Script ID number of the target plugin on www.vim.org, if any.
       */
      vim_script_nr?: number;
      "script-type"?: "color scheme" | "ftplugin" | "game" | "indent" | "syntax" | "utility" | "patch";
      [k: string]: unknown;
    }
  | {
      type: RepoType;
      url: Url;
      [k: string]: unknown;
    };

export interface JSONSchemaForVimPluginAddonInfoJsonMetadataFiles {
  /**
   * The name of the plugin. Used by plugin managers and some introspection tools. Generally corresponds to the name of the repository but without "vim" prefix/suffix.
   */
  name?: string;
  /**
   * Dotted version number of the plugin, generally in semantic versioning scheme.
   */
  version?: string;
  /**
   * Short description of the plugin and what it does (a sentence or two)
   */
  description?: string;
  /**
   * Primary homepage of the plugin.
   */
  homepage?: string;
  /**
   * Name of the person or organization that created the plugin
   */
  author?: string;
  /**
   * Name of the person who maintains the plugin
   */
  maintainer?: string;
  repository?: SelfRepository;
  /**
   * Plugins that are strictly required for the plugin to work, where keys are plugin names and values may describe where plugins can be fetched from.
   */
  dependencies?: {
    [k: string]: OtherRepository;
  };
  [k: string]: unknown;
}
/**
 * Info for the plugin itself. Describes where the canonical copy of the plugin can be fetched from.
 */
export interface SelfRepository {
  type?: RepoType;
  url?: Url;
  /**
   * For a deprecated plugin, a deprecation message to be shown to any user who installs the plugin.
   */
  deprecated?: string;
  [k: string]: unknown;
}
export interface JSONSchemaForVimPluginAddonInfoJsonMetadataFiles1 {
  /**
   * The name of the plugin. Used by plugin managers and some introspection tools. Generally corresponds to the name of the repository but without "vim" prefix/suffix.
   */
  name?: string;
  /**
   * Dotted version number of the plugin, generally in semantic versioning scheme.
   */
  version?: string;
  /**
   * Short description of the plugin and what it does (a sentence or two)
   */
  description?: string;
  /**
   * Primary homepage of the plugin.
   */
  homepage?: string;
  /**
   * Name of the person or organization that created the plugin
   */
  author?: string;
  /**
   * Name of the person who maintains the plugin
   */
  maintainer?: string;
  repository?: SelfRepository;
  /**
   * Plugins that are strictly required for the plugin to work, where keys are plugin names and values may describe where plugins can be fetched from.
   */
  dependencies?: {
    [k: string]: OtherRepository;
  };
  [k: string]: unknown;
}

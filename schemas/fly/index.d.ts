/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * https://fly.io/docs/reference/configuration
 */
export interface FlyIoConfigSchemaFlyToml {
  /**
   * Fly.io application name
   */
  app?: string;
  /**
   * Seconds to wait before forcing a VM process to exit. Default is 5 seconds.
   */
  kill_timeout?: number;
  /**
   * Signal to send to a process to shut it down gracefully. Default is SIGINT.
   */
  kill_signal?: "SIGINT" | "SIGTERM" | "SIGQUIT" | "SIGUSR1" | "SIGUSR2" | "SIGKILL" | "SIGSTOP";
  /**
   * The `statics` sections expose static assets built into your application's container to Fly's Anycast network. You can serve HTML files, Javascript, and images without needing to run a web server inside your container.
   */
  statics?: Statics | Statics[];
  services?: Services | Services[];
  deploy?: {
    /**
     * Command to run after a build, with access to the production environment, but before deployment. Non-zero exit status will abort the deployment.
     *
     * ```toml
     * [deploy]
     *   release_command ="bundle exec rails db:migrate"
     * ```
     */
    release_command?: string;
    /**
     * Strategy for replacing VMs during a deployment.
     */
    strategy?: "canary" | "rolling" | "bluegreen" | "immediate";
  };
  /**
   * Mount [persistent storage volumes](https://fly.io/docs/reference/volumes) previously setup via `flyctl`. Both settings are required. Example:
   *
   * ```toml
   * [mounts]
   *   source = "myapp_data"
   *   destination = "/data"
   * ```
   */
  mounts?: {
    /**
     * The name of the volume to mount as shown in `fly volumes list`.
     *
     * A volume of this name *must exist* in each of the app regions. If there's more than one volume in the target region with the same one, one will be picked randomly.
     */
    source: string;
    /**
     * The path at which the `source` volume should be mounted in the running app VM.
     */
    destination: string;
    /**
     * The name of the process(es) to which this mount should be applied. See [multiple processes](https://community.fly.io/t/preview-multi-process-apps-get-your-workers-here/2316).
     */
    processes?: string[];
  };
  /**
   * Flags and features that are subject to change, deprecation or promotion to the main configuration.
   */
  experimental?: {
    /**
     * Override the server command (CMD) set by the Dockerfile. Specify as an array of strings:
     *
     * ```toml
     * cmd = ["path/to/command", "arg1", "arg2"]
     * ```
     */
    cmd?: string | string[];
    /**
     * Override the ENTRYPOINT set by the Dockerfile. Specify as an array of strings:
     *
     * ```toml
     * entrypoint = ["path/to/command", "arg1", "arg2"]
     * ```
     */
    entrypoint?: string | string[];
    /**
     * Failed deployments should roll back automatically to the previous successfully deployed release. Defaults to `true`
     */
    auto_rollback?: boolean;
    /**
     * Enables private network access to the Fly organization. Defaults to `true`.
     */
    private_network?: boolean;
    [k: string]: unknown | undefined;
  };
  /**
   * Set non-sensitive information as environment variables in the application's [runtime environment](https://fly.io/docs/reference/runtime-environment/).
   * For sensitive information, such as credentials or passwords, use the [secrets command](https://fly.io/docs/reference/secrets). For anything else though, the `env` section provides a simple way to set environment variables. Here's an example:
   * ```toml
   * [env]
   *   LOG_LEVEL = "debug"
   *   S3_BUCKET = "my-bucket"
   * ```
   */
  env?: {
    [k: string]: string | undefined;
  };
  /**
   * Build configuration options. See docs at https://fly.io/docs/reference/builders.
   */
  build?: {
    /**
     * Builder Docker image to be used with the 'buildpacks' option
     */
    builder?: string;
    /**
     * Buildpacks to be run by the 'builder' Docker image
     *
     * @minItems 1
     */
    buildpacks?: [string, ...string[]];
    /**
     * Build arguments passed to both Dockerfile and Buildpack builds. These arguments are **not available** on VMs at runtime.
     * ```toml
     * [build.args]
     *   USER = "julieta"
     *   MODE = "production"
     * ```
     */
    args?: {
      [k: string]: unknown | undefined;
    }[];
    /**
     * Specify the target stage for [multistage Dockerfile builds](https://docs.docker.com/develop/develop-images/multistage-build/).
     */
    "build-target"?: string;
    /**
     * Docker image to be deployed (skips the build process)
     */
    image?: string;
    /**
     * Dockerfile used for builds. Defaults to './Dockerfile'
     */
    dockerfile?: string;
    additionalProperties?: false;
    [k: string]: unknown | undefined;
  };
  additionalProperties?: true;
  [k: string]: unknown | undefined;
}
export interface Statics {
  /**
   * The path inside your container where the assets to serve are located.
   */
  guest_path: string;
  /**
   * The URL prefix that should serve the static assets.
   */
  url_prefix: string;
}
/**
 * Configure the mapping of ports from the public Fly proxy to your application.
 *
 * You can have:
 * * **No services section**: The application has no mappings to the external internet - typically apps like databases or background job workers that talk over 6PN private networking to other apps.
 * * **One services section**: One internal port mapped to one external port on the internet.
 * * **Multiple services sections**: Map multiple internal ports to multiple external ports.
 */
export interface Services {
  /**
   * Health checks that run as one-off commands directly on the VM.
   *
   * This type of check is **deprecated**. See `tcp_checks` or `http_checks` for alternatives.
   */
  script_checks?: {
    [k: string]: unknown | undefined;
  };
  /**
   * The protocol used to communicate with your application. Can be: `tcp` or `udp`.
   */
  protocol?: "tcp" | "udp";
  /**
   * The port this application listens on to communicate with clients. The default is 8080. We recommend applications use the default.
   */
  internal_port?: number;
  /**
   * Control autoscaling metrics (connections or requests) and limits (hard and soft).
   */
  concurrency?: {
    type?: "connections" | "requests";
    /**
     * When an application instance is __at__ or __over__ this number, the system will bring up another instance.
     */
    hard_limit?: number;
    /**
     * When an application instance is __at__ or __over__ this number, the system is likely to bring up another instance.
     */
    soft_limit?: number;
    [k: string]: unknown | undefined;
  };
  /**
   * For each external port you want to accept connections on, add a `ports` section.
   */
  ports?: {
    /**
     * An array of strings that select handlers to terminate the connection at the edge.
     *
     * Valid options: http, tls, proxy_proto, pg_tls, edge_http.
     */
    handlers?: ("http" | "tls" | "proxy_proto" | "pg_tls" | "edge_http")[];
    /**
     * The port to accept traffic on. Valid ports: 1-65535
     */
    port?: number;
    /**
     * Force HTTP connections to HTTPS. `force_https` requires the `http` handler in the `handlers` section.
     */
    force_https?: boolean;
    [k: string]: unknown | undefined;
  }[];
  /**
   * Basic TCP connection health checks. This is the default check that runs against the configured `internal_port`.
   */
  tcp_checks?: {
    /**
     * The time to wait after a VM starts before checking its health. Units are milliseconds unless you specify them like `10s` or `1m`.
     */
    grace_period?: number | string;
    /**
     * Length of the pause between connectivity checks. Units are milliseconds unless you specify them like `10s` or `1m`.
     */
    interval?: number | string;
    /**
     * The number of consecutive TCP check failures to allow before attempting to restart the VM. The default is `0`, which disables restarts based on failed TCP health checks.
     */
    restart_limit?: number;
    /**
     * The maximum time a connection can take before being reported as failing its healthcheck. Units are milliseconds unless you specify them like `10s` or `1m`.
     */
    timeout?: number | string;
    [k: string]: unknown | undefined;
  }[];
  /**
   * HTTP-based health checks run against the `internal_port`. These checks will pass when receiving a 2xx response. Any other response is considered a failure.
   */
  http_checks?: {
    /**
     * The time to wait after a VM starts before checking its health. Units are milliseconds unless you specify them like `10s` or `1m`.
     */
    grace_period?: number | string;
    /**
     * Length of the pause between connectivity checks. Units are milliseconds unless you specify them like `10s` or `1m`.
     */
    interval?: number | string;
    /**
     * The number of consecutive check failures to allow before attempting to restart the VM. The default is `0`, which disables restarts based on failed health checks.
     */
    restart_limit?: number;
    /**
     * The maximum time a connection can take before being reported as failing its healthcheck. Units are milliseconds unless you specify them like `10s` or `1m`.
     */
    timeout?: number | string;
    /**
     * The HTTP method to be used for the check.
     */
    method?: string;
    /**
     * The path of the URL to be requested.
     */
    path?: string;
    /**
     * The protocol to be used (`http` or `https`)
     */
    protocol?: "http" | "https";
    /**
     * When set to `true` (and `protocol` is set to `https`), skip verifying the certificates sent by the server.
     */
    tls_skip_verify?: boolean;
    /**
     * Set key/value pairs of HTTP headers to pass along with the check request.
     */
    headers?: {
      [k: string]: unknown | undefined;
    };
    [k: string]: unknown | undefined;
  }[];
  [k: string]: unknown | undefined;
}
